File /home/kalyan/.tvm_test_data/data/cat.png exists, skip.
; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-linux-gnu"

%0 = type { i32*, i32 }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }
%4 = type { i8*, i8* }
%5 = type { i8*, i8*, i8*, i8*, i32 }
%6 = type { i8*, i8*, i8*, i8*, i32 }
%7 = type { i8*, i8* }
%8 = type { i8*, i8* }
%9 = type { i8*, i8* }
%10 = type { i8*, i8* }
%11 = type { i8*, i8*, i8*, i8* }
%12 = type { i8*, i8*, i8*, i8*, i8*, i32 }
%13 = type { i8*, i8* }
%14 = type { i8*, i8*, i8*, i8* }
%15 = type { i8*, i8* }
%16 = type { i8*, i8*, i8*, i8*, i8* }
%17 = type { i8*, i8*, i8*, i8*, i8*, i32 }
%18 = type { i8*, i8*, i8*, i8*, i8*, i32 }
%19 = type { i8*, i8* }
%20 = type { i8*, i8* }
%21 = type { i8*, i8*, i8*, i8*, i32 }
%22 = type { i8*, i8* }
%23 = type { i8*, i8* }
%24 = type { i8*, i8*, i8*, i8* }
%25 = type { i8*, i8* }
%26 = type { i8*, i8*, i8*, i8*, i32 }
%27 = type { i8*, i8*, i8* }
%28 = type { i8*, i8* }
%29 = type { i8*, i8*, i8*, i8* }
%30 = type { i8*, i8* }
%31 = type { i8*, i8* }
%32 = type { i8*, i8*, i8*, i8* }
%33 = type { i8*, i8*, i8*, i8* }
%34 = type { i8*, i8*, i8*, i8* }
%35 = type { i8*, i8* }
%36 = type { i8*, i8*, i8*, i8* }
%37 = type { i8*, i8* }
%38 = type { i8*, i8*, i8*, i8*, i32 }
%39 = type { i8*, i8* }
%40 = type { i8*, i8*, i8*, i8*, i32 }
%41 = type { i8*, i8* }
%42 = type { i8*, i8*, i8*, i8*, i32 }
%43 = type { i8*, i8*, i8*, i8* }
%44 = type { i8*, i8*, i8*, i8*, i32 }
%45 = type { i8*, i8* }
%46 = type { i8*, i8*, i8*, i8* }
%47 = type { i8*, i8* }
%48 = type { i8*, i8* }
%49 = type { i8*, i8* }
%50 = type { i8*, i8* }
%51 = type { i8*, i8* }
%52 = type { i8*, i8*, i8*, i8* }
%53 = type { i8*, i8* }
%54 = type { i8*, i8*, i8*, i8*, i32 }

@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@__TVMBackendParallelLaunch = linkonce dllexport local_unnamed_addr global i32 (i32 (i32, %0*, i8*)*, i8*, i32)* null, align 8
@.str = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_41: num_args should be 2\00", align 1
@.str.1 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_41: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_41: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg0, 0, 4)), arg0.ndim is expected to equal 5\00", align 1
@.str.4 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg0, 0, 5) == (uint8)2) && (tvm_struct_get(arg0, 0, 6) == (uint8)32)) && (tvm_struct_get(arg0, 0, 7) == (uint16)1)), arg0.dtype is expected to be float32\00", align 1
@.str.5 = private constant [95 x i8] c"Assert fail: (1 == int32(arg0.shape[0])), Argument arg0.shape[0] has an unsatisfied constraint\00", align 1
@.str.6 = private constant [95 x i8] c"Assert fail: (8 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.7 = private constant [96 x i8] c"Assert fail: (56 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.8 = private constant [96 x i8] c"Assert fail: (56 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.9 = private constant [96 x i8] c"Assert fail: (32 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.10 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (32 == int32(arg0.strides[3]))) && (1792 == int32(arg0.strides[2]))) && (100352 == int32(arg0.strides[1]))) && (802816 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.11 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg0, 0, 8)), Argument arg0.byte_offset has an unsatisfied constraint\00", align 1
@.str.12 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg0, 0, 10)), Argument arg0.device_type has an unsatisfied constraint\00", align 1
@.str.13 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg1, 0, 4)), arg1.ndim is expected to equal 5\00", align 1
@.str.14 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg1, 0, 5) == (uint8)2) && (tvm_struct_get(arg1, 0, 6) == (uint8)32)) && (tvm_struct_get(arg1, 0, 7) == (uint16)1)), arg1.dtype is expected to be float32\00", align 1
@.str.15 = private constant [95 x i8] c"Assert fail: (1 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.16 = private constant [95 x i8] c"Assert fail: (1 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.17 = private constant [96 x i8] c"Assert fail: (56 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.18 = private constant [96 x i8] c"Assert fail: (56 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.19 = private constant [97 x i8] c"Assert fail: (256 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.20 = private constant [243 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (256 == int32(arg1.strides[3]))) && (14336 == int32(arg1.strides[2]))) && (802816 == int32(arg1.strides[1]))) && (802816 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.21 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg1, 0, 8)), Argument arg1.byte_offset has an unsatisfied constraint\00", align 1
@.str.22 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg1, 0, 10)), Argument arg1.device_type has an unsatisfied constraint\00", align 1
@.str.23 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg1, 0, 9)), Argument arg1.device_id has an unsatisfied constraint\00", align 1
@.str.24 = private constant [97 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13: num_args should be 4\00", align 1
@.str.25 = private constant [172 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13: Expect arg[0] to be pointer\00", align 1
@.str.26 = private constant [172 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13: Expect arg[1] to be pointer\00", align 1
@.str.27 = private constant [172 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13: Expect arg[2] to be pointer\00", align 1
@.str.28 = private constant [172 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13: Expect arg[3] to be pointer\00", align 1
@.str.29 = private constant [95 x i8] c"Assert fail: (1 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.30 = private constant [97 x i8] c"Assert fail: (256 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.31 = private constant [243 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (256 == int32(arg0.strides[3]))) && (14336 == int32(arg0.strides[2]))) && (802816 == int32(arg0.strides[1]))) && (802816 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.32 = private constant [81 x i8] c"Assert fail: (6 == tvm_struct_get(arg1, 0, 4)), arg1.ndim is expected to equal 6\00", align 1
@.str.33 = private constant [95 x i8] c"Assert fail: (4 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.34 = private constant [95 x i8] c"Assert fail: (1 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.35 = private constant [95 x i8] c"Assert fail: (1 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.36 = private constant [96 x i8] c"Assert fail: (16 == int32(arg1.shape[5])), Argument arg1.shape[5] has an unsatisfied constraint\00", align 1
@.str.37 = private constant [275 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (16 == int32(arg1.strides[4]))) && (4096 == int32(arg1.strides[3]))) && (4096 == int32(arg1.strides[2]))) && (4096 == int32(arg1.strides[1]))) && (4096 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.38 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg2, 0, 4)), arg2.ndim is expected to equal 5\00", align 1
@.str.39 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg2, 0, 5) == (uint8)2) && (tvm_struct_get(arg2, 0, 6) == (uint8)32)) && (tvm_struct_get(arg2, 0, 7) == (uint16)1)), arg2.dtype is expected to be float32\00", align 1
@.str.40 = private constant [95 x i8] c"Assert fail: (1 == int32(arg2.shape[0])), Argument arg2.shape[0] has an unsatisfied constraint\00", align 1
@.str.41 = private constant [95 x i8] c"Assert fail: (4 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.42 = private constant [95 x i8] c"Assert fail: (1 == int32(arg2.shape[2])), Argument arg2.shape[2] has an unsatisfied constraint\00", align 1
@.str.43 = private constant [95 x i8] c"Assert fail: (1 == int32(arg2.shape[3])), Argument arg2.shape[3] has an unsatisfied constraint\00", align 1
@.str.44 = private constant [96 x i8] c"Assert fail: (16 == int32(arg2.shape[4])), Argument arg2.shape[4] has an unsatisfied constraint\00", align 1
@.str.45 = private constant [231 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (16 == int32(arg2.strides[3]))) && (16 == int32(arg2.strides[2]))) && (16 == int32(arg2.strides[1]))) && (64 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.46 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg2, 0, 8)), Argument arg2.byte_offset has an unsatisfied constraint\00", align 1
@.str.47 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg2, 0, 10)), Argument arg2.device_type has an unsatisfied constraint\00", align 1
@.str.48 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg2, 0, 9)), Argument arg2.device_id has an unsatisfied constraint\00", align 1
@.str.49 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg3, 0, 4)), arg3.ndim is expected to equal 5\00", align 1
@.str.50 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg3, 0, 5) == (uint8)2) && (tvm_struct_get(arg3, 0, 6) == (uint8)32)) && (tvm_struct_get(arg3, 0, 7) == (uint16)1)), arg3.dtype is expected to be float32\00", align 1
@.str.51 = private constant [95 x i8] c"Assert fail: (1 == int32(arg3.shape[0])), Argument arg3.shape[0] has an unsatisfied constraint\00", align 1
@.str.52 = private constant [95 x i8] c"Assert fail: (4 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.53 = private constant [96 x i8] c"Assert fail: (56 == int32(arg3.shape[2])), Argument arg3.shape[2] has an unsatisfied constraint\00", align 1
@.str.54 = private constant [96 x i8] c"Assert fail: (56 == int32(arg3.shape[3])), Argument arg3.shape[3] has an unsatisfied constraint\00", align 1
@.str.55 = private constant [96 x i8] c"Assert fail: (16 == int32(arg3.shape[4])), Argument arg3.shape[4] has an unsatisfied constraint\00", align 1
@.str.56 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (16 == int32(arg3.strides[3]))) && (896 == int32(arg3.strides[2]))) && (50176 == int32(arg3.strides[1]))) && (200704 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.57 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg3, 0, 8)), Argument arg3.byte_offset has an unsatisfied constraint\00", align 1
@.str.58 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg3, 0, 10)), Argument arg3.device_type has an unsatisfied constraint\00", align 1
@.str.59 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg3, 0, 9)), Argument arg3.device_id has an unsatisfied constraint\00", align 1
@__TVMBackendAllocWorkspace = linkonce dllexport local_unnamed_addr global i8* (i32, i32, i64, i32, i32)* null, align 8
@__TVMBackendFreeWorkspace = linkonce dllexport local_unnamed_addr global i32 (i32, i32, i8*)* null, align 8
@.str.61 = private constant [97 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11: num_args should be 4\00", align 1
@.str.62 = private constant [172 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11: Expect arg[0] to be pointer\00", align 1
@.str.63 = private constant [172 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11: Expect arg[1] to be pointer\00", align 1
@.str.64 = private constant [172 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11: Expect arg[2] to be pointer\00", align 1
@.str.65 = private constant [172 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11: Expect arg[3] to be pointer\00", align 1
@.str.66 = private constant [95 x i8] c"Assert fail: (8 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.67 = private constant [95 x i8] c"Assert fail: (8 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.68 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (16 == int32(arg2.strides[3]))) && (16 == int32(arg2.strides[2]))) && (16 == int32(arg2.strides[1]))) && (128 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.69 = private constant [95 x i8] c"Assert fail: (8 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.70 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (16 == int32(arg3.strides[3]))) && (896 == int32(arg3.strides[2]))) && (50176 == int32(arg3.strides[1]))) && (401408 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.72 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_40: num_args should be 2\00", align 1
@.str.73 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_40: Expect arg[0] to be pointer\00", align 1
@.str.74 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_40: Expect arg[1] to be pointer\00", align 1
@.str.75 = private constant [96 x i8] c"Assert fail: (16 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.76 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (16 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (50176 == int32(arg0.strides[1]))) && (401408 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.77 = private constant [96 x i8] c"Assert fail: (16 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.78 = private constant [95 x i8] c"Assert fail: (8 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.79 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (8 == int32(arg1.strides[3]))) && (448 == int32(arg1.strides[2]))) && (25088 == int32(arg1.strides[1]))) && (401408 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.81 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_45: num_args should be 2\00", align 1
@.str.82 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_45: Expect arg[0] to be pointer\00", align 1
@.str.83 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_45: Expect arg[1] to be pointer\00", align 1
@.str.84 = private constant [96 x i8] c"Assert fail: (16 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.85 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (16 == int32(arg1.strides[3]))) && (896 == int32(arg1.strides[2]))) && (50176 == int32(arg1.strides[1]))) && (802816 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.87 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_43: num_args should be 2\00", align 1
@.str.88 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_43: Expect arg[0] to be pointer\00", align 1
@.str.89 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_43: Expect arg[1] to be pointer\00", align 1
@.str.90 = private constant [95 x i8] c"Assert fail: (4 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.91 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (16 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (50176 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.92 = private constant [96 x i8] c"Assert fail: (64 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.93 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (64 == int32(arg1.strides[3]))) && (3584 == int32(arg1.strides[2]))) && (200704 == int32(arg1.strides[1]))) && (200704 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.95 = private constant [97 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10: num_args should be 4\00", align 1
@.str.96 = private constant [172 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10: Expect arg[0] to be pointer\00", align 1
@.str.97 = private constant [172 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10: Expect arg[1] to be pointer\00", align 1
@.str.98 = private constant [172 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10: Expect arg[2] to be pointer\00", align 1
@.str.99 = private constant [172 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10: Expect arg[3] to be pointer\00", align 1
@.str.100 = private constant [96 x i8] c"Assert fail: (16 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.101 = private constant [95 x i8] c"Assert fail: (8 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.102 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (8 == int32(arg0.strides[3]))) && (448 == int32(arg0.strides[2]))) && (25088 == int32(arg0.strides[1]))) && (401408 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.103 = private constant [96 x i8] c"Assert fail: (16 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.104 = private constant [95 x i8] c"Assert fail: (3 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.105 = private constant [95 x i8] c"Assert fail: (3 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.106 = private constant [95 x i8] c"Assert fail: (8 == int32(arg1.shape[5])), Argument arg1.shape[5] has an unsatisfied constraint\00", align 1
@.str.107 = private constant [270 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (8 == int32(arg1.strides[4]))) && (64 == int32(arg1.strides[3]))) && (192 == int32(arg1.strides[2]))) && (576 == int32(arg1.strides[1]))) && (9216 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.108 = private constant [96 x i8] c"Assert fail: (16 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.109 = private constant [95 x i8] c"Assert fail: (8 == int32(arg2.shape[4])), Argument arg2.shape[4] has an unsatisfied constraint\00", align 1
@.str.110 = private constant [229 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (8 == int32(arg2.strides[3]))) && (8 == int32(arg2.strides[2]))) && (8 == int32(arg2.strides[1]))) && (128 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.111 = private constant [96 x i8] c"Assert fail: (16 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.112 = private constant [96 x i8] c"Assert fail: (28 == int32(arg3.shape[2])), Argument arg3.shape[2] has an unsatisfied constraint\00", align 1
@.str.113 = private constant [96 x i8] c"Assert fail: (28 == int32(arg3.shape[3])), Argument arg3.shape[3] has an unsatisfied constraint\00", align 1
@.str.114 = private constant [95 x i8] c"Assert fail: (8 == int32(arg3.shape[4])), Argument arg3.shape[4] has an unsatisfied constraint\00", align 1
@.str.115 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (8 == int32(arg3.strides[3]))) && (224 == int32(arg3.strides[2]))) && (6272 == int32(arg3.strides[1]))) && (100352 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.118 = private constant [100 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1: num_args should be 5\00", align 1
@.str.119 = private constant [175 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1: Expect arg[0] to be pointer\00", align 1
@.str.120 = private constant [175 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1: Expect arg[1] to be pointer\00", align 1
@.str.121 = private constant [175 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1: Expect arg[2] to be pointer\00", align 1
@.str.122 = private constant [175 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1: Expect arg[3] to be pointer\00", align 1
@.str.123 = private constant [175 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1: Expect arg[4] to be pointer\00", align 1
@.str.124 = private constant [96 x i8] c"Assert fail: (32 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.125 = private constant [96 x i8] c"Assert fail: (14 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.126 = private constant [96 x i8] c"Assert fail: (14 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.127 = private constant [236 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (8 == int32(arg0.strides[3]))) && (112 == int32(arg0.strides[2]))) && (1568 == int32(arg0.strides[1]))) && (50176 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.128 = private constant [96 x i8] c"Assert fail: (64 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.129 = private constant [96 x i8] c"Assert fail: (32 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.130 = private constant [272 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (16 == int32(arg1.strides[4]))) && (128 == int32(arg1.strides[3]))) && (128 == int32(arg1.strides[2]))) && (128 == int32(arg1.strides[1]))) && (4096 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.131 = private constant [96 x i8] c"Assert fail: (64 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.132 = private constant [233 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (16 == int32(arg2.strides[3]))) && (16 == int32(arg2.strides[2]))) && (16 == int32(arg2.strides[1]))) && (1024 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.133 = private constant [96 x i8] c"Assert fail: (64 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.134 = private constant [96 x i8] c"Assert fail: (14 == int32(arg3.shape[2])), Argument arg3.shape[2] has an unsatisfied constraint\00", align 1
@.str.135 = private constant [96 x i8] c"Assert fail: (14 == int32(arg3.shape[3])), Argument arg3.shape[3] has an unsatisfied constraint\00", align 1
@.str.136 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (16 == int32(arg3.strides[3]))) && (224 == int32(arg3.strides[2]))) && (3136 == int32(arg3.strides[1]))) && (200704 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.137 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg4, 0, 4)), arg4.ndim is expected to equal 5\00", align 1
@.str.138 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg4, 0, 5) == (uint8)2) && (tvm_struct_get(arg4, 0, 6) == (uint8)32)) && (tvm_struct_get(arg4, 0, 7) == (uint16)1)), arg4.dtype is expected to be float32\00", align 1
@.str.139 = private constant [95 x i8] c"Assert fail: (1 == int32(arg4.shape[0])), Argument arg4.shape[0] has an unsatisfied constraint\00", align 1
@.str.140 = private constant [96 x i8] c"Assert fail: (64 == int32(arg4.shape[1])), Argument arg4.shape[1] has an unsatisfied constraint\00", align 1
@.str.141 = private constant [96 x i8] c"Assert fail: (14 == int32(arg4.shape[2])), Argument arg4.shape[2] has an unsatisfied constraint\00", align 1
@.str.142 = private constant [96 x i8] c"Assert fail: (14 == int32(arg4.shape[3])), Argument arg4.shape[3] has an unsatisfied constraint\00", align 1
@.str.143 = private constant [96 x i8] c"Assert fail: (16 == int32(arg4.shape[4])), Argument arg4.shape[4] has an unsatisfied constraint\00", align 1
@.str.144 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (16 == int32(arg4.strides[3]))) && (224 == int32(arg4.strides[2]))) && (3136 == int32(arg4.strides[1]))) && (200704 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.145 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg4, 0, 8)), Argument arg4.byte_offset has an unsatisfied constraint\00", align 1
@.str.146 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg4, 0, 10)), Argument arg4.device_type has an unsatisfied constraint\00", align 1
@.str.147 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg4, 0, 9)), Argument arg4.device_id has an unsatisfied constraint\00", align 1
@.str.149 = private constant [92 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_reshape_multiply: num_args should be 2\00", align 1
@.str.150 = private constant [167 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_reshape_multiply: Expect arg[0] to be pointer\00", align 1
@.str.151 = private constant [167 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_reshape_multiply: Expect arg[1] to be pointer\00", align 1
@.str.152 = private constant [97 x i8] c"Assert fail: (256 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.153 = private constant [95 x i8] c"Assert fail: (1 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.154 = private constant [95 x i8] c"Assert fail: (1 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.155 = private constant [230 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (8 == int32(arg0.strides[3]))) && (8 == int32(arg0.strides[2]))) && (8 == int32(arg0.strides[1]))) && (2048 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.156 = private constant [81 x i8] c"Assert fail: (2 == tvm_struct_get(arg1, 0, 4)), arg1.ndim is expected to equal 2\00", align 1
@.str.157 = private constant [98 x i8] c"Assert fail: (2048 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.158 = private constant [125 x i8] c"Assert fail: ((1 == int32(arg1.strides[1])) && (2048 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.159 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_47: num_args should be 2\00", align 1
@.str.160 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_47: Expect arg[0] to be pointer\00", align 1
@.str.161 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_47: Expect arg[1] to be pointer\00", align 1
@.str.162 = private constant [96 x i8] c"Assert fail: (64 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.163 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (16 == int32(arg0.strides[3]))) && (224 == int32(arg0.strides[2]))) && (3136 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.164 = private constant [96 x i8] c"Assert fail: (14 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.165 = private constant [96 x i8] c"Assert fail: (14 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.166 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (64 == int32(arg1.strides[3]))) && (896 == int32(arg1.strides[2]))) && (12544 == int32(arg1.strides[1]))) && (200704 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.168 = private constant [96 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1: num_args should be 4\00", align 1
@.str.169 = private constant [171 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1: Expect arg[0] to be pointer\00", align 1
@.str.170 = private constant [171 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1: Expect arg[1] to be pointer\00", align 1
@.str.171 = private constant [171 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1: Expect arg[2] to be pointer\00", align 1
@.str.172 = private constant [171 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1: Expect arg[3] to be pointer\00", align 1
@.str.173 = private constant [97 x i8] c"Assert fail: (128 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.174 = private constant [95 x i8] c"Assert fail: (7 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.175 = private constant [95 x i8] c"Assert fail: (7 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.176 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (16 == int32(arg0.strides[3]))) && (112 == int32(arg0.strides[2]))) && (784 == int32(arg0.strides[1]))) && (100352 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.177 = private constant [97 x i8] c"Assert fail: (128 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.178 = private constant [272 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (8 == int32(arg1.strides[4]))) && (128 == int32(arg1.strides[3]))) && (128 == int32(arg1.strides[2]))) && (128 == int32(arg1.strides[1]))) && (16384 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.179 = private constant [229 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (8 == int32(arg2.strides[3]))) && (8 == int32(arg2.strides[2]))) && (8 == int32(arg2.strides[1]))) && (512 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.180 = private constant [95 x i8] c"Assert fail: (7 == int32(arg3.shape[2])), Argument arg3.shape[2] has an unsatisfied constraint\00", align 1
@.str.181 = private constant [95 x i8] c"Assert fail: (7 == int32(arg3.shape[3])), Argument arg3.shape[3] has an unsatisfied constraint\00", align 1
@.str.182 = private constant [234 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (8 == int32(arg3.strides[3]))) && (56 == int32(arg3.strides[2]))) && (392 == int32(arg3.strides[1]))) && (25088 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.184 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_44: num_args should be 2\00", align 1
@.str.185 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_44: Expect arg[0] to be pointer\00", align 1
@.str.186 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_44: Expect arg[1] to be pointer\00", align 1
@.str.187 = private constant [81 x i8] c"Assert fail: (4 == tvm_struct_get(arg0, 0, 4)), arg0.ndim is expected to equal 4\00", align 1
@.str.188 = private constant [95 x i8] c"Assert fail: (3 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.189 = private constant [97 x i8] c"Assert fail: (224 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.190 = private constant [97 x i8] c"Assert fail: (224 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.191 = private constant [203 x i8] c"Assert fail: ((((1 == int32(arg0.strides[3])) && (224 == int32(arg0.strides[2]))) && (50176 == int32(arg0.strides[1]))) && (150528 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.192 = private constant [97 x i8] c"Assert fail: (224 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.193 = private constant [97 x i8] c"Assert fail: (224 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.194 = private constant [95 x i8] c"Assert fail: (3 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.195 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (3 == int32(arg1.strides[3]))) && (672 == int32(arg1.strides[2]))) && (150528 == int32(arg1.strides[1]))) && (150528 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.197 = private constant [98 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu: num_args should be 5\00", align 1
@.str.198 = private constant [173 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu: Expect arg[0] to be pointer\00", align 1
@.str.199 = private constant [173 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu: Expect arg[1] to be pointer\00", align 1
@.str.200 = private constant [173 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu: Expect arg[2] to be pointer\00", align 1
@.str.201 = private constant [173 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu: Expect arg[3] to be pointer\00", align 1
@.str.202 = private constant [173 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu: Expect arg[4] to be pointer\00", align 1
@.str.203 = private constant [234 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (8 == int32(arg0.strides[3]))) && (56 == int32(arg0.strides[2]))) && (392 == int32(arg0.strides[1]))) && (25088 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.204 = private constant [97 x i8] c"Assert fail: (256 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.205 = private constant [96 x i8] c"Assert fail: (64 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.206 = private constant [268 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (8 == int32(arg1.strides[4]))) && (64 == int32(arg1.strides[3]))) && (64 == int32(arg1.strides[2]))) && (64 == int32(arg1.strides[1]))) && (4096 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.207 = private constant [97 x i8] c"Assert fail: (256 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.208 = private constant [230 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (8 == int32(arg2.strides[3]))) && (8 == int32(arg2.strides[2]))) && (8 == int32(arg2.strides[1]))) && (2048 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.209 = private constant [97 x i8] c"Assert fail: (256 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.210 = private constant [235 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (8 == int32(arg3.strides[3]))) && (56 == int32(arg3.strides[2]))) && (392 == int32(arg3.strides[1]))) && (100352 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.211 = private constant [97 x i8] c"Assert fail: (256 == int32(arg4.shape[1])), Argument arg4.shape[1] has an unsatisfied constraint\00", align 1
@.str.212 = private constant [95 x i8] c"Assert fail: (7 == int32(arg4.shape[2])), Argument arg4.shape[2] has an unsatisfied constraint\00", align 1
@.str.213 = private constant [95 x i8] c"Assert fail: (7 == int32(arg4.shape[3])), Argument arg4.shape[3] has an unsatisfied constraint\00", align 1
@.str.214 = private constant [95 x i8] c"Assert fail: (8 == int32(arg4.shape[4])), Argument arg4.shape[4] has an unsatisfied constraint\00", align 1
@.str.215 = private constant [235 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (8 == int32(arg4.strides[3]))) && (56 == int32(arg4.strides[2]))) && (392 == int32(arg4.strides[1]))) && (100352 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.217 = private constant [100 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2: num_args should be 5\00", align 1
@.str.218 = private constant [175 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2: Expect arg[0] to be pointer\00", align 1
@.str.219 = private constant [175 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2: Expect arg[1] to be pointer\00", align 1
@.str.220 = private constant [175 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2: Expect arg[2] to be pointer\00", align 1
@.str.221 = private constant [175 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2: Expect arg[3] to be pointer\00", align 1
@.str.222 = private constant [175 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2: Expect arg[4] to be pointer\00", align 1
@.str.223 = private constant [96 x i8] c"Assert fail: (28 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.224 = private constant [96 x i8] c"Assert fail: (28 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.225 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (16 == int32(arg0.strides[3]))) && (448 == int32(arg0.strides[2]))) && (12544 == int32(arg0.strides[1]))) && (100352 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.226 = private constant [95 x i8] c"Assert fail: (8 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.227 = private constant [96 x i8] c"Assert fail: (32 == int32(arg1.shape[5])), Argument arg1.shape[5] has an unsatisfied constraint\00", align 1
@.str.228 = private constant [272 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (512 == int32(arg1.strides[3]))) && (512 == int32(arg1.strides[2]))) && (512 == int32(arg1.strides[1]))) && (4096 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.229 = private constant [96 x i8] c"Assert fail: (32 == int32(arg2.shape[4])), Argument arg2.shape[4] has an unsatisfied constraint\00", align 1
@.str.230 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (32 == int32(arg2.strides[3]))) && (32 == int32(arg2.strides[2]))) && (32 == int32(arg2.strides[1]))) && (512 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.231 = private constant [96 x i8] c"Assert fail: (32 == int32(arg3.shape[4])), Argument arg3.shape[4] has an unsatisfied constraint\00", align 1
@.str.232 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (32 == int32(arg3.strides[3]))) && (896 == int32(arg3.strides[2]))) && (25088 == int32(arg3.strides[1]))) && (401408 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.233 = private constant [96 x i8] c"Assert fail: (16 == int32(arg4.shape[1])), Argument arg4.shape[1] has an unsatisfied constraint\00", align 1
@.str.234 = private constant [96 x i8] c"Assert fail: (28 == int32(arg4.shape[2])), Argument arg4.shape[2] has an unsatisfied constraint\00", align 1
@.str.235 = private constant [96 x i8] c"Assert fail: (28 == int32(arg4.shape[3])), Argument arg4.shape[3] has an unsatisfied constraint\00", align 1
@.str.236 = private constant [96 x i8] c"Assert fail: (32 == int32(arg4.shape[4])), Argument arg4.shape[4] has an unsatisfied constraint\00", align 1
@.str.237 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (32 == int32(arg4.strides[3]))) && (896 == int32(arg4.strides[2]))) && (25088 == int32(arg4.strides[1]))) && (401408 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.239 = private constant [100 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3: num_args should be 5\00", align 1
@.str.240 = private constant [175 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3: Expect arg[0] to be pointer\00", align 1
@.str.241 = private constant [175 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3: Expect arg[1] to be pointer\00", align 1
@.str.242 = private constant [175 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3: Expect arg[2] to be pointer\00", align 1
@.str.243 = private constant [175 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3: Expect arg[3] to be pointer\00", align 1
@.str.244 = private constant [175 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3: Expect arg[4] to be pointer\00", align 1
@.str.245 = private constant [95 x i8] c"Assert fail: (4 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.246 = private constant [272 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (512 == int32(arg1.strides[3]))) && (512 == int32(arg1.strides[2]))) && (512 == int32(arg1.strides[1]))) && (2048 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.247 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (32 == int32(arg2.strides[3]))) && (32 == int32(arg2.strides[2]))) && (32 == int32(arg2.strides[1]))) && (256 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.248 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (32 == int32(arg3.strides[3]))) && (1792 == int32(arg3.strides[2]))) && (100352 == int32(arg3.strides[1]))) && (802816 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.249 = private constant [95 x i8] c"Assert fail: (8 == int32(arg4.shape[1])), Argument arg4.shape[1] has an unsatisfied constraint\00", align 1
@.str.250 = private constant [96 x i8] c"Assert fail: (56 == int32(arg4.shape[2])), Argument arg4.shape[2] has an unsatisfied constraint\00", align 1
@.str.251 = private constant [96 x i8] c"Assert fail: (56 == int32(arg4.shape[3])), Argument arg4.shape[3] has an unsatisfied constraint\00", align 1
@.str.252 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (32 == int32(arg4.strides[3]))) && (1792 == int32(arg4.strides[2]))) && (100352 == int32(arg4.strides[1]))) && (802816 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.254 = private constant [72 x i8] c"Assert fail: (num_args == 2), fused_nn_max_pool2d: num_args should be 2\00", align 1
@.str.255 = private constant [147 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_max_pool2d: Expect arg[0] to be pointer\00", align 1
@.str.256 = private constant [147 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_max_pool2d: Expect arg[1] to be pointer\00", align 1
@.str.257 = private constant [97 x i8] c"Assert fail: (112 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.258 = private constant [97 x i8] c"Assert fail: (112 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.259 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (16 == int32(arg0.strides[3]))) && (1792 == int32(arg0.strides[2]))) && (200704 == int32(arg0.strides[1]))) && (802816 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.260 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (16 == int32(arg1.strides[3]))) && (896 == int32(arg1.strides[2]))) && (50176 == int32(arg1.strides[1]))) && (200704 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.262 = private constant [97 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12: num_args should be 4\00", align 1
@.str.263 = private constant [172 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12: Expect arg[0] to be pointer\00", align 1
@.str.264 = private constant [172 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12: Expect arg[1] to be pointer\00", align 1
@.str.265 = private constant [172 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12: Expect arg[2] to be pointer\00", align 1
@.str.266 = private constant [172 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12: Expect arg[3] to be pointer\00", align 1
@.str.267 = private constant [96 x i8] c"Assert fail: (64 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.268 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (64 == int32(arg0.strides[3]))) && (3584 == int32(arg0.strides[2]))) && (200704 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.269 = private constant [273 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (8 == int32(arg1.strides[4]))) && (512 == int32(arg1.strides[3]))) && (1536 == int32(arg1.strides[2]))) && (4608 == int32(arg1.strides[1]))) && (4608 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.270 = private constant [228 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (8 == int32(arg2.strides[3]))) && (8 == int32(arg2.strides[2]))) && (8 == int32(arg2.strides[1]))) && (64 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.271 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (8 == int32(arg3.strides[3]))) && (448 == int32(arg3.strides[2]))) && (25088 == int32(arg3.strides[1]))) && (200704 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.274 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_35: num_args should be 2\00", align 1
@.str.275 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_35: Expect arg[0] to be pointer\00", align 1
@.str.276 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_35: Expect arg[1] to be pointer\00", align 1
@.str.277 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (16 == int32(arg0.strides[3]))) && (448 == int32(arg0.strides[2]))) && (12544 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.278 = private constant [96 x i8] c"Assert fail: (28 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.279 = private constant [96 x i8] c"Assert fail: (28 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.280 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (8 == int32(arg1.strides[3]))) && (224 == int32(arg1.strides[2]))) && (6272 == int32(arg1.strides[1]))) && (200704 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.282 = private constant [94 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu: num_args should be 4\00", align 1
@.str.283 = private constant [169 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu: Expect arg[0] to be pointer\00", align 1
@.str.284 = private constant [169 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu: Expect arg[1] to be pointer\00", align 1
@.str.285 = private constant [169 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu: Expect arg[2] to be pointer\00", align 1
@.str.286 = private constant [169 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu: Expect arg[3] to be pointer\00", align 1
@.str.287 = private constant [271 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (8 == int32(arg1.strides[4]))) && (64 == int32(arg1.strides[3]))) && (192 == int32(arg1.strides[2]))) && (576 == int32(arg1.strides[1]))) && (36864 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.290 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_39: num_args should be 2\00", align 1
@.str.291 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_39: Expect arg[0] to be pointer\00", align 1
@.str.292 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_39: Expect arg[1] to be pointer\00", align 1
@.str.293 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (32 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (25088 == int32(arg0.strides[1]))) && (401408 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.294 = private constant [97 x i8] c"Assert fail: (128 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.295 = private constant [242 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (128 == int32(arg1.strides[3]))) && (3584 == int32(arg1.strides[2]))) && (100352 == int32(arg1.strides[1]))) && (401408 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.297 = private constant [97 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14: num_args should be 4\00", align 1
@.str.298 = private constant [172 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14: Expect arg[0] to be pointer\00", align 1
@.str.299 = private constant [172 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14: Expect arg[1] to be pointer\00", align 1
@.str.300 = private constant [172 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14: Expect arg[2] to be pointer\00", align 1
@.str.301 = private constant [172 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14: Expect arg[3] to be pointer\00", align 1
@.str.302 = private constant [272 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (16 == int32(arg1.strides[4]))) && (256 == int32(arg1.strides[3]))) && (256 == int32(arg1.strides[2]))) && (256 == int32(arg1.strides[1]))) && (1024 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.304 = private constant [71 x i8] c"Assert fail: (num_args == 4), fused_nn_dense_add: num_args should be 4\00", align 1
@.str.305 = private constant [146 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_dense_add: Expect arg[0] to be pointer\00", align 1
@.str.306 = private constant [146 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_dense_add: Expect arg[1] to be pointer\00", align 1
@.str.307 = private constant [146 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_dense_add: Expect arg[2] to be pointer\00", align 1
@.str.308 = private constant [146 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_dense_add: Expect arg[3] to be pointer\00", align 1
@.str.309 = private constant [81 x i8] c"Assert fail: (2 == tvm_struct_get(arg0, 0, 4)), arg0.ndim is expected to equal 2\00", align 1
@.str.310 = private constant [98 x i8] c"Assert fail: (2048 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.311 = private constant [125 x i8] c"Assert fail: ((1 == int32(arg0.strides[1])) && (2048 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.312 = private constant [98 x i8] c"Assert fail: (1000 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.313 = private constant [81 x i8] c"Assert fail: (1 == tvm_struct_get(arg2, 0, 4)), arg2.ndim is expected to equal 1\00", align 1
@.str.314 = private constant [98 x i8] c"Assert fail: (1000 == int32(arg2.shape[0])), Argument arg2.shape[0] has an unsatisfied constraint\00", align 1
@.str.315 = private constant [87 x i8] c"Assert fail: (1 == int32(arg2.strides[0])), arg2.strides: expected to be compact array\00", align 1
@.str.316 = private constant [81 x i8] c"Assert fail: (2 == tvm_struct_get(arg3, 0, 4)), arg3.ndim is expected to equal 2\00", align 1
@.str.317 = private constant [98 x i8] c"Assert fail: (1000 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.318 = private constant [125 x i8] c"Assert fail: ((1 == int32(arg3.strides[1])) && (1000 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.320 = private constant [96 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6: num_args should be 4\00", align 1
@.str.321 = private constant [171 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6: Expect arg[0] to be pointer\00", align 1
@.str.322 = private constant [171 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6: Expect arg[1] to be pointer\00", align 1
@.str.323 = private constant [171 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6: Expect arg[2] to be pointer\00", align 1
@.str.324 = private constant [171 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6: Expect arg[3] to be pointer\00", align 1
@.str.325 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (8 == int32(arg0.strides[3]))) && (224 == int32(arg0.strides[2]))) && (6272 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.326 = private constant [96 x i8] c"Assert fail: (32 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.327 = private constant [271 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (8 == int32(arg1.strides[4]))) && (64 == int32(arg1.strides[3]))) && (192 == int32(arg1.strides[2]))) && (576 == int32(arg1.strides[1]))) && (18432 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.328 = private constant [96 x i8] c"Assert fail: (32 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.329 = private constant [229 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (8 == int32(arg2.strides[3]))) && (8 == int32(arg2.strides[2]))) && (8 == int32(arg2.strides[1]))) && (256 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.330 = private constant [96 x i8] c"Assert fail: (32 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.331 = private constant [236 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (8 == int32(arg3.strides[3]))) && (112 == int32(arg3.strides[2]))) && (1568 == int32(arg3.strides[1]))) && (50176 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.334 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_42: num_args should be 2\00", align 1
@.str.335 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_42: Expect arg[0] to be pointer\00", align 1
@.str.336 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_42: Expect arg[1] to be pointer\00", align 1
@.str.337 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (8 == int32(arg0.strides[3]))) && (448 == int32(arg0.strides[2]))) && (25088 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.339 = private constant [96 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4: num_args should be 4\00", align 1
@.str.340 = private constant [171 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4: Expect arg[0] to be pointer\00", align 1
@.str.341 = private constant [171 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4: Expect arg[1] to be pointer\00", align 1
@.str.342 = private constant [171 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4: Expect arg[2] to be pointer\00", align 1
@.str.343 = private constant [171 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4: Expect arg[3] to be pointer\00", align 1
@.str.344 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (64 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (12544 == int32(arg0.strides[1]))) && (50176 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.345 = private constant [274 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (8 == int32(arg1.strides[4]))) && (512 == int32(arg1.strides[3]))) && (1536 == int32(arg1.strides[2]))) && (4608 == int32(arg1.strides[1]))) && (18432 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.348 = private constant [96 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5: num_args should be 4\00", align 1
@.str.349 = private constant [171 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5: Expect arg[0] to be pointer\00", align 1
@.str.350 = private constant [171 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5: Expect arg[1] to be pointer\00", align 1
@.str.351 = private constant [171 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5: Expect arg[2] to be pointer\00", align 1
@.str.352 = private constant [171 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5: Expect arg[3] to be pointer\00", align 1
@.str.353 = private constant [271 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (8 == int32(arg1.strides[4]))) && (128 == int32(arg1.strides[3]))) && (128 == int32(arg1.strides[2]))) && (128 == int32(arg1.strides[1]))) && (8192 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.355 = private constant [88 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_3: num_args should be 4\00", align 1
@.str.356 = private constant [163 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_3: Expect arg[0] to be pointer\00", align 1
@.str.357 = private constant [163 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_3: Expect arg[1] to be pointer\00", align 1
@.str.358 = private constant [163 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_3: Expect arg[2] to be pointer\00", align 1
@.str.359 = private constant [163 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_3: Expect arg[3] to be pointer\00", align 1
@.str.360 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (64 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (12544 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.361 = private constant [271 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (8 == int32(arg1.strides[4]))) && (512 == int32(arg1.strides[3]))) && (512 == int32(arg1.strides[2]))) && (512 == int32(arg1.strides[1]))) && (8192 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.363 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_33: num_args should be 2\00", align 1
@.str.364 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_33: Expect arg[0] to be pointer\00", align 1
@.str.365 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_33: Expect arg[1] to be pointer\00", align 1
@.str.366 = private constant [235 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (8 == int32(arg0.strides[3]))) && (56 == int32(arg0.strides[2]))) && (392 == int32(arg0.strides[1]))) && (100352 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.367 = private constant [95 x i8] c"Assert fail: (7 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.368 = private constant [95 x i8] c"Assert fail: (7 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.369 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (16 == int32(arg1.strides[3]))) && (112 == int32(arg1.strides[2]))) && (784 == int32(arg1.strides[1]))) && (100352 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.371 = private constant [88 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_2: num_args should be 4\00", align 1
@.str.372 = private constant [163 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_2: Expect arg[0] to be pointer\00", align 1
@.str.373 = private constant [163 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_2: Expect arg[1] to be pointer\00", align 1
@.str.374 = private constant [163 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_2: Expect arg[2] to be pointer\00", align 1
@.str.375 = private constant [163 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_2: Expect arg[3] to be pointer\00", align 1
@.str.376 = private constant [95 x i8] c"Assert fail: (2 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.377 = private constant [242 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (256 == int32(arg0.strides[3]))) && (7168 == int32(arg0.strides[2]))) && (200704 == int32(arg0.strides[1]))) && (401408 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.378 = private constant [95 x i8] c"Assert fail: (2 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.379 = private constant [275 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (16 == int32(arg1.strides[4]))) && (4096 == int32(arg1.strides[3]))) && (4096 == int32(arg1.strides[2]))) && (4096 == int32(arg1.strides[1]))) && (8192 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.381 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_46: num_args should be 2\00", align 1
@.str.382 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_46: Expect arg[0] to be pointer\00", align 1
@.str.383 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_46: Expect arg[1] to be pointer\00", align 1
@.str.384 = private constant [242 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (256 == int32(arg1.strides[3]))) && (7168 == int32(arg1.strides[2]))) && (200704 == int32(arg1.strides[1]))) && (401408 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.386 = private constant [88 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_1: num_args should be 4\00", align 1
@.str.387 = private constant [163 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_1: Expect arg[0] to be pointer\00", align 1
@.str.388 = private constant [163 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_1: Expect arg[1] to be pointer\00", align 1
@.str.389 = private constant [163 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_1: Expect arg[2] to be pointer\00", align 1
@.str.390 = private constant [163 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_1: Expect arg[3] to be pointer\00", align 1
@.str.391 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (16 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (50176 == int32(arg0.strides[1]))) && (802816 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.392 = private constant [272 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (512 == int32(arg1.strides[3]))) && (512 == int32(arg1.strides[2]))) && (512 == int32(arg1.strides[1]))) && (8192 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.394 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_34: num_args should be 2\00", align 1
@.str.395 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_34: Expect arg[0] to be pointer\00", align 1
@.str.396 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_34: Expect arg[1] to be pointer\00", align 1
@.str.397 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (64 == int32(arg1.strides[3]))) && (896 == int32(arg1.strides[2]))) && (12544 == int32(arg1.strides[1]))) && (50176 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.399 = private constant [96 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_7: num_args should be 4\00", align 1
@.str.400 = private constant [171 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_7: Expect arg[0] to be pointer\00", align 1
@.str.401 = private constant [171 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_7: Expect arg[1] to be pointer\00", align 1
@.str.402 = private constant [171 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_7: Expect arg[2] to be pointer\00", align 1
@.str.403 = private constant [171 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_7: Expect arg[3] to be pointer\00", align 1
@.str.404 = private constant [97 x i8] c"Assert fail: (512 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.405 = private constant [243 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (512 == int32(arg0.strides[3]))) && (14336 == int32(arg0.strides[2]))) && (401408 == int32(arg0.strides[1]))) && (401408 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.406 = private constant [97 x i8] c"Assert fail: (512 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.407 = private constant [275 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (16 == int32(arg1.strides[4]))) && (8192 == int32(arg1.strides[3]))) && (8192 == int32(arg1.strides[2]))) && (8192 == int32(arg1.strides[1]))) && (8192 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.408 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (16 == int32(arg2.strides[3]))) && (16 == int32(arg2.strides[2]))) && (16 == int32(arg2.strides[1]))) && (256 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.409 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (16 == int32(arg3.strides[3]))) && (448 == int32(arg3.strides[2]))) && (12544 == int32(arg3.strides[1]))) && (200704 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.411 = private constant [97 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15: num_args should be 4\00", align 1
@.str.412 = private constant [172 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15: Expect arg[0] to be pointer\00", align 1
@.str.413 = private constant [172 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15: Expect arg[1] to be pointer\00", align 1
@.str.414 = private constant [172 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15: Expect arg[2] to be pointer\00", align 1
@.str.415 = private constant [172 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15: Expect arg[3] to be pointer\00", align 1
@.str.416 = private constant [95 x i8] c"Assert fail: (3 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.417 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (3 == int32(arg0.strides[3]))) && (672 == int32(arg0.strides[2]))) && (150528 == int32(arg0.strides[1]))) && (150528 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.418 = private constant [272 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (16 == int32(arg1.strides[4]))) && (48 == int32(arg1.strides[3]))) && (336 == int32(arg1.strides[2]))) && (2352 == int32(arg1.strides[1]))) && (2352 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.419 = private constant [97 x i8] c"Assert fail: (112 == int32(arg3.shape[2])), Argument arg3.shape[2] has an unsatisfied constraint\00", align 1
@.str.420 = private constant [97 x i8] c"Assert fail: (112 == int32(arg3.shape[3])), Argument arg3.shape[3] has an unsatisfied constraint\00", align 1
@.str.421 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (16 == int32(arg3.strides[3]))) && (1792 == int32(arg3.strides[2]))) && (200704 == int32(arg3.strides[1]))) && (802816 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.424 = private constant [96 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3: num_args should be 4\00", align 1
@.str.425 = private constant [171 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3: Expect arg[0] to be pointer\00", align 1
@.str.426 = private constant [171 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3: Expect arg[1] to be pointer\00", align 1
@.str.427 = private constant [171 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3: Expect arg[2] to be pointer\00", align 1
@.str.428 = private constant [171 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3: Expect arg[3] to be pointer\00", align 1
@.str.429 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (8 == int32(arg3.strides[3]))) && (112 == int32(arg3.strides[2]))) && (1568 == int32(arg3.strides[1]))) && (100352 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.431 = private constant [86 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add: num_args should be 4\00", align 1
@.str.432 = private constant [161 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add: Expect arg[0] to be pointer\00", align 1
@.str.433 = private constant [161 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add: Expect arg[1] to be pointer\00", align 1
@.str.434 = private constant [161 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add: Expect arg[2] to be pointer\00", align 1
@.str.435 = private constant [161 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add: Expect arg[3] to be pointer\00", align 1
@.str.437 = private constant [96 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2: num_args should be 4\00", align 1
@.str.438 = private constant [171 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2: Expect arg[0] to be pointer\00", align 1
@.str.439 = private constant [171 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2: Expect arg[1] to be pointer\00", align 1
@.str.440 = private constant [171 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2: Expect arg[2] to be pointer\00", align 1
@.str.441 = private constant [171 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2: Expect arg[3] to be pointer\00", align 1
@.str.442 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (8 == int32(arg0.strides[3]))) && (112 == int32(arg0.strides[2]))) && (1568 == int32(arg0.strides[1]))) && (100352 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.445 = private constant [72 x i8] c"Assert fail: (num_args == 2), fused_nn_avg_pool2d: num_args should be 2\00", align 1
@.str.446 = private constant [147 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_avg_pool2d: Expect arg[0] to be pointer\00", align 1
@.str.447 = private constant [147 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_avg_pool2d: Expect arg[1] to be pointer\00", align 1
@.str.448 = private constant [97 x i8] c"Assert fail: (256 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.449 = private constant [230 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (8 == int32(arg1.strides[3]))) && (8 == int32(arg1.strides[2]))) && (8 == int32(arg1.strides[1]))) && (2048 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.452 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_36: num_args should be 2\00", align 1
@.str.453 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_36: Expect arg[0] to be pointer\00", align 1
@.str.454 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_36: Expect arg[1] to be pointer\00", align 1
@.str.455 = private constant [243 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (512 == int32(arg1.strides[3]))) && (14336 == int32(arg1.strides[2]))) && (401408 == int32(arg1.strides[1]))) && (401408 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.457 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_37: num_args should be 2\00", align 1
@.str.458 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_37: Expect arg[0] to be pointer\00", align 1
@.str.459 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_37: Expect arg[1] to be pointer\00", align 1
@.str.460 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (8 == int32(arg0.strides[3]))) && (224 == int32(arg0.strides[2]))) && (6272 == int32(arg0.strides[1]))) && (100352 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.461 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (16 == int32(arg1.strides[3]))) && (448 == int32(arg1.strides[2]))) && (12544 == int32(arg1.strides[1]))) && (100352 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.463 = private constant [96 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8: num_args should be 4\00", align 1
@.str.464 = private constant [171 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8: Expect arg[0] to be pointer\00", align 1
@.str.465 = private constant [171 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8: Expect arg[1] to be pointer\00", align 1
@.str.466 = private constant [171 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8: Expect arg[2] to be pointer\00", align 1
@.str.467 = private constant [171 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8: Expect arg[3] to be pointer\00", align 1
@.str.468 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (32 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (25088 == int32(arg0.strides[1]))) && (100352 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.469 = private constant [96 x i8] c"Assert fail: (32 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.470 = private constant [272 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (8 == int32(arg1.strides[4]))) && (256 == int32(arg1.strides[3]))) && (768 == int32(arg1.strides[2]))) && (2304 == int32(arg1.strides[1]))) && (9216 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.473 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_38: num_args should be 2\00", align 1
@.str.474 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_38: Expect arg[0] to be pointer\00", align 1
@.str.475 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_38: Expect arg[1] to be pointer\00", align 1
@.str.476 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (32 == int32(arg1.strides[3]))) && (896 == int32(arg1.strides[2]))) && (25088 == int32(arg1.strides[1]))) && (100352 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.478 = private constant [96 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9: num_args should be 4\00", align 1
@.str.479 = private constant [171 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9: Expect arg[0] to be pointer\00", align 1
@.str.480 = private constant [171 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9: Expect arg[1] to be pointer\00", align 1
@.str.481 = private constant [171 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9: Expect arg[2] to be pointer\00", align 1
@.str.482 = private constant [171 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9: Expect arg[3] to be pointer\00", align 1
@.str.483 = private constant [97 x i8] c"Assert fail: (128 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.484 = private constant [242 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (128 == int32(arg0.strides[3]))) && (3584 == int32(arg0.strides[2]))) && (100352 == int32(arg0.strides[1]))) && (401408 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.485 = private constant [275 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (16 == int32(arg1.strides[4]))) && (2048 == int32(arg1.strides[3]))) && (2048 == int32(arg1.strides[2]))) && (2048 == int32(arg1.strides[1]))) && (8192 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.486 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (16 == int32(arg3.strides[3]))) && (448 == int32(arg3.strides[2]))) && (12544 == int32(arg3.strides[1]))) && (100352 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1

define dllexport i32 @fused_layout_transform_41(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !9
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.1, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !23
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.2, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !25
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !39
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 8
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !41
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 56
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !44
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 56
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !46
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 32
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !51
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 802816
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !65
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 100352
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !67
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 1792
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !70
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 32
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !72
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !76
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !90
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 1
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !92
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 56
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !95
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 56
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !97
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 256
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !101
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 802816
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !115
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 802816
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !117
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 14336
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !120
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 256
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !122
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.20, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_41_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_41_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %4, align 8
  %3 = getelementptr inbounds %4, %4* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %4, %4* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %4* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 55
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 56
  %15 = select i1 %14, i32 %13, i32 56
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 56
  %18 = select i1 %17, i32 %16, i32 56
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv10, 14336
  %23 = trunc i64 %indvars.iv10 to i32
  %24 = mul i32 %23, 1792
  %25 = insertelement <16 x i32> undef, i32 %24, i32 0
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %26 = shl i64 %indvars.iv7, 8
  %27 = add nsw i64 %26, %22
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %28 = shl i32 %indvars.iv7.tr, 5
  %29 = insertelement <16 x i32> undef, i32 %28, i32 0
  %30 = add <16 x i32> %29, %25
  %31 = shufflevector <16 x i32> %30, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %32 = icmp slt i64 %indvars.iv.next11, %21
  br i1 %32, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %33 = shl nsw i64 %indvars.iv, 4
  %34 = add nsw i64 %27, %33
  %35 = trunc i64 %33 to i32
  %36 = insertelement <16 x i32> undef, i32 %35, i32 0
  %37 = trunc i64 %33 to i32
  %38 = or i32 %37, 1
  %39 = insertelement <16 x i32> %36, i32 %38, i32 1
  %40 = trunc i64 %33 to i32
  %41 = or i32 %40, 2
  %42 = insertelement <16 x i32> %39, i32 %41, i32 2
  %43 = trunc i64 %33 to i32
  %44 = or i32 %43, 3
  %45 = insertelement <16 x i32> %42, i32 %44, i32 3
  %46 = trunc i64 %33 to i32
  %47 = or i32 %46, 4
  %48 = insertelement <16 x i32> %45, i32 %47, i32 4
  %49 = trunc i64 %33 to i32
  %50 = or i32 %49, 5
  %51 = insertelement <16 x i32> %48, i32 %50, i32 5
  %52 = trunc i64 %33 to i32
  %53 = or i32 %52, 6
  %54 = insertelement <16 x i32> %51, i32 %53, i32 6
  %55 = trunc i64 %33 to i32
  %56 = or i32 %55, 7
  %57 = insertelement <16 x i32> %54, i32 %56, i32 7
  %58 = trunc i64 %33 to i32
  %59 = or i32 %58, 8
  %60 = insertelement <16 x i32> %57, i32 %59, i32 8
  %61 = trunc i64 %33 to i32
  %62 = or i32 %61, 9
  %63 = insertelement <16 x i32> %60, i32 %62, i32 9
  %64 = trunc i64 %33 to i32
  %65 = or i32 %64, 10
  %66 = insertelement <16 x i32> %63, i32 %65, i32 10
  %67 = trunc i64 %33 to i32
  %68 = or i32 %67, 11
  %69 = insertelement <16 x i32> %66, i32 %68, i32 11
  %70 = trunc i64 %33 to i32
  %71 = or i32 %70, 12
  %72 = insertelement <16 x i32> %69, i32 %71, i32 12
  %73 = trunc i64 %33 to i32
  %74 = or i32 %73, 13
  %75 = insertelement <16 x i32> %72, i32 %74, i32 13
  %76 = trunc i64 %33 to i32
  %77 = or i32 %76, 14
  %78 = insertelement <16 x i32> %75, i32 %77, i32 14
  %79 = trunc i64 %33 to i32
  %80 = or i32 %79, 15
  %81 = insertelement <16 x i32> %78, i32 %80, i32 15
  %82 = sdiv <16 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %83 = mul <16 x i32> %82, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %.decomposed = sub <16 x i32> %81, %83
  %84 = add nsw <16 x i32> %.decomposed, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %85 = icmp sgt <16 x i32> %.decomposed, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %86 = select <16 x i1> %85, <16 x i32> %.decomposed, <16 x i32> %84
  %not. = xor <16 x i1> %85, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %87 = zext <16 x i1> %not. to <16 x i32>
  %88 = sub nsw <16 x i32> %82, %87
  %89 = mul nsw <16 x i32> %88, <i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352>
  %90 = add <16 x i32> %31, %86
  %91 = add <16 x i32> %90, %89
  %92 = extractelement <16 x i32> %91, i64 0
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds float, float* %7, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !126
  %96 = insertelement <16 x float> undef, float %95, i32 0
  %97 = extractelement <16 x i32> %91, i64 1
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds float, float* %7, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !126
  %101 = insertelement <16 x float> %96, float %100, i32 1
  %102 = extractelement <16 x i32> %91, i64 2
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !126
  %106 = insertelement <16 x float> %101, float %105, i32 2
  %107 = extractelement <16 x i32> %91, i64 3
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float* %7, i64 %108
  %110 = load float, float* %109, align 4, !tbaa !126
  %111 = insertelement <16 x float> %106, float %110, i32 3
  %112 = extractelement <16 x i32> %91, i64 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds float, float* %7, i64 %113
  %115 = load float, float* %114, align 4, !tbaa !126
  %116 = insertelement <16 x float> %111, float %115, i32 4
  %117 = extractelement <16 x i32> %91, i64 5
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds float, float* %7, i64 %118
  %120 = load float, float* %119, align 4, !tbaa !126
  %121 = insertelement <16 x float> %116, float %120, i32 5
  %122 = extractelement <16 x i32> %91, i64 6
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds float, float* %7, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !126
  %126 = insertelement <16 x float> %121, float %125, i32 6
  %127 = extractelement <16 x i32> %91, i64 7
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds float, float* %7, i64 %128
  %130 = load float, float* %129, align 4, !tbaa !126
  %131 = insertelement <16 x float> %126, float %130, i32 7
  %132 = extractelement <16 x i32> %91, i64 8
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds float, float* %7, i64 %133
  %135 = load float, float* %134, align 4, !tbaa !126
  %136 = insertelement <16 x float> %131, float %135, i32 8
  %137 = extractelement <16 x i32> %91, i64 9
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds float, float* %7, i64 %138
  %140 = load float, float* %139, align 4, !tbaa !126
  %141 = insertelement <16 x float> %136, float %140, i32 9
  %142 = extractelement <16 x i32> %91, i64 10
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = load float, float* %144, align 4, !tbaa !126
  %146 = insertelement <16 x float> %141, float %145, i32 10
  %147 = extractelement <16 x i32> %91, i64 11
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds float, float* %7, i64 %148
  %150 = load float, float* %149, align 4, !tbaa !126
  %151 = insertelement <16 x float> %146, float %150, i32 11
  %152 = extractelement <16 x i32> %91, i64 12
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds float, float* %7, i64 %153
  %155 = load float, float* %154, align 4, !tbaa !126
  %156 = insertelement <16 x float> %151, float %155, i32 12
  %157 = extractelement <16 x i32> %91, i64 13
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds float, float* %7, i64 %158
  %160 = load float, float* %159, align 4, !tbaa !126
  %161 = insertelement <16 x float> %156, float %160, i32 13
  %162 = extractelement <16 x i32> %91, i64 14
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds float, float* %7, i64 %163
  %165 = load float, float* %164, align 4, !tbaa !126
  %166 = insertelement <16 x float> %161, float %165, i32 14
  %167 = extractelement <16 x i32> %91, i64 15
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds float, float* %7, i64 %168
  %170 = load float, float* %169, align 4, !tbaa !126
  %171 = insertelement <16 x float> %166, float %170, i32 15
  %172 = getelementptr inbounds float, float* %4, i64 %34
  %173 = bitcast float* %172 to <16 x float>*
  store <16 x float> %171, <16 x float>* %173, align 64, !tbaa !129
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 56
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.24, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !132
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !146
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !149
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.25, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !151
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.26, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.28, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !153
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !167
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 1
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.29, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !169
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 56
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !172
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 56
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !174
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 256
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.30, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !178
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 802816
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !192
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 802816
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !194
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 14336
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !197
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 256
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !199
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.31, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !203
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 4
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.33, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !217
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !219
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !222
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !224
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 256
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !228
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 16
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !230
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 4096
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !244
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 4096
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !246
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 4096
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !249
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 4096
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !251
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 16
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !255
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([275 x i8], [275 x i8]* @.str.37, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !257
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !271
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 4
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.41, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !273
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !276
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !278
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 16
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !282
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 64
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !296
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 16
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !298
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 16
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !301
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 16
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !303
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([231 x i8], [231 x i8]* @.str.45, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !307
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !321
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 4
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.52, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !323
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 56
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !326
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 56
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !328
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 16
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !332
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 200704
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !346
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 50176
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !348
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 896
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !351
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 16
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !353
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = alloca %5, align 8
  %6 = getelementptr inbounds %5, %5* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %5, %5* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %5, %5* %5, i64 0, i32 2
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %5, %5* %5, i64 0, i32 3
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %5, %5* %5, i64 0, i32 4
  store i32 %4, i32* %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %5* %5 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.60, i8* nonnull %12, i32 0)
  ret i32 %13
}

define private i32 @__tvm_parallel_lambda.60(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 111
  %20 = sdiv i32 %19, %18
  %21 = add nsw i32 %0, 1
  %22 = mul nsw i32 %20, %21
  %23 = icmp slt i32 %22, 112
  %24 = select i1 %23, i32 %22, i32 112
  %25 = mul nsw i32 %20, %0
  %26 = icmp slt i32 %25, 112
  %27 = select i1 %26, i32 %25, i32 112
  %28 = icmp slt i32 %27, %24
  br i1 %28, label %for_body, label %for_end, !prof !5

for_body:                                         ; preds = %entry, %for_end9
  %29 = phi i32 [ %98, %for_end9 ], [ %27, %entry ]
  %30 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %31 = tail call i8* %30(i32 1, i32 %16, i64 7168, i32 2, i32 32)
  %32 = bitcast i8* %31 to float*
  %33 = sdiv i32 %29, 28
  %34 = mul i32 %33, 28
  %.decomposed = sub i32 %29, %34
  %35 = mul nsw i32 %.decomposed, 28672
  %36 = shl i32 %33, 12
  %37 = sext i32 %36 to i64
  %38 = sext i32 %35 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end9, %entry
  ret i32 0

for_begin7.preheader:                             ; preds = %for_end6
  %39 = mul nsw i32 %29, 1792
  %40 = shl nsw i32 %33, 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %13, i64 %41
  %43 = bitcast float* %42 to <16 x float>*
  %44 = load <16 x float>, <16 x float>* %43, align 64, !tbaa !357
  br label %for_begin10.preheader

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv21 = phi i64 [ 0, %for_body ], [ %indvars.iv.next22, %for_end6 ]
  %45 = shl nsw i64 %indvars.iv21, 4
  %46 = getelementptr inbounds float, float* %32, i64 %45
  %47 = bitcast float* %46 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %47, align 64, !tbaa !360
  %48 = add nuw nsw i64 %45, 896
  %49 = getelementptr inbounds float, float* %32, i64 %48
  %50 = bitcast float* %49 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %50, align 64, !tbaa !360
  %51 = shl i64 %indvars.iv21, 8
  %52 = add nsw i64 %51, %38
  br label %for_body5

for_body5:                                        ; preds = %for_body5, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_body5 ]
  %53 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %71, %for_body5 ]
  %54 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %65, %for_body5 ]
  %55 = add nsw i64 %52, %indvars.iv
  %56 = getelementptr inbounds float, float* %4, i64 %55
  %57 = load float, float* %56, align 4, !tbaa !363
  %58 = insertelement <16 x float> undef, float %57, i32 0
  %59 = shufflevector <16 x float> %58, <16 x float> undef, <16 x i32> zeroinitializer
  %60 = shl i64 %indvars.iv, 4
  %61 = add nuw nsw i64 %60, %37
  %62 = getelementptr inbounds float, float* %7, i64 %61
  %63 = bitcast float* %62 to <16 x float>*
  %64 = load <16 x float>, <16 x float>* %63, align 64, !tbaa !366
  %65 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %59, <16 x float> %64, <16 x float> %54)
  %66 = add nsw i64 %55, 14336
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !363
  %69 = insertelement <16 x float> undef, float %68, i32 0
  %70 = shufflevector <16 x float> %69, <16 x float> undef, <16 x i32> zeroinitializer
  %71 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %70, <16 x float> %64, <16 x float> %53)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  store <16 x float> %65, <16 x float>* %47, align 64, !tbaa !360
  store <16 x float> %71, <16 x float>* %50, align 64, !tbaa !360
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
  %exitcond23 = icmp eq i64 %indvars.iv.next22, 56
  br i1 %exitcond23, label %for_begin7.preheader, label %for_body2, !prof !50

for_begin10.preheader:                            ; preds = %for_begin10.preheader, %for_begin7.preheader
  %indvars.iv27 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next28, %for_begin10.preheader ]
  %72 = shl nsw i64 %indvars.iv27, 4
  %73 = trunc i64 %72 to i32
  %74 = add i32 %39, %73
  %75 = getelementptr inbounds float, float* %32, i64 %72
  %76 = bitcast float* %75 to <16 x float>*
  %77 = load <16 x float>, <16 x float>* %76, align 64, !tbaa !360
  %78 = fadd <16 x float> %44, %77
  %79 = fcmp ogt <16 x float> %78, zeroinitializer
  %80 = select <16 x i1> %79, <16 x float> %78, <16 x float> zeroinitializer
  %81 = sext i32 %74 to i64
  %82 = getelementptr inbounds float, float* %10, i64 %81
  %83 = bitcast float* %82 to <16 x float>*
  store <16 x float> %80, <16 x float>* %83, align 64, !tbaa !369
  %84 = add nuw nsw i64 %72, 896
  %85 = trunc i64 %84 to i32
  %86 = add i32 %39, %85
  %87 = getelementptr inbounds float, float* %32, i64 %84
  %88 = bitcast float* %87 to <16 x float>*
  %89 = load <16 x float>, <16 x float>* %88, align 64, !tbaa !360
  %90 = fadd <16 x float> %44, %89
  %91 = fcmp ogt <16 x float> %90, zeroinitializer
  %92 = select <16 x i1> %91, <16 x float> %90, <16 x float> zeroinitializer
  %93 = sext i32 %86 to i64
  %94 = getelementptr inbounds float, float* %10, i64 %93
  %95 = bitcast float* %94 to <16 x float>*
  store <16 x float> %92, <16 x float>* %95, align 64, !tbaa !369
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %exitcond29 = icmp eq i64 %indvars.iv.next28, 56
  br i1 %exitcond29, label %for_end9, label %for_begin10.preheader, !prof !50

for_end9:                                         ; preds = %for_begin10.preheader
  %96 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %97 = tail call i32 %96(i32 1, i32 %16, i8* nonnull %31)
  %98 = add nsw i32 %29, 1
  %99 = icmp slt i32 %98, %24
  br i1 %99, label %for_body, label %for_end, !prof !5
}

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fmuladd.v16f32(<16 x float>, <16 x float>, <16 x float>) #2

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !372
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !386
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !389
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !391
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !393
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !407
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 1
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.29, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !409
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 56
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !412
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 56
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !414
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 256
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.30, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !418
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 802816
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !432
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 802816
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !434
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 14336
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !437
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 256
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !439
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.31, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !443
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 8
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !457
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !459
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !462
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !464
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 256
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !468
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 16
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !470
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 4096
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !484
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 4096
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !486
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 4096
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !489
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 4096
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !491
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 16
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !495
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([275 x i8], [275 x i8]* @.str.37, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !497
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !511
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 8
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !513
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !516
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !518
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 16
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !522
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 128
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !536
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 16
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !538
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 16
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !541
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 16
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !543
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !547
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !561
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 8
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !563
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 56
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !566
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 56
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !568
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 16
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !572
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 401408
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !586
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 50176
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !588
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 896
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !591
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 16
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !593
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.70, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = alloca %6, align 8
  %6 = getelementptr inbounds %6, %6* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %6, %6* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %6, %6* %5, i64 0, i32 2
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %6, %6* %5, i64 0, i32 3
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %6, %6* %5, i64 0, i32 4
  store i32 %4, i32* %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %6* %5 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.71, i8* nonnull %12, i32 0)
  ret i32 %13
}

define private i32 @__tvm_parallel_lambda.71(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 223
  %20 = sdiv i32 %19, %18
  %21 = add nsw i32 %0, 1
  %22 = mul nsw i32 %20, %21
  %23 = icmp slt i32 %22, 224
  %24 = select i1 %23, i32 %22, i32 224
  %25 = mul nsw i32 %20, %0
  %26 = icmp slt i32 %25, 224
  %27 = select i1 %26, i32 %25, i32 224
  %28 = icmp slt i32 %27, %24
  br i1 %28, label %for_body, label %for_end, !prof !5

for_body:                                         ; preds = %entry, %for_end9
  %29 = phi i32 [ %98, %for_end9 ], [ %27, %entry ]
  %30 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %31 = tail call i8* %30(i32 1, i32 %16, i64 7168, i32 2, i32 32)
  %32 = bitcast i8* %31 to float*
  %33 = sdiv i32 %29, 28
  %34 = mul i32 %33, 28
  %.decomposed = sub i32 %29, %34
  %35 = mul nsw i32 %.decomposed, 28672
  %36 = shl i32 %33, 12
  %37 = sext i32 %36 to i64
  %38 = sext i32 %35 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end9, %entry
  ret i32 0

for_begin7.preheader:                             ; preds = %for_end6
  %39 = mul nsw i32 %29, 1792
  %40 = shl nsw i32 %33, 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %13, i64 %41
  %43 = bitcast float* %42 to <16 x float>*
  %44 = load <16 x float>, <16 x float>* %43, align 64, !tbaa !597
  br label %for_begin10.preheader

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv21 = phi i64 [ 0, %for_body ], [ %indvars.iv.next22, %for_end6 ]
  %45 = shl nsw i64 %indvars.iv21, 4
  %46 = getelementptr inbounds float, float* %32, i64 %45
  %47 = bitcast float* %46 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %47, align 64, !tbaa !600
  %48 = add nuw nsw i64 %45, 896
  %49 = getelementptr inbounds float, float* %32, i64 %48
  %50 = bitcast float* %49 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %50, align 64, !tbaa !600
  %51 = shl i64 %indvars.iv21, 8
  %52 = add nsw i64 %51, %38
  br label %for_body5

for_body5:                                        ; preds = %for_body5, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_body5 ]
  %53 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %71, %for_body5 ]
  %54 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %65, %for_body5 ]
  %55 = add nsw i64 %52, %indvars.iv
  %56 = getelementptr inbounds float, float* %4, i64 %55
  %57 = load float, float* %56, align 4, !tbaa !603
  %58 = insertelement <16 x float> undef, float %57, i32 0
  %59 = shufflevector <16 x float> %58, <16 x float> undef, <16 x i32> zeroinitializer
  %60 = shl i64 %indvars.iv, 4
  %61 = add nuw nsw i64 %60, %37
  %62 = getelementptr inbounds float, float* %7, i64 %61
  %63 = bitcast float* %62 to <16 x float>*
  %64 = load <16 x float>, <16 x float>* %63, align 64, !tbaa !606
  %65 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %59, <16 x float> %64, <16 x float> %54)
  %66 = add nsw i64 %55, 14336
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !603
  %69 = insertelement <16 x float> undef, float %68, i32 0
  %70 = shufflevector <16 x float> %69, <16 x float> undef, <16 x i32> zeroinitializer
  %71 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %70, <16 x float> %64, <16 x float> %53)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  store <16 x float> %65, <16 x float>* %47, align 64, !tbaa !600
  store <16 x float> %71, <16 x float>* %50, align 64, !tbaa !600
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
  %exitcond23 = icmp eq i64 %indvars.iv.next22, 56
  br i1 %exitcond23, label %for_begin7.preheader, label %for_body2, !prof !50

for_begin10.preheader:                            ; preds = %for_begin10.preheader, %for_begin7.preheader
  %indvars.iv27 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next28, %for_begin10.preheader ]
  %72 = shl nsw i64 %indvars.iv27, 4
  %73 = trunc i64 %72 to i32
  %74 = add i32 %39, %73
  %75 = getelementptr inbounds float, float* %32, i64 %72
  %76 = bitcast float* %75 to <16 x float>*
  %77 = load <16 x float>, <16 x float>* %76, align 64, !tbaa !600
  %78 = fadd <16 x float> %44, %77
  %79 = fcmp ogt <16 x float> %78, zeroinitializer
  %80 = select <16 x i1> %79, <16 x float> %78, <16 x float> zeroinitializer
  %81 = sext i32 %74 to i64
  %82 = getelementptr inbounds float, float* %10, i64 %81
  %83 = bitcast float* %82 to <16 x float>*
  store <16 x float> %80, <16 x float>* %83, align 64, !tbaa !609
  %84 = add nuw nsw i64 %72, 896
  %85 = trunc i64 %84 to i32
  %86 = add i32 %39, %85
  %87 = getelementptr inbounds float, float* %32, i64 %84
  %88 = bitcast float* %87 to <16 x float>*
  %89 = load <16 x float>, <16 x float>* %88, align 64, !tbaa !600
  %90 = fadd <16 x float> %44, %89
  %91 = fcmp ogt <16 x float> %90, zeroinitializer
  %92 = select <16 x i1> %91, <16 x float> %90, <16 x float> zeroinitializer
  %93 = sext i32 %86 to i64
  %94 = getelementptr inbounds float, float* %10, i64 %93
  %95 = bitcast float* %94 to <16 x float>*
  store <16 x float> %92, <16 x float>* %95, align 64, !tbaa !609
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %exitcond29 = icmp eq i64 %indvars.iv.next28, 56
  br i1 %exitcond29, label %for_end9, label %for_begin10.preheader, !prof !50

for_end9:                                         ; preds = %for_begin10.preheader
  %96 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %97 = tail call i32 %96(i32 1, i32 %16, i8* nonnull %31)
  %98 = add nsw i32 %29, 1
  %99 = icmp slt i32 %98, %24
  br i1 %99, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_40(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !612
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !626
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !628
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !642
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 8
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !644
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 56
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !647
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 56
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !649
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 16
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !653
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 401408
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !667
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 50176
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !669
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 896
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !672
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 16
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !674
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !678
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !692
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 16
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !694
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 56
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !697
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 56
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !699
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 8
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !703
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 401408
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !717
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 25088
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !719
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 448
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !722
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 8
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !724
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.79, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_40_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_40_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %7, align 8
  %3 = getelementptr inbounds %7, %7* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %7, %7* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %7* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.80, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.80(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 895
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 896
  %15 = select i1 %14, i32 %13, i32 896
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 896
  %18 = select i1 %17, i32 %16, i32 896
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv4 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next5, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv4, 448
  %23 = trunc i64 %indvars.iv4 to i32
  %24 = sdiv i32 %23, 56
  %25 = shl nsw i32 %24, 3
  %26 = insertelement <8 x i32> undef, i32 %25, i32 0
  %27 = insertelement <4 x i32> undef, i32 %25, i32 0
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> zeroinitializer
  %29 = or <4 x i32> %28, <i32 1, i32 2, i32 3, i32 4>
  %30 = extractelement <4 x i32> %29, i32 0
  %31 = insertelement <8 x i32> %26, i32 %30, i32 1
  %32 = extractelement <4 x i32> %29, i32 1
  %33 = insertelement <8 x i32> %31, i32 %32, i32 2
  %34 = extractelement <4 x i32> %29, i32 2
  %35 = insertelement <8 x i32> %33, i32 %34, i32 3
  %36 = extractelement <4 x i32> %29, i32 3
  %37 = insertelement <8 x i32> %35, i32 %36, i32 4
  %38 = insertelement <2 x i32> undef, i32 %25, i32 0
  %39 = shufflevector <2 x i32> %38, <2 x i32> undef, <2 x i32> zeroinitializer
  %40 = or <2 x i32> %39, <i32 5, i32 6>
  %41 = extractelement <2 x i32> %40, i32 0
  %42 = insertelement <8 x i32> %37, i32 %41, i32 5
  %43 = extractelement <2 x i32> %40, i32 1
  %44 = insertelement <8 x i32> %42, i32 %43, i32 6
  %45 = or i32 %25, 7
  %46 = insertelement <8 x i32> %44, i32 %45, i32 7
  %47 = sdiv <8 x i32> %46, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %48 = mul <8 x i32> %47, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %.decomposed = sub <8 x i32> %46, %48
  %49 = add nsw <8 x i32> %.decomposed, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %50 = icmp sgt <8 x i32> %.decomposed, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = select <8 x i1> %50, <8 x i32> %.decomposed, <8 x i32> %49
  %52 = mul i32 %24, 56
  %.decomposed6 = sub i32 %23, %52
  %53 = mul nsw i32 %.decomposed6, 896
  %54 = insertelement <8 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <8 x i32> %54, <8 x i32> undef, <8 x i32> zeroinitializer
  %not. = xor <8 x i1> %50, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %56 = zext <8 x i1> %not. to <8 x i32>
  %57 = sub nsw <8 x i32> %47, %56
  %58 = mul nsw <8 x i32> %57, <i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176>
  %59 = add <8 x i32> %51, %55
  %60 = add <8 x i32> %59, %58
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %61 = shl i64 %indvars.iv, 3
  %62 = add nsw i64 %61, %22
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %63 = shl i32 %indvars.iv.tr, 4
  %64 = insertelement <8 x i32> undef, i32 %63, i32 0
  %65 = shufflevector <8 x i32> %64, <8 x i32> undef, <8 x i32> zeroinitializer
  %66 = add <8 x i32> %60, %65
  %67 = extractelement <8 x i32> %66, i64 0
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds float, float* %7, i64 %68
  %70 = load float, float* %69, align 4, !tbaa !728
  %71 = insertelement <8 x float> undef, float %70, i32 0
  %72 = extractelement <8 x i32> %66, i64 1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds float, float* %7, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !728
  %76 = insertelement <8 x float> %71, float %75, i32 1
  %77 = extractelement <8 x i32> %66, i64 2
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds float, float* %7, i64 %78
  %80 = load float, float* %79, align 4, !tbaa !728
  %81 = insertelement <8 x float> %76, float %80, i32 2
  %82 = extractelement <8 x i32> %66, i64 3
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds float, float* %7, i64 %83
  %85 = load float, float* %84, align 4, !tbaa !728
  %86 = insertelement <8 x float> %81, float %85, i32 3
  %87 = extractelement <8 x i32> %66, i64 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds float, float* %7, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !728
  %91 = insertelement <8 x float> %86, float %90, i32 4
  %92 = extractelement <8 x i32> %66, i64 5
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds float, float* %7, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !728
  %96 = insertelement <8 x float> %91, float %95, i32 5
  %97 = extractelement <8 x i32> %66, i64 6
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds float, float* %7, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !728
  %101 = insertelement <8 x float> %96, float %100, i32 6
  %102 = extractelement <8 x i32> %66, i64 7
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !728
  %106 = insertelement <8 x float> %101, float %105, i32 7
  %107 = getelementptr inbounds float, float* %4, i64 %62
  %108 = bitcast float* %107 to <8 x float>*
  store <8 x float> %106, <8 x float>* %108, align 32, !tbaa !731
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 56
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, 1
  %109 = icmp slt i64 %indvars.iv.next5, %21
  br i1 %109, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_45(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.81, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !734
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.82, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !748
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !750
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !764
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 8
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !766
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 56
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !769
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 56
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !771
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 32
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !775
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 802816
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !789
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 100352
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !791
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 1792
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !794
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 32
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !796
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !800
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !814
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 16
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !816
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 56
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !819
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 56
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !821
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 16
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !825
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 802816
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !839
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 50176
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !841
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 896
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !844
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 16
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !846
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_45_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_45_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %8, align 8
  %3 = getelementptr inbounds %8, %8* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %8, %8* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %8* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.86, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.86(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 895
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 896
  %15 = select i1 %14, i32 %13, i32 896
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 896
  %18 = select i1 %17, i32 %16, i32 896
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv4 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next5, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv4, 896
  %23 = trunc i64 %indvars.iv4 to i32
  %24 = sdiv i32 %23, 56
  %25 = shl nsw i32 %24, 4
  %26 = insertelement <16 x i32> undef, i32 %25, i32 0
  %27 = insertelement <8 x i32> undef, i32 %25, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  %29 = or <8 x i32> %28, <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8>
  %30 = extractelement <8 x i32> %29, i32 0
  %31 = insertelement <16 x i32> %26, i32 %30, i32 1
  %32 = extractelement <8 x i32> %29, i32 1
  %33 = insertelement <16 x i32> %31, i32 %32, i32 2
  %34 = extractelement <8 x i32> %29, i32 2
  %35 = insertelement <16 x i32> %33, i32 %34, i32 3
  %36 = extractelement <8 x i32> %29, i32 3
  %37 = insertelement <16 x i32> %35, i32 %36, i32 4
  %38 = extractelement <8 x i32> %29, i32 4
  %39 = insertelement <16 x i32> %37, i32 %38, i32 5
  %40 = extractelement <8 x i32> %29, i32 5
  %41 = insertelement <16 x i32> %39, i32 %40, i32 6
  %42 = extractelement <8 x i32> %29, i32 6
  %43 = insertelement <16 x i32> %41, i32 %42, i32 7
  %44 = extractelement <8 x i32> %29, i32 7
  %45 = insertelement <16 x i32> %43, i32 %44, i32 8
  %46 = insertelement <4 x i32> undef, i32 %25, i32 0
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> zeroinitializer
  %48 = or <4 x i32> %47, <i32 9, i32 10, i32 11, i32 12>
  %49 = extractelement <4 x i32> %48, i32 0
  %50 = insertelement <16 x i32> %45, i32 %49, i32 9
  %51 = extractelement <4 x i32> %48, i32 1
  %52 = insertelement <16 x i32> %50, i32 %51, i32 10
  %53 = extractelement <4 x i32> %48, i32 2
  %54 = insertelement <16 x i32> %52, i32 %53, i32 11
  %55 = extractelement <4 x i32> %48, i32 3
  %56 = insertelement <16 x i32> %54, i32 %55, i32 12
  %57 = insertelement <2 x i32> undef, i32 %25, i32 0
  %58 = shufflevector <2 x i32> %57, <2 x i32> undef, <2 x i32> zeroinitializer
  %59 = or <2 x i32> %58, <i32 13, i32 14>
  %60 = extractelement <2 x i32> %59, i32 0
  %61 = insertelement <16 x i32> %56, i32 %60, i32 13
  %62 = extractelement <2 x i32> %59, i32 1
  %63 = insertelement <16 x i32> %61, i32 %62, i32 14
  %64 = or i32 %25, 15
  %65 = insertelement <16 x i32> %63, i32 %64, i32 15
  %66 = sdiv <16 x i32> %65, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %67 = mul <16 x i32> %66, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %.decomposed = sub <16 x i32> %65, %67
  %68 = add nsw <16 x i32> %.decomposed, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %69 = icmp sgt <16 x i32> %.decomposed, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %70 = select <16 x i1> %69, <16 x i32> %.decomposed, <16 x i32> %68
  %71 = mul i32 %24, 56
  %.decomposed6 = sub i32 %23, %71
  %72 = mul nsw i32 %.decomposed6, 1792
  %73 = insertelement <16 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <16 x i32> %73, <16 x i32> undef, <16 x i32> zeroinitializer
  %not. = xor <16 x i1> %69, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %75 = zext <16 x i1> %not. to <16 x i32>
  %76 = sub nsw <16 x i32> %66, %75
  %77 = mul nsw <16 x i32> %76, <i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352>
  %78 = add <16 x i32> %70, %74
  %79 = add <16 x i32> %78, %77
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %80 = shl i64 %indvars.iv, 4
  %81 = add nsw i64 %80, %22
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %82 = shl i32 %indvars.iv.tr, 5
  %83 = insertelement <16 x i32> undef, i32 %82, i32 0
  %84 = shufflevector <16 x i32> %83, <16 x i32> undef, <16 x i32> zeroinitializer
  %85 = add <16 x i32> %79, %84
  %86 = extractelement <16 x i32> %85, i64 0
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %7, i64 %87
  %89 = load float, float* %88, align 4, !tbaa !850
  %90 = insertelement <16 x float> undef, float %89, i32 0
  %91 = extractelement <16 x i32> %85, i64 1
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds float, float* %7, i64 %92
  %94 = load float, float* %93, align 4, !tbaa !850
  %95 = insertelement <16 x float> %90, float %94, i32 1
  %96 = extractelement <16 x i32> %85, i64 2
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds float, float* %7, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !850
  %100 = insertelement <16 x float> %95, float %99, i32 2
  %101 = extractelement <16 x i32> %85, i64 3
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds float, float* %7, i64 %102
  %104 = load float, float* %103, align 4, !tbaa !850
  %105 = insertelement <16 x float> %100, float %104, i32 3
  %106 = extractelement <16 x i32> %85, i64 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds float, float* %7, i64 %107
  %109 = load float, float* %108, align 4, !tbaa !850
  %110 = insertelement <16 x float> %105, float %109, i32 4
  %111 = extractelement <16 x i32> %85, i64 5
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds float, float* %7, i64 %112
  %114 = load float, float* %113, align 4, !tbaa !850
  %115 = insertelement <16 x float> %110, float %114, i32 5
  %116 = extractelement <16 x i32> %85, i64 6
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float* %7, i64 %117
  %119 = load float, float* %118, align 4, !tbaa !850
  %120 = insertelement <16 x float> %115, float %119, i32 6
  %121 = extractelement <16 x i32> %85, i64 7
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds float, float* %7, i64 %122
  %124 = load float, float* %123, align 4, !tbaa !850
  %125 = insertelement <16 x float> %120, float %124, i32 7
  %126 = extractelement <16 x i32> %85, i64 8
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds float, float* %7, i64 %127
  %129 = load float, float* %128, align 4, !tbaa !850
  %130 = insertelement <16 x float> %125, float %129, i32 8
  %131 = extractelement <16 x i32> %85, i64 9
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds float, float* %7, i64 %132
  %134 = load float, float* %133, align 4, !tbaa !850
  %135 = insertelement <16 x float> %130, float %134, i32 9
  %136 = extractelement <16 x i32> %85, i64 10
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds float, float* %7, i64 %137
  %139 = load float, float* %138, align 4, !tbaa !850
  %140 = insertelement <16 x float> %135, float %139, i32 10
  %141 = extractelement <16 x i32> %85, i64 11
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds float, float* %7, i64 %142
  %144 = load float, float* %143, align 4, !tbaa !850
  %145 = insertelement <16 x float> %140, float %144, i32 11
  %146 = extractelement <16 x i32> %85, i64 12
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds float, float* %7, i64 %147
  %149 = load float, float* %148, align 4, !tbaa !850
  %150 = insertelement <16 x float> %145, float %149, i32 12
  %151 = extractelement <16 x i32> %85, i64 13
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds float, float* %7, i64 %152
  %154 = load float, float* %153, align 4, !tbaa !850
  %155 = insertelement <16 x float> %150, float %154, i32 13
  %156 = extractelement <16 x i32> %85, i64 14
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds float, float* %7, i64 %157
  %159 = load float, float* %158, align 4, !tbaa !850
  %160 = insertelement <16 x float> %155, float %159, i32 14
  %161 = extractelement <16 x i32> %85, i64 15
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds float, float* %7, i64 %162
  %164 = load float, float* %163, align 4, !tbaa !850
  %165 = insertelement <16 x float> %160, float %164, i32 15
  %166 = getelementptr inbounds float, float* %4, i64 %81
  %167 = bitcast float* %166 to <16 x float>*
  store <16 x float> %165, <16 x float>* %167, align 64, !tbaa !853
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 56
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, 1
  %168 = icmp slt i64 %indvars.iv.next5, %21
  br i1 %168, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_43(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.87, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !856
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.88, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !870
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.89, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !872
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !886
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 4
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.90, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !888
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 56
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !891
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 56
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !893
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 16
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !897
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 200704
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !911
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 50176
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !913
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 896
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !916
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 16
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !918
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.91, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !922
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !936
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 1
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !938
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 56
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !941
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 56
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !943
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 64
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.92, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !947
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 200704
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !961
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 200704
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !963
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 3584
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !966
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 64
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !968
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.93, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_43_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_43_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %9, align 8
  %3 = getelementptr inbounds %9, %9* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %9, %9* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %9* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.94, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.94(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 55
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 56
  %15 = select i1 %14, i32 %13, i32 56
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 56
  %18 = select i1 %17, i32 %16, i32 56
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv7, 3584
  %23 = trunc i64 %indvars.iv7 to i32
  %24 = mul i32 %23, 896
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %25 = shl i64 %indvars.iv, 6
  %26 = add nsw i64 %25, %22
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %27 = shl i32 %indvars.iv.tr, 4
  %28 = add i32 %27, %24
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds float, float* %7, i64 %29
  %31 = bitcast float* %30 to <16 x float>*
  %32 = load <16 x float>, <16 x float>* %31, align 64, !tbaa !972
  %33 = getelementptr inbounds float, float* %4, i64 %26
  %34 = bitcast float* %33 to <16 x float>*
  store <16 x float> %32, <16 x float>* %34, align 64, !tbaa !975
  %35 = or i64 %26, 16
  %36 = add i32 %28, 50176
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds float, float* %7, i64 %37
  %39 = bitcast float* %38 to <16 x float>*
  %40 = load <16 x float>, <16 x float>* %39, align 64, !tbaa !972
  %41 = getelementptr inbounds float, float* %4, i64 %35
  %42 = bitcast float* %41 to <16 x float>*
  store <16 x float> %40, <16 x float>* %42, align 64, !tbaa !975
  %43 = or i64 %26, 32
  %44 = add i32 %28, 100352
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float* %7, i64 %45
  %47 = bitcast float* %46 to <16 x float>*
  %48 = load <16 x float>, <16 x float>* %47, align 64, !tbaa !972
  %49 = getelementptr inbounds float, float* %4, i64 %43
  %50 = bitcast float* %49 to <16 x float>*
  store <16 x float> %48, <16 x float>* %50, align 64, !tbaa !975
  %51 = or i64 %26, 48
  %52 = add i32 %28, 150528
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds float, float* %7, i64 %53
  %55 = bitcast float* %54 to <16 x float>*
  %56 = load <16 x float>, <16 x float>* %55, align 64, !tbaa !972
  %57 = getelementptr inbounds float, float* %4, i64 %51
  %58 = bitcast float* %57 to <16 x float>*
  store <16 x float> %56, <16 x float>* %58, align 64, !tbaa !975
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 56
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !50

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %59 = icmp slt i64 %indvars.iv.next8, %21
  br i1 %59, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.95, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !978
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !992
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !995
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.96, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !997
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.97, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.98, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.99, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !999
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !1013
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 16
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.100, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !1015
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 56
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !1018
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 56
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !1020
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 8
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !1024
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 401408
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !1038
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 25088
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !1040
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 448
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !1043
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 8
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !1045
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !1049
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 16
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !1063
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 16
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !1065
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 3
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !1068
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 3
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.105, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !1070
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 8
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !1074
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !1076
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 9216
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !1090
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 576
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !1092
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 192
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !1095
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 64
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !1097
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 8
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !1101
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([270 x i8], [270 x i8]* @.str.107, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !1103
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !1117
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 16
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !1119
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !1122
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !1124
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 8
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !1128
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 128
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !1142
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 8
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !1144
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 8
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !1147
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 8
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !1149
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.110, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !1153
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !1167
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 16
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !1169
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 28
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !1172
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 28
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.113, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !1174
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 8
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !1178
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 100352
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !1192
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 6272
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !1194
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 224
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !1197
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 8
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !1199
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.115, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %6 = tail call i8* %5(i32 1, i32 %4, i64 1663488, i32 2, i32 32)
  %7 = alloca %10, align 8
  %8 = getelementptr inbounds %10, %10* %7, i64 0, i32 0
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds %10, %10* %7, i64 0, i32 1
  store i8* %0, i8** %9, align 8
  %10 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %11 = bitcast %10* %7 to i8*
  %12 = call i32 %10(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.116, i8* nonnull %11, i32 0)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %12, %entry ], [ 0, %call_end2 ], [ %21, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %14 = alloca %11, align 8
  %15 = getelementptr inbounds %11, %11* %14, i64 0, i32 0
  store i8* %6, i8** %15, align 8
  %16 = getelementptr inbounds %11, %11* %14, i64 0, i32 1
  store i8* %1, i8** %16, align 8
  %17 = getelementptr inbounds %11, %11* %14, i64 0, i32 2
  store i8* %2, i8** %17, align 8
  %18 = getelementptr inbounds %11, %11* %14, i64 0, i32 3
  store i8* %3, i8** %18, align 8
  %19 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %20 = bitcast %11* %14 to i8*
  %21 = call i32 %19(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.117, i8* nonnull %20, i32 0)
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %23 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %24 = call i32 %23(i32 1, i32 %4, i8* %6)
  br label %call_fail
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.116(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 911
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 912
  %15 = select i1 %14, i32 %13, i32 912
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 912
  %18 = select i1 %17, i32 %16, i32 912
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv7, 456
  %23 = trunc i64 %indvars.iv7 to i32
  %24 = sdiv i32 %23, 57
  %25 = mul i32 %24, 57
  %.decomposed = sub i32 %23, %25
  %26 = icmp sgt i32 %.decomposed, 0
  %27 = mul nsw i32 %.decomposed, 448
  %28 = mul nsw i32 %24, 25088
  %29 = add nsw i32 %27, -456
  %30 = add i32 %29, %28
  br i1 %26, label %for_body2.us, label %for_body2.preheader

for_body2.preheader:                              ; preds = %for_begin1.preheader
  %31 = add i32 %18, %indvar
  %32 = mul i32 %31, 456
  %33 = sext i32 %32 to i64
  %scevgep = getelementptr float, float* %4, i64 %33
  %scevgep6 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %scevgep6, i8 0, i64 1824, i1 false)
  br label %for_end3

for_body2.us:                                     ; preds = %for_begin1.preheader, %if_end.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %if_end.us ], [ 0, %for_begin1.preheader ]
  %34 = shl nsw i64 %indvars.iv, 3
  %35 = add nsw i64 %34, %22
  %36 = icmp eq i64 %indvars.iv, 0
  br i1 %36, label %if_end.us, label %if_then.us

if_then.us:                                       ; preds = %for_body2.us
  %37 = trunc i64 %34 to i32
  %38 = add i32 %30, %37
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds float, float* %7, i64 %39
  %41 = bitcast float* %40 to <8 x float>*
  %42 = load <8 x float>, <8 x float>* %41, align 32, !tbaa !1203
  br label %if_end.us

if_end.us:                                        ; preds = %for_body2.us, %if_then.us
  %43 = phi <8 x float> [ %42, %if_then.us ], [ zeroinitializer, %for_body2.us ]
  %44 = getelementptr inbounds float, float* %4, i64 %35
  %45 = bitcast float* %44 to <8 x float>*
  store <8 x float> %43, <8 x float>* %45, align 32, !tbaa !1206
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 57
  br i1 %exitcond, label %for_end3, label %for_body2.us, !prof !50

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %if_end.us, %for_body2.preheader
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %46 = icmp slt i64 %indvars.iv.next8, %21
  %indvar.next = add i32 %indvar, 1
  br i1 %46, label %for_begin1.preheader, label %for_end, !prof !5
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.117(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = alloca [14 x <8 x float>], align 32
  %4 = bitcast [14 x <8 x float>]* %3 to i8*
  %5 = alloca [28 x <8 x float>], align 16
  %.sub = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0
  %6 = bitcast i8* %2 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 16
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 24
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 447
  %20 = sdiv i32 %19, %18
  %21 = add nsw i32 %0, 1
  %22 = mul nsw i32 %20, %21
  %23 = icmp slt i32 %22, 448
  %24 = select i1 %23, i32 %22, i32 448
  %25 = mul nsw i32 %20, %0
  %26 = icmp slt i32 %25, 448
  %27 = select i1 %26, i32 %25, i32 448
  %28 = icmp slt i32 %27, %24
  br i1 %28, label %for_begin1.preheader.lr.ph, label %for_end, !prof !5

for_begin1.preheader.lr.ph:                       ; preds = %entry
  %29 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 8
  %30 = bitcast float* %29 to <8 x float>*
  %31 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 16
  %32 = bitcast float* %31 to <8 x float>*
  %33 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 24
  %34 = bitcast float* %33 to <8 x float>*
  %35 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 32
  %36 = bitcast float* %35 to <8 x float>*
  %37 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 40
  %38 = bitcast float* %37 to <8 x float>*
  %39 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 48
  %40 = bitcast float* %39 to <8 x float>*
  %41 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 56
  %42 = bitcast float* %41 to <8 x float>*
  %43 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 64
  %44 = bitcast float* %43 to <8 x float>*
  %45 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 72
  %46 = bitcast float* %45 to <8 x float>*
  %47 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 80
  %48 = bitcast float* %47 to <8 x float>*
  %49 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 88
  %50 = bitcast float* %49 to <8 x float>*
  %51 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 96
  %52 = bitcast float* %51 to <8 x float>*
  %53 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 104
  %54 = bitcast float* %53 to <8 x float>*
  %55 = sext i32 %27 to i64
  %56 = sext i32 %24 to i64
  %57 = bitcast [14 x <8 x float>]* %3 to i8*
  %58 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0
  %59 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 8
  %60 = bitcast float* %59 to <8 x float>*
  %61 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 16
  %62 = bitcast float* %61 to <8 x float>*
  %63 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 24
  %64 = bitcast float* %63 to <8 x float>*
  %65 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 32
  %66 = bitcast float* %65 to <8 x float>*
  %67 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 40
  %68 = bitcast float* %67 to <8 x float>*
  %69 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 48
  %70 = bitcast float* %69 to <8 x float>*
  %71 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 56
  %72 = bitcast float* %71 to <8 x float>*
  %73 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 64
  %74 = bitcast float* %73 to <8 x float>*
  %75 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 72
  %76 = bitcast float* %75 to <8 x float>*
  %77 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 80
  %78 = bitcast float* %77 to <8 x float>*
  %79 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 88
  %80 = bitcast float* %79 to <8 x float>*
  %81 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 96
  %82 = bitcast float* %81 to <8 x float>*
  %83 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 104
  %84 = bitcast float* %83 to <8 x float>*
  %85 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 112
  %86 = bitcast float* %85 to <8 x float>*
  %87 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 120
  %88 = bitcast float* %87 to <8 x float>*
  %89 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 128
  %90 = bitcast float* %89 to <8 x float>*
  %91 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 136
  %92 = bitcast float* %91 to <8 x float>*
  %93 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 144
  %94 = bitcast float* %93 to <8 x float>*
  %95 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 152
  %96 = bitcast float* %95 to <8 x float>*
  %97 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 160
  %98 = bitcast float* %97 to <8 x float>*
  %99 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 168
  %100 = bitcast float* %99 to <8 x float>*
  %101 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 176
  %102 = bitcast float* %101 to <8 x float>*
  %103 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 184
  %104 = bitcast float* %103 to <8 x float>*
  %105 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 192
  %106 = bitcast float* %105 to <8 x float>*
  %107 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 200
  %108 = bitcast float* %107 to <8 x float>*
  %109 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 208
  %110 = bitcast float* %109 to <8 x float>*
  %111 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 216
  %112 = bitcast float* %111 to <8 x float>*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.lr.ph, %for_begin19.preheader
  %indvars.iv167 = phi i64 [ %55, %for_begin1.preheader.lr.ph ], [ %indvars.iv.next168, %for_begin19.preheader ]
  %113 = trunc i64 %indvars.iv167 to i32
  %114 = sdiv i32 %113, 28
  %115 = mul i32 %114, 28
  %.decomposed = sub i32 %113, %115
  %116 = mul nsw i32 %.decomposed, 912
  %117 = mul nsw i32 %114, 9216
  %118 = sext i32 %117 to i64
  %119 = sext i32 %116 to i64
  br label %for_body2

for_end:                                          ; preds = %for_begin19.preheader, %entry
  ret i32 0

for_begin19.preheader:                            ; preds = %for_begin16.preheader
  %120 = mul nsw i64 %indvars.iv167, 224
  %121 = shl nsw i32 %114, 3
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds float, float* %16, i64 %122
  %124 = bitcast float* %123 to <8 x float>*
  %125 = load <8 x float>, <8 x float>* %124, align 32, !tbaa !1209
  %126 = load <8 x float>, <8 x float>* %58, align 16, !tbaa !1212
  %127 = fadd <8 x float> %125, %126
  %128 = fcmp ogt <8 x float> %127, zeroinitializer
  %129 = select <8 x i1> %128, <8 x float> %127, <8 x float> zeroinitializer
  %130 = getelementptr inbounds float, float* %13, i64 %120
  %131 = bitcast float* %130 to <8 x float>*
  store <8 x float> %129, <8 x float>* %131, align 32, !tbaa !1215
  %132 = load <8 x float>, <8 x float>* %60, align 16, !tbaa !1212
  %133 = fadd <8 x float> %125, %132
  %134 = fcmp ogt <8 x float> %133, zeroinitializer
  %135 = select <8 x i1> %134, <8 x float> %133, <8 x float> zeroinitializer
  %136 = mul i64 %indvars.iv167, 962072674304
  %sext = ashr exact i64 %136, 32
  %137 = or i64 %sext, 8
  %138 = getelementptr inbounds float, float* %13, i64 %137
  %139 = bitcast float* %138 to <8 x float>*
  store <8 x float> %135, <8 x float>* %139, align 32, !tbaa !1215
  %140 = load <8 x float>, <8 x float>* %62, align 16, !tbaa !1212
  %141 = fadd <8 x float> %125, %140
  %142 = fcmp ogt <8 x float> %141, zeroinitializer
  %143 = select <8 x i1> %142, <8 x float> %141, <8 x float> zeroinitializer
  %144 = mul i64 %indvars.iv167, 962072674304
  %sext169 = ashr exact i64 %144, 32
  %145 = or i64 %sext169, 16
  %146 = getelementptr inbounds float, float* %13, i64 %145
  %147 = bitcast float* %146 to <8 x float>*
  store <8 x float> %143, <8 x float>* %147, align 32, !tbaa !1215
  %148 = load <8 x float>, <8 x float>* %64, align 16, !tbaa !1212
  %149 = fadd <8 x float> %125, %148
  %150 = fcmp ogt <8 x float> %149, zeroinitializer
  %151 = select <8 x i1> %150, <8 x float> %149, <8 x float> zeroinitializer
  %152 = mul i64 %indvars.iv167, 962072674304
  %sext170 = ashr exact i64 %152, 32
  %153 = or i64 %sext170, 24
  %154 = getelementptr inbounds float, float* %13, i64 %153
  %155 = bitcast float* %154 to <8 x float>*
  store <8 x float> %151, <8 x float>* %155, align 32, !tbaa !1215
  %156 = load <8 x float>, <8 x float>* %66, align 16, !tbaa !1212
  %157 = fadd <8 x float> %125, %156
  %158 = fcmp ogt <8 x float> %157, zeroinitializer
  %159 = select <8 x i1> %158, <8 x float> %157, <8 x float> zeroinitializer
  %160 = mul i64 %indvars.iv167, 962072674304
  %sext171 = add i64 %160, 137438953472
  %161 = ashr exact i64 %sext171, 32
  %162 = getelementptr inbounds float, float* %13, i64 %161
  %163 = bitcast float* %162 to <8 x float>*
  store <8 x float> %159, <8 x float>* %163, align 32, !tbaa !1215
  %164 = load <8 x float>, <8 x float>* %68, align 16, !tbaa !1212
  %165 = fadd <8 x float> %125, %164
  %166 = fcmp ogt <8 x float> %165, zeroinitializer
  %167 = select <8 x i1> %166, <8 x float> %165, <8 x float> zeroinitializer
  %168 = mul i64 %indvars.iv167, 962072674304
  %sext172 = add i64 %168, 171798691840
  %169 = ashr exact i64 %sext172, 32
  %170 = getelementptr inbounds float, float* %13, i64 %169
  %171 = bitcast float* %170 to <8 x float>*
  store <8 x float> %167, <8 x float>* %171, align 32, !tbaa !1215
  %172 = load <8 x float>, <8 x float>* %70, align 16, !tbaa !1212
  %173 = fadd <8 x float> %125, %172
  %174 = fcmp ogt <8 x float> %173, zeroinitializer
  %175 = select <8 x i1> %174, <8 x float> %173, <8 x float> zeroinitializer
  %176 = mul i64 %indvars.iv167, 962072674304
  %sext173 = add i64 %176, 206158430208
  %177 = ashr exact i64 %sext173, 32
  %178 = getelementptr inbounds float, float* %13, i64 %177
  %179 = bitcast float* %178 to <8 x float>*
  store <8 x float> %175, <8 x float>* %179, align 32, !tbaa !1215
  %180 = load <8 x float>, <8 x float>* %72, align 16, !tbaa !1212
  %181 = fadd <8 x float> %125, %180
  %182 = fcmp ogt <8 x float> %181, zeroinitializer
  %183 = select <8 x i1> %182, <8 x float> %181, <8 x float> zeroinitializer
  %184 = mul i64 %indvars.iv167, 962072674304
  %sext174 = add i64 %184, 240518168576
  %185 = ashr exact i64 %sext174, 32
  %186 = getelementptr inbounds float, float* %13, i64 %185
  %187 = bitcast float* %186 to <8 x float>*
  store <8 x float> %183, <8 x float>* %187, align 32, !tbaa !1215
  %188 = load <8 x float>, <8 x float>* %74, align 16, !tbaa !1212
  %189 = fadd <8 x float> %125, %188
  %190 = fcmp ogt <8 x float> %189, zeroinitializer
  %191 = select <8 x i1> %190, <8 x float> %189, <8 x float> zeroinitializer
  %192 = mul i64 %indvars.iv167, 962072674304
  %sext175 = add i64 %192, 274877906944
  %193 = ashr exact i64 %sext175, 32
  %194 = getelementptr inbounds float, float* %13, i64 %193
  %195 = bitcast float* %194 to <8 x float>*
  store <8 x float> %191, <8 x float>* %195, align 32, !tbaa !1215
  %196 = load <8 x float>, <8 x float>* %76, align 16, !tbaa !1212
  %197 = fadd <8 x float> %125, %196
  %198 = fcmp ogt <8 x float> %197, zeroinitializer
  %199 = select <8 x i1> %198, <8 x float> %197, <8 x float> zeroinitializer
  %200 = mul i64 %indvars.iv167, 962072674304
  %sext176 = add i64 %200, 309237645312
  %201 = ashr exact i64 %sext176, 32
  %202 = getelementptr inbounds float, float* %13, i64 %201
  %203 = bitcast float* %202 to <8 x float>*
  store <8 x float> %199, <8 x float>* %203, align 32, !tbaa !1215
  %204 = load <8 x float>, <8 x float>* %78, align 16, !tbaa !1212
  %205 = fadd <8 x float> %125, %204
  %206 = fcmp ogt <8 x float> %205, zeroinitializer
  %207 = select <8 x i1> %206, <8 x float> %205, <8 x float> zeroinitializer
  %208 = mul i64 %indvars.iv167, 962072674304
  %sext177 = add i64 %208, 343597383680
  %209 = ashr exact i64 %sext177, 32
  %210 = getelementptr inbounds float, float* %13, i64 %209
  %211 = bitcast float* %210 to <8 x float>*
  store <8 x float> %207, <8 x float>* %211, align 32, !tbaa !1215
  %212 = load <8 x float>, <8 x float>* %80, align 16, !tbaa !1212
  %213 = fadd <8 x float> %125, %212
  %214 = fcmp ogt <8 x float> %213, zeroinitializer
  %215 = select <8 x i1> %214, <8 x float> %213, <8 x float> zeroinitializer
  %216 = mul i64 %indvars.iv167, 962072674304
  %sext178 = add i64 %216, 377957122048
  %217 = ashr exact i64 %sext178, 32
  %218 = getelementptr inbounds float, float* %13, i64 %217
  %219 = bitcast float* %218 to <8 x float>*
  store <8 x float> %215, <8 x float>* %219, align 32, !tbaa !1215
  %220 = load <8 x float>, <8 x float>* %82, align 16, !tbaa !1212
  %221 = fadd <8 x float> %125, %220
  %222 = fcmp ogt <8 x float> %221, zeroinitializer
  %223 = select <8 x i1> %222, <8 x float> %221, <8 x float> zeroinitializer
  %224 = mul i64 %indvars.iv167, 962072674304
  %sext179 = add i64 %224, 412316860416
  %225 = ashr exact i64 %sext179, 32
  %226 = getelementptr inbounds float, float* %13, i64 %225
  %227 = bitcast float* %226 to <8 x float>*
  store <8 x float> %223, <8 x float>* %227, align 32, !tbaa !1215
  %228 = load <8 x float>, <8 x float>* %84, align 16, !tbaa !1212
  %229 = fadd <8 x float> %125, %228
  %230 = fcmp ogt <8 x float> %229, zeroinitializer
  %231 = select <8 x i1> %230, <8 x float> %229, <8 x float> zeroinitializer
  %232 = mul i64 %indvars.iv167, 962072674304
  %sext180 = add i64 %232, 446676598784
  %233 = ashr exact i64 %sext180, 32
  %234 = getelementptr inbounds float, float* %13, i64 %233
  %235 = bitcast float* %234 to <8 x float>*
  store <8 x float> %231, <8 x float>* %235, align 32, !tbaa !1215
  %236 = load <8 x float>, <8 x float>* %86, align 16, !tbaa !1212
  %237 = fadd <8 x float> %125, %236
  %238 = fcmp ogt <8 x float> %237, zeroinitializer
  %239 = select <8 x i1> %238, <8 x float> %237, <8 x float> zeroinitializer
  %240 = mul i64 %indvars.iv167, 962072674304
  %sext181 = add i64 %240, 481036337152
  %241 = ashr exact i64 %sext181, 32
  %242 = getelementptr inbounds float, float* %13, i64 %241
  %243 = bitcast float* %242 to <8 x float>*
  store <8 x float> %239, <8 x float>* %243, align 32, !tbaa !1215
  %244 = load <8 x float>, <8 x float>* %88, align 16, !tbaa !1212
  %245 = fadd <8 x float> %125, %244
  %246 = fcmp ogt <8 x float> %245, zeroinitializer
  %247 = select <8 x i1> %246, <8 x float> %245, <8 x float> zeroinitializer
  %248 = mul i64 %indvars.iv167, 962072674304
  %sext182 = add i64 %248, 515396075520
  %249 = ashr exact i64 %sext182, 32
  %250 = getelementptr inbounds float, float* %13, i64 %249
  %251 = bitcast float* %250 to <8 x float>*
  store <8 x float> %247, <8 x float>* %251, align 32, !tbaa !1215
  %252 = load <8 x float>, <8 x float>* %90, align 16, !tbaa !1212
  %253 = fadd <8 x float> %125, %252
  %254 = fcmp ogt <8 x float> %253, zeroinitializer
  %255 = select <8 x i1> %254, <8 x float> %253, <8 x float> zeroinitializer
  %256 = mul i64 %indvars.iv167, 962072674304
  %sext183 = add i64 %256, 549755813888
  %257 = ashr exact i64 %sext183, 32
  %258 = getelementptr inbounds float, float* %13, i64 %257
  %259 = bitcast float* %258 to <8 x float>*
  store <8 x float> %255, <8 x float>* %259, align 32, !tbaa !1215
  %260 = load <8 x float>, <8 x float>* %92, align 16, !tbaa !1212
  %261 = fadd <8 x float> %125, %260
  %262 = fcmp ogt <8 x float> %261, zeroinitializer
  %263 = select <8 x i1> %262, <8 x float> %261, <8 x float> zeroinitializer
  %264 = mul i64 %indvars.iv167, 962072674304
  %sext184 = add i64 %264, 584115552256
  %265 = ashr exact i64 %sext184, 32
  %266 = getelementptr inbounds float, float* %13, i64 %265
  %267 = bitcast float* %266 to <8 x float>*
  store <8 x float> %263, <8 x float>* %267, align 32, !tbaa !1215
  %268 = load <8 x float>, <8 x float>* %94, align 16, !tbaa !1212
  %269 = fadd <8 x float> %125, %268
  %270 = fcmp ogt <8 x float> %269, zeroinitializer
  %271 = select <8 x i1> %270, <8 x float> %269, <8 x float> zeroinitializer
  %272 = mul i64 %indvars.iv167, 962072674304
  %sext185 = add i64 %272, 618475290624
  %273 = ashr exact i64 %sext185, 32
  %274 = getelementptr inbounds float, float* %13, i64 %273
  %275 = bitcast float* %274 to <8 x float>*
  store <8 x float> %271, <8 x float>* %275, align 32, !tbaa !1215
  %276 = load <8 x float>, <8 x float>* %96, align 16, !tbaa !1212
  %277 = fadd <8 x float> %125, %276
  %278 = fcmp ogt <8 x float> %277, zeroinitializer
  %279 = select <8 x i1> %278, <8 x float> %277, <8 x float> zeroinitializer
  %280 = mul i64 %indvars.iv167, 962072674304
  %sext186 = add i64 %280, 652835028992
  %281 = ashr exact i64 %sext186, 32
  %282 = getelementptr inbounds float, float* %13, i64 %281
  %283 = bitcast float* %282 to <8 x float>*
  store <8 x float> %279, <8 x float>* %283, align 32, !tbaa !1215
  %284 = load <8 x float>, <8 x float>* %98, align 16, !tbaa !1212
  %285 = fadd <8 x float> %125, %284
  %286 = fcmp ogt <8 x float> %285, zeroinitializer
  %287 = select <8 x i1> %286, <8 x float> %285, <8 x float> zeroinitializer
  %288 = mul i64 %indvars.iv167, 962072674304
  %sext187 = add i64 %288, 687194767360
  %289 = ashr exact i64 %sext187, 32
  %290 = getelementptr inbounds float, float* %13, i64 %289
  %291 = bitcast float* %290 to <8 x float>*
  store <8 x float> %287, <8 x float>* %291, align 32, !tbaa !1215
  %292 = load <8 x float>, <8 x float>* %100, align 16, !tbaa !1212
  %293 = fadd <8 x float> %125, %292
  %294 = fcmp ogt <8 x float> %293, zeroinitializer
  %295 = select <8 x i1> %294, <8 x float> %293, <8 x float> zeroinitializer
  %296 = mul i64 %indvars.iv167, 962072674304
  %sext188 = add i64 %296, 721554505728
  %297 = ashr exact i64 %sext188, 32
  %298 = getelementptr inbounds float, float* %13, i64 %297
  %299 = bitcast float* %298 to <8 x float>*
  store <8 x float> %295, <8 x float>* %299, align 32, !tbaa !1215
  %300 = load <8 x float>, <8 x float>* %102, align 16, !tbaa !1212
  %301 = fadd <8 x float> %125, %300
  %302 = fcmp ogt <8 x float> %301, zeroinitializer
  %303 = select <8 x i1> %302, <8 x float> %301, <8 x float> zeroinitializer
  %304 = mul i64 %indvars.iv167, 962072674304
  %sext189 = add i64 %304, 755914244096
  %305 = ashr exact i64 %sext189, 32
  %306 = getelementptr inbounds float, float* %13, i64 %305
  %307 = bitcast float* %306 to <8 x float>*
  store <8 x float> %303, <8 x float>* %307, align 32, !tbaa !1215
  %308 = load <8 x float>, <8 x float>* %104, align 16, !tbaa !1212
  %309 = fadd <8 x float> %125, %308
  %310 = fcmp ogt <8 x float> %309, zeroinitializer
  %311 = select <8 x i1> %310, <8 x float> %309, <8 x float> zeroinitializer
  %312 = mul i64 %indvars.iv167, 962072674304
  %sext190 = add i64 %312, 790273982464
  %313 = ashr exact i64 %sext190, 32
  %314 = getelementptr inbounds float, float* %13, i64 %313
  %315 = bitcast float* %314 to <8 x float>*
  store <8 x float> %311, <8 x float>* %315, align 32, !tbaa !1215
  %316 = load <8 x float>, <8 x float>* %106, align 16, !tbaa !1212
  %317 = fadd <8 x float> %125, %316
  %318 = fcmp ogt <8 x float> %317, zeroinitializer
  %319 = select <8 x i1> %318, <8 x float> %317, <8 x float> zeroinitializer
  %320 = mul i64 %indvars.iv167, 962072674304
  %sext191 = add i64 %320, 824633720832
  %321 = ashr exact i64 %sext191, 32
  %322 = getelementptr inbounds float, float* %13, i64 %321
  %323 = bitcast float* %322 to <8 x float>*
  store <8 x float> %319, <8 x float>* %323, align 32, !tbaa !1215
  %324 = load <8 x float>, <8 x float>* %108, align 16, !tbaa !1212
  %325 = fadd <8 x float> %125, %324
  %326 = fcmp ogt <8 x float> %325, zeroinitializer
  %327 = select <8 x i1> %326, <8 x float> %325, <8 x float> zeroinitializer
  %328 = mul i64 %indvars.iv167, 962072674304
  %sext192 = add i64 %328, 858993459200
  %329 = ashr exact i64 %sext192, 32
  %330 = getelementptr inbounds float, float* %13, i64 %329
  %331 = bitcast float* %330 to <8 x float>*
  store <8 x float> %327, <8 x float>* %331, align 32, !tbaa !1215
  %332 = load <8 x float>, <8 x float>* %110, align 16, !tbaa !1212
  %333 = fadd <8 x float> %125, %332
  %334 = fcmp ogt <8 x float> %333, zeroinitializer
  %335 = select <8 x i1> %334, <8 x float> %333, <8 x float> zeroinitializer
  %336 = mul i64 %indvars.iv167, 962072674304
  %sext193 = add i64 %336, 893353197568
  %337 = ashr exact i64 %sext193, 32
  %338 = getelementptr inbounds float, float* %13, i64 %337
  %339 = bitcast float* %338 to <8 x float>*
  store <8 x float> %335, <8 x float>* %339, align 32, !tbaa !1215
  %340 = load <8 x float>, <8 x float>* %112, align 16, !tbaa !1212
  %341 = fadd <8 x float> %125, %340
  %342 = fcmp ogt <8 x float> %341, zeroinitializer
  %343 = select <8 x i1> %342, <8 x float> %341, <8 x float> zeroinitializer
  %344 = mul i64 %indvars.iv167, 962072674304
  %sext194 = add i64 %344, 927712935936
  %345 = ashr exact i64 %sext194, 32
  %346 = getelementptr inbounds float, float* %13, i64 %345
  %347 = bitcast float* %346 to <8 x float>*
  store <8 x float> %343, <8 x float>* %347, align 32, !tbaa !1215
  %indvars.iv.next168 = add nsw i64 %indvars.iv167, 1
  %348 = icmp slt i64 %indvars.iv.next168, %56
  br i1 %348, label %for_begin1.preheader, label %for_end, !prof !5

for_body2:                                        ; preds = %for_begin16.preheader, %for_begin1.preheader
  %indvar = phi i64 [ 0, %for_begin1.preheader ], [ %indvar.next, %for_begin16.preheader ]
  %349 = mul nuw nsw i64 %indvar, 14
  %scevgep = getelementptr [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 %349
  %scevgep159 = bitcast <8 x float>* %scevgep to i8*
  %350 = mul nuw nsw i64 %indvar, 224
  %351 = add nsw i64 %350, %119
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %57, i8 0, i64 448, i1 false)
  br label %for_begin7.preheader

for_begin16.preheader:                            ; preds = %for_end9
  store <8 x float> %594, <8 x float>* %.sub, align 32, !tbaa !1218
  store <8 x float> %600, <8 x float>* %30, align 32, !tbaa !1229
  store <8 x float> %606, <8 x float>* %32, align 32, !tbaa !1231
  store <8 x float> %612, <8 x float>* %34, align 32, !tbaa !1234
  store <8 x float> %618, <8 x float>* %36, align 32, !tbaa !1236
  store <8 x float> %624, <8 x float>* %38, align 32, !tbaa !1240
  store <8 x float> %630, <8 x float>* %40, align 32, !tbaa !1242
  store <8 x float> %636, <8 x float>* %42, align 32, !tbaa !1245
  store <8 x float> %642, <8 x float>* %44, align 32, !tbaa !1247
  store <8 x float> %648, <8 x float>* %46, align 32, !tbaa !1252
  store <8 x float> %654, <8 x float>* %48, align 32, !tbaa !1254
  store <8 x float> %660, <8 x float>* %50, align 32, !tbaa !1257
  store <8 x float> %666, <8 x float>* %52, align 32, !tbaa !1259
  store <8 x float> %672, <8 x float>* %54, align 32, !tbaa !1263
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep159, i8* nonnull align 32 %4, i64 448, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond160 = icmp eq i64 %indvar.next, 2
  br i1 %exitcond160, label %for_begin19.preheader, label %for_body2, !prof !50

for_begin7.preheader:                             ; preds = %for_end9, %for_body2
  %indvars.iv153 = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next154, %for_end9 ]
  %.lcssa53.lcssa.lcssa133 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %672, %for_end9 ]
  %.lcssa51.lcssa.lcssa131 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %666, %for_end9 ]
  %.lcssa49.lcssa.lcssa129 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %660, %for_end9 ]
  %.lcssa47.lcssa.lcssa127 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %654, %for_end9 ]
  %.lcssa45.lcssa.lcssa125 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %648, %for_end9 ]
  %.lcssa43.lcssa.lcssa123 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %642, %for_end9 ]
  %.lcssa41.lcssa.lcssa121 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %636, %for_end9 ]
  %.lcssa39.lcssa.lcssa119 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %630, %for_end9 ]
  %.lcssa37.lcssa.lcssa117 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %624, %for_end9 ]
  %.lcssa35.lcssa.lcssa115 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %618, %for_end9 ]
  %.lcssa33.lcssa.lcssa114 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %612, %for_end9 ]
  %.lcssa31.lcssa.lcssa112 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %606, %for_end9 ]
  %.lcssa29.lcssa.lcssa110 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %600, %for_end9 ]
  %.lcssa.lcssa.lcssa108 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %594, %for_end9 ]
  %352 = mul nuw nsw i64 %indvars.iv153, 25992
  %353 = add nsw i64 %351, %352
  %354 = mul nuw nsw i64 %indvars.iv153, 576
  %355 = add nsw i64 %354, %118
  br label %for_begin10.preheader

for_begin10.preheader:                            ; preds = %for_end15.2, %for_begin7.preheader
  %indvars.iv150 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next151, %for_end15.2 ]
  %.lcssa53.lcssa106 = phi <8 x float> [ %.lcssa53.lcssa.lcssa133, %for_begin7.preheader ], [ %672, %for_end15.2 ]
  %.lcssa51.lcssa104 = phi <8 x float> [ %.lcssa51.lcssa.lcssa131, %for_begin7.preheader ], [ %666, %for_end15.2 ]
  %.lcssa49.lcssa102 = phi <8 x float> [ %.lcssa49.lcssa.lcssa129, %for_begin7.preheader ], [ %660, %for_end15.2 ]
  %.lcssa47.lcssa100 = phi <8 x float> [ %.lcssa47.lcssa.lcssa127, %for_begin7.preheader ], [ %654, %for_end15.2 ]
  %.lcssa45.lcssa98 = phi <8 x float> [ %.lcssa45.lcssa.lcssa125, %for_begin7.preheader ], [ %648, %for_end15.2 ]
  %.lcssa43.lcssa96 = phi <8 x float> [ %.lcssa43.lcssa.lcssa123, %for_begin7.preheader ], [ %642, %for_end15.2 ]
  %.lcssa41.lcssa94 = phi <8 x float> [ %.lcssa41.lcssa.lcssa121, %for_begin7.preheader ], [ %636, %for_end15.2 ]
  %.lcssa39.lcssa92 = phi <8 x float> [ %.lcssa39.lcssa.lcssa119, %for_begin7.preheader ], [ %630, %for_end15.2 ]
  %.lcssa37.lcssa90 = phi <8 x float> [ %.lcssa37.lcssa.lcssa117, %for_begin7.preheader ], [ %624, %for_end15.2 ]
  %.lcssa35.lcssa88 = phi <8 x float> [ %.lcssa35.lcssa.lcssa115, %for_begin7.preheader ], [ %618, %for_end15.2 ]
  %.lcssa33.lcssa86 = phi <8 x float> [ %.lcssa33.lcssa.lcssa114, %for_begin7.preheader ], [ %612, %for_end15.2 ]
  %.lcssa31.lcssa85 = phi <8 x float> [ %.lcssa31.lcssa.lcssa112, %for_begin7.preheader ], [ %606, %for_end15.2 ]
  %.lcssa29.lcssa83 = phi <8 x float> [ %.lcssa29.lcssa.lcssa110, %for_begin7.preheader ], [ %600, %for_end15.2 ]
  %.lcssa.lcssa81 = phi <8 x float> [ %.lcssa.lcssa.lcssa108, %for_begin7.preheader ], [ %594, %for_end15.2 ]
  %356 = mul nuw nsw i64 %indvars.iv150, 456
  %357 = add nsw i64 %353, %356
  %358 = mul nuw nsw i64 %indvars.iv150, 192
  %359 = add nsw i64 %355, %358
  br label %for_body14

for_end9:                                         ; preds = %for_end15.2
  %indvars.iv.next154 = add nuw nsw i64 %indvars.iv153, 1
  %exitcond155 = icmp eq i64 %indvars.iv.next154, 16
  br i1 %exitcond155, label %for_begin16.preheader, label %for_begin7.preheader, !prof !50

for_body14:                                       ; preds = %for_body14, %for_begin10.preheader
  %indvars.iv = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next, %for_body14 ]
  %360 = phi <8 x float> [ %.lcssa53.lcssa106, %for_begin10.preheader ], [ %462, %for_body14 ]
  %361 = phi <8 x float> [ %.lcssa51.lcssa104, %for_begin10.preheader ], [ %456, %for_body14 ]
  %362 = phi <8 x float> [ %.lcssa49.lcssa102, %for_begin10.preheader ], [ %450, %for_body14 ]
  %363 = phi <8 x float> [ %.lcssa47.lcssa100, %for_begin10.preheader ], [ %444, %for_body14 ]
  %364 = phi <8 x float> [ %.lcssa45.lcssa98, %for_begin10.preheader ], [ %438, %for_body14 ]
  %365 = phi <8 x float> [ %.lcssa43.lcssa96, %for_begin10.preheader ], [ %432, %for_body14 ]
  %366 = phi <8 x float> [ %.lcssa41.lcssa94, %for_begin10.preheader ], [ %426, %for_body14 ]
  %367 = phi <8 x float> [ %.lcssa39.lcssa92, %for_begin10.preheader ], [ %420, %for_body14 ]
  %368 = phi <8 x float> [ %.lcssa37.lcssa90, %for_begin10.preheader ], [ %414, %for_body14 ]
  %369 = phi <8 x float> [ %.lcssa35.lcssa88, %for_begin10.preheader ], [ %408, %for_body14 ]
  %370 = phi <8 x float> [ %.lcssa33.lcssa86, %for_begin10.preheader ], [ %402, %for_body14 ]
  %371 = phi <8 x float> [ %.lcssa31.lcssa85, %for_begin10.preheader ], [ %396, %for_body14 ]
  %372 = phi <8 x float> [ %.lcssa29.lcssa83, %for_begin10.preheader ], [ %390, %for_body14 ]
  %373 = phi <8 x float> [ %.lcssa.lcssa81, %for_begin10.preheader ], [ %384, %for_body14 ]
  %374 = add nsw i64 %357, %indvars.iv
  %375 = getelementptr inbounds float, float* %7, i64 %374
  %376 = load float, float* %375, align 4, !tbaa !1206
  %377 = insertelement <8 x float> undef, float %376, i32 0
  %378 = shufflevector <8 x float> %377, <8 x float> undef, <8 x i32> zeroinitializer
  %379 = shl i64 %indvars.iv, 3
  %380 = add nsw i64 %359, %379
  %381 = getelementptr inbounds float, float* %10, i64 %380
  %382 = bitcast float* %381 to <8 x float>*
  %383 = load <8 x float>, <8 x float>* %382, align 32, !tbaa !1265
  %384 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %378, <8 x float> %383, <8 x float> %373)
  %385 = add nsw i64 %374, 16
  %386 = getelementptr inbounds float, float* %7, i64 %385
  %387 = load float, float* %386, align 4, !tbaa !1206
  %388 = insertelement <8 x float> undef, float %387, i32 0
  %389 = shufflevector <8 x float> %388, <8 x float> undef, <8 x i32> zeroinitializer
  %390 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %389, <8 x float> %383, <8 x float> %372)
  %391 = add nsw i64 %374, 32
  %392 = getelementptr inbounds float, float* %7, i64 %391
  %393 = load float, float* %392, align 4, !tbaa !1206
  %394 = insertelement <8 x float> undef, float %393, i32 0
  %395 = shufflevector <8 x float> %394, <8 x float> undef, <8 x i32> zeroinitializer
  %396 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %395, <8 x float> %383, <8 x float> %371)
  %397 = add nsw i64 %374, 48
  %398 = getelementptr inbounds float, float* %7, i64 %397
  %399 = load float, float* %398, align 4, !tbaa !1206
  %400 = insertelement <8 x float> undef, float %399, i32 0
  %401 = shufflevector <8 x float> %400, <8 x float> undef, <8 x i32> zeroinitializer
  %402 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %401, <8 x float> %383, <8 x float> %370)
  %403 = add nsw i64 %374, 64
  %404 = getelementptr inbounds float, float* %7, i64 %403
  %405 = load float, float* %404, align 4, !tbaa !1206
  %406 = insertelement <8 x float> undef, float %405, i32 0
  %407 = shufflevector <8 x float> %406, <8 x float> undef, <8 x i32> zeroinitializer
  %408 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %407, <8 x float> %383, <8 x float> %369)
  %409 = add nsw i64 %374, 80
  %410 = getelementptr inbounds float, float* %7, i64 %409
  %411 = load float, float* %410, align 4, !tbaa !1206
  %412 = insertelement <8 x float> undef, float %411, i32 0
  %413 = shufflevector <8 x float> %412, <8 x float> undef, <8 x i32> zeroinitializer
  %414 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %413, <8 x float> %383, <8 x float> %368)
  %415 = add nsw i64 %374, 96
  %416 = getelementptr inbounds float, float* %7, i64 %415
  %417 = load float, float* %416, align 4, !tbaa !1206
  %418 = insertelement <8 x float> undef, float %417, i32 0
  %419 = shufflevector <8 x float> %418, <8 x float> undef, <8 x i32> zeroinitializer
  %420 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %419, <8 x float> %383, <8 x float> %367)
  %421 = add nsw i64 %374, 112
  %422 = getelementptr inbounds float, float* %7, i64 %421
  %423 = load float, float* %422, align 4, !tbaa !1206
  %424 = insertelement <8 x float> undef, float %423, i32 0
  %425 = shufflevector <8 x float> %424, <8 x float> undef, <8 x i32> zeroinitializer
  %426 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %425, <8 x float> %383, <8 x float> %366)
  %427 = add nsw i64 %374, 128
  %428 = getelementptr inbounds float, float* %7, i64 %427
  %429 = load float, float* %428, align 4, !tbaa !1206
  %430 = insertelement <8 x float> undef, float %429, i32 0
  %431 = shufflevector <8 x float> %430, <8 x float> undef, <8 x i32> zeroinitializer
  %432 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %431, <8 x float> %383, <8 x float> %365)
  %433 = add nsw i64 %374, 144
  %434 = getelementptr inbounds float, float* %7, i64 %433
  %435 = load float, float* %434, align 4, !tbaa !1206
  %436 = insertelement <8 x float> undef, float %435, i32 0
  %437 = shufflevector <8 x float> %436, <8 x float> undef, <8 x i32> zeroinitializer
  %438 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %437, <8 x float> %383, <8 x float> %364)
  %439 = add nsw i64 %374, 160
  %440 = getelementptr inbounds float, float* %7, i64 %439
  %441 = load float, float* %440, align 4, !tbaa !1206
  %442 = insertelement <8 x float> undef, float %441, i32 0
  %443 = shufflevector <8 x float> %442, <8 x float> undef, <8 x i32> zeroinitializer
  %444 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %443, <8 x float> %383, <8 x float> %363)
  %445 = add nsw i64 %374, 176
  %446 = getelementptr inbounds float, float* %7, i64 %445
  %447 = load float, float* %446, align 4, !tbaa !1206
  %448 = insertelement <8 x float> undef, float %447, i32 0
  %449 = shufflevector <8 x float> %448, <8 x float> undef, <8 x i32> zeroinitializer
  %450 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %449, <8 x float> %383, <8 x float> %362)
  %451 = add nsw i64 %374, 192
  %452 = getelementptr inbounds float, float* %7, i64 %451
  %453 = load float, float* %452, align 4, !tbaa !1206
  %454 = insertelement <8 x float> undef, float %453, i32 0
  %455 = shufflevector <8 x float> %454, <8 x float> undef, <8 x i32> zeroinitializer
  %456 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %455, <8 x float> %383, <8 x float> %361)
  %457 = add nsw i64 %374, 208
  %458 = getelementptr inbounds float, float* %7, i64 %457
  %459 = load float, float* %458, align 4, !tbaa !1206
  %460 = insertelement <8 x float> undef, float %459, i32 0
  %461 = shufflevector <8 x float> %460, <8 x float> undef, <8 x i32> zeroinitializer
  %462 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %461, <8 x float> %383, <8 x float> %360)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 8
  br i1 %exitcond, label %for_end15, label %for_body14, !prof !50

for_end15:                                        ; preds = %for_body14
  %463 = add nsw i64 %357, 8
  %464 = add nsw i64 %359, 64
  br label %for_body14.1

for_body14.1:                                     ; preds = %for_body14.1, %for_end15
  %indvars.iv.1 = phi i64 [ 0, %for_end15 ], [ %indvars.iv.next.1, %for_body14.1 ]
  %465 = phi <8 x float> [ %462, %for_end15 ], [ %567, %for_body14.1 ]
  %466 = phi <8 x float> [ %456, %for_end15 ], [ %561, %for_body14.1 ]
  %467 = phi <8 x float> [ %450, %for_end15 ], [ %555, %for_body14.1 ]
  %468 = phi <8 x float> [ %444, %for_end15 ], [ %549, %for_body14.1 ]
  %469 = phi <8 x float> [ %438, %for_end15 ], [ %543, %for_body14.1 ]
  %470 = phi <8 x float> [ %432, %for_end15 ], [ %537, %for_body14.1 ]
  %471 = phi <8 x float> [ %426, %for_end15 ], [ %531, %for_body14.1 ]
  %472 = phi <8 x float> [ %420, %for_end15 ], [ %525, %for_body14.1 ]
  %473 = phi <8 x float> [ %414, %for_end15 ], [ %519, %for_body14.1 ]
  %474 = phi <8 x float> [ %408, %for_end15 ], [ %513, %for_body14.1 ]
  %475 = phi <8 x float> [ %402, %for_end15 ], [ %507, %for_body14.1 ]
  %476 = phi <8 x float> [ %396, %for_end15 ], [ %501, %for_body14.1 ]
  %477 = phi <8 x float> [ %390, %for_end15 ], [ %495, %for_body14.1 ]
  %478 = phi <8 x float> [ %384, %for_end15 ], [ %489, %for_body14.1 ]
  %479 = add nsw i64 %463, %indvars.iv.1
  %480 = getelementptr inbounds float, float* %7, i64 %479
  %481 = load float, float* %480, align 4, !tbaa !1206
  %482 = insertelement <8 x float> undef, float %481, i32 0
  %483 = shufflevector <8 x float> %482, <8 x float> undef, <8 x i32> zeroinitializer
  %484 = shl i64 %indvars.iv.1, 3
  %485 = add nsw i64 %464, %484
  %486 = getelementptr inbounds float, float* %10, i64 %485
  %487 = bitcast float* %486 to <8 x float>*
  %488 = load <8 x float>, <8 x float>* %487, align 32, !tbaa !1265
  %489 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %483, <8 x float> %488, <8 x float> %478)
  %490 = add nsw i64 %479, 16
  %491 = getelementptr inbounds float, float* %7, i64 %490
  %492 = load float, float* %491, align 4, !tbaa !1206
  %493 = insertelement <8 x float> undef, float %492, i32 0
  %494 = shufflevector <8 x float> %493, <8 x float> undef, <8 x i32> zeroinitializer
  %495 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %494, <8 x float> %488, <8 x float> %477)
  %496 = add nsw i64 %479, 32
  %497 = getelementptr inbounds float, float* %7, i64 %496
  %498 = load float, float* %497, align 4, !tbaa !1206
  %499 = insertelement <8 x float> undef, float %498, i32 0
  %500 = shufflevector <8 x float> %499, <8 x float> undef, <8 x i32> zeroinitializer
  %501 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %500, <8 x float> %488, <8 x float> %476)
  %502 = add nsw i64 %479, 48
  %503 = getelementptr inbounds float, float* %7, i64 %502
  %504 = load float, float* %503, align 4, !tbaa !1206
  %505 = insertelement <8 x float> undef, float %504, i32 0
  %506 = shufflevector <8 x float> %505, <8 x float> undef, <8 x i32> zeroinitializer
  %507 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %506, <8 x float> %488, <8 x float> %475)
  %508 = add nsw i64 %479, 64
  %509 = getelementptr inbounds float, float* %7, i64 %508
  %510 = load float, float* %509, align 4, !tbaa !1206
  %511 = insertelement <8 x float> undef, float %510, i32 0
  %512 = shufflevector <8 x float> %511, <8 x float> undef, <8 x i32> zeroinitializer
  %513 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %512, <8 x float> %488, <8 x float> %474)
  %514 = add nsw i64 %479, 80
  %515 = getelementptr inbounds float, float* %7, i64 %514
  %516 = load float, float* %515, align 4, !tbaa !1206
  %517 = insertelement <8 x float> undef, float %516, i32 0
  %518 = shufflevector <8 x float> %517, <8 x float> undef, <8 x i32> zeroinitializer
  %519 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %518, <8 x float> %488, <8 x float> %473)
  %520 = add nsw i64 %479, 96
  %521 = getelementptr inbounds float, float* %7, i64 %520
  %522 = load float, float* %521, align 4, !tbaa !1206
  %523 = insertelement <8 x float> undef, float %522, i32 0
  %524 = shufflevector <8 x float> %523, <8 x float> undef, <8 x i32> zeroinitializer
  %525 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %524, <8 x float> %488, <8 x float> %472)
  %526 = add nsw i64 %479, 112
  %527 = getelementptr inbounds float, float* %7, i64 %526
  %528 = load float, float* %527, align 4, !tbaa !1206
  %529 = insertelement <8 x float> undef, float %528, i32 0
  %530 = shufflevector <8 x float> %529, <8 x float> undef, <8 x i32> zeroinitializer
  %531 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %530, <8 x float> %488, <8 x float> %471)
  %532 = add nsw i64 %479, 128
  %533 = getelementptr inbounds float, float* %7, i64 %532
  %534 = load float, float* %533, align 4, !tbaa !1206
  %535 = insertelement <8 x float> undef, float %534, i32 0
  %536 = shufflevector <8 x float> %535, <8 x float> undef, <8 x i32> zeroinitializer
  %537 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %536, <8 x float> %488, <8 x float> %470)
  %538 = add nsw i64 %479, 144
  %539 = getelementptr inbounds float, float* %7, i64 %538
  %540 = load float, float* %539, align 4, !tbaa !1206
  %541 = insertelement <8 x float> undef, float %540, i32 0
  %542 = shufflevector <8 x float> %541, <8 x float> undef, <8 x i32> zeroinitializer
  %543 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %542, <8 x float> %488, <8 x float> %469)
  %544 = add nsw i64 %479, 160
  %545 = getelementptr inbounds float, float* %7, i64 %544
  %546 = load float, float* %545, align 4, !tbaa !1206
  %547 = insertelement <8 x float> undef, float %546, i32 0
  %548 = shufflevector <8 x float> %547, <8 x float> undef, <8 x i32> zeroinitializer
  %549 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %548, <8 x float> %488, <8 x float> %468)
  %550 = add nsw i64 %479, 176
  %551 = getelementptr inbounds float, float* %7, i64 %550
  %552 = load float, float* %551, align 4, !tbaa !1206
  %553 = insertelement <8 x float> undef, float %552, i32 0
  %554 = shufflevector <8 x float> %553, <8 x float> undef, <8 x i32> zeroinitializer
  %555 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %554, <8 x float> %488, <8 x float> %467)
  %556 = add nsw i64 %479, 192
  %557 = getelementptr inbounds float, float* %7, i64 %556
  %558 = load float, float* %557, align 4, !tbaa !1206
  %559 = insertelement <8 x float> undef, float %558, i32 0
  %560 = shufflevector <8 x float> %559, <8 x float> undef, <8 x i32> zeroinitializer
  %561 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %560, <8 x float> %488, <8 x float> %466)
  %562 = add nsw i64 %479, 208
  %563 = getelementptr inbounds float, float* %7, i64 %562
  %564 = load float, float* %563, align 4, !tbaa !1206
  %565 = insertelement <8 x float> undef, float %564, i32 0
  %566 = shufflevector <8 x float> %565, <8 x float> undef, <8 x i32> zeroinitializer
  %567 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %566, <8 x float> %488, <8 x float> %465)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 8
  br i1 %exitcond.1, label %for_end15.1, label %for_body14.1, !prof !50

for_end15.1:                                      ; preds = %for_body14.1
  %568 = add nsw i64 %357, 16
  %569 = add nsw i64 %359, 128
  br label %for_body14.2

for_body14.2:                                     ; preds = %for_body14.2, %for_end15.1
  %indvars.iv.2 = phi i64 [ 0, %for_end15.1 ], [ %indvars.iv.next.2, %for_body14.2 ]
  %570 = phi <8 x float> [ %567, %for_end15.1 ], [ %672, %for_body14.2 ]
  %571 = phi <8 x float> [ %561, %for_end15.1 ], [ %666, %for_body14.2 ]
  %572 = phi <8 x float> [ %555, %for_end15.1 ], [ %660, %for_body14.2 ]
  %573 = phi <8 x float> [ %549, %for_end15.1 ], [ %654, %for_body14.2 ]
  %574 = phi <8 x float> [ %543, %for_end15.1 ], [ %648, %for_body14.2 ]
  %575 = phi <8 x float> [ %537, %for_end15.1 ], [ %642, %for_body14.2 ]
  %576 = phi <8 x float> [ %531, %for_end15.1 ], [ %636, %for_body14.2 ]
  %577 = phi <8 x float> [ %525, %for_end15.1 ], [ %630, %for_body14.2 ]
  %578 = phi <8 x float> [ %519, %for_end15.1 ], [ %624, %for_body14.2 ]
  %579 = phi <8 x float> [ %513, %for_end15.1 ], [ %618, %for_body14.2 ]
  %580 = phi <8 x float> [ %507, %for_end15.1 ], [ %612, %for_body14.2 ]
  %581 = phi <8 x float> [ %501, %for_end15.1 ], [ %606, %for_body14.2 ]
  %582 = phi <8 x float> [ %495, %for_end15.1 ], [ %600, %for_body14.2 ]
  %583 = phi <8 x float> [ %489, %for_end15.1 ], [ %594, %for_body14.2 ]
  %584 = add nsw i64 %568, %indvars.iv.2
  %585 = getelementptr inbounds float, float* %7, i64 %584
  %586 = load float, float* %585, align 4, !tbaa !1206
  %587 = insertelement <8 x float> undef, float %586, i32 0
  %588 = shufflevector <8 x float> %587, <8 x float> undef, <8 x i32> zeroinitializer
  %589 = shl i64 %indvars.iv.2, 3
  %590 = add nsw i64 %569, %589
  %591 = getelementptr inbounds float, float* %10, i64 %590
  %592 = bitcast float* %591 to <8 x float>*
  %593 = load <8 x float>, <8 x float>* %592, align 32, !tbaa !1265
  %594 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %588, <8 x float> %593, <8 x float> %583)
  %595 = add nsw i64 %584, 16
  %596 = getelementptr inbounds float, float* %7, i64 %595
  %597 = load float, float* %596, align 4, !tbaa !1206
  %598 = insertelement <8 x float> undef, float %597, i32 0
  %599 = shufflevector <8 x float> %598, <8 x float> undef, <8 x i32> zeroinitializer
  %600 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %599, <8 x float> %593, <8 x float> %582)
  %601 = add nsw i64 %584, 32
  %602 = getelementptr inbounds float, float* %7, i64 %601
  %603 = load float, float* %602, align 4, !tbaa !1206
  %604 = insertelement <8 x float> undef, float %603, i32 0
  %605 = shufflevector <8 x float> %604, <8 x float> undef, <8 x i32> zeroinitializer
  %606 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %605, <8 x float> %593, <8 x float> %581)
  %607 = add nsw i64 %584, 48
  %608 = getelementptr inbounds float, float* %7, i64 %607
  %609 = load float, float* %608, align 4, !tbaa !1206
  %610 = insertelement <8 x float> undef, float %609, i32 0
  %611 = shufflevector <8 x float> %610, <8 x float> undef, <8 x i32> zeroinitializer
  %612 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %611, <8 x float> %593, <8 x float> %580)
  %613 = add nsw i64 %584, 64
  %614 = getelementptr inbounds float, float* %7, i64 %613
  %615 = load float, float* %614, align 4, !tbaa !1206
  %616 = insertelement <8 x float> undef, float %615, i32 0
  %617 = shufflevector <8 x float> %616, <8 x float> undef, <8 x i32> zeroinitializer
  %618 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %617, <8 x float> %593, <8 x float> %579)
  %619 = add nsw i64 %584, 80
  %620 = getelementptr inbounds float, float* %7, i64 %619
  %621 = load float, float* %620, align 4, !tbaa !1206
  %622 = insertelement <8 x float> undef, float %621, i32 0
  %623 = shufflevector <8 x float> %622, <8 x float> undef, <8 x i32> zeroinitializer
  %624 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %623, <8 x float> %593, <8 x float> %578)
  %625 = add nsw i64 %584, 96
  %626 = getelementptr inbounds float, float* %7, i64 %625
  %627 = load float, float* %626, align 4, !tbaa !1206
  %628 = insertelement <8 x float> undef, float %627, i32 0
  %629 = shufflevector <8 x float> %628, <8 x float> undef, <8 x i32> zeroinitializer
  %630 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %629, <8 x float> %593, <8 x float> %577)
  %631 = add nsw i64 %584, 112
  %632 = getelementptr inbounds float, float* %7, i64 %631
  %633 = load float, float* %632, align 4, !tbaa !1206
  %634 = insertelement <8 x float> undef, float %633, i32 0
  %635 = shufflevector <8 x float> %634, <8 x float> undef, <8 x i32> zeroinitializer
  %636 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %635, <8 x float> %593, <8 x float> %576)
  %637 = add nsw i64 %584, 128
  %638 = getelementptr inbounds float, float* %7, i64 %637
  %639 = load float, float* %638, align 4, !tbaa !1206
  %640 = insertelement <8 x float> undef, float %639, i32 0
  %641 = shufflevector <8 x float> %640, <8 x float> undef, <8 x i32> zeroinitializer
  %642 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %641, <8 x float> %593, <8 x float> %575)
  %643 = add nsw i64 %584, 144
  %644 = getelementptr inbounds float, float* %7, i64 %643
  %645 = load float, float* %644, align 4, !tbaa !1206
  %646 = insertelement <8 x float> undef, float %645, i32 0
  %647 = shufflevector <8 x float> %646, <8 x float> undef, <8 x i32> zeroinitializer
  %648 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %647, <8 x float> %593, <8 x float> %574)
  %649 = add nsw i64 %584, 160
  %650 = getelementptr inbounds float, float* %7, i64 %649
  %651 = load float, float* %650, align 4, !tbaa !1206
  %652 = insertelement <8 x float> undef, float %651, i32 0
  %653 = shufflevector <8 x float> %652, <8 x float> undef, <8 x i32> zeroinitializer
  %654 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %653, <8 x float> %593, <8 x float> %573)
  %655 = add nsw i64 %584, 176
  %656 = getelementptr inbounds float, float* %7, i64 %655
  %657 = load float, float* %656, align 4, !tbaa !1206
  %658 = insertelement <8 x float> undef, float %657, i32 0
  %659 = shufflevector <8 x float> %658, <8 x float> undef, <8 x i32> zeroinitializer
  %660 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %659, <8 x float> %593, <8 x float> %572)
  %661 = add nsw i64 %584, 192
  %662 = getelementptr inbounds float, float* %7, i64 %661
  %663 = load float, float* %662, align 4, !tbaa !1206
  %664 = insertelement <8 x float> undef, float %663, i32 0
  %665 = shufflevector <8 x float> %664, <8 x float> undef, <8 x i32> zeroinitializer
  %666 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %665, <8 x float> %593, <8 x float> %571)
  %667 = add nsw i64 %584, 208
  %668 = getelementptr inbounds float, float* %7, i64 %667
  %669 = load float, float* %668, align 4, !tbaa !1206
  %670 = insertelement <8 x float> undef, float %669, i32 0
  %671 = shufflevector <8 x float> %670, <8 x float> undef, <8 x i32> zeroinitializer
  %672 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %671, <8 x float> %593, <8 x float> %570)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 8
  br i1 %exitcond.2, label %for_end15.2, label %for_body14.2, !prof !50

for_end15.2:                                      ; preds = %for_body14.2
  %indvars.iv.next151 = add nuw nsw i64 %indvars.iv150, 1
  %exitcond152 = icmp eq i64 %indvars.iv.next151, 3
  br i1 %exitcond152, label %for_end9, label %for_begin10.preheader, !prof !50
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fmuladd.v8f32(<8 x float>, <8 x float>, <8 x float>) #2

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.118, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !1268
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !1282
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !1285
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !1287
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %55 = load i64*, i64** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %61 = load i64*, i64** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %63 = load i64*, i64** %62, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %64 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %64(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.119, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %65 = getelementptr inbounds i8, i8* %1, i64 4
  %66 = bitcast i8* %65 to i32*
  %67 = load i32, i32* %66, align 4, !tbaa !1291
  switch i32 %67, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %68 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %68(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.120, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %69(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.121, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.122, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.123, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %72 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, 5
  br i1 %74, label %assert_end14, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %77 = load i16, i16* %76, align 2
  %78 = icmp eq i16 %77, 1
  %79 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, 32
  %82 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %83, 2
  %85 = and i1 %81, %84
  %86 = and i1 %78, %85
  br i1 %86, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %87(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %88 = load i64, i64* %35, align 8, !tbaa !1293
  %89 = trunc i64 %88 to i32
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %92 = getelementptr inbounds i64, i64* %35, i64 1
  %93 = load i64, i64* %92, align 8, !tbaa !1307
  %94 = trunc i64 %93 to i32
  %95 = icmp eq i32 %94, 32
  br i1 %95, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.124, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %97 = getelementptr inbounds i64, i64* %35, i64 2
  %98 = load i64, i64* %97, align 8, !tbaa !1309
  %99 = trunc i64 %98 to i32
  %100 = icmp eq i32 %99, 14
  br i1 %100, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.125, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %102 = getelementptr inbounds i64, i64* %35, i64 3
  %103 = load i64, i64* %102, align 8, !tbaa !1312
  %104 = trunc i64 %103 to i32
  %105 = icmp eq i32 %104, 14
  br i1 %105, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %106 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %106(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.126, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %107 = getelementptr inbounds i64, i64* %35, i64 4
  %108 = load i64, i64* %107, align 8, !tbaa !1314
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 8
  br i1 %110, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %111 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %111(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %112 = icmp eq i64* %37, null
  br i1 %112, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %113 = load i64, i64* %37, align 8, !tbaa !1318
  %114 = trunc i64 %113 to i32
  %115 = icmp eq i32 %114, 50176
  %116 = getelementptr inbounds i64, i64* %37, i64 1
  %117 = load i64, i64* %116, align 8, !tbaa !1332
  %118 = trunc i64 %117 to i32
  %119 = icmp eq i32 %118, 1568
  %120 = getelementptr inbounds i64, i64* %37, i64 2
  %121 = load i64, i64* %120, align 8, !tbaa !1334
  %122 = trunc i64 %121 to i32
  %123 = icmp eq i32 %122, 112
  %124 = getelementptr inbounds i64, i64* %37, i64 3
  %125 = load i64, i64* %124, align 8, !tbaa !1337
  %126 = trunc i64 %125 to i32
  %127 = icmp eq i32 %126, 8
  %128 = getelementptr inbounds i64, i64* %37, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !1339
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 1
  %132 = and i1 %127, %131
  %133 = and i1 %123, %132
  %134 = and i1 %119, %133
  %135 = and i1 %115, %134
  br i1 %135, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %136 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %137 = load i64, i64* %136, align 8
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %139(i8* getelementptr inbounds ([236 x i8], [236 x i8]* @.str.127, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %141 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 6
  br i1 %147, label %assert_end36, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end32
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %150 = load i16, i16* %149, align 2
  %151 = icmp eq i16 %150, 1
  %152 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 32
  %155 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %156 = load i8, i8* %155, align 1
  %157 = icmp eq i8 %156, 2
  %158 = and i1 %154, %157
  %159 = and i1 %151, %158
  br i1 %159, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %161 = load i64, i64* %43, align 8, !tbaa !1343
  %162 = trunc i64 %161 to i32
  %163 = icmp eq i32 %162, 64
  br i1 %163, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.128, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %165 = getelementptr inbounds i64, i64* %43, i64 1
  %166 = load i64, i64* %165, align 8, !tbaa !1357
  %167 = trunc i64 %166 to i32
  %168 = icmp eq i32 %167, 32
  br i1 %168, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.129, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %170 = getelementptr inbounds i64, i64* %43, i64 2
  %171 = load i64, i64* %170, align 8, !tbaa !1359
  %172 = trunc i64 %171 to i32
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %175 = getelementptr inbounds i64, i64* %43, i64 3
  %176 = load i64, i64* %175, align 8, !tbaa !1362
  %177 = trunc i64 %176 to i32
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %179(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %180 = getelementptr inbounds i64, i64* %43, i64 4
  %181 = load i64, i64* %180, align 8, !tbaa !1364
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %182, 8
  br i1 %183, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %184(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %185 = getelementptr inbounds i64, i64* %43, i64 5
  %186 = load i64, i64* %185, align 8, !tbaa !1368
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 16
  br i1 %188, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %190 = icmp eq i64* %45, null
  br i1 %190, label %if_end52, label %if_then51, !prof !50

if_then51:                                        ; preds = %assert_end50
  %191 = load i64, i64* %45, align 8, !tbaa !1370
  %192 = trunc i64 %191 to i32
  %193 = icmp eq i32 %192, 4096
  %194 = getelementptr inbounds i64, i64* %45, i64 1
  %195 = load i64, i64* %194, align 8, !tbaa !1384
  %196 = trunc i64 %195 to i32
  %197 = icmp eq i32 %196, 128
  %198 = getelementptr inbounds i64, i64* %45, i64 2
  %199 = load i64, i64* %198, align 8, !tbaa !1386
  %200 = trunc i64 %199 to i32
  %201 = icmp eq i32 %200, 128
  %202 = getelementptr inbounds i64, i64* %45, i64 3
  %203 = load i64, i64* %202, align 8, !tbaa !1389
  %204 = trunc i64 %203 to i32
  %205 = icmp eq i32 %204, 128
  %206 = getelementptr inbounds i64, i64* %45, i64 4
  %207 = load i64, i64* %206, align 8, !tbaa !1391
  %208 = trunc i64 %207 to i32
  %209 = icmp eq i32 %208, 16
  %210 = getelementptr inbounds i64, i64* %45, i64 5
  %211 = load i64, i64* %210, align 8, !tbaa !1395
  %212 = trunc i64 %211 to i32
  %213 = icmp eq i32 %212, 1
  %214 = and i1 %209, %213
  %215 = and i1 %205, %214
  %216 = and i1 %201, %215
  %217 = and i1 %197, %216
  %218 = and i1 %193, %217
  br i1 %218, label %if_end52, label %assert_fail53, !prof !5

if_end52:                                         ; preds = %assert_end50, %if_then51
  %219 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %220 = load i64, i64* %219, align 8
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %assert_end56, label %assert_fail55, !prof !5

assert_fail53:                                    ; preds = %if_then51
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.130, i64 0, i64 0))
  ret i32 -1

assert_fail55:                                    ; preds = %if_end52
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %223(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %if_end52
  %224 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %225 = load i32, i32* %224, align 4
  %226 = icmp eq i32 %225, 1
  br i1 %226, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %227(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %228 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %229 = load i32, i32* %228, align 4
  %230 = icmp eq i32 %39, %229
  br i1 %230, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %231 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %231(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %232 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = icmp eq i32 %233, 5
  br i1 %234, label %assert_end64, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end60
  %236 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %237 = load i16, i16* %236, align 2
  %238 = icmp eq i16 %237, 1
  %239 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %240 = load i8, i8* %239, align 1
  %241 = icmp eq i8 %240, 32
  %242 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %243 = load i8, i8* %242, align 1
  %244 = icmp eq i8 %243, 2
  %245 = and i1 %241, %244
  %246 = and i1 %238, %245
  br i1 %246, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %247(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %248 = load i64, i64* %49, align 8, !tbaa !1397
  %249 = trunc i64 %248 to i32
  %250 = icmp eq i32 %249, 1
  br i1 %250, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %251 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %251(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %252 = getelementptr inbounds i64, i64* %49, i64 1
  %253 = load i64, i64* %252, align 8, !tbaa !1411
  %254 = trunc i64 %253 to i32
  %255 = icmp eq i32 %254, 64
  br i1 %255, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %256(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.131, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %257 = getelementptr inbounds i64, i64* %49, i64 2
  %258 = load i64, i64* %257, align 8, !tbaa !1413
  %259 = trunc i64 %258 to i32
  %260 = icmp eq i32 %259, 1
  br i1 %260, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %262 = getelementptr inbounds i64, i64* %49, i64 3
  %263 = load i64, i64* %262, align 8, !tbaa !1416
  %264 = trunc i64 %263 to i32
  %265 = icmp eq i32 %264, 1
  br i1 %265, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %266 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %266(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %267 = getelementptr inbounds i64, i64* %49, i64 4
  %268 = load i64, i64* %267, align 8, !tbaa !1418
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 16
  br i1 %270, label %assert_end76, label %assert_fail75, !prof !5

assert_fail75:                                    ; preds = %assert_end74
  %271 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %271(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %assert_end74
  %272 = icmp eq i64* %51, null
  br i1 %272, label %if_end78, label %if_then77, !prof !50

if_then77:                                        ; preds = %assert_end76
  %273 = load i64, i64* %51, align 8, !tbaa !1422
  %274 = trunc i64 %273 to i32
  %275 = icmp eq i32 %274, 1024
  %276 = getelementptr inbounds i64, i64* %51, i64 1
  %277 = load i64, i64* %276, align 8, !tbaa !1436
  %278 = trunc i64 %277 to i32
  %279 = icmp eq i32 %278, 16
  %280 = getelementptr inbounds i64, i64* %51, i64 2
  %281 = load i64, i64* %280, align 8, !tbaa !1438
  %282 = trunc i64 %281 to i32
  %283 = icmp eq i32 %282, 16
  %284 = getelementptr inbounds i64, i64* %51, i64 3
  %285 = load i64, i64* %284, align 8, !tbaa !1441
  %286 = trunc i64 %285 to i32
  %287 = icmp eq i32 %286, 16
  %288 = getelementptr inbounds i64, i64* %51, i64 4
  %289 = load i64, i64* %288, align 8, !tbaa !1443
  %290 = trunc i64 %289 to i32
  %291 = icmp eq i32 %290, 1
  %292 = and i1 %287, %291
  %293 = and i1 %283, %292
  %294 = and i1 %279, %293
  %295 = and i1 %275, %294
  br i1 %295, label %if_end78, label %assert_fail79, !prof !5

if_end78:                                         ; preds = %assert_end76, %if_then77
  %296 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %297 = load i64, i64* %296, align 8
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %assert_end82, label %assert_fail81, !prof !5

assert_fail79:                                    ; preds = %if_then77
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.132, i64 0, i64 0))
  ret i32 -1

assert_fail81:                                    ; preds = %if_end78
  %300 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %300(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %if_end78
  %301 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %302 = load i32, i32* %301, align 4
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %305 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %306 = load i32, i32* %305, align 4
  %307 = icmp eq i32 %39, %306
  br i1 %307, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %308 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %308(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %309 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %310 = load i32, i32* %309, align 4
  %311 = icmp eq i32 %310, 5
  br i1 %311, label %assert_end90, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %312 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %312(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end86
  %313 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %314 = load i16, i16* %313, align 2
  %315 = icmp eq i16 %314, 1
  %316 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %317 = load i8, i8* %316, align 1
  %318 = icmp eq i8 %317, 32
  %319 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %320 = load i8, i8* %319, align 1
  %321 = icmp eq i8 %320, 2
  %322 = and i1 %318, %321
  %323 = and i1 %315, %322
  br i1 %323, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %325 = load i64, i64* %55, align 8, !tbaa !1447
  %326 = trunc i64 %325 to i32
  %327 = icmp eq i32 %326, 1
  br i1 %327, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %328 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %328(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %329 = getelementptr inbounds i64, i64* %55, i64 1
  %330 = load i64, i64* %329, align 8, !tbaa !1461
  %331 = trunc i64 %330 to i32
  %332 = icmp eq i32 %331, 64
  br i1 %332, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.133, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %334 = getelementptr inbounds i64, i64* %55, i64 2
  %335 = load i64, i64* %334, align 8, !tbaa !1463
  %336 = trunc i64 %335 to i32
  %337 = icmp eq i32 %336, 14
  br i1 %337, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %338 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %338(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %339 = getelementptr inbounds i64, i64* %55, i64 3
  %340 = load i64, i64* %339, align 8, !tbaa !1466
  %341 = trunc i64 %340 to i32
  %342 = icmp eq i32 %341, 14
  br i1 %342, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %343 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %343(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.135, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %344 = getelementptr inbounds i64, i64* %55, i64 4
  %345 = load i64, i64* %344, align 8, !tbaa !1468
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 16
  br i1 %347, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %348 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %348(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %349 = icmp eq i64* %57, null
  br i1 %349, label %if_end104, label %if_then103, !prof !50

if_then103:                                       ; preds = %assert_end102
  %350 = load i64, i64* %57, align 8, !tbaa !1472
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 200704
  %353 = getelementptr inbounds i64, i64* %57, i64 1
  %354 = load i64, i64* %353, align 8, !tbaa !1486
  %355 = trunc i64 %354 to i32
  %356 = icmp eq i32 %355, 3136
  %357 = getelementptr inbounds i64, i64* %57, i64 2
  %358 = load i64, i64* %357, align 8, !tbaa !1488
  %359 = trunc i64 %358 to i32
  %360 = icmp eq i32 %359, 224
  %361 = getelementptr inbounds i64, i64* %57, i64 3
  %362 = load i64, i64* %361, align 8, !tbaa !1491
  %363 = trunc i64 %362 to i32
  %364 = icmp eq i32 %363, 16
  %365 = getelementptr inbounds i64, i64* %57, i64 4
  %366 = load i64, i64* %365, align 8, !tbaa !1493
  %367 = trunc i64 %366 to i32
  %368 = icmp eq i32 %367, 1
  %369 = and i1 %364, %368
  %370 = and i1 %360, %369
  %371 = and i1 %356, %370
  %372 = and i1 %352, %371
  br i1 %372, label %if_end104, label %assert_fail105, !prof !5

if_end104:                                        ; preds = %assert_end102, %if_then103
  %373 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %374 = load i64, i64* %373, align 8
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %assert_end108, label %assert_fail107, !prof !5

assert_fail105:                                   ; preds = %if_then103
  %376 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %376(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.136, i64 0, i64 0))
  ret i32 -1

assert_fail107:                                   ; preds = %if_end104
  %377 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %377(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %if_end104
  %378 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %379 = load i32, i32* %378, align 4
  %380 = icmp eq i32 %379, 1
  br i1 %380, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %381 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %381(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %382 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %383 = load i32, i32* %382, align 4
  %384 = icmp eq i32 %39, %383
  br i1 %384, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %385 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %385(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %386 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %387 = load i32, i32* %386, align 4
  %388 = icmp eq i32 %387, 5
  br i1 %388, label %assert_end116, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.137, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end112
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %391 = load i16, i16* %390, align 2
  %392 = icmp eq i16 %391, 1
  %393 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %394 = load i8, i8* %393, align 1
  %395 = icmp eq i8 %394, 32
  %396 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %397 = load i8, i8* %396, align 1
  %398 = icmp eq i8 %397, 2
  %399 = and i1 %395, %398
  %400 = and i1 %392, %399
  br i1 %400, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %401 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %401(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.138, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %402 = load i64, i64* %61, align 8, !tbaa !1497
  %403 = trunc i64 %402 to i32
  %404 = icmp eq i32 %403, 1
  br i1 %404, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %405 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %405(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.139, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %406 = getelementptr inbounds i64, i64* %61, i64 1
  %407 = load i64, i64* %406, align 8, !tbaa !1511
  %408 = trunc i64 %407 to i32
  %409 = icmp eq i32 %408, 64
  br i1 %409, label %assert_end122, label %assert_fail121, !prof !5

assert_fail121:                                   ; preds = %assert_end120
  %410 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %410(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.140, i64 0, i64 0))
  ret i32 -1

assert_end122:                                    ; preds = %assert_end120
  %411 = getelementptr inbounds i64, i64* %61, i64 2
  %412 = load i64, i64* %411, align 8, !tbaa !1513
  %413 = trunc i64 %412 to i32
  %414 = icmp eq i32 %413, 14
  br i1 %414, label %assert_end124, label %assert_fail123, !prof !5

assert_fail123:                                   ; preds = %assert_end122
  %415 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %415(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.141, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %assert_end122
  %416 = getelementptr inbounds i64, i64* %61, i64 3
  %417 = load i64, i64* %416, align 8, !tbaa !1516
  %418 = trunc i64 %417 to i32
  %419 = icmp eq i32 %418, 14
  br i1 %419, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %420 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %420(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.142, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %421 = getelementptr inbounds i64, i64* %61, i64 4
  %422 = load i64, i64* %421, align 8, !tbaa !1518
  %423 = trunc i64 %422 to i32
  %424 = icmp eq i32 %423, 16
  br i1 %424, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %425 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %425(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.143, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %426 = icmp eq i64* %63, null
  br i1 %426, label %if_end130, label %if_then129, !prof !50

if_then129:                                       ; preds = %assert_end128
  %427 = load i64, i64* %63, align 8, !tbaa !1522
  %428 = trunc i64 %427 to i32
  %429 = icmp eq i32 %428, 200704
  %430 = getelementptr inbounds i64, i64* %63, i64 1
  %431 = load i64, i64* %430, align 8, !tbaa !1536
  %432 = trunc i64 %431 to i32
  %433 = icmp eq i32 %432, 3136
  %434 = getelementptr inbounds i64, i64* %63, i64 2
  %435 = load i64, i64* %434, align 8, !tbaa !1538
  %436 = trunc i64 %435 to i32
  %437 = icmp eq i32 %436, 224
  %438 = getelementptr inbounds i64, i64* %63, i64 3
  %439 = load i64, i64* %438, align 8, !tbaa !1541
  %440 = trunc i64 %439 to i32
  %441 = icmp eq i32 %440, 16
  %442 = getelementptr inbounds i64, i64* %63, i64 4
  %443 = load i64, i64* %442, align 8, !tbaa !1543
  %444 = trunc i64 %443 to i32
  %445 = icmp eq i32 %444, 1
  %446 = and i1 %441, %445
  %447 = and i1 %437, %446
  %448 = and i1 %433, %447
  %449 = and i1 %429, %448
  br i1 %449, label %if_end130, label %assert_fail131, !prof !5

if_end130:                                        ; preds = %assert_end128, %if_then129
  %450 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %451 = load i64, i64* %450, align 8
  %452 = icmp eq i64 %451, 0
  br i1 %452, label %assert_end134, label %assert_fail133, !prof !5

assert_fail131:                                   ; preds = %if_then129
  %453 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %453(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.144, i64 0, i64 0))
  ret i32 -1

assert_fail133:                                   ; preds = %if_end130
  %454 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %454(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.145, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %if_end130
  %455 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %456 = load i32, i32* %455, align 4
  %457 = icmp eq i32 %456, 1
  br i1 %457, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %458 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %458(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.146, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %459 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %460 = load i32, i32* %459, align 4
  %461 = icmp eq i32 %39, %460
  br i1 %461, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %462 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %462(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %463 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1_compute_(i8* %33, i8* %41, i8* %59, i8* %47, i8* %53, i32 %39)
  ret i32 %463
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = alloca %12, align 8
  %7 = getelementptr inbounds %12, %12* %6, i64 0, i32 0
  store i8* %0, i8** %7, align 8
  %8 = getelementptr inbounds %12, %12* %6, i64 0, i32 1
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %12, %12* %6, i64 0, i32 2
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %12, %12* %6, i64 0, i32 3
  store i8* %3, i8** %10, align 8
  %11 = getelementptr inbounds %12, %12* %6, i64 0, i32 4
  store i8* %4, i8** %11, align 8
  %12 = getelementptr inbounds %12, %12* %6, i64 0, i32 5
  store i32 %5, i32* %12, align 8
  %13 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %14 = bitcast %12* %6 to i8*
  %15 = call i32 %13(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.148, i8* nonnull %14, i32 0)
  ret i32 %15
}

define private i32 @__tvm_parallel_lambda.148(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 447
  %23 = sdiv i32 %22, %21
  %24 = add nsw i32 %0, 1
  %25 = mul nsw i32 %23, %24
  %26 = icmp slt i32 %25, 448
  %27 = select i1 %26, i32 %25, i32 448
  %28 = mul nsw i32 %23, %0
  %29 = icmp slt i32 %28, 448
  %30 = select i1 %29, i32 %28, i32 448
  %31 = icmp slt i32 %30, %27
  br i1 %31, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %32 = sext i32 %30 to i64
  %33 = sext i32 %27 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_begin10.preheader
  %indvars.iv53 = phi i64 [ %32, %for_body.preheader ], [ %indvars.iv.next54, %for_begin10.preheader ]
  %34 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %35 = tail call i8* %34(i32 1, i32 %19, i64 1792, i32 2, i32 32)
  %36 = bitcast i8* %35 to float*
  %37 = trunc i64 %indvars.iv53 to i32
  %38 = sdiv i32 %37, 7
  %39 = mul i32 %38, 7
  %.decomposed = sub i32 %37, %39
  %40 = mul nsw i32 %.decomposed, 224
  %41 = shl i32 %38, 12
  %42 = sext i32 %41 to i64
  %43 = sext i32 %40 to i64
  br label %for_body2

for_end:                                          ; preds = %for_begin10.preheader, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end6
  %44 = mul nsw i64 %indvars.iv53, 448
  %45 = shl nsw i32 %38, 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %13, i64 %46
  %48 = bitcast float* %47 to <16 x float>*
  %49 = load <16 x float>, <16 x float>* %48, align 64, !tbaa !1547
  %50 = getelementptr inbounds float, float* %16, i64 %44
  %51 = bitcast float* %50 to <16 x float>*
  %52 = load <16 x float>, <16 x float>* %51, align 64, !tbaa !1550
  %53 = bitcast i8* %35 to <16 x float>*
  %54 = load <16 x float>, <16 x float>* %53, align 64, !tbaa !1553
  %55 = fadd <16 x float> %49, %54
  %56 = fadd <16 x float> %52, %55
  %57 = fcmp ogt <16 x float> %56, zeroinitializer
  %58 = select <16 x i1> %57, <16 x float> %56, <16 x float> zeroinitializer
  %59 = getelementptr inbounds float, float* %10, i64 %44
  %60 = bitcast float* %59 to <16 x float>*
  store <16 x float> %58, <16 x float>* %60, align 64, !tbaa !1556
  %61 = mul i64 %indvars.iv53, 1924145348608
  %sext = ashr exact i64 %61, 32
  %62 = or i64 %sext, 16
  %63 = getelementptr inbounds float, float* %16, i64 %62
  %64 = bitcast float* %63 to <16 x float>*
  %65 = load <16 x float>, <16 x float>* %64, align 64, !tbaa !1550
  %66 = getelementptr inbounds i8, i8* %35, i64 64
  %67 = bitcast i8* %66 to <16 x float>*
  %68 = load <16 x float>, <16 x float>* %67, align 64, !tbaa !1553
  %69 = fadd <16 x float> %49, %68
  %70 = fadd <16 x float> %65, %69
  %71 = fcmp ogt <16 x float> %70, zeroinitializer
  %72 = select <16 x i1> %71, <16 x float> %70, <16 x float> zeroinitializer
  %73 = getelementptr inbounds float, float* %10, i64 %62
  %74 = bitcast float* %73 to <16 x float>*
  store <16 x float> %72, <16 x float>* %74, align 64, !tbaa !1556
  %75 = mul i64 %indvars.iv53, 1924145348608
  %sext68 = add i64 %75, 962072674304
  %76 = ashr exact i64 %sext68, 32
  %77 = getelementptr inbounds float, float* %16, i64 %76
  %78 = bitcast float* %77 to <16 x float>*
  %79 = load <16 x float>, <16 x float>* %78, align 64, !tbaa !1550
  %80 = getelementptr inbounds i8, i8* %35, i64 896
  %81 = bitcast i8* %80 to <16 x float>*
  %82 = load <16 x float>, <16 x float>* %81, align 64, !tbaa !1553
  %83 = fadd <16 x float> %49, %82
  %84 = fadd <16 x float> %79, %83
  %85 = fcmp ogt <16 x float> %84, zeroinitializer
  %86 = select <16 x i1> %85, <16 x float> %84, <16 x float> zeroinitializer
  %87 = getelementptr inbounds float, float* %10, i64 %76
  %88 = bitcast float* %87 to <16 x float>*
  store <16 x float> %86, <16 x float>* %88, align 64, !tbaa !1556
  %89 = mul i64 %indvars.iv53, 1924145348608
  %sext55 = add i64 %89, 1030792151040
  %90 = ashr exact i64 %sext55, 32
  %91 = getelementptr inbounds float, float* %16, i64 %90
  %92 = bitcast float* %91 to <16 x float>*
  %93 = load <16 x float>, <16 x float>* %92, align 64, !tbaa !1550
  %94 = getelementptr inbounds i8, i8* %35, i64 960
  %95 = bitcast i8* %94 to <16 x float>*
  %96 = load <16 x float>, <16 x float>* %95, align 64, !tbaa !1553
  %97 = fadd <16 x float> %49, %96
  %98 = fadd <16 x float> %93, %97
  %99 = fcmp ogt <16 x float> %98, zeroinitializer
  %100 = select <16 x i1> %99, <16 x float> %98, <16 x float> zeroinitializer
  %101 = getelementptr inbounds float, float* %10, i64 %90
  %102 = bitcast float* %101 to <16 x float>*
  store <16 x float> %100, <16 x float>* %102, align 64, !tbaa !1556
  %103 = mul i64 %indvars.iv53, 1924145348608
  %sext69 = ashr exact i64 %103, 32
  %104 = or i64 %sext69, 32
  %105 = getelementptr inbounds float, float* %16, i64 %104
  %106 = bitcast float* %105 to <16 x float>*
  %107 = load <16 x float>, <16 x float>* %106, align 64, !tbaa !1550
  %108 = getelementptr inbounds i8, i8* %35, i64 128
  %109 = bitcast i8* %108 to <16 x float>*
  %110 = load <16 x float>, <16 x float>* %109, align 64, !tbaa !1553
  %111 = fadd <16 x float> %49, %110
  %112 = fadd <16 x float> %107, %111
  %113 = fcmp ogt <16 x float> %112, zeroinitializer
  %114 = select <16 x i1> %113, <16 x float> %112, <16 x float> zeroinitializer
  %115 = getelementptr inbounds float, float* %10, i64 %104
  %116 = bitcast float* %115 to <16 x float>*
  store <16 x float> %114, <16 x float>* %116, align 64, !tbaa !1556
  %117 = mul i64 %indvars.iv53, 1924145348608
  %sext56 = ashr exact i64 %117, 32
  %118 = or i64 %sext56, 48
  %119 = getelementptr inbounds float, float* %16, i64 %118
  %120 = bitcast float* %119 to <16 x float>*
  %121 = load <16 x float>, <16 x float>* %120, align 64, !tbaa !1550
  %122 = getelementptr inbounds i8, i8* %35, i64 192
  %123 = bitcast i8* %122 to <16 x float>*
  %124 = load <16 x float>, <16 x float>* %123, align 64, !tbaa !1553
  %125 = fadd <16 x float> %49, %124
  %126 = fadd <16 x float> %121, %125
  %127 = fcmp ogt <16 x float> %126, zeroinitializer
  %128 = select <16 x i1> %127, <16 x float> %126, <16 x float> zeroinitializer
  %129 = getelementptr inbounds float, float* %10, i64 %118
  %130 = bitcast float* %129 to <16 x float>*
  store <16 x float> %128, <16 x float>* %130, align 64, !tbaa !1556
  %131 = mul i64 %indvars.iv53, 1924145348608
  %sext70 = add i64 %131, 1099511627776
  %132 = ashr exact i64 %sext70, 32
  %133 = getelementptr inbounds float, float* %16, i64 %132
  %134 = bitcast float* %133 to <16 x float>*
  %135 = load <16 x float>, <16 x float>* %134, align 64, !tbaa !1550
  %136 = getelementptr inbounds i8, i8* %35, i64 1024
  %137 = bitcast i8* %136 to <16 x float>*
  %138 = load <16 x float>, <16 x float>* %137, align 64, !tbaa !1553
  %139 = fadd <16 x float> %49, %138
  %140 = fadd <16 x float> %135, %139
  %141 = fcmp ogt <16 x float> %140, zeroinitializer
  %142 = select <16 x i1> %141, <16 x float> %140, <16 x float> zeroinitializer
  %143 = getelementptr inbounds float, float* %10, i64 %132
  %144 = bitcast float* %143 to <16 x float>*
  store <16 x float> %142, <16 x float>* %144, align 64, !tbaa !1556
  %145 = mul i64 %indvars.iv53, 1924145348608
  %sext57 = add i64 %145, 1168231104512
  %146 = ashr exact i64 %sext57, 32
  %147 = getelementptr inbounds float, float* %16, i64 %146
  %148 = bitcast float* %147 to <16 x float>*
  %149 = load <16 x float>, <16 x float>* %148, align 64, !tbaa !1550
  %150 = getelementptr inbounds i8, i8* %35, i64 1088
  %151 = bitcast i8* %150 to <16 x float>*
  %152 = load <16 x float>, <16 x float>* %151, align 64, !tbaa !1553
  %153 = fadd <16 x float> %49, %152
  %154 = fadd <16 x float> %149, %153
  %155 = fcmp ogt <16 x float> %154, zeroinitializer
  %156 = select <16 x i1> %155, <16 x float> %154, <16 x float> zeroinitializer
  %157 = getelementptr inbounds float, float* %10, i64 %146
  %158 = bitcast float* %157 to <16 x float>*
  store <16 x float> %156, <16 x float>* %158, align 64, !tbaa !1556
  %159 = mul i64 %indvars.iv53, 1924145348608
  %sext71 = add i64 %159, 274877906944
  %160 = ashr exact i64 %sext71, 32
  %161 = getelementptr inbounds float, float* %16, i64 %160
  %162 = bitcast float* %161 to <16 x float>*
  %163 = load <16 x float>, <16 x float>* %162, align 64, !tbaa !1550
  %164 = getelementptr inbounds i8, i8* %35, i64 256
  %165 = bitcast i8* %164 to <16 x float>*
  %166 = load <16 x float>, <16 x float>* %165, align 64, !tbaa !1553
  %167 = fadd <16 x float> %49, %166
  %168 = fadd <16 x float> %163, %167
  %169 = fcmp ogt <16 x float> %168, zeroinitializer
  %170 = select <16 x i1> %169, <16 x float> %168, <16 x float> zeroinitializer
  %171 = getelementptr inbounds float, float* %10, i64 %160
  %172 = bitcast float* %171 to <16 x float>*
  store <16 x float> %170, <16 x float>* %172, align 64, !tbaa !1556
  %173 = mul i64 %indvars.iv53, 1924145348608
  %sext58 = add i64 %173, 343597383680
  %174 = ashr exact i64 %sext58, 32
  %175 = getelementptr inbounds float, float* %16, i64 %174
  %176 = bitcast float* %175 to <16 x float>*
  %177 = load <16 x float>, <16 x float>* %176, align 64, !tbaa !1550
  %178 = getelementptr inbounds i8, i8* %35, i64 320
  %179 = bitcast i8* %178 to <16 x float>*
  %180 = load <16 x float>, <16 x float>* %179, align 64, !tbaa !1553
  %181 = fadd <16 x float> %49, %180
  %182 = fadd <16 x float> %177, %181
  %183 = fcmp ogt <16 x float> %182, zeroinitializer
  %184 = select <16 x i1> %183, <16 x float> %182, <16 x float> zeroinitializer
  %185 = getelementptr inbounds float, float* %10, i64 %174
  %186 = bitcast float* %185 to <16 x float>*
  store <16 x float> %184, <16 x float>* %186, align 64, !tbaa !1556
  %187 = mul i64 %indvars.iv53, 1924145348608
  %sext72 = add i64 %187, 1236950581248
  %188 = ashr exact i64 %sext72, 32
  %189 = getelementptr inbounds float, float* %16, i64 %188
  %190 = bitcast float* %189 to <16 x float>*
  %191 = load <16 x float>, <16 x float>* %190, align 64, !tbaa !1550
  %192 = getelementptr inbounds i8, i8* %35, i64 1152
  %193 = bitcast i8* %192 to <16 x float>*
  %194 = load <16 x float>, <16 x float>* %193, align 64, !tbaa !1553
  %195 = fadd <16 x float> %49, %194
  %196 = fadd <16 x float> %191, %195
  %197 = fcmp ogt <16 x float> %196, zeroinitializer
  %198 = select <16 x i1> %197, <16 x float> %196, <16 x float> zeroinitializer
  %199 = getelementptr inbounds float, float* %10, i64 %188
  %200 = bitcast float* %199 to <16 x float>*
  store <16 x float> %198, <16 x float>* %200, align 64, !tbaa !1556
  %201 = mul i64 %indvars.iv53, 1924145348608
  %sext59 = add i64 %201, 1305670057984
  %202 = ashr exact i64 %sext59, 32
  %203 = getelementptr inbounds float, float* %16, i64 %202
  %204 = bitcast float* %203 to <16 x float>*
  %205 = load <16 x float>, <16 x float>* %204, align 64, !tbaa !1550
  %206 = getelementptr inbounds i8, i8* %35, i64 1216
  %207 = bitcast i8* %206 to <16 x float>*
  %208 = load <16 x float>, <16 x float>* %207, align 64, !tbaa !1553
  %209 = fadd <16 x float> %49, %208
  %210 = fadd <16 x float> %205, %209
  %211 = fcmp ogt <16 x float> %210, zeroinitializer
  %212 = select <16 x i1> %211, <16 x float> %210, <16 x float> zeroinitializer
  %213 = getelementptr inbounds float, float* %10, i64 %202
  %214 = bitcast float* %213 to <16 x float>*
  store <16 x float> %212, <16 x float>* %214, align 64, !tbaa !1556
  %215 = mul i64 %indvars.iv53, 1924145348608
  %sext73 = add i64 %215, 412316860416
  %216 = ashr exact i64 %sext73, 32
  %217 = getelementptr inbounds float, float* %16, i64 %216
  %218 = bitcast float* %217 to <16 x float>*
  %219 = load <16 x float>, <16 x float>* %218, align 64, !tbaa !1550
  %220 = getelementptr inbounds i8, i8* %35, i64 384
  %221 = bitcast i8* %220 to <16 x float>*
  %222 = load <16 x float>, <16 x float>* %221, align 64, !tbaa !1553
  %223 = fadd <16 x float> %49, %222
  %224 = fadd <16 x float> %219, %223
  %225 = fcmp ogt <16 x float> %224, zeroinitializer
  %226 = select <16 x i1> %225, <16 x float> %224, <16 x float> zeroinitializer
  %227 = getelementptr inbounds float, float* %10, i64 %216
  %228 = bitcast float* %227 to <16 x float>*
  store <16 x float> %226, <16 x float>* %228, align 64, !tbaa !1556
  %229 = mul i64 %indvars.iv53, 1924145348608
  %sext60 = add i64 %229, 481036337152
  %230 = ashr exact i64 %sext60, 32
  %231 = getelementptr inbounds float, float* %16, i64 %230
  %232 = bitcast float* %231 to <16 x float>*
  %233 = load <16 x float>, <16 x float>* %232, align 64, !tbaa !1550
  %234 = getelementptr inbounds i8, i8* %35, i64 448
  %235 = bitcast i8* %234 to <16 x float>*
  %236 = load <16 x float>, <16 x float>* %235, align 64, !tbaa !1553
  %237 = fadd <16 x float> %49, %236
  %238 = fadd <16 x float> %233, %237
  %239 = fcmp ogt <16 x float> %238, zeroinitializer
  %240 = select <16 x i1> %239, <16 x float> %238, <16 x float> zeroinitializer
  %241 = getelementptr inbounds float, float* %10, i64 %230
  %242 = bitcast float* %241 to <16 x float>*
  store <16 x float> %240, <16 x float>* %242, align 64, !tbaa !1556
  %243 = mul i64 %indvars.iv53, 1924145348608
  %sext74 = add i64 %243, 1374389534720
  %244 = ashr exact i64 %sext74, 32
  %245 = getelementptr inbounds float, float* %16, i64 %244
  %246 = bitcast float* %245 to <16 x float>*
  %247 = load <16 x float>, <16 x float>* %246, align 64, !tbaa !1550
  %248 = getelementptr inbounds i8, i8* %35, i64 1280
  %249 = bitcast i8* %248 to <16 x float>*
  %250 = load <16 x float>, <16 x float>* %249, align 64, !tbaa !1553
  %251 = fadd <16 x float> %49, %250
  %252 = fadd <16 x float> %247, %251
  %253 = fcmp ogt <16 x float> %252, zeroinitializer
  %254 = select <16 x i1> %253, <16 x float> %252, <16 x float> zeroinitializer
  %255 = getelementptr inbounds float, float* %10, i64 %244
  %256 = bitcast float* %255 to <16 x float>*
  store <16 x float> %254, <16 x float>* %256, align 64, !tbaa !1556
  %257 = mul i64 %indvars.iv53, 1924145348608
  %sext61 = add i64 %257, 1443109011456
  %258 = ashr exact i64 %sext61, 32
  %259 = getelementptr inbounds float, float* %16, i64 %258
  %260 = bitcast float* %259 to <16 x float>*
  %261 = load <16 x float>, <16 x float>* %260, align 64, !tbaa !1550
  %262 = getelementptr inbounds i8, i8* %35, i64 1344
  %263 = bitcast i8* %262 to <16 x float>*
  %264 = load <16 x float>, <16 x float>* %263, align 64, !tbaa !1553
  %265 = fadd <16 x float> %49, %264
  %266 = fadd <16 x float> %261, %265
  %267 = fcmp ogt <16 x float> %266, zeroinitializer
  %268 = select <16 x i1> %267, <16 x float> %266, <16 x float> zeroinitializer
  %269 = getelementptr inbounds float, float* %10, i64 %258
  %270 = bitcast float* %269 to <16 x float>*
  store <16 x float> %268, <16 x float>* %270, align 64, !tbaa !1556
  %271 = mul i64 %indvars.iv53, 1924145348608
  %sext75 = add i64 %271, 549755813888
  %272 = ashr exact i64 %sext75, 32
  %273 = getelementptr inbounds float, float* %16, i64 %272
  %274 = bitcast float* %273 to <16 x float>*
  %275 = load <16 x float>, <16 x float>* %274, align 64, !tbaa !1550
  %276 = getelementptr inbounds i8, i8* %35, i64 512
  %277 = bitcast i8* %276 to <16 x float>*
  %278 = load <16 x float>, <16 x float>* %277, align 64, !tbaa !1553
  %279 = fadd <16 x float> %49, %278
  %280 = fadd <16 x float> %275, %279
  %281 = fcmp ogt <16 x float> %280, zeroinitializer
  %282 = select <16 x i1> %281, <16 x float> %280, <16 x float> zeroinitializer
  %283 = getelementptr inbounds float, float* %10, i64 %272
  %284 = bitcast float* %283 to <16 x float>*
  store <16 x float> %282, <16 x float>* %284, align 64, !tbaa !1556
  %285 = mul i64 %indvars.iv53, 1924145348608
  %sext62 = add i64 %285, 618475290624
  %286 = ashr exact i64 %sext62, 32
  %287 = getelementptr inbounds float, float* %16, i64 %286
  %288 = bitcast float* %287 to <16 x float>*
  %289 = load <16 x float>, <16 x float>* %288, align 64, !tbaa !1550
  %290 = getelementptr inbounds i8, i8* %35, i64 576
  %291 = bitcast i8* %290 to <16 x float>*
  %292 = load <16 x float>, <16 x float>* %291, align 64, !tbaa !1553
  %293 = fadd <16 x float> %49, %292
  %294 = fadd <16 x float> %289, %293
  %295 = fcmp ogt <16 x float> %294, zeroinitializer
  %296 = select <16 x i1> %295, <16 x float> %294, <16 x float> zeroinitializer
  %297 = getelementptr inbounds float, float* %10, i64 %286
  %298 = bitcast float* %297 to <16 x float>*
  store <16 x float> %296, <16 x float>* %298, align 64, !tbaa !1556
  %299 = mul i64 %indvars.iv53, 1924145348608
  %sext76 = add i64 %299, 1511828488192
  %300 = ashr exact i64 %sext76, 32
  %301 = getelementptr inbounds float, float* %16, i64 %300
  %302 = bitcast float* %301 to <16 x float>*
  %303 = load <16 x float>, <16 x float>* %302, align 64, !tbaa !1550
  %304 = getelementptr inbounds i8, i8* %35, i64 1408
  %305 = bitcast i8* %304 to <16 x float>*
  %306 = load <16 x float>, <16 x float>* %305, align 64, !tbaa !1553
  %307 = fadd <16 x float> %49, %306
  %308 = fadd <16 x float> %303, %307
  %309 = fcmp ogt <16 x float> %308, zeroinitializer
  %310 = select <16 x i1> %309, <16 x float> %308, <16 x float> zeroinitializer
  %311 = getelementptr inbounds float, float* %10, i64 %300
  %312 = bitcast float* %311 to <16 x float>*
  store <16 x float> %310, <16 x float>* %312, align 64, !tbaa !1556
  %313 = mul i64 %indvars.iv53, 1924145348608
  %sext63 = add i64 %313, 1580547964928
  %314 = ashr exact i64 %sext63, 32
  %315 = getelementptr inbounds float, float* %16, i64 %314
  %316 = bitcast float* %315 to <16 x float>*
  %317 = load <16 x float>, <16 x float>* %316, align 64, !tbaa !1550
  %318 = getelementptr inbounds i8, i8* %35, i64 1472
  %319 = bitcast i8* %318 to <16 x float>*
  %320 = load <16 x float>, <16 x float>* %319, align 64, !tbaa !1553
  %321 = fadd <16 x float> %49, %320
  %322 = fadd <16 x float> %317, %321
  %323 = fcmp ogt <16 x float> %322, zeroinitializer
  %324 = select <16 x i1> %323, <16 x float> %322, <16 x float> zeroinitializer
  %325 = getelementptr inbounds float, float* %10, i64 %314
  %326 = bitcast float* %325 to <16 x float>*
  store <16 x float> %324, <16 x float>* %326, align 64, !tbaa !1556
  %327 = mul i64 %indvars.iv53, 1924145348608
  %sext77 = add i64 %327, 687194767360
  %328 = ashr exact i64 %sext77, 32
  %329 = getelementptr inbounds float, float* %16, i64 %328
  %330 = bitcast float* %329 to <16 x float>*
  %331 = load <16 x float>, <16 x float>* %330, align 64, !tbaa !1550
  %332 = getelementptr inbounds i8, i8* %35, i64 640
  %333 = bitcast i8* %332 to <16 x float>*
  %334 = load <16 x float>, <16 x float>* %333, align 64, !tbaa !1553
  %335 = fadd <16 x float> %49, %334
  %336 = fadd <16 x float> %331, %335
  %337 = fcmp ogt <16 x float> %336, zeroinitializer
  %338 = select <16 x i1> %337, <16 x float> %336, <16 x float> zeroinitializer
  %339 = getelementptr inbounds float, float* %10, i64 %328
  %340 = bitcast float* %339 to <16 x float>*
  store <16 x float> %338, <16 x float>* %340, align 64, !tbaa !1556
  %341 = mul i64 %indvars.iv53, 1924145348608
  %sext64 = add i64 %341, 755914244096
  %342 = ashr exact i64 %sext64, 32
  %343 = getelementptr inbounds float, float* %16, i64 %342
  %344 = bitcast float* %343 to <16 x float>*
  %345 = load <16 x float>, <16 x float>* %344, align 64, !tbaa !1550
  %346 = getelementptr inbounds i8, i8* %35, i64 704
  %347 = bitcast i8* %346 to <16 x float>*
  %348 = load <16 x float>, <16 x float>* %347, align 64, !tbaa !1553
  %349 = fadd <16 x float> %49, %348
  %350 = fadd <16 x float> %345, %349
  %351 = fcmp ogt <16 x float> %350, zeroinitializer
  %352 = select <16 x i1> %351, <16 x float> %350, <16 x float> zeroinitializer
  %353 = getelementptr inbounds float, float* %10, i64 %342
  %354 = bitcast float* %353 to <16 x float>*
  store <16 x float> %352, <16 x float>* %354, align 64, !tbaa !1556
  %355 = mul i64 %indvars.iv53, 1924145348608
  %sext78 = add i64 %355, 1649267441664
  %356 = ashr exact i64 %sext78, 32
  %357 = getelementptr inbounds float, float* %16, i64 %356
  %358 = bitcast float* %357 to <16 x float>*
  %359 = load <16 x float>, <16 x float>* %358, align 64, !tbaa !1550
  %360 = getelementptr inbounds i8, i8* %35, i64 1536
  %361 = bitcast i8* %360 to <16 x float>*
  %362 = load <16 x float>, <16 x float>* %361, align 64, !tbaa !1553
  %363 = fadd <16 x float> %49, %362
  %364 = fadd <16 x float> %359, %363
  %365 = fcmp ogt <16 x float> %364, zeroinitializer
  %366 = select <16 x i1> %365, <16 x float> %364, <16 x float> zeroinitializer
  %367 = getelementptr inbounds float, float* %10, i64 %356
  %368 = bitcast float* %367 to <16 x float>*
  store <16 x float> %366, <16 x float>* %368, align 64, !tbaa !1556
  %369 = mul i64 %indvars.iv53, 1924145348608
  %sext65 = add i64 %369, 1717986918400
  %370 = ashr exact i64 %sext65, 32
  %371 = getelementptr inbounds float, float* %16, i64 %370
  %372 = bitcast float* %371 to <16 x float>*
  %373 = load <16 x float>, <16 x float>* %372, align 64, !tbaa !1550
  %374 = getelementptr inbounds i8, i8* %35, i64 1600
  %375 = bitcast i8* %374 to <16 x float>*
  %376 = load <16 x float>, <16 x float>* %375, align 64, !tbaa !1553
  %377 = fadd <16 x float> %49, %376
  %378 = fadd <16 x float> %373, %377
  %379 = fcmp ogt <16 x float> %378, zeroinitializer
  %380 = select <16 x i1> %379, <16 x float> %378, <16 x float> zeroinitializer
  %381 = getelementptr inbounds float, float* %10, i64 %370
  %382 = bitcast float* %381 to <16 x float>*
  store <16 x float> %380, <16 x float>* %382, align 64, !tbaa !1556
  %383 = mul i64 %indvars.iv53, 1924145348608
  %sext79 = add i64 %383, 824633720832
  %384 = ashr exact i64 %sext79, 32
  %385 = getelementptr inbounds float, float* %16, i64 %384
  %386 = bitcast float* %385 to <16 x float>*
  %387 = load <16 x float>, <16 x float>* %386, align 64, !tbaa !1550
  %388 = getelementptr inbounds i8, i8* %35, i64 768
  %389 = bitcast i8* %388 to <16 x float>*
  %390 = load <16 x float>, <16 x float>* %389, align 64, !tbaa !1553
  %391 = fadd <16 x float> %49, %390
  %392 = fadd <16 x float> %387, %391
  %393 = fcmp ogt <16 x float> %392, zeroinitializer
  %394 = select <16 x i1> %393, <16 x float> %392, <16 x float> zeroinitializer
  %395 = getelementptr inbounds float, float* %10, i64 %384
  %396 = bitcast float* %395 to <16 x float>*
  store <16 x float> %394, <16 x float>* %396, align 64, !tbaa !1556
  %397 = mul i64 %indvars.iv53, 1924145348608
  %sext66 = add i64 %397, 893353197568
  %398 = ashr exact i64 %sext66, 32
  %399 = getelementptr inbounds float, float* %16, i64 %398
  %400 = bitcast float* %399 to <16 x float>*
  %401 = load <16 x float>, <16 x float>* %400, align 64, !tbaa !1550
  %402 = getelementptr inbounds i8, i8* %35, i64 832
  %403 = bitcast i8* %402 to <16 x float>*
  %404 = load <16 x float>, <16 x float>* %403, align 64, !tbaa !1553
  %405 = fadd <16 x float> %49, %404
  %406 = fadd <16 x float> %401, %405
  %407 = fcmp ogt <16 x float> %406, zeroinitializer
  %408 = select <16 x i1> %407, <16 x float> %406, <16 x float> zeroinitializer
  %409 = getelementptr inbounds float, float* %10, i64 %398
  %410 = bitcast float* %409 to <16 x float>*
  store <16 x float> %408, <16 x float>* %410, align 64, !tbaa !1556
  %411 = mul i64 %indvars.iv53, 1924145348608
  %sext80 = add i64 %411, 1786706395136
  %412 = ashr exact i64 %sext80, 32
  %413 = getelementptr inbounds float, float* %16, i64 %412
  %414 = bitcast float* %413 to <16 x float>*
  %415 = load <16 x float>, <16 x float>* %414, align 64, !tbaa !1550
  %416 = getelementptr inbounds i8, i8* %35, i64 1664
  %417 = bitcast i8* %416 to <16 x float>*
  %418 = load <16 x float>, <16 x float>* %417, align 64, !tbaa !1553
  %419 = fadd <16 x float> %49, %418
  %420 = fadd <16 x float> %415, %419
  %421 = fcmp ogt <16 x float> %420, zeroinitializer
  %422 = select <16 x i1> %421, <16 x float> %420, <16 x float> zeroinitializer
  %423 = getelementptr inbounds float, float* %10, i64 %412
  %424 = bitcast float* %423 to <16 x float>*
  store <16 x float> %422, <16 x float>* %424, align 64, !tbaa !1556
  %425 = mul i64 %indvars.iv53, 1924145348608
  %sext67 = add i64 %425, 1855425871872
  %426 = ashr exact i64 %sext67, 32
  %427 = getelementptr inbounds float, float* %16, i64 %426
  %428 = bitcast float* %427 to <16 x float>*
  %429 = load <16 x float>, <16 x float>* %428, align 64, !tbaa !1550
  %430 = getelementptr inbounds i8, i8* %35, i64 1728
  %431 = bitcast i8* %430 to <16 x float>*
  %432 = load <16 x float>, <16 x float>* %431, align 64, !tbaa !1553
  %433 = fadd <16 x float> %49, %432
  %434 = fadd <16 x float> %429, %433
  %435 = fcmp ogt <16 x float> %434, zeroinitializer
  %436 = select <16 x i1> %435, <16 x float> %434, <16 x float> zeroinitializer
  %437 = getelementptr inbounds float, float* %10, i64 %426
  %438 = bitcast float* %437 to <16 x float>*
  store <16 x float> %436, <16 x float>* %438, align 64, !tbaa !1556
  %439 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %440 = tail call i32 %439(i32 1, i32 %19, i8* nonnull %35)
  %indvars.iv.next54 = add nsw i64 %indvars.iv53, 1
  %441 = icmp slt i64 %indvars.iv.next54, %33
  br i1 %441, label %for_body, label %for_end, !prof !5

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv40 = phi i64 [ 0, %for_body ], [ %indvars.iv.next41, %for_end6 ]
  %442 = shl nsw i64 %indvars.iv40, 5
  %443 = getelementptr inbounds float, float* %36, i64 %442
  %444 = bitcast float* %443 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %444, align 128, !tbaa !1553
  %445 = or i64 %442, 16
  %446 = getelementptr inbounds float, float* %36, i64 %445
  %447 = bitcast float* %446 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %447, align 64, !tbaa !1553
  %448 = add nuw nsw i64 %442, 224
  %449 = getelementptr inbounds float, float* %36, i64 %448
  %450 = bitcast float* %449 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %450, align 128, !tbaa !1553
  %451 = add nuw nsw i64 %442, 240
  %452 = getelementptr inbounds float, float* %36, i64 %451
  %453 = bitcast float* %452 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %453, align 64, !tbaa !1553
  %454 = shl i64 %indvars.iv40, 4
  %455 = add nsw i64 %454, %43
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_begin7.preheader, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_begin7.preheader ]
  %.lcssa2936 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %681, %for_begin7.preheader ]
  %.lcssa2734 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %675, %for_begin7.preheader ]
  %.lcssa2532 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %669, %for_begin7.preheader ]
  %.lcssa31 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %663, %for_begin7.preheader ]
  %456 = mul nuw nsw i64 %indvars.iv, 1568
  %457 = add nsw i64 %455, %456
  %458 = shl i64 %indvars.iv, 7
  %459 = add nuw nsw i64 %458, %42
  %460 = getelementptr inbounds float, float* %4, i64 %457
  %461 = load float, float* %460, align 4, !tbaa !1559
  %462 = insertelement <16 x float> undef, float %461, i32 0
  %463 = shufflevector <16 x float> %462, <16 x float> undef, <16 x i32> zeroinitializer
  %464 = getelementptr inbounds float, float* %7, i64 %459
  %465 = bitcast float* %464 to <16 x float>*
  %466 = load <16 x float>, <16 x float>* %465, align 64, !tbaa !1562
  %467 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %463, <16 x float> %466, <16 x float> %.lcssa31)
  %468 = or i64 %457, 8
  %469 = getelementptr inbounds float, float* %4, i64 %468
  %470 = load float, float* %469, align 4, !tbaa !1559
  %471 = insertelement <16 x float> undef, float %470, i32 0
  %472 = shufflevector <16 x float> %471, <16 x float> undef, <16 x i32> zeroinitializer
  %473 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %472, <16 x float> %466, <16 x float> %.lcssa2532)
  %474 = add nsw i64 %457, 112
  %475 = getelementptr inbounds float, float* %4, i64 %474
  %476 = load float, float* %475, align 4, !tbaa !1559
  %477 = insertelement <16 x float> undef, float %476, i32 0
  %478 = shufflevector <16 x float> %477, <16 x float> undef, <16 x i32> zeroinitializer
  %479 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %478, <16 x float> %466, <16 x float> %.lcssa2734)
  %480 = add nsw i64 %457, 120
  %481 = getelementptr inbounds float, float* %4, i64 %480
  %482 = load float, float* %481, align 4, !tbaa !1559
  %483 = insertelement <16 x float> undef, float %482, i32 0
  %484 = shufflevector <16 x float> %483, <16 x float> undef, <16 x i32> zeroinitializer
  %485 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %484, <16 x float> %466, <16 x float> %.lcssa2936)
  %486 = or i64 %457, 1
  %487 = getelementptr inbounds float, float* %4, i64 %486
  %488 = load float, float* %487, align 4, !tbaa !1559
  %489 = insertelement <16 x float> undef, float %488, i32 0
  %490 = shufflevector <16 x float> %489, <16 x float> undef, <16 x i32> zeroinitializer
  %491 = or i64 %459, 16
  %492 = getelementptr inbounds float, float* %7, i64 %491
  %493 = bitcast float* %492 to <16 x float>*
  %494 = load <16 x float>, <16 x float>* %493, align 64, !tbaa !1562
  %495 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %490, <16 x float> %494, <16 x float> %467)
  %496 = or i64 %457, 9
  %497 = getelementptr inbounds float, float* %4, i64 %496
  %498 = load float, float* %497, align 4, !tbaa !1559
  %499 = insertelement <16 x float> undef, float %498, i32 0
  %500 = shufflevector <16 x float> %499, <16 x float> undef, <16 x i32> zeroinitializer
  %501 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %500, <16 x float> %494, <16 x float> %473)
  %502 = add nsw i64 %486, 112
  %503 = getelementptr inbounds float, float* %4, i64 %502
  %504 = load float, float* %503, align 4, !tbaa !1559
  %505 = insertelement <16 x float> undef, float %504, i32 0
  %506 = shufflevector <16 x float> %505, <16 x float> undef, <16 x i32> zeroinitializer
  %507 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %506, <16 x float> %494, <16 x float> %479)
  %508 = add nsw i64 %486, 120
  %509 = getelementptr inbounds float, float* %4, i64 %508
  %510 = load float, float* %509, align 4, !tbaa !1559
  %511 = insertelement <16 x float> undef, float %510, i32 0
  %512 = shufflevector <16 x float> %511, <16 x float> undef, <16 x i32> zeroinitializer
  %513 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %512, <16 x float> %494, <16 x float> %485)
  %514 = or i64 %457, 2
  %515 = getelementptr inbounds float, float* %4, i64 %514
  %516 = load float, float* %515, align 4, !tbaa !1559
  %517 = insertelement <16 x float> undef, float %516, i32 0
  %518 = shufflevector <16 x float> %517, <16 x float> undef, <16 x i32> zeroinitializer
  %519 = or i64 %459, 32
  %520 = getelementptr inbounds float, float* %7, i64 %519
  %521 = bitcast float* %520 to <16 x float>*
  %522 = load <16 x float>, <16 x float>* %521, align 64, !tbaa !1562
  %523 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %518, <16 x float> %522, <16 x float> %495)
  %524 = or i64 %457, 10
  %525 = getelementptr inbounds float, float* %4, i64 %524
  %526 = load float, float* %525, align 4, !tbaa !1559
  %527 = insertelement <16 x float> undef, float %526, i32 0
  %528 = shufflevector <16 x float> %527, <16 x float> undef, <16 x i32> zeroinitializer
  %529 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %528, <16 x float> %522, <16 x float> %501)
  %530 = add nsw i64 %514, 112
  %531 = getelementptr inbounds float, float* %4, i64 %530
  %532 = load float, float* %531, align 4, !tbaa !1559
  %533 = insertelement <16 x float> undef, float %532, i32 0
  %534 = shufflevector <16 x float> %533, <16 x float> undef, <16 x i32> zeroinitializer
  %535 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %534, <16 x float> %522, <16 x float> %507)
  %536 = add nsw i64 %514, 120
  %537 = getelementptr inbounds float, float* %4, i64 %536
  %538 = load float, float* %537, align 4, !tbaa !1559
  %539 = insertelement <16 x float> undef, float %538, i32 0
  %540 = shufflevector <16 x float> %539, <16 x float> undef, <16 x i32> zeroinitializer
  %541 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %540, <16 x float> %522, <16 x float> %513)
  %542 = or i64 %457, 3
  %543 = getelementptr inbounds float, float* %4, i64 %542
  %544 = load float, float* %543, align 4, !tbaa !1559
  %545 = insertelement <16 x float> undef, float %544, i32 0
  %546 = shufflevector <16 x float> %545, <16 x float> undef, <16 x i32> zeroinitializer
  %547 = or i64 %459, 48
  %548 = getelementptr inbounds float, float* %7, i64 %547
  %549 = bitcast float* %548 to <16 x float>*
  %550 = load <16 x float>, <16 x float>* %549, align 64, !tbaa !1562
  %551 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %546, <16 x float> %550, <16 x float> %523)
  %552 = or i64 %457, 11
  %553 = getelementptr inbounds float, float* %4, i64 %552
  %554 = load float, float* %553, align 4, !tbaa !1559
  %555 = insertelement <16 x float> undef, float %554, i32 0
  %556 = shufflevector <16 x float> %555, <16 x float> undef, <16 x i32> zeroinitializer
  %557 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %556, <16 x float> %550, <16 x float> %529)
  %558 = add nsw i64 %542, 112
  %559 = getelementptr inbounds float, float* %4, i64 %558
  %560 = load float, float* %559, align 4, !tbaa !1559
  %561 = insertelement <16 x float> undef, float %560, i32 0
  %562 = shufflevector <16 x float> %561, <16 x float> undef, <16 x i32> zeroinitializer
  %563 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %562, <16 x float> %550, <16 x float> %535)
  %564 = add nsw i64 %542, 120
  %565 = getelementptr inbounds float, float* %4, i64 %564
  %566 = load float, float* %565, align 4, !tbaa !1559
  %567 = insertelement <16 x float> undef, float %566, i32 0
  %568 = shufflevector <16 x float> %567, <16 x float> undef, <16 x i32> zeroinitializer
  %569 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %568, <16 x float> %550, <16 x float> %541)
  %570 = or i64 %457, 4
  %571 = getelementptr inbounds float, float* %4, i64 %570
  %572 = load float, float* %571, align 4, !tbaa !1559
  %573 = insertelement <16 x float> undef, float %572, i32 0
  %574 = shufflevector <16 x float> %573, <16 x float> undef, <16 x i32> zeroinitializer
  %575 = or i64 %459, 64
  %576 = getelementptr inbounds float, float* %7, i64 %575
  %577 = bitcast float* %576 to <16 x float>*
  %578 = load <16 x float>, <16 x float>* %577, align 64, !tbaa !1562
  %579 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %574, <16 x float> %578, <16 x float> %551)
  %580 = or i64 %457, 12
  %581 = getelementptr inbounds float, float* %4, i64 %580
  %582 = load float, float* %581, align 4, !tbaa !1559
  %583 = insertelement <16 x float> undef, float %582, i32 0
  %584 = shufflevector <16 x float> %583, <16 x float> undef, <16 x i32> zeroinitializer
  %585 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %584, <16 x float> %578, <16 x float> %557)
  %586 = add nsw i64 %570, 112
  %587 = getelementptr inbounds float, float* %4, i64 %586
  %588 = load float, float* %587, align 4, !tbaa !1559
  %589 = insertelement <16 x float> undef, float %588, i32 0
  %590 = shufflevector <16 x float> %589, <16 x float> undef, <16 x i32> zeroinitializer
  %591 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %590, <16 x float> %578, <16 x float> %563)
  %592 = add nsw i64 %570, 120
  %593 = getelementptr inbounds float, float* %4, i64 %592
  %594 = load float, float* %593, align 4, !tbaa !1559
  %595 = insertelement <16 x float> undef, float %594, i32 0
  %596 = shufflevector <16 x float> %595, <16 x float> undef, <16 x i32> zeroinitializer
  %597 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %596, <16 x float> %578, <16 x float> %569)
  %598 = or i64 %457, 5
  %599 = getelementptr inbounds float, float* %4, i64 %598
  %600 = load float, float* %599, align 4, !tbaa !1559
  %601 = insertelement <16 x float> undef, float %600, i32 0
  %602 = shufflevector <16 x float> %601, <16 x float> undef, <16 x i32> zeroinitializer
  %603 = or i64 %459, 80
  %604 = getelementptr inbounds float, float* %7, i64 %603
  %605 = bitcast float* %604 to <16 x float>*
  %606 = load <16 x float>, <16 x float>* %605, align 64, !tbaa !1562
  %607 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %602, <16 x float> %606, <16 x float> %579)
  %608 = or i64 %457, 13
  %609 = getelementptr inbounds float, float* %4, i64 %608
  %610 = load float, float* %609, align 4, !tbaa !1559
  %611 = insertelement <16 x float> undef, float %610, i32 0
  %612 = shufflevector <16 x float> %611, <16 x float> undef, <16 x i32> zeroinitializer
  %613 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %612, <16 x float> %606, <16 x float> %585)
  %614 = add nsw i64 %598, 112
  %615 = getelementptr inbounds float, float* %4, i64 %614
  %616 = load float, float* %615, align 4, !tbaa !1559
  %617 = insertelement <16 x float> undef, float %616, i32 0
  %618 = shufflevector <16 x float> %617, <16 x float> undef, <16 x i32> zeroinitializer
  %619 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %618, <16 x float> %606, <16 x float> %591)
  %620 = add nsw i64 %598, 120
  %621 = getelementptr inbounds float, float* %4, i64 %620
  %622 = load float, float* %621, align 4, !tbaa !1559
  %623 = insertelement <16 x float> undef, float %622, i32 0
  %624 = shufflevector <16 x float> %623, <16 x float> undef, <16 x i32> zeroinitializer
  %625 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %624, <16 x float> %606, <16 x float> %597)
  %626 = or i64 %457, 6
  %627 = getelementptr inbounds float, float* %4, i64 %626
  %628 = load float, float* %627, align 4, !tbaa !1559
  %629 = insertelement <16 x float> undef, float %628, i32 0
  %630 = shufflevector <16 x float> %629, <16 x float> undef, <16 x i32> zeroinitializer
  %631 = or i64 %459, 96
  %632 = getelementptr inbounds float, float* %7, i64 %631
  %633 = bitcast float* %632 to <16 x float>*
  %634 = load <16 x float>, <16 x float>* %633, align 64, !tbaa !1562
  %635 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %630, <16 x float> %634, <16 x float> %607)
  %636 = or i64 %457, 14
  %637 = getelementptr inbounds float, float* %4, i64 %636
  %638 = load float, float* %637, align 4, !tbaa !1559
  %639 = insertelement <16 x float> undef, float %638, i32 0
  %640 = shufflevector <16 x float> %639, <16 x float> undef, <16 x i32> zeroinitializer
  %641 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %640, <16 x float> %634, <16 x float> %613)
  %642 = add nsw i64 %626, 112
  %643 = getelementptr inbounds float, float* %4, i64 %642
  %644 = load float, float* %643, align 4, !tbaa !1559
  %645 = insertelement <16 x float> undef, float %644, i32 0
  %646 = shufflevector <16 x float> %645, <16 x float> undef, <16 x i32> zeroinitializer
  %647 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %646, <16 x float> %634, <16 x float> %619)
  %648 = add nsw i64 %626, 120
  %649 = getelementptr inbounds float, float* %4, i64 %648
  %650 = load float, float* %649, align 4, !tbaa !1559
  %651 = insertelement <16 x float> undef, float %650, i32 0
  %652 = shufflevector <16 x float> %651, <16 x float> undef, <16 x i32> zeroinitializer
  %653 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %652, <16 x float> %634, <16 x float> %625)
  %654 = or i64 %457, 7
  %655 = getelementptr inbounds float, float* %4, i64 %654
  %656 = load float, float* %655, align 4, !tbaa !1559
  %657 = insertelement <16 x float> undef, float %656, i32 0
  %658 = shufflevector <16 x float> %657, <16 x float> undef, <16 x i32> zeroinitializer
  %659 = or i64 %459, 112
  %660 = getelementptr inbounds float, float* %7, i64 %659
  %661 = bitcast float* %660 to <16 x float>*
  %662 = load <16 x float>, <16 x float>* %661, align 64, !tbaa !1562
  %663 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %658, <16 x float> %662, <16 x float> %635)
  %664 = or i64 %457, 15
  %665 = getelementptr inbounds float, float* %4, i64 %664
  %666 = load float, float* %665, align 4, !tbaa !1559
  %667 = insertelement <16 x float> undef, float %666, i32 0
  %668 = shufflevector <16 x float> %667, <16 x float> undef, <16 x i32> zeroinitializer
  %669 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %668, <16 x float> %662, <16 x float> %641)
  %670 = add nsw i64 %654, 112
  %671 = getelementptr inbounds float, float* %4, i64 %670
  %672 = load float, float* %671, align 4, !tbaa !1559
  %673 = insertelement <16 x float> undef, float %672, i32 0
  %674 = shufflevector <16 x float> %673, <16 x float> undef, <16 x i32> zeroinitializer
  %675 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %674, <16 x float> %662, <16 x float> %647)
  %676 = add nsw i64 %654, 120
  %677 = getelementptr inbounds float, float* %4, i64 %676
  %678 = load float, float* %677, align 4, !tbaa !1559
  %679 = insertelement <16 x float> undef, float %678, i32 0
  %680 = shufflevector <16 x float> %679, <16 x float> undef, <16 x i32> zeroinitializer
  %681 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %680, <16 x float> %662, <16 x float> %653)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for_end6, label %for_begin7.preheader, !prof !50

for_end6:                                         ; preds = %for_begin7.preheader
  store <16 x float> %663, <16 x float>* %444, align 128, !tbaa !1553
  store <16 x float> %669, <16 x float>* %447, align 64, !tbaa !1553
  store <16 x float> %675, <16 x float>* %450, align 128, !tbaa !1553
  store <16 x float> %681, <16 x float>* %453, align 64, !tbaa !1553
  %indvars.iv.next41 = add nuw nsw i64 %indvars.iv40, 1
  %exitcond42 = icmp eq i64 %indvars.iv.next41, 7
  br i1 %exitcond42, label %for_begin10.preheader, label %for_body2, !prof !50
}

define dllexport i32 @fused_layout_transform_reshape_multiply(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !1565
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.150, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !1579
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.151, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !1581
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !1595
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 256
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.152, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !1597
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.153, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !1600
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.154, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !1602
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 8
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !1606
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 2048
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !1620
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 8
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !1622
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 8
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !1625
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 8
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !1627
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([230 x i8], [230 x i8]* @.str.155, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 2
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.156, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !1631
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !1645
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 2048
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.157, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = icmp eq i64* %27, null
  br i1 %131, label %if_end38, label %if_then37, !prof !50

if_then37:                                        ; preds = %assert_end36
  %132 = load i64, i64* %27, align 8, !tbaa !1647
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 2048
  %135 = getelementptr inbounds i64, i64* %27, i64 1
  %136 = load i64, i64* %135, align 8, !tbaa !1661
  %137 = trunc i64 %136 to i32
  %138 = icmp eq i32 %137, 1
  %139 = and i1 %134, %138
  br i1 %139, label %if_end38, label %assert_fail39, !prof !5

if_end38:                                         ; preds = %assert_end36, %if_then37
  %140 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %141 = load i64, i64* %140, align 8
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %assert_end42, label %assert_fail41, !prof !5

assert_fail39:                                    ; preds = %if_then37
  %143 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %143(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.158, i64 0, i64 0))
  ret i32 -1

assert_fail41:                                    ; preds = %if_end38
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %if_end38
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 1
  br i1 %147, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %21, %150
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  tail call fastcc void @fused_layout_transform_reshape_multiply_compute_(i8* %23, i8* %15)
  ret i32 0
}

; Function Attrs: nofree noinline norecurse nounwind
define private fastcc void @fused_layout_transform_reshape_multiply_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for_body ]
  %4 = shl nsw i64 %indvars.iv, 4
  %5 = trunc i64 %4 to i32
  %6 = insertelement <16 x i32> undef, i32 %5, i32 0
  %7 = trunc i64 %4 to i32
  %8 = or i32 %7, 1
  %9 = insertelement <16 x i32> %6, i32 %8, i32 1
  %10 = trunc i64 %4 to i32
  %11 = or i32 %10, 2
  %12 = insertelement <16 x i32> %9, i32 %11, i32 2
  %13 = trunc i64 %4 to i32
  %14 = or i32 %13, 3
  %15 = insertelement <16 x i32> %12, i32 %14, i32 3
  %16 = trunc i64 %4 to i32
  %17 = or i32 %16, 4
  %18 = insertelement <16 x i32> %15, i32 %17, i32 4
  %19 = trunc i64 %4 to i32
  %20 = or i32 %19, 5
  %21 = insertelement <16 x i32> %18, i32 %20, i32 5
  %22 = trunc i64 %4 to i32
  %23 = or i32 %22, 6
  %24 = insertelement <16 x i32> %21, i32 %23, i32 6
  %25 = trunc i64 %4 to i32
  %26 = or i32 %25, 7
  %27 = insertelement <16 x i32> %24, i32 %26, i32 7
  %28 = trunc i64 %4 to i32
  %29 = or i32 %28, 8
  %30 = insertelement <16 x i32> %27, i32 %29, i32 8
  %31 = trunc i64 %4 to i32
  %32 = or i32 %31, 9
  %33 = insertelement <16 x i32> %30, i32 %32, i32 9
  %34 = trunc i64 %4 to i32
  %35 = or i32 %34, 10
  %36 = insertelement <16 x i32> %33, i32 %35, i32 10
  %37 = trunc i64 %4 to i32
  %38 = or i32 %37, 11
  %39 = insertelement <16 x i32> %36, i32 %38, i32 11
  %40 = trunc i64 %4 to i32
  %41 = or i32 %40, 12
  %42 = insertelement <16 x i32> %39, i32 %41, i32 12
  %43 = trunc i64 %4 to i32
  %44 = or i32 %43, 13
  %45 = insertelement <16 x i32> %42, i32 %44, i32 13
  %46 = trunc i64 %4 to i32
  %47 = or i32 %46, 14
  %48 = insertelement <16 x i32> %45, i32 %47, i32 14
  %49 = trunc i64 %4 to i32
  %50 = or i32 %49, 15
  %51 = insertelement <16 x i32> %48, i32 %50, i32 15
  %52 = sdiv <16 x i32> %51, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %53 = mul <16 x i32> %52, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %.decomposed = sub <16 x i32> %51, %53
  %.lobit = lshr <16 x i32> %.decomposed, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %54 = sub nsw <16 x i32> %52, %.lobit
  %55 = shl nsw <16 x i32> %54, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %56 = or <16 x i32> %55, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %57 = extractelement <16 x i32> %56, i64 0
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds float, float* %2, i64 %58
  %60 = load float, float* %59, align 4, !tbaa !1663
  %61 = insertelement <16 x float> undef, float %60, i32 0
  %62 = extractelement <16 x i32> %56, i64 1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %2, i64 %63
  %65 = load float, float* %64, align 4, !tbaa !1663
  %66 = insertelement <16 x float> %61, float %65, i32 1
  %67 = extractelement <16 x i32> %56, i64 2
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds float, float* %2, i64 %68
  %70 = load float, float* %69, align 4, !tbaa !1663
  %71 = insertelement <16 x float> %66, float %70, i32 2
  %72 = extractelement <16 x i32> %56, i64 3
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds float, float* %2, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !1663
  %76 = insertelement <16 x float> %71, float %75, i32 3
  %77 = extractelement <16 x i32> %56, i64 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds float, float* %2, i64 %78
  %80 = load float, float* %79, align 4, !tbaa !1663
  %81 = insertelement <16 x float> %76, float %80, i32 4
  %82 = extractelement <16 x i32> %56, i64 5
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds float, float* %2, i64 %83
  %85 = load float, float* %84, align 4, !tbaa !1663
  %86 = insertelement <16 x float> %81, float %85, i32 5
  %87 = extractelement <16 x i32> %56, i64 6
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds float, float* %2, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !1663
  %91 = insertelement <16 x float> %86, float %90, i32 6
  %92 = extractelement <16 x i32> %56, i64 7
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds float, float* %2, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !1663
  %96 = insertelement <16 x float> %91, float %95, i32 7
  %97 = extractelement <16 x i32> %56, i64 8
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds float, float* %2, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !1663
  %101 = insertelement <16 x float> %96, float %100, i32 8
  %102 = extractelement <16 x i32> %56, i64 9
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %2, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !1663
  %106 = insertelement <16 x float> %101, float %105, i32 9
  %107 = extractelement <16 x i32> %56, i64 10
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float* %2, i64 %108
  %110 = load float, float* %109, align 4, !tbaa !1663
  %111 = insertelement <16 x float> %106, float %110, i32 10
  %112 = extractelement <16 x i32> %56, i64 11
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds float, float* %2, i64 %113
  %115 = load float, float* %114, align 4, !tbaa !1663
  %116 = insertelement <16 x float> %111, float %115, i32 11
  %117 = extractelement <16 x i32> %56, i64 12
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds float, float* %2, i64 %118
  %120 = load float, float* %119, align 4, !tbaa !1663
  %121 = insertelement <16 x float> %116, float %120, i32 12
  %122 = extractelement <16 x i32> %56, i64 13
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds float, float* %2, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !1663
  %126 = insertelement <16 x float> %121, float %125, i32 13
  %127 = extractelement <16 x i32> %56, i64 14
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds float, float* %2, i64 %128
  %130 = load float, float* %129, align 4, !tbaa !1663
  %131 = insertelement <16 x float> %126, float %130, i32 14
  %132 = extractelement <16 x i32> %56, i64 15
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds float, float* %2, i64 %133
  %135 = load float, float* %134, align 4, !tbaa !1663
  %136 = insertelement <16 x float> %131, float %135, i32 15
  %137 = getelementptr inbounds float, float* %3, i64 %4
  %138 = bitcast float* %137 to <16 x float>*
  store <16 x float> %136, <16 x float>* %138, align 64, !tbaa !1666
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %for_end, label %for_body, !prof !50

for_end:                                          ; preds = %for_body
  ret void
}

define dllexport i32 @fused_layout_transform_47(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.159, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !1669
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.160, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !1683
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.161, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !1685
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !1699
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 64
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.162, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !1701
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 14
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.125, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !1704
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 14
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.126, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !1706
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 16
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !1710
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 200704
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !1724
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 3136
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !1726
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 224
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !1729
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 16
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !1731
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.163, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !1735
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !1749
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 16
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !1751
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 14
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.164, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !1754
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 14
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.165, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !1756
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 64
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.92, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !1760
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 200704
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !1774
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 12544
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !1776
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 896
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !1779
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 64
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !1781
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.166, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_47_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_47_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %13, align 8
  %3 = getelementptr inbounds %13, %13* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %13, %13* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %13* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.167, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.167(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 223
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 224
  %15 = select i1 %14, i32 %13, i32 224
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 224
  %18 = select i1 %17, i32 %16, i32 224
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_begin1.preheader ]
  %22 = mul nsw i64 %indvars.iv, 896
  %23 = trunc i64 %indvars.iv to i32
  %24 = sdiv i32 %23, 14
  %25 = mul i32 %24, 14
  %.decomposed = sub i32 %23, %25
  %26 = mul nsw i32 %.decomposed, 224
  %27 = mul nsw i32 %24, 12544
  %28 = add i32 %26, %27
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds float, float* %7, i64 %29
  %31 = bitcast float* %30 to <16 x float>*
  %32 = load <16 x float>, <16 x float>* %31, align 64, !tbaa !1785
  %33 = getelementptr inbounds float, float* %4, i64 %22
  %34 = bitcast float* %33 to <16 x float>*
  store <16 x float> %32, <16 x float>* %34, align 64, !tbaa !1788
  %35 = or i64 %22, 16
  %36 = add i32 %28, 3136
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds float, float* %7, i64 %37
  %39 = bitcast float* %38 to <16 x float>*
  %40 = load <16 x float>, <16 x float>* %39, align 64, !tbaa !1785
  %41 = getelementptr inbounds float, float* %4, i64 %35
  %42 = bitcast float* %41 to <16 x float>*
  store <16 x float> %40, <16 x float>* %42, align 64, !tbaa !1788
  %43 = or i64 %22, 32
  %44 = add i32 %28, 6272
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float* %7, i64 %45
  %47 = bitcast float* %46 to <16 x float>*
  %48 = load <16 x float>, <16 x float>* %47, align 64, !tbaa !1785
  %49 = getelementptr inbounds float, float* %4, i64 %43
  %50 = bitcast float* %49 to <16 x float>*
  store <16 x float> %48, <16 x float>* %50, align 64, !tbaa !1788
  %51 = or i64 %22, 48
  %52 = add i32 %28, 9408
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds float, float* %7, i64 %53
  %55 = bitcast float* %54 to <16 x float>*
  %56 = load <16 x float>, <16 x float>* %55, align 64, !tbaa !1785
  %57 = getelementptr inbounds float, float* %4, i64 %51
  %58 = bitcast float* %57 to <16 x float>*
  store <16 x float> %56, <16 x float>* %58, align 64, !tbaa !1788
  %59 = or i64 %22, 64
  %60 = or i32 %28, 16
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %7, i64 %61
  %63 = bitcast float* %62 to <16 x float>*
  %64 = load <16 x float>, <16 x float>* %63, align 64, !tbaa !1785
  %65 = getelementptr inbounds float, float* %4, i64 %59
  %66 = bitcast float* %65 to <16 x float>*
  store <16 x float> %64, <16 x float>* %66, align 64, !tbaa !1788
  %67 = or i64 %22, 80
  %68 = add i32 %60, 3136
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds float, float* %7, i64 %69
  %71 = bitcast float* %70 to <16 x float>*
  %72 = load <16 x float>, <16 x float>* %71, align 64, !tbaa !1785
  %73 = getelementptr inbounds float, float* %4, i64 %67
  %74 = bitcast float* %73 to <16 x float>*
  store <16 x float> %72, <16 x float>* %74, align 64, !tbaa !1788
  %75 = or i64 %22, 96
  %76 = add i32 %60, 6272
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds float, float* %7, i64 %77
  %79 = bitcast float* %78 to <16 x float>*
  %80 = load <16 x float>, <16 x float>* %79, align 64, !tbaa !1785
  %81 = getelementptr inbounds float, float* %4, i64 %75
  %82 = bitcast float* %81 to <16 x float>*
  store <16 x float> %80, <16 x float>* %82, align 64, !tbaa !1788
  %83 = or i64 %22, 112
  %84 = add i32 %60, 9408
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds float, float* %7, i64 %85
  %87 = bitcast float* %86 to <16 x float>*
  %88 = load <16 x float>, <16 x float>* %87, align 64, !tbaa !1785
  %89 = getelementptr inbounds float, float* %4, i64 %83
  %90 = bitcast float* %89 to <16 x float>*
  store <16 x float> %88, <16 x float>* %90, align 64, !tbaa !1788
  %91 = add nsw i64 %22, 128
  %92 = add i32 %28, 32
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds float, float* %7, i64 %93
  %95 = bitcast float* %94 to <16 x float>*
  %96 = load <16 x float>, <16 x float>* %95, align 64, !tbaa !1785
  %97 = getelementptr inbounds float, float* %4, i64 %91
  %98 = bitcast float* %97 to <16 x float>*
  store <16 x float> %96, <16 x float>* %98, align 64, !tbaa !1788
  %99 = add nsw i64 %22, 144
  %100 = add i32 %28, 3168
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = bitcast float* %102 to <16 x float>*
  %104 = load <16 x float>, <16 x float>* %103, align 64, !tbaa !1785
  %105 = getelementptr inbounds float, float* %4, i64 %99
  %106 = bitcast float* %105 to <16 x float>*
  store <16 x float> %104, <16 x float>* %106, align 64, !tbaa !1788
  %107 = add nsw i64 %22, 160
  %108 = add i32 %28, 6304
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds float, float* %7, i64 %109
  %111 = bitcast float* %110 to <16 x float>*
  %112 = load <16 x float>, <16 x float>* %111, align 64, !tbaa !1785
  %113 = getelementptr inbounds float, float* %4, i64 %107
  %114 = bitcast float* %113 to <16 x float>*
  store <16 x float> %112, <16 x float>* %114, align 64, !tbaa !1788
  %115 = add nsw i64 %22, 176
  %116 = add i32 %28, 9440
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float* %7, i64 %117
  %119 = bitcast float* %118 to <16 x float>*
  %120 = load <16 x float>, <16 x float>* %119, align 64, !tbaa !1785
  %121 = getelementptr inbounds float, float* %4, i64 %115
  %122 = bitcast float* %121 to <16 x float>*
  store <16 x float> %120, <16 x float>* %122, align 64, !tbaa !1788
  %123 = add nsw i64 %22, 192
  %124 = add i32 %28, 48
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds float, float* %7, i64 %125
  %127 = bitcast float* %126 to <16 x float>*
  %128 = load <16 x float>, <16 x float>* %127, align 64, !tbaa !1785
  %129 = getelementptr inbounds float, float* %4, i64 %123
  %130 = bitcast float* %129 to <16 x float>*
  store <16 x float> %128, <16 x float>* %130, align 64, !tbaa !1788
  %131 = add nsw i64 %22, 208
  %132 = add i32 %28, 3184
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds float, float* %7, i64 %133
  %135 = bitcast float* %134 to <16 x float>*
  %136 = load <16 x float>, <16 x float>* %135, align 64, !tbaa !1785
  %137 = getelementptr inbounds float, float* %4, i64 %131
  %138 = bitcast float* %137 to <16 x float>*
  store <16 x float> %136, <16 x float>* %138, align 64, !tbaa !1788
  %139 = add nsw i64 %22, 224
  %140 = add i32 %28, 6320
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %7, i64 %141
  %143 = bitcast float* %142 to <16 x float>*
  %144 = load <16 x float>, <16 x float>* %143, align 64, !tbaa !1785
  %145 = getelementptr inbounds float, float* %4, i64 %139
  %146 = bitcast float* %145 to <16 x float>*
  store <16 x float> %144, <16 x float>* %146, align 64, !tbaa !1788
  %147 = add nsw i64 %22, 240
  %148 = add i32 %28, 9456
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds float, float* %7, i64 %149
  %151 = bitcast float* %150 to <16 x float>*
  %152 = load <16 x float>, <16 x float>* %151, align 64, !tbaa !1785
  %153 = getelementptr inbounds float, float* %4, i64 %147
  %154 = bitcast float* %153 to <16 x float>*
  store <16 x float> %152, <16 x float>* %154, align 64, !tbaa !1788
  %155 = add nsw i64 %22, 256
  %156 = add i32 %28, 64
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds float, float* %7, i64 %157
  %159 = bitcast float* %158 to <16 x float>*
  %160 = load <16 x float>, <16 x float>* %159, align 64, !tbaa !1785
  %161 = getelementptr inbounds float, float* %4, i64 %155
  %162 = bitcast float* %161 to <16 x float>*
  store <16 x float> %160, <16 x float>* %162, align 64, !tbaa !1788
  %163 = add nsw i64 %22, 272
  %164 = add i32 %28, 3200
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds float, float* %7, i64 %165
  %167 = bitcast float* %166 to <16 x float>*
  %168 = load <16 x float>, <16 x float>* %167, align 64, !tbaa !1785
  %169 = getelementptr inbounds float, float* %4, i64 %163
  %170 = bitcast float* %169 to <16 x float>*
  store <16 x float> %168, <16 x float>* %170, align 64, !tbaa !1788
  %171 = add nsw i64 %22, 288
  %172 = add i32 %28, 6336
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds float, float* %7, i64 %173
  %175 = bitcast float* %174 to <16 x float>*
  %176 = load <16 x float>, <16 x float>* %175, align 64, !tbaa !1785
  %177 = getelementptr inbounds float, float* %4, i64 %171
  %178 = bitcast float* %177 to <16 x float>*
  store <16 x float> %176, <16 x float>* %178, align 64, !tbaa !1788
  %179 = add nsw i64 %22, 304
  %180 = add i32 %28, 9472
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds float, float* %7, i64 %181
  %183 = bitcast float* %182 to <16 x float>*
  %184 = load <16 x float>, <16 x float>* %183, align 64, !tbaa !1785
  %185 = getelementptr inbounds float, float* %4, i64 %179
  %186 = bitcast float* %185 to <16 x float>*
  store <16 x float> %184, <16 x float>* %186, align 64, !tbaa !1788
  %187 = add nsw i64 %22, 320
  %188 = add i32 %28, 80
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds float, float* %7, i64 %189
  %191 = bitcast float* %190 to <16 x float>*
  %192 = load <16 x float>, <16 x float>* %191, align 64, !tbaa !1785
  %193 = getelementptr inbounds float, float* %4, i64 %187
  %194 = bitcast float* %193 to <16 x float>*
  store <16 x float> %192, <16 x float>* %194, align 64, !tbaa !1788
  %195 = add nsw i64 %22, 336
  %196 = add i32 %28, 3216
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds float, float* %7, i64 %197
  %199 = bitcast float* %198 to <16 x float>*
  %200 = load <16 x float>, <16 x float>* %199, align 64, !tbaa !1785
  %201 = getelementptr inbounds float, float* %4, i64 %195
  %202 = bitcast float* %201 to <16 x float>*
  store <16 x float> %200, <16 x float>* %202, align 64, !tbaa !1788
  %203 = add nsw i64 %22, 352
  %204 = add i32 %28, 6352
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds float, float* %7, i64 %205
  %207 = bitcast float* %206 to <16 x float>*
  %208 = load <16 x float>, <16 x float>* %207, align 64, !tbaa !1785
  %209 = getelementptr inbounds float, float* %4, i64 %203
  %210 = bitcast float* %209 to <16 x float>*
  store <16 x float> %208, <16 x float>* %210, align 64, !tbaa !1788
  %211 = add nsw i64 %22, 368
  %212 = add i32 %28, 9488
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds float, float* %7, i64 %213
  %215 = bitcast float* %214 to <16 x float>*
  %216 = load <16 x float>, <16 x float>* %215, align 64, !tbaa !1785
  %217 = getelementptr inbounds float, float* %4, i64 %211
  %218 = bitcast float* %217 to <16 x float>*
  store <16 x float> %216, <16 x float>* %218, align 64, !tbaa !1788
  %219 = add nsw i64 %22, 384
  %220 = add i32 %28, 96
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds float, float* %7, i64 %221
  %223 = bitcast float* %222 to <16 x float>*
  %224 = load <16 x float>, <16 x float>* %223, align 64, !tbaa !1785
  %225 = getelementptr inbounds float, float* %4, i64 %219
  %226 = bitcast float* %225 to <16 x float>*
  store <16 x float> %224, <16 x float>* %226, align 64, !tbaa !1788
  %227 = add nsw i64 %22, 400
  %228 = add i32 %28, 3232
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds float, float* %7, i64 %229
  %231 = bitcast float* %230 to <16 x float>*
  %232 = load <16 x float>, <16 x float>* %231, align 64, !tbaa !1785
  %233 = getelementptr inbounds float, float* %4, i64 %227
  %234 = bitcast float* %233 to <16 x float>*
  store <16 x float> %232, <16 x float>* %234, align 64, !tbaa !1788
  %235 = add nsw i64 %22, 416
  %236 = add i32 %28, 6368
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds float, float* %7, i64 %237
  %239 = bitcast float* %238 to <16 x float>*
  %240 = load <16 x float>, <16 x float>* %239, align 64, !tbaa !1785
  %241 = getelementptr inbounds float, float* %4, i64 %235
  %242 = bitcast float* %241 to <16 x float>*
  store <16 x float> %240, <16 x float>* %242, align 64, !tbaa !1788
  %243 = add nsw i64 %22, 432
  %244 = add i32 %28, 9504
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds float, float* %7, i64 %245
  %247 = bitcast float* %246 to <16 x float>*
  %248 = load <16 x float>, <16 x float>* %247, align 64, !tbaa !1785
  %249 = getelementptr inbounds float, float* %4, i64 %243
  %250 = bitcast float* %249 to <16 x float>*
  store <16 x float> %248, <16 x float>* %250, align 64, !tbaa !1788
  %251 = add nsw i64 %22, 448
  %252 = add i32 %28, 112
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds float, float* %7, i64 %253
  %255 = bitcast float* %254 to <16 x float>*
  %256 = load <16 x float>, <16 x float>* %255, align 64, !tbaa !1785
  %257 = getelementptr inbounds float, float* %4, i64 %251
  %258 = bitcast float* %257 to <16 x float>*
  store <16 x float> %256, <16 x float>* %258, align 64, !tbaa !1788
  %259 = add nsw i64 %22, 464
  %260 = add i32 %28, 3248
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds float, float* %7, i64 %261
  %263 = bitcast float* %262 to <16 x float>*
  %264 = load <16 x float>, <16 x float>* %263, align 64, !tbaa !1785
  %265 = getelementptr inbounds float, float* %4, i64 %259
  %266 = bitcast float* %265 to <16 x float>*
  store <16 x float> %264, <16 x float>* %266, align 64, !tbaa !1788
  %267 = add nsw i64 %22, 480
  %268 = add i32 %28, 6384
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds float, float* %7, i64 %269
  %271 = bitcast float* %270 to <16 x float>*
  %272 = load <16 x float>, <16 x float>* %271, align 64, !tbaa !1785
  %273 = getelementptr inbounds float, float* %4, i64 %267
  %274 = bitcast float* %273 to <16 x float>*
  store <16 x float> %272, <16 x float>* %274, align 64, !tbaa !1788
  %275 = add nsw i64 %22, 496
  %276 = add i32 %28, 9520
  %277 = sext i32 %276 to i64
  %278 = getelementptr inbounds float, float* %7, i64 %277
  %279 = bitcast float* %278 to <16 x float>*
  %280 = load <16 x float>, <16 x float>* %279, align 64, !tbaa !1785
  %281 = getelementptr inbounds float, float* %4, i64 %275
  %282 = bitcast float* %281 to <16 x float>*
  store <16 x float> %280, <16 x float>* %282, align 64, !tbaa !1788
  %283 = add nsw i64 %22, 512
  %284 = add i32 %28, 128
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds float, float* %7, i64 %285
  %287 = bitcast float* %286 to <16 x float>*
  %288 = load <16 x float>, <16 x float>* %287, align 64, !tbaa !1785
  %289 = getelementptr inbounds float, float* %4, i64 %283
  %290 = bitcast float* %289 to <16 x float>*
  store <16 x float> %288, <16 x float>* %290, align 64, !tbaa !1788
  %291 = add nsw i64 %22, 528
  %292 = add i32 %28, 3264
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds float, float* %7, i64 %293
  %295 = bitcast float* %294 to <16 x float>*
  %296 = load <16 x float>, <16 x float>* %295, align 64, !tbaa !1785
  %297 = getelementptr inbounds float, float* %4, i64 %291
  %298 = bitcast float* %297 to <16 x float>*
  store <16 x float> %296, <16 x float>* %298, align 64, !tbaa !1788
  %299 = add nsw i64 %22, 544
  %300 = add i32 %28, 6400
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds float, float* %7, i64 %301
  %303 = bitcast float* %302 to <16 x float>*
  %304 = load <16 x float>, <16 x float>* %303, align 64, !tbaa !1785
  %305 = getelementptr inbounds float, float* %4, i64 %299
  %306 = bitcast float* %305 to <16 x float>*
  store <16 x float> %304, <16 x float>* %306, align 64, !tbaa !1788
  %307 = add nsw i64 %22, 560
  %308 = add i32 %28, 9536
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds float, float* %7, i64 %309
  %311 = bitcast float* %310 to <16 x float>*
  %312 = load <16 x float>, <16 x float>* %311, align 64, !tbaa !1785
  %313 = getelementptr inbounds float, float* %4, i64 %307
  %314 = bitcast float* %313 to <16 x float>*
  store <16 x float> %312, <16 x float>* %314, align 64, !tbaa !1788
  %315 = add nsw i64 %22, 576
  %316 = add i32 %28, 144
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds float, float* %7, i64 %317
  %319 = bitcast float* %318 to <16 x float>*
  %320 = load <16 x float>, <16 x float>* %319, align 64, !tbaa !1785
  %321 = getelementptr inbounds float, float* %4, i64 %315
  %322 = bitcast float* %321 to <16 x float>*
  store <16 x float> %320, <16 x float>* %322, align 64, !tbaa !1788
  %323 = add nsw i64 %22, 592
  %324 = add i32 %28, 3280
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds float, float* %7, i64 %325
  %327 = bitcast float* %326 to <16 x float>*
  %328 = load <16 x float>, <16 x float>* %327, align 64, !tbaa !1785
  %329 = getelementptr inbounds float, float* %4, i64 %323
  %330 = bitcast float* %329 to <16 x float>*
  store <16 x float> %328, <16 x float>* %330, align 64, !tbaa !1788
  %331 = add nsw i64 %22, 608
  %332 = add i32 %28, 6416
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds float, float* %7, i64 %333
  %335 = bitcast float* %334 to <16 x float>*
  %336 = load <16 x float>, <16 x float>* %335, align 64, !tbaa !1785
  %337 = getelementptr inbounds float, float* %4, i64 %331
  %338 = bitcast float* %337 to <16 x float>*
  store <16 x float> %336, <16 x float>* %338, align 64, !tbaa !1788
  %339 = add nsw i64 %22, 624
  %340 = add i32 %28, 9552
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds float, float* %7, i64 %341
  %343 = bitcast float* %342 to <16 x float>*
  %344 = load <16 x float>, <16 x float>* %343, align 64, !tbaa !1785
  %345 = getelementptr inbounds float, float* %4, i64 %339
  %346 = bitcast float* %345 to <16 x float>*
  store <16 x float> %344, <16 x float>* %346, align 64, !tbaa !1788
  %347 = add nsw i64 %22, 640
  %348 = add i32 %28, 160
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds float, float* %7, i64 %349
  %351 = bitcast float* %350 to <16 x float>*
  %352 = load <16 x float>, <16 x float>* %351, align 64, !tbaa !1785
  %353 = getelementptr inbounds float, float* %4, i64 %347
  %354 = bitcast float* %353 to <16 x float>*
  store <16 x float> %352, <16 x float>* %354, align 64, !tbaa !1788
  %355 = add nsw i64 %22, 656
  %356 = add i32 %28, 3296
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds float, float* %7, i64 %357
  %359 = bitcast float* %358 to <16 x float>*
  %360 = load <16 x float>, <16 x float>* %359, align 64, !tbaa !1785
  %361 = getelementptr inbounds float, float* %4, i64 %355
  %362 = bitcast float* %361 to <16 x float>*
  store <16 x float> %360, <16 x float>* %362, align 64, !tbaa !1788
  %363 = add nsw i64 %22, 672
  %364 = add i32 %28, 6432
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds float, float* %7, i64 %365
  %367 = bitcast float* %366 to <16 x float>*
  %368 = load <16 x float>, <16 x float>* %367, align 64, !tbaa !1785
  %369 = getelementptr inbounds float, float* %4, i64 %363
  %370 = bitcast float* %369 to <16 x float>*
  store <16 x float> %368, <16 x float>* %370, align 64, !tbaa !1788
  %371 = add nsw i64 %22, 688
  %372 = add i32 %28, 9568
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds float, float* %7, i64 %373
  %375 = bitcast float* %374 to <16 x float>*
  %376 = load <16 x float>, <16 x float>* %375, align 64, !tbaa !1785
  %377 = getelementptr inbounds float, float* %4, i64 %371
  %378 = bitcast float* %377 to <16 x float>*
  store <16 x float> %376, <16 x float>* %378, align 64, !tbaa !1788
  %379 = add nsw i64 %22, 704
  %380 = add i32 %28, 176
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds float, float* %7, i64 %381
  %383 = bitcast float* %382 to <16 x float>*
  %384 = load <16 x float>, <16 x float>* %383, align 64, !tbaa !1785
  %385 = getelementptr inbounds float, float* %4, i64 %379
  %386 = bitcast float* %385 to <16 x float>*
  store <16 x float> %384, <16 x float>* %386, align 64, !tbaa !1788
  %387 = add nsw i64 %22, 720
  %388 = add i32 %28, 3312
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds float, float* %7, i64 %389
  %391 = bitcast float* %390 to <16 x float>*
  %392 = load <16 x float>, <16 x float>* %391, align 64, !tbaa !1785
  %393 = getelementptr inbounds float, float* %4, i64 %387
  %394 = bitcast float* %393 to <16 x float>*
  store <16 x float> %392, <16 x float>* %394, align 64, !tbaa !1788
  %395 = add nsw i64 %22, 736
  %396 = add i32 %28, 6448
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds float, float* %7, i64 %397
  %399 = bitcast float* %398 to <16 x float>*
  %400 = load <16 x float>, <16 x float>* %399, align 64, !tbaa !1785
  %401 = getelementptr inbounds float, float* %4, i64 %395
  %402 = bitcast float* %401 to <16 x float>*
  store <16 x float> %400, <16 x float>* %402, align 64, !tbaa !1788
  %403 = add nsw i64 %22, 752
  %404 = add i32 %28, 9584
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds float, float* %7, i64 %405
  %407 = bitcast float* %406 to <16 x float>*
  %408 = load <16 x float>, <16 x float>* %407, align 64, !tbaa !1785
  %409 = getelementptr inbounds float, float* %4, i64 %403
  %410 = bitcast float* %409 to <16 x float>*
  store <16 x float> %408, <16 x float>* %410, align 64, !tbaa !1788
  %411 = add nsw i64 %22, 768
  %412 = add i32 %28, 192
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds float, float* %7, i64 %413
  %415 = bitcast float* %414 to <16 x float>*
  %416 = load <16 x float>, <16 x float>* %415, align 64, !tbaa !1785
  %417 = getelementptr inbounds float, float* %4, i64 %411
  %418 = bitcast float* %417 to <16 x float>*
  store <16 x float> %416, <16 x float>* %418, align 64, !tbaa !1788
  %419 = add nsw i64 %22, 784
  %420 = add i32 %28, 3328
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds float, float* %7, i64 %421
  %423 = bitcast float* %422 to <16 x float>*
  %424 = load <16 x float>, <16 x float>* %423, align 64, !tbaa !1785
  %425 = getelementptr inbounds float, float* %4, i64 %419
  %426 = bitcast float* %425 to <16 x float>*
  store <16 x float> %424, <16 x float>* %426, align 64, !tbaa !1788
  %427 = add nsw i64 %22, 800
  %428 = add i32 %28, 6464
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds float, float* %7, i64 %429
  %431 = bitcast float* %430 to <16 x float>*
  %432 = load <16 x float>, <16 x float>* %431, align 64, !tbaa !1785
  %433 = getelementptr inbounds float, float* %4, i64 %427
  %434 = bitcast float* %433 to <16 x float>*
  store <16 x float> %432, <16 x float>* %434, align 64, !tbaa !1788
  %435 = add nsw i64 %22, 816
  %436 = add i32 %28, 9600
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds float, float* %7, i64 %437
  %439 = bitcast float* %438 to <16 x float>*
  %440 = load <16 x float>, <16 x float>* %439, align 64, !tbaa !1785
  %441 = getelementptr inbounds float, float* %4, i64 %435
  %442 = bitcast float* %441 to <16 x float>*
  store <16 x float> %440, <16 x float>* %442, align 64, !tbaa !1788
  %443 = add nsw i64 %22, 832
  %444 = add i32 %28, 208
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds float, float* %7, i64 %445
  %447 = bitcast float* %446 to <16 x float>*
  %448 = load <16 x float>, <16 x float>* %447, align 64, !tbaa !1785
  %449 = getelementptr inbounds float, float* %4, i64 %443
  %450 = bitcast float* %449 to <16 x float>*
  store <16 x float> %448, <16 x float>* %450, align 64, !tbaa !1788
  %451 = add nsw i64 %22, 848
  %452 = add i32 %28, 3344
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds float, float* %7, i64 %453
  %455 = bitcast float* %454 to <16 x float>*
  %456 = load <16 x float>, <16 x float>* %455, align 64, !tbaa !1785
  %457 = getelementptr inbounds float, float* %4, i64 %451
  %458 = bitcast float* %457 to <16 x float>*
  store <16 x float> %456, <16 x float>* %458, align 64, !tbaa !1788
  %459 = add nsw i64 %22, 864
  %460 = add i32 %28, 6480
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds float, float* %7, i64 %461
  %463 = bitcast float* %462 to <16 x float>*
  %464 = load <16 x float>, <16 x float>* %463, align 64, !tbaa !1785
  %465 = getelementptr inbounds float, float* %4, i64 %459
  %466 = bitcast float* %465 to <16 x float>*
  store <16 x float> %464, <16 x float>* %466, align 64, !tbaa !1788
  %467 = add nsw i64 %22, 880
  %468 = add i32 %28, 9616
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds float, float* %7, i64 %469
  %471 = bitcast float* %470 to <16 x float>*
  %472 = load <16 x float>, <16 x float>* %471, align 64, !tbaa !1785
  %473 = getelementptr inbounds float, float* %4, i64 %467
  %474 = bitcast float* %473 to <16 x float>*
  store <16 x float> %472, <16 x float>* %474, align 64, !tbaa !1788
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %475 = icmp slt i64 %indvars.iv.next, %21
  br i1 %475, label %for_begin1.preheader, label %for_end, !prof !5

for_end:                                          ; preds = %for_begin1.preheader, %entry
  ret i32 0
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.168, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !1791
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !1805
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !1808
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.169, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !1810
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.171, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.172, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !1812
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !1826
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 128
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.173, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !1828
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 7
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.174, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !1831
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 7
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.175, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !1833
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 16
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !1837
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 100352
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !1851
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 784
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !1853
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 112
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !1856
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 16
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !1858
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.176, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !1862
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 64
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.128, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !1876
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 128
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.177, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !1878
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !1881
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !1883
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 16
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !1887
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !1889
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 16384
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !1903
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 128
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !1905
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 128
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !1908
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 128
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !1910
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 8
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !1914
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.178, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !1916
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !1930
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 64
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.131, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !1932
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !1935
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !1937
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 8
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !1941
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 512
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !1955
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 8
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !1957
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 8
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !1960
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 8
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !1962
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.179, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !1966
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !1980
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 64
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.133, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !1982
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 7
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !1985
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 7
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.181, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !1987
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 8
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !1991
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 25088
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !2005
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 392
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !2007
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 56
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !2010
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 8
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !2012
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([234 x i8], [234 x i8]* @.str.182, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1_compute_(i8* %27, i8* %35, i8* %47, i8* %41)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %4 = alloca %14, align 8
  %5 = getelementptr inbounds %14, %14* %4, i64 0, i32 0
  store i8* %0, i8** %5, align 8
  %6 = getelementptr inbounds %14, %14* %4, i64 0, i32 1
  store i8* %1, i8** %6, align 8
  %7 = getelementptr inbounds %14, %14* %4, i64 0, i32 2
  store i8* %2, i8** %7, align 8
  %8 = getelementptr inbounds %14, %14* %4, i64 0, i32 3
  store i8* %3, i8** %8, align 8
  %9 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %10 = bitcast %14* %4 to i8*
  %11 = call i32 %9(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.183, i8* nonnull %10, i32 0)
  ret i32 %11
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.183(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 255
  %17 = sdiv i32 %16, %15
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %17, %18
  %20 = icmp slt i32 %19, 256
  %21 = select i1 %20, i32 %19, i32 256
  %22 = mul nsw i32 %17, %0
  %23 = icmp slt i32 %22, 256
  %24 = select i1 %23, i32 %22, i32 256
  %25 = icmp slt i32 %24, %21
  br i1 %25, label %for_body, label %for_end, !prof !5

for_body:                                         ; preds = %entry, %for_end24.1
  %26 = phi i32 [ %331, %for_end24.1 ], [ %24, %entry ]
  %27 = and i32 %26, 3
  %28 = mul nuw nsw i32 %27, 224
  %29 = lshr i32 %26, 2
  %30 = shl i32 %29, 14
  %31 = icmp eq i32 %27, 3
  %32 = zext i32 %28 to i64
  %33 = sext i32 %30 to i64
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end24.1, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_body
  %indvars.iv122 = phi i64 [ 0, %for_body ], [ %indvars.iv.next123, %for_end6 ]
  %.lcssa6895 = phi <8 x float> [ zeroinitializer, %for_body ], [ %195, %for_end6 ]
  %.lcssa6693 = phi <8 x float> [ zeroinitializer, %for_body ], [ %196, %for_end6 ]
  %.lcssa6491 = phi <8 x float> [ zeroinitializer, %for_body ], [ %197, %for_end6 ]
  %.lcssa6289 = phi <8 x float> [ zeroinitializer, %for_body ], [ %198, %for_end6 ]
  %.lcssa6087 = phi <8 x float> [ zeroinitializer, %for_body ], [ %199, %for_end6 ]
  %.lcssa5885 = phi <8 x float> [ zeroinitializer, %for_body ], [ %200, %for_end6 ]
  %.lcssa5683 = phi <8 x float> [ zeroinitializer, %for_body ], [ %201, %for_end6 ]
  %.lcssa5481 = phi <8 x float> [ zeroinitializer, %for_body ], [ %202, %for_end6 ]
  %.lcssa5279 = phi <8 x float> [ zeroinitializer, %for_body ], [ %203, %for_end6 ]
  %.lcssa5077 = phi <8 x float> [ zeroinitializer, %for_body ], [ %204, %for_end6 ]
  %.lcssa4875 = phi <8 x float> [ zeroinitializer, %for_body ], [ %205, %for_end6 ]
  %.lcssa4673 = phi <8 x float> [ zeroinitializer, %for_body ], [ %206, %for_end6 ]
  %.lcssa4472 = phi <8 x float> [ zeroinitializer, %for_body ], [ %207, %for_end6 ]
  %.lcssa70 = phi <8 x float> [ zeroinitializer, %for_body ], [ %208, %for_end6 ]
  %34 = mul nuw nsw i64 %indvars.iv122, 784
  %35 = add nuw nsw i64 %34, %32
  %36 = shl i64 %indvars.iv122, 7
  %37 = add nuw nsw i64 %36, %33
  br i1 %31, label %for_body5.us, label %for_body5, !prof !50

for_body5.us:                                     ; preds = %for_begin4.preheader, %for_body5.us
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for_body5.us ], [ 0, %for_begin4.preheader ]
  %38 = phi <8 x float> [ %91, %for_body5.us ], [ %.lcssa5481, %for_begin4.preheader ]
  %39 = phi <8 x float> [ %85, %for_body5.us ], [ %.lcssa5279, %for_begin4.preheader ]
  %40 = phi <8 x float> [ %79, %for_body5.us ], [ %.lcssa5077, %for_begin4.preheader ]
  %41 = phi <8 x float> [ %73, %for_body5.us ], [ %.lcssa4875, %for_begin4.preheader ]
  %42 = phi <8 x float> [ %67, %for_body5.us ], [ %.lcssa4673, %for_begin4.preheader ]
  %43 = phi <8 x float> [ %61, %for_body5.us ], [ %.lcssa4472, %for_begin4.preheader ]
  %44 = phi <8 x float> [ %55, %for_body5.us ], [ %.lcssa70, %for_begin4.preheader ]
  %45 = add nuw nsw i64 %35, %indvars.iv119
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = load float, float* %46, align 4, !tbaa !2016
  %48 = insertelement <8 x float> undef, float %47, i32 0
  %49 = shufflevector <8 x float> %48, <8 x float> undef, <8 x i32> zeroinitializer
  %50 = shl i64 %indvars.iv119, 3
  %51 = add nuw nsw i64 %37, %50
  %52 = getelementptr inbounds float, float* %7, i64 %51
  %53 = bitcast float* %52 to <8 x float>*
  %54 = load <8 x float>, <8 x float>* %53, align 32, !tbaa !2019
  %55 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %49, <8 x float> %54, <8 x float> %44)
  %56 = add nuw nsw i64 %45, 16
  %57 = getelementptr inbounds float, float* %4, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !2016
  %59 = insertelement <8 x float> undef, float %58, i32 0
  %60 = shufflevector <8 x float> %59, <8 x float> undef, <8 x i32> zeroinitializer
  %61 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %60, <8 x float> %54, <8 x float> %43)
  %62 = add nuw nsw i64 %45, 32
  %63 = getelementptr inbounds float, float* %4, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !2016
  %65 = insertelement <8 x float> undef, float %64, i32 0
  %66 = shufflevector <8 x float> %65, <8 x float> undef, <8 x i32> zeroinitializer
  %67 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %66, <8 x float> %54, <8 x float> %42)
  %68 = add nuw nsw i64 %45, 48
  %69 = getelementptr inbounds float, float* %4, i64 %68
  %70 = load float, float* %69, align 4, !tbaa !2016
  %71 = insertelement <8 x float> undef, float %70, i32 0
  %72 = shufflevector <8 x float> %71, <8 x float> undef, <8 x i32> zeroinitializer
  %73 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %72, <8 x float> %54, <8 x float> %41)
  %74 = add nuw nsw i64 %45, 64
  %75 = getelementptr inbounds float, float* %4, i64 %74
  %76 = load float, float* %75, align 4, !tbaa !2016
  %77 = insertelement <8 x float> undef, float %76, i32 0
  %78 = shufflevector <8 x float> %77, <8 x float> undef, <8 x i32> zeroinitializer
  %79 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %78, <8 x float> %54, <8 x float> %40)
  %80 = add nuw nsw i64 %45, 80
  %81 = getelementptr inbounds float, float* %4, i64 %80
  %82 = load float, float* %81, align 4, !tbaa !2016
  %83 = insertelement <8 x float> undef, float %82, i32 0
  %84 = shufflevector <8 x float> %83, <8 x float> undef, <8 x i32> zeroinitializer
  %85 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %84, <8 x float> %54, <8 x float> %39)
  %86 = add nuw nsw i64 %45, 96
  %87 = getelementptr inbounds float, float* %4, i64 %86
  %88 = load float, float* %87, align 4, !tbaa !2016
  %89 = insertelement <8 x float> undef, float %88, i32 0
  %90 = shufflevector <8 x float> %89, <8 x float> undef, <8 x i32> zeroinitializer
  %91 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %90, <8 x float> %54, <8 x float> %38)
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %exitcond121 = icmp eq i64 %indvars.iv.next120, 16
  br i1 %exitcond121, label %for_end6, label %for_body5.us, !prof !50

for_body5:                                        ; preds = %for_begin4.preheader, %for_body5
  %indvars.iv = phi i64 [ %indvars.iv.next, %for_body5 ], [ 0, %for_begin4.preheader ]
  %92 = phi <8 x float> [ %194, %for_body5 ], [ %.lcssa6895, %for_begin4.preheader ]
  %93 = phi <8 x float> [ %188, %for_body5 ], [ %.lcssa6693, %for_begin4.preheader ]
  %94 = phi <8 x float> [ %182, %for_body5 ], [ %.lcssa6491, %for_begin4.preheader ]
  %95 = phi <8 x float> [ %176, %for_body5 ], [ %.lcssa6289, %for_begin4.preheader ]
  %96 = phi <8 x float> [ %170, %for_body5 ], [ %.lcssa6087, %for_begin4.preheader ]
  %97 = phi <8 x float> [ %164, %for_body5 ], [ %.lcssa5885, %for_begin4.preheader ]
  %98 = phi <8 x float> [ %158, %for_body5 ], [ %.lcssa5683, %for_begin4.preheader ]
  %99 = phi <8 x float> [ %152, %for_body5 ], [ %.lcssa5481, %for_begin4.preheader ]
  %100 = phi <8 x float> [ %146, %for_body5 ], [ %.lcssa5279, %for_begin4.preheader ]
  %101 = phi <8 x float> [ %140, %for_body5 ], [ %.lcssa5077, %for_begin4.preheader ]
  %102 = phi <8 x float> [ %134, %for_body5 ], [ %.lcssa4875, %for_begin4.preheader ]
  %103 = phi <8 x float> [ %128, %for_body5 ], [ %.lcssa4673, %for_begin4.preheader ]
  %104 = phi <8 x float> [ %122, %for_body5 ], [ %.lcssa4472, %for_begin4.preheader ]
  %105 = phi <8 x float> [ %116, %for_body5 ], [ %.lcssa70, %for_begin4.preheader ]
  %106 = add nuw nsw i64 %35, %indvars.iv
  %107 = getelementptr inbounds float, float* %4, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !2016
  %109 = insertelement <8 x float> undef, float %108, i32 0
  %110 = shufflevector <8 x float> %109, <8 x float> undef, <8 x i32> zeroinitializer
  %111 = shl i64 %indvars.iv, 3
  %112 = add nuw nsw i64 %37, %111
  %113 = getelementptr inbounds float, float* %7, i64 %112
  %114 = bitcast float* %113 to <8 x float>*
  %115 = load <8 x float>, <8 x float>* %114, align 32, !tbaa !2019
  %116 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %110, <8 x float> %115, <8 x float> %105)
  %117 = add nuw nsw i64 %106, 16
  %118 = getelementptr inbounds float, float* %4, i64 %117
  %119 = load float, float* %118, align 4, !tbaa !2016
  %120 = insertelement <8 x float> undef, float %119, i32 0
  %121 = shufflevector <8 x float> %120, <8 x float> undef, <8 x i32> zeroinitializer
  %122 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %121, <8 x float> %115, <8 x float> %104)
  %123 = add nuw nsw i64 %106, 32
  %124 = getelementptr inbounds float, float* %4, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !2016
  %126 = insertelement <8 x float> undef, float %125, i32 0
  %127 = shufflevector <8 x float> %126, <8 x float> undef, <8 x i32> zeroinitializer
  %128 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %127, <8 x float> %115, <8 x float> %103)
  %129 = add nuw nsw i64 %106, 48
  %130 = getelementptr inbounds float, float* %4, i64 %129
  %131 = load float, float* %130, align 4, !tbaa !2016
  %132 = insertelement <8 x float> undef, float %131, i32 0
  %133 = shufflevector <8 x float> %132, <8 x float> undef, <8 x i32> zeroinitializer
  %134 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %133, <8 x float> %115, <8 x float> %102)
  %135 = add nuw nsw i64 %106, 64
  %136 = getelementptr inbounds float, float* %4, i64 %135
  %137 = load float, float* %136, align 4, !tbaa !2016
  %138 = insertelement <8 x float> undef, float %137, i32 0
  %139 = shufflevector <8 x float> %138, <8 x float> undef, <8 x i32> zeroinitializer
  %140 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %139, <8 x float> %115, <8 x float> %101)
  %141 = add nuw nsw i64 %106, 80
  %142 = getelementptr inbounds float, float* %4, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !2016
  %144 = insertelement <8 x float> undef, float %143, i32 0
  %145 = shufflevector <8 x float> %144, <8 x float> undef, <8 x i32> zeroinitializer
  %146 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %145, <8 x float> %115, <8 x float> %100)
  %147 = add nuw nsw i64 %106, 96
  %148 = getelementptr inbounds float, float* %4, i64 %147
  %149 = load float, float* %148, align 4, !tbaa !2016
  %150 = insertelement <8 x float> undef, float %149, i32 0
  %151 = shufflevector <8 x float> %150, <8 x float> undef, <8 x i32> zeroinitializer
  %152 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %151, <8 x float> %115, <8 x float> %99)
  %153 = add nuw nsw i64 %106, 112
  %154 = getelementptr inbounds float, float* %4, i64 %153
  %155 = load float, float* %154, align 4, !tbaa !2016
  %156 = insertelement <8 x float> undef, float %155, i32 0
  %157 = shufflevector <8 x float> %156, <8 x float> undef, <8 x i32> zeroinitializer
  %158 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %157, <8 x float> %115, <8 x float> %98)
  %159 = add nuw nsw i64 %106, 128
  %160 = getelementptr inbounds float, float* %4, i64 %159
  %161 = load float, float* %160, align 4, !tbaa !2016
  %162 = insertelement <8 x float> undef, float %161, i32 0
  %163 = shufflevector <8 x float> %162, <8 x float> undef, <8 x i32> zeroinitializer
  %164 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %163, <8 x float> %115, <8 x float> %97)
  %165 = add nuw nsw i64 %106, 144
  %166 = getelementptr inbounds float, float* %4, i64 %165
  %167 = load float, float* %166, align 4, !tbaa !2016
  %168 = insertelement <8 x float> undef, float %167, i32 0
  %169 = shufflevector <8 x float> %168, <8 x float> undef, <8 x i32> zeroinitializer
  %170 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %169, <8 x float> %115, <8 x float> %96)
  %171 = add nuw nsw i64 %106, 160
  %172 = getelementptr inbounds float, float* %4, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !2016
  %174 = insertelement <8 x float> undef, float %173, i32 0
  %175 = shufflevector <8 x float> %174, <8 x float> undef, <8 x i32> zeroinitializer
  %176 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %175, <8 x float> %115, <8 x float> %95)
  %177 = add nuw nsw i64 %106, 176
  %178 = getelementptr inbounds float, float* %4, i64 %177
  %179 = load float, float* %178, align 4, !tbaa !2016
  %180 = insertelement <8 x float> undef, float %179, i32 0
  %181 = shufflevector <8 x float> %180, <8 x float> undef, <8 x i32> zeroinitializer
  %182 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %181, <8 x float> %115, <8 x float> %94)
  %183 = add nuw nsw i64 %106, 192
  %184 = getelementptr inbounds float, float* %4, i64 %183
  %185 = load float, float* %184, align 4, !tbaa !2016
  %186 = insertelement <8 x float> undef, float %185, i32 0
  %187 = shufflevector <8 x float> %186, <8 x float> undef, <8 x i32> zeroinitializer
  %188 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %187, <8 x float> %115, <8 x float> %93)
  %189 = add nuw nsw i64 %106, 208
  %190 = getelementptr inbounds float, float* %4, i64 %189
  %191 = load float, float* %190, align 4, !tbaa !2016
  %192 = insertelement <8 x float> undef, float %191, i32 0
  %193 = shufflevector <8 x float> %192, <8 x float> undef, <8 x i32> zeroinitializer
  %194 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %193, <8 x float> %115, <8 x float> %92)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5, %for_body5.us
  %195 = phi <8 x float> [ %.lcssa6895, %for_body5.us ], [ %194, %for_body5 ]
  %196 = phi <8 x float> [ %.lcssa6693, %for_body5.us ], [ %188, %for_body5 ]
  %197 = phi <8 x float> [ %.lcssa6491, %for_body5.us ], [ %182, %for_body5 ]
  %198 = phi <8 x float> [ %.lcssa6289, %for_body5.us ], [ %176, %for_body5 ]
  %199 = phi <8 x float> [ %.lcssa6087, %for_body5.us ], [ %170, %for_body5 ]
  %200 = phi <8 x float> [ %.lcssa5885, %for_body5.us ], [ %164, %for_body5 ]
  %201 = phi <8 x float> [ %.lcssa5683, %for_body5.us ], [ %158, %for_body5 ]
  %202 = phi <8 x float> [ %91, %for_body5.us ], [ %152, %for_body5 ]
  %203 = phi <8 x float> [ %85, %for_body5.us ], [ %146, %for_body5 ]
  %204 = phi <8 x float> [ %79, %for_body5.us ], [ %140, %for_body5 ]
  %205 = phi <8 x float> [ %73, %for_body5.us ], [ %134, %for_body5 ]
  %206 = phi <8 x float> [ %67, %for_body5.us ], [ %128, %for_body5 ]
  %207 = phi <8 x float> [ %61, %for_body5.us ], [ %122, %for_body5 ]
  %208 = phi <8 x float> [ %55, %for_body5.us ], [ %116, %for_body5 ]
  %indvars.iv.next123 = add nuw nsw i64 %indvars.iv122, 1
  %exitcond124 = icmp eq i64 %indvars.iv.next123, 128
  br i1 %exitcond124, label %for_end24, label %for_begin4.preheader, !prof !50

for_end24:                                        ; preds = %for_end6
  %209 = shl nuw nsw i32 %27, 1
  %210 = mul nuw nsw i32 %27, 112
  %211 = ashr i32 %26, 2
  %212 = mul nsw i32 %211, 392
  %213 = shl nsw i32 %211, 3
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds float, float* %13, i64 %214
  %216 = bitcast float* %215 to <8 x float>*
  %217 = add i32 %210, %212
  %218 = load <8 x float>, <8 x float>* %216, align 32, !tbaa !2022
  %219 = fadd <8 x float> %218, %208
  %220 = fcmp ogt <8 x float> %219, zeroinitializer
  %221 = select <8 x i1> %220, <8 x float> %219, <8 x float> zeroinitializer
  %222 = sext i32 %217 to i64
  %223 = getelementptr inbounds float, float* %10, i64 %222
  %224 = bitcast float* %223 to <8 x float>*
  store <8 x float> %221, <8 x float>* %224, align 32, !tbaa !2025
  %225 = or i32 %210, 8
  %226 = add i32 %225, %212
  %227 = fadd <8 x float> %218, %207
  %228 = fcmp ogt <8 x float> %227, zeroinitializer
  %229 = select <8 x i1> %228, <8 x float> %227, <8 x float> zeroinitializer
  %230 = sext i32 %226 to i64
  %231 = getelementptr inbounds float, float* %10, i64 %230
  %232 = bitcast float* %231 to <8 x float>*
  store <8 x float> %229, <8 x float>* %232, align 32, !tbaa !2025
  %233 = add nuw nsw i32 %210, 16
  %234 = add i32 %233, %212
  %235 = fadd <8 x float> %218, %206
  %236 = fcmp ogt <8 x float> %235, zeroinitializer
  %237 = select <8 x i1> %236, <8 x float> %235, <8 x float> zeroinitializer
  %238 = sext i32 %234 to i64
  %239 = getelementptr inbounds float, float* %10, i64 %238
  %240 = bitcast float* %239 to <8 x float>*
  store <8 x float> %237, <8 x float>* %240, align 32, !tbaa !2025
  %241 = add nuw nsw i32 %210, 24
  %242 = add i32 %241, %212
  %243 = fadd <8 x float> %218, %205
  %244 = fcmp ogt <8 x float> %243, zeroinitializer
  %245 = select <8 x i1> %244, <8 x float> %243, <8 x float> zeroinitializer
  %246 = sext i32 %242 to i64
  %247 = getelementptr inbounds float, float* %10, i64 %246
  %248 = bitcast float* %247 to <8 x float>*
  store <8 x float> %245, <8 x float>* %248, align 32, !tbaa !2025
  %249 = add nuw nsw i32 %210, 32
  %250 = add i32 %249, %212
  %251 = fadd <8 x float> %218, %204
  %252 = fcmp ogt <8 x float> %251, zeroinitializer
  %253 = select <8 x i1> %252, <8 x float> %251, <8 x float> zeroinitializer
  %254 = sext i32 %250 to i64
  %255 = getelementptr inbounds float, float* %10, i64 %254
  %256 = bitcast float* %255 to <8 x float>*
  store <8 x float> %253, <8 x float>* %256, align 32, !tbaa !2025
  %257 = add nuw nsw i32 %210, 40
  %258 = add i32 %257, %212
  %259 = fadd <8 x float> %218, %203
  %260 = fcmp ogt <8 x float> %259, zeroinitializer
  %261 = select <8 x i1> %260, <8 x float> %259, <8 x float> zeroinitializer
  %262 = sext i32 %258 to i64
  %263 = getelementptr inbounds float, float* %10, i64 %262
  %264 = bitcast float* %263 to <8 x float>*
  store <8 x float> %261, <8 x float>* %264, align 32, !tbaa !2025
  %narrow = add nuw nsw i32 %210, 48
  %265 = add i32 %narrow, %212
  %266 = fadd <8 x float> %218, %202
  %267 = fcmp ogt <8 x float> %266, zeroinitializer
  %268 = select <8 x i1> %267, <8 x float> %266, <8 x float> zeroinitializer
  %269 = sext i32 %265 to i64
  %270 = getelementptr inbounds float, float* %10, i64 %269
  %271 = bitcast float* %270 to <8 x float>*
  store <8 x float> %268, <8 x float>* %271, align 32, !tbaa !2025
  %272 = or i32 %209, 1
  %273 = icmp eq i32 %272, 7
  br i1 %273, label %for_end24.1, label %for_body23.us.preheader.1, !prof !50

for_body23.us.preheader.1:                        ; preds = %for_end24
  %274 = add nuw nsw i32 %210, 56
  %275 = add i32 %274, %212
  %276 = load <8 x float>, <8 x float>* %216, align 32, !tbaa !2022
  %277 = fadd <8 x float> %276, %201
  %278 = fcmp ogt <8 x float> %277, zeroinitializer
  %279 = select <8 x i1> %278, <8 x float> %277, <8 x float> zeroinitializer
  %280 = sext i32 %275 to i64
  %281 = getelementptr inbounds float, float* %10, i64 %280
  %282 = bitcast float* %281 to <8 x float>*
  store <8 x float> %279, <8 x float>* %282, align 32, !tbaa !2025
  %283 = add nuw nsw i32 %210, 64
  %284 = add i32 %283, %212
  %285 = fadd <8 x float> %276, %200
  %286 = fcmp ogt <8 x float> %285, zeroinitializer
  %287 = select <8 x i1> %286, <8 x float> %285, <8 x float> zeroinitializer
  %288 = sext i32 %284 to i64
  %289 = getelementptr inbounds float, float* %10, i64 %288
  %290 = bitcast float* %289 to <8 x float>*
  store <8 x float> %287, <8 x float>* %290, align 32, !tbaa !2025
  %291 = add nuw nsw i32 %210, 72
  %292 = add i32 %291, %212
  %293 = fadd <8 x float> %276, %199
  %294 = fcmp ogt <8 x float> %293, zeroinitializer
  %295 = select <8 x i1> %294, <8 x float> %293, <8 x float> zeroinitializer
  %296 = sext i32 %292 to i64
  %297 = getelementptr inbounds float, float* %10, i64 %296
  %298 = bitcast float* %297 to <8 x float>*
  store <8 x float> %295, <8 x float>* %298, align 32, !tbaa !2025
  %299 = add nuw nsw i32 %210, 80
  %300 = add i32 %299, %212
  %301 = fadd <8 x float> %276, %198
  %302 = fcmp ogt <8 x float> %301, zeroinitializer
  %303 = select <8 x i1> %302, <8 x float> %301, <8 x float> zeroinitializer
  %304 = sext i32 %300 to i64
  %305 = getelementptr inbounds float, float* %10, i64 %304
  %306 = bitcast float* %305 to <8 x float>*
  store <8 x float> %303, <8 x float>* %306, align 32, !tbaa !2025
  %307 = add nuw nsw i32 %210, 88
  %308 = add i32 %307, %212
  %309 = fadd <8 x float> %276, %197
  %310 = fcmp ogt <8 x float> %309, zeroinitializer
  %311 = select <8 x i1> %310, <8 x float> %309, <8 x float> zeroinitializer
  %312 = sext i32 %308 to i64
  %313 = getelementptr inbounds float, float* %10, i64 %312
  %314 = bitcast float* %313 to <8 x float>*
  store <8 x float> %311, <8 x float>* %314, align 32, !tbaa !2025
  %315 = add nuw nsw i32 %210, 96
  %316 = add i32 %315, %212
  %317 = fadd <8 x float> %276, %196
  %318 = fcmp ogt <8 x float> %317, zeroinitializer
  %319 = select <8 x i1> %318, <8 x float> %317, <8 x float> zeroinitializer
  %320 = sext i32 %316 to i64
  %321 = getelementptr inbounds float, float* %10, i64 %320
  %322 = bitcast float* %321 to <8 x float>*
  store <8 x float> %319, <8 x float>* %322, align 32, !tbaa !2025
  %323 = add nuw nsw i32 %210, 104
  %324 = add i32 %323, %212
  %325 = fadd <8 x float> %276, %195
  %326 = fcmp ogt <8 x float> %325, zeroinitializer
  %327 = select <8 x i1> %326, <8 x float> %325, <8 x float> zeroinitializer
  %328 = sext i32 %324 to i64
  %329 = getelementptr inbounds float, float* %10, i64 %328
  %330 = bitcast float* %329 to <8 x float>*
  store <8 x float> %327, <8 x float>* %330, align 32, !tbaa !2025
  br label %for_end24.1

for_end24.1:                                      ; preds = %for_end24, %for_body23.us.preheader.1
  %331 = add nsw i32 %26, 1
  %332 = icmp slt i32 %331, %21
  br i1 %332, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_44(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.184, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !2028
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.185, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !2042
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.186, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 4
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.187, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !2044
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !2058
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 3
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.188, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !2060
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 224
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.189, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !2063
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 224
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.190, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = icmp eq i64* %19, null
  br i1 %68, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end18
  %69 = load i64, i64* %19, align 8, !tbaa !2065
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 150528
  %72 = getelementptr inbounds i64, i64* %19, i64 1
  %73 = load i64, i64* %72, align 8, !tbaa !2079
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 50176
  %76 = getelementptr inbounds i64, i64* %19, i64 2
  %77 = load i64, i64* %76, align 8, !tbaa !2081
  %78 = trunc i64 %77 to i32
  %79 = icmp eq i32 %78, 224
  %80 = getelementptr inbounds i64, i64* %19, i64 3
  %81 = load i64, i64* %80, align 8, !tbaa !2084
  %82 = trunc i64 %81 to i32
  %83 = icmp eq i32 %82, 1
  %84 = and i1 %79, %83
  %85 = and i1 %75, %84
  %86 = and i1 %71, %85
  br i1 %86, label %if_end, label %assert_fail19, !prof !5

if_end:                                           ; preds = %assert_end18, %if_then
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %88 = load i64, i64* %87, align 8
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %assert_end22, label %assert_fail21, !prof !5

assert_fail19:                                    ; preds = %if_then
  %90 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %90(i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.191, i64 0, i64 0))
  ret i32 -1

assert_fail21:                                    ; preds = %if_end
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %if_end
  %92 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %96 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, 5
  br i1 %98, label %assert_end28, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %99 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %99(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end24
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %101 = load i16, i16* %100, align 2
  %102 = icmp eq i16 %101, 1
  %103 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %104 = load i8, i8* %103, align 1
  %105 = icmp eq i8 %104, 32
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 2
  %109 = and i1 %105, %108
  %110 = and i1 %102, %109
  br i1 %110, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %111 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %111(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %112 = load i64, i64* %25, align 8, !tbaa !2086
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 1
  br i1 %114, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %116 = getelementptr inbounds i64, i64* %25, i64 1
  %117 = load i64, i64* %116, align 8, !tbaa !2100
  %118 = trunc i64 %117 to i32
  %119 = icmp eq i32 %118, 1
  br i1 %119, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %120 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %120(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %121 = getelementptr inbounds i64, i64* %25, i64 2
  %122 = load i64, i64* %121, align 8, !tbaa !2102
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 224
  br i1 %124, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.192, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %126 = getelementptr inbounds i64, i64* %25, i64 3
  %127 = load i64, i64* %126, align 8, !tbaa !2105
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 224
  br i1 %129, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.193, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %131 = getelementptr inbounds i64, i64* %25, i64 4
  %132 = load i64, i64* %131, align 8, !tbaa !2107
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 3
  br i1 %134, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.194, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %136 = icmp eq i64* %27, null
  br i1 %136, label %if_end42, label %if_then41, !prof !50

if_then41:                                        ; preds = %assert_end40
  %137 = load i64, i64* %27, align 8, !tbaa !2111
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 150528
  %140 = getelementptr inbounds i64, i64* %27, i64 1
  %141 = load i64, i64* %140, align 8, !tbaa !2125
  %142 = trunc i64 %141 to i32
  %143 = icmp eq i32 %142, 150528
  %144 = getelementptr inbounds i64, i64* %27, i64 2
  %145 = load i64, i64* %144, align 8, !tbaa !2127
  %146 = trunc i64 %145 to i32
  %147 = icmp eq i32 %146, 672
  %148 = getelementptr inbounds i64, i64* %27, i64 3
  %149 = load i64, i64* %148, align 8, !tbaa !2130
  %150 = trunc i64 %149 to i32
  %151 = icmp eq i32 %150, 3
  %152 = getelementptr inbounds i64, i64* %27, i64 4
  %153 = load i64, i64* %152, align 8, !tbaa !2132
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 1
  %156 = and i1 %151, %155
  %157 = and i1 %147, %156
  %158 = and i1 %143, %157
  %159 = and i1 %139, %158
  br i1 %159, label %if_end42, label %assert_fail43, !prof !5

if_end42:                                         ; preds = %assert_end40, %if_then41
  %160 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %161 = load i64, i64* %160, align 8
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %assert_end46, label %assert_fail45, !prof !5

assert_fail43:                                    ; preds = %if_then41
  %163 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %163(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.195, i64 0, i64 0))
  ret i32 -1

assert_fail45:                                    ; preds = %if_end42
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %if_end42
  %165 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %166 = load i32, i32* %165, align 4
  %167 = icmp eq i32 %166, 1
  br i1 %167, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %168 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %168(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %169 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %170 = load i32, i32* %169, align 4
  %171 = icmp eq i32 %21, %170
  br i1 %171, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %172 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %172(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %173 = tail call fastcc i32 @fused_layout_transform_44_compute_(i8* %23, i8* %15)
  ret i32 %173
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_44_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %15, align 8
  %3 = getelementptr inbounds %15, %15* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %15, %15* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %15* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.196, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.196(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 223
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 224
  %15 = select i1 %14, i32 %13, i32 224
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 224
  %18 = select i1 %17, i32 %16, i32 224
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv4 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next5, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv4, 672
  %23 = mul nsw i64 %indvars.iv4, 224
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %24 = mul nuw nsw i64 %indvars.iv, 3
  %25 = add nsw i64 %24, %22
  %26 = add nsw i64 %indvars.iv, %23
  %27 = add nsw i64 %26, 50176
  %28 = add nsw i64 %26, 100352
  %29 = getelementptr inbounds float, float* %7, i64 %26
  %30 = load float, float* %29, align 4, !tbaa !2136
  %31 = insertelement <3 x float> undef, float %30, i32 0
  %32 = getelementptr inbounds float, float* %7, i64 %27
  %33 = load float, float* %32, align 4, !tbaa !2136
  %34 = insertelement <3 x float> %31, float %33, i32 1
  %35 = getelementptr inbounds float, float* %7, i64 %28
  %36 = load float, float* %35, align 4, !tbaa !2136
  %37 = insertelement <3 x float> %34, float %36, i32 2
  %38 = getelementptr inbounds float, float* %4, i64 %25
  %39 = bitcast float* %38 to <3 x float>*
  store <3 x float> %37, <3 x float>* %39, align 4, !tbaa !2139
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 224
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, 1
  %40 = icmp slt i64 %indvars.iv.next5, %21
  br i1 %40, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.197, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !2142
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !2156
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !2159
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !2161
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %55 = load i64*, i64** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %61 = load i64*, i64** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %63 = load i64*, i64** %62, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %64 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %64(i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.198, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %65 = getelementptr inbounds i8, i8* %1, i64 4
  %66 = bitcast i8* %65 to i32*
  %67 = load i32, i32* %66, align 4, !tbaa !2165
  switch i32 %67, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %68 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %68(i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.199, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %69(i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.200, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.201, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.202, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %72 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, 5
  br i1 %74, label %assert_end14, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %77 = load i16, i16* %76, align 2
  %78 = icmp eq i16 %77, 1
  %79 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, 32
  %82 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %83, 2
  %85 = and i1 %81, %84
  %86 = and i1 %78, %85
  br i1 %86, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %87(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %88 = load i64, i64* %35, align 8, !tbaa !2167
  %89 = trunc i64 %88 to i32
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %92 = getelementptr inbounds i64, i64* %35, i64 1
  %93 = load i64, i64* %92, align 8, !tbaa !2181
  %94 = trunc i64 %93 to i32
  %95 = icmp eq i32 %94, 64
  br i1 %95, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.162, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %97 = getelementptr inbounds i64, i64* %35, i64 2
  %98 = load i64, i64* %97, align 8, !tbaa !2183
  %99 = trunc i64 %98 to i32
  %100 = icmp eq i32 %99, 7
  br i1 %100, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.174, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %102 = getelementptr inbounds i64, i64* %35, i64 3
  %103 = load i64, i64* %102, align 8, !tbaa !2186
  %104 = trunc i64 %103 to i32
  %105 = icmp eq i32 %104, 7
  br i1 %105, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %106 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %106(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.175, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %107 = getelementptr inbounds i64, i64* %35, i64 4
  %108 = load i64, i64* %107, align 8, !tbaa !2188
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 8
  br i1 %110, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %111 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %111(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %112 = icmp eq i64* %37, null
  br i1 %112, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %113 = load i64, i64* %37, align 8, !tbaa !2192
  %114 = trunc i64 %113 to i32
  %115 = icmp eq i32 %114, 25088
  %116 = getelementptr inbounds i64, i64* %37, i64 1
  %117 = load i64, i64* %116, align 8, !tbaa !2206
  %118 = trunc i64 %117 to i32
  %119 = icmp eq i32 %118, 392
  %120 = getelementptr inbounds i64, i64* %37, i64 2
  %121 = load i64, i64* %120, align 8, !tbaa !2208
  %122 = trunc i64 %121 to i32
  %123 = icmp eq i32 %122, 56
  %124 = getelementptr inbounds i64, i64* %37, i64 3
  %125 = load i64, i64* %124, align 8, !tbaa !2211
  %126 = trunc i64 %125 to i32
  %127 = icmp eq i32 %126, 8
  %128 = getelementptr inbounds i64, i64* %37, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !2213
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 1
  %132 = and i1 %127, %131
  %133 = and i1 %123, %132
  %134 = and i1 %119, %133
  %135 = and i1 %115, %134
  br i1 %135, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %136 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %137 = load i64, i64* %136, align 8
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %139(i8* getelementptr inbounds ([234 x i8], [234 x i8]* @.str.203, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %141 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 6
  br i1 %147, label %assert_end36, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end32
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %150 = load i16, i16* %149, align 2
  %151 = icmp eq i16 %150, 1
  %152 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 32
  %155 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %156 = load i8, i8* %155, align 1
  %157 = icmp eq i8 %156, 2
  %158 = and i1 %154, %157
  %159 = and i1 %151, %158
  br i1 %159, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %161 = load i64, i64* %43, align 8, !tbaa !2217
  %162 = trunc i64 %161 to i32
  %163 = icmp eq i32 %162, 256
  br i1 %163, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.204, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %165 = getelementptr inbounds i64, i64* %43, i64 1
  %166 = load i64, i64* %165, align 8, !tbaa !2231
  %167 = trunc i64 %166 to i32
  %168 = icmp eq i32 %167, 64
  br i1 %168, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.205, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %170 = getelementptr inbounds i64, i64* %43, i64 2
  %171 = load i64, i64* %170, align 8, !tbaa !2233
  %172 = trunc i64 %171 to i32
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %175 = getelementptr inbounds i64, i64* %43, i64 3
  %176 = load i64, i64* %175, align 8, !tbaa !2236
  %177 = trunc i64 %176 to i32
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %179(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %180 = getelementptr inbounds i64, i64* %43, i64 4
  %181 = load i64, i64* %180, align 8, !tbaa !2238
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %182, 8
  br i1 %183, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %184(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %185 = getelementptr inbounds i64, i64* %43, i64 5
  %186 = load i64, i64* %185, align 8, !tbaa !2242
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 8
  br i1 %188, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %190 = icmp eq i64* %45, null
  br i1 %190, label %if_end52, label %if_then51, !prof !50

if_then51:                                        ; preds = %assert_end50
  %191 = load i64, i64* %45, align 8, !tbaa !2244
  %192 = trunc i64 %191 to i32
  %193 = icmp eq i32 %192, 4096
  %194 = getelementptr inbounds i64, i64* %45, i64 1
  %195 = load i64, i64* %194, align 8, !tbaa !2258
  %196 = trunc i64 %195 to i32
  %197 = icmp eq i32 %196, 64
  %198 = getelementptr inbounds i64, i64* %45, i64 2
  %199 = load i64, i64* %198, align 8, !tbaa !2260
  %200 = trunc i64 %199 to i32
  %201 = icmp eq i32 %200, 64
  %202 = getelementptr inbounds i64, i64* %45, i64 3
  %203 = load i64, i64* %202, align 8, !tbaa !2263
  %204 = trunc i64 %203 to i32
  %205 = icmp eq i32 %204, 64
  %206 = getelementptr inbounds i64, i64* %45, i64 4
  %207 = load i64, i64* %206, align 8, !tbaa !2265
  %208 = trunc i64 %207 to i32
  %209 = icmp eq i32 %208, 8
  %210 = getelementptr inbounds i64, i64* %45, i64 5
  %211 = load i64, i64* %210, align 8, !tbaa !2269
  %212 = trunc i64 %211 to i32
  %213 = icmp eq i32 %212, 1
  %214 = and i1 %209, %213
  %215 = and i1 %205, %214
  %216 = and i1 %201, %215
  %217 = and i1 %197, %216
  %218 = and i1 %193, %217
  br i1 %218, label %if_end52, label %assert_fail53, !prof !5

if_end52:                                         ; preds = %assert_end50, %if_then51
  %219 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %220 = load i64, i64* %219, align 8
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %assert_end56, label %assert_fail55, !prof !5

assert_fail53:                                    ; preds = %if_then51
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([268 x i8], [268 x i8]* @.str.206, i64 0, i64 0))
  ret i32 -1

assert_fail55:                                    ; preds = %if_end52
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %223(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %if_end52
  %224 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %225 = load i32, i32* %224, align 4
  %226 = icmp eq i32 %225, 1
  br i1 %226, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %227(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %228 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %229 = load i32, i32* %228, align 4
  %230 = icmp eq i32 %39, %229
  br i1 %230, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %231 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %231(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %232 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = icmp eq i32 %233, 5
  br i1 %234, label %assert_end64, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end60
  %236 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %237 = load i16, i16* %236, align 2
  %238 = icmp eq i16 %237, 1
  %239 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %240 = load i8, i8* %239, align 1
  %241 = icmp eq i8 %240, 32
  %242 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %243 = load i8, i8* %242, align 1
  %244 = icmp eq i8 %243, 2
  %245 = and i1 %241, %244
  %246 = and i1 %238, %245
  br i1 %246, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %247(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %248 = load i64, i64* %49, align 8, !tbaa !2271
  %249 = trunc i64 %248 to i32
  %250 = icmp eq i32 %249, 1
  br i1 %250, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %251 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %251(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %252 = getelementptr inbounds i64, i64* %49, i64 1
  %253 = load i64, i64* %252, align 8, !tbaa !2285
  %254 = trunc i64 %253 to i32
  %255 = icmp eq i32 %254, 256
  br i1 %255, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %256(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.207, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %257 = getelementptr inbounds i64, i64* %49, i64 2
  %258 = load i64, i64* %257, align 8, !tbaa !2287
  %259 = trunc i64 %258 to i32
  %260 = icmp eq i32 %259, 1
  br i1 %260, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %262 = getelementptr inbounds i64, i64* %49, i64 3
  %263 = load i64, i64* %262, align 8, !tbaa !2290
  %264 = trunc i64 %263 to i32
  %265 = icmp eq i32 %264, 1
  br i1 %265, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %266 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %266(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %267 = getelementptr inbounds i64, i64* %49, i64 4
  %268 = load i64, i64* %267, align 8, !tbaa !2292
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 8
  br i1 %270, label %assert_end76, label %assert_fail75, !prof !5

assert_fail75:                                    ; preds = %assert_end74
  %271 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %271(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %assert_end74
  %272 = icmp eq i64* %51, null
  br i1 %272, label %if_end78, label %if_then77, !prof !50

if_then77:                                        ; preds = %assert_end76
  %273 = load i64, i64* %51, align 8, !tbaa !2296
  %274 = trunc i64 %273 to i32
  %275 = icmp eq i32 %274, 2048
  %276 = getelementptr inbounds i64, i64* %51, i64 1
  %277 = load i64, i64* %276, align 8, !tbaa !2310
  %278 = trunc i64 %277 to i32
  %279 = icmp eq i32 %278, 8
  %280 = getelementptr inbounds i64, i64* %51, i64 2
  %281 = load i64, i64* %280, align 8, !tbaa !2312
  %282 = trunc i64 %281 to i32
  %283 = icmp eq i32 %282, 8
  %284 = getelementptr inbounds i64, i64* %51, i64 3
  %285 = load i64, i64* %284, align 8, !tbaa !2315
  %286 = trunc i64 %285 to i32
  %287 = icmp eq i32 %286, 8
  %288 = getelementptr inbounds i64, i64* %51, i64 4
  %289 = load i64, i64* %288, align 8, !tbaa !2317
  %290 = trunc i64 %289 to i32
  %291 = icmp eq i32 %290, 1
  %292 = and i1 %287, %291
  %293 = and i1 %283, %292
  %294 = and i1 %279, %293
  %295 = and i1 %275, %294
  br i1 %295, label %if_end78, label %assert_fail79, !prof !5

if_end78:                                         ; preds = %assert_end76, %if_then77
  %296 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %297 = load i64, i64* %296, align 8
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %assert_end82, label %assert_fail81, !prof !5

assert_fail79:                                    ; preds = %if_then77
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([230 x i8], [230 x i8]* @.str.208, i64 0, i64 0))
  ret i32 -1

assert_fail81:                                    ; preds = %if_end78
  %300 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %300(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %if_end78
  %301 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %302 = load i32, i32* %301, align 4
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %305 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %306 = load i32, i32* %305, align 4
  %307 = icmp eq i32 %39, %306
  br i1 %307, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %308 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %308(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %309 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %310 = load i32, i32* %309, align 4
  %311 = icmp eq i32 %310, 5
  br i1 %311, label %assert_end90, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %312 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %312(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end86
  %313 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %314 = load i16, i16* %313, align 2
  %315 = icmp eq i16 %314, 1
  %316 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %317 = load i8, i8* %316, align 1
  %318 = icmp eq i8 %317, 32
  %319 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %320 = load i8, i8* %319, align 1
  %321 = icmp eq i8 %320, 2
  %322 = and i1 %318, %321
  %323 = and i1 %315, %322
  br i1 %323, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %325 = load i64, i64* %55, align 8, !tbaa !2321
  %326 = trunc i64 %325 to i32
  %327 = icmp eq i32 %326, 1
  br i1 %327, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %328 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %328(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %329 = getelementptr inbounds i64, i64* %55, i64 1
  %330 = load i64, i64* %329, align 8, !tbaa !2335
  %331 = trunc i64 %330 to i32
  %332 = icmp eq i32 %331, 256
  br i1 %332, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.209, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %334 = getelementptr inbounds i64, i64* %55, i64 2
  %335 = load i64, i64* %334, align 8, !tbaa !2337
  %336 = trunc i64 %335 to i32
  %337 = icmp eq i32 %336, 7
  br i1 %337, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %338 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %338(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %339 = getelementptr inbounds i64, i64* %55, i64 3
  %340 = load i64, i64* %339, align 8, !tbaa !2340
  %341 = trunc i64 %340 to i32
  %342 = icmp eq i32 %341, 7
  br i1 %342, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %343 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %343(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.181, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %344 = getelementptr inbounds i64, i64* %55, i64 4
  %345 = load i64, i64* %344, align 8, !tbaa !2342
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 8
  br i1 %347, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %348 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %348(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %349 = icmp eq i64* %57, null
  br i1 %349, label %if_end104, label %if_then103, !prof !50

if_then103:                                       ; preds = %assert_end102
  %350 = load i64, i64* %57, align 8, !tbaa !2346
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 100352
  %353 = getelementptr inbounds i64, i64* %57, i64 1
  %354 = load i64, i64* %353, align 8, !tbaa !2360
  %355 = trunc i64 %354 to i32
  %356 = icmp eq i32 %355, 392
  %357 = getelementptr inbounds i64, i64* %57, i64 2
  %358 = load i64, i64* %357, align 8, !tbaa !2362
  %359 = trunc i64 %358 to i32
  %360 = icmp eq i32 %359, 56
  %361 = getelementptr inbounds i64, i64* %57, i64 3
  %362 = load i64, i64* %361, align 8, !tbaa !2365
  %363 = trunc i64 %362 to i32
  %364 = icmp eq i32 %363, 8
  %365 = getelementptr inbounds i64, i64* %57, i64 4
  %366 = load i64, i64* %365, align 8, !tbaa !2367
  %367 = trunc i64 %366 to i32
  %368 = icmp eq i32 %367, 1
  %369 = and i1 %364, %368
  %370 = and i1 %360, %369
  %371 = and i1 %356, %370
  %372 = and i1 %352, %371
  br i1 %372, label %if_end104, label %assert_fail105, !prof !5

if_end104:                                        ; preds = %assert_end102, %if_then103
  %373 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %374 = load i64, i64* %373, align 8
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %assert_end108, label %assert_fail107, !prof !5

assert_fail105:                                   ; preds = %if_then103
  %376 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %376(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.210, i64 0, i64 0))
  ret i32 -1

assert_fail107:                                   ; preds = %if_end104
  %377 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %377(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %if_end104
  %378 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %379 = load i32, i32* %378, align 4
  %380 = icmp eq i32 %379, 1
  br i1 %380, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %381 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %381(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %382 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %383 = load i32, i32* %382, align 4
  %384 = icmp eq i32 %39, %383
  br i1 %384, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %385 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %385(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %386 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %387 = load i32, i32* %386, align 4
  %388 = icmp eq i32 %387, 5
  br i1 %388, label %assert_end116, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.137, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end112
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %391 = load i16, i16* %390, align 2
  %392 = icmp eq i16 %391, 1
  %393 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %394 = load i8, i8* %393, align 1
  %395 = icmp eq i8 %394, 32
  %396 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %397 = load i8, i8* %396, align 1
  %398 = icmp eq i8 %397, 2
  %399 = and i1 %395, %398
  %400 = and i1 %392, %399
  br i1 %400, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %401 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %401(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.138, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %402 = load i64, i64* %61, align 8, !tbaa !2371
  %403 = trunc i64 %402 to i32
  %404 = icmp eq i32 %403, 1
  br i1 %404, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %405 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %405(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.139, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %406 = getelementptr inbounds i64, i64* %61, i64 1
  %407 = load i64, i64* %406, align 8, !tbaa !2385
  %408 = trunc i64 %407 to i32
  %409 = icmp eq i32 %408, 256
  br i1 %409, label %assert_end122, label %assert_fail121, !prof !5

assert_fail121:                                   ; preds = %assert_end120
  %410 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %410(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.211, i64 0, i64 0))
  ret i32 -1

assert_end122:                                    ; preds = %assert_end120
  %411 = getelementptr inbounds i64, i64* %61, i64 2
  %412 = load i64, i64* %411, align 8, !tbaa !2387
  %413 = trunc i64 %412 to i32
  %414 = icmp eq i32 %413, 7
  br i1 %414, label %assert_end124, label %assert_fail123, !prof !5

assert_fail123:                                   ; preds = %assert_end122
  %415 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %415(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.212, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %assert_end122
  %416 = getelementptr inbounds i64, i64* %61, i64 3
  %417 = load i64, i64* %416, align 8, !tbaa !2390
  %418 = trunc i64 %417 to i32
  %419 = icmp eq i32 %418, 7
  br i1 %419, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %420 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %420(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.213, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %421 = getelementptr inbounds i64, i64* %61, i64 4
  %422 = load i64, i64* %421, align 8, !tbaa !2392
  %423 = trunc i64 %422 to i32
  %424 = icmp eq i32 %423, 8
  br i1 %424, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %425 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %425(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.214, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %426 = icmp eq i64* %63, null
  br i1 %426, label %if_end130, label %if_then129, !prof !50

if_then129:                                       ; preds = %assert_end128
  %427 = load i64, i64* %63, align 8, !tbaa !2396
  %428 = trunc i64 %427 to i32
  %429 = icmp eq i32 %428, 100352
  %430 = getelementptr inbounds i64, i64* %63, i64 1
  %431 = load i64, i64* %430, align 8, !tbaa !2410
  %432 = trunc i64 %431 to i32
  %433 = icmp eq i32 %432, 392
  %434 = getelementptr inbounds i64, i64* %63, i64 2
  %435 = load i64, i64* %434, align 8, !tbaa !2412
  %436 = trunc i64 %435 to i32
  %437 = icmp eq i32 %436, 56
  %438 = getelementptr inbounds i64, i64* %63, i64 3
  %439 = load i64, i64* %438, align 8, !tbaa !2415
  %440 = trunc i64 %439 to i32
  %441 = icmp eq i32 %440, 8
  %442 = getelementptr inbounds i64, i64* %63, i64 4
  %443 = load i64, i64* %442, align 8, !tbaa !2417
  %444 = trunc i64 %443 to i32
  %445 = icmp eq i32 %444, 1
  %446 = and i1 %441, %445
  %447 = and i1 %437, %446
  %448 = and i1 %433, %447
  %449 = and i1 %429, %448
  br i1 %449, label %if_end130, label %assert_fail131, !prof !5

if_end130:                                        ; preds = %assert_end128, %if_then129
  %450 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %451 = load i64, i64* %450, align 8
  %452 = icmp eq i64 %451, 0
  br i1 %452, label %assert_end134, label %assert_fail133, !prof !5

assert_fail131:                                   ; preds = %if_then129
  %453 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %453(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.215, i64 0, i64 0))
  ret i32 -1

assert_fail133:                                   ; preds = %if_end130
  %454 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %454(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.145, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %if_end130
  %455 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %456 = load i32, i32* %455, align 4
  %457 = icmp eq i32 %456, 1
  br i1 %457, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %458 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %458(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.146, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %459 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %460 = load i32, i32* %459, align 4
  %461 = icmp eq i32 %39, %460
  br i1 %461, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %462 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %462(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %463 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_compute_(i8* %33, i8* %41, i8* %59, i8* %47, i8* %53)
  ret i32 %463
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %5 = alloca %16, align 8
  %6 = getelementptr inbounds %16, %16* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %16, %16* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %16, %16* %5, i64 0, i32 2
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %16, %16* %5, i64 0, i32 3
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %16, %16* %5, i64 0, i32 4
  store i8* %4, i8** %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %16* %5 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.216, i8* nonnull %12, i32 0)
  ret i32 %13
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.216(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = alloca [14 x <8 x float>], align 32
  %.sub = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0
  %4 = bitcast i8* %2 to float**
  %5 = load float*, float** %4, align 8
  %6 = getelementptr inbounds i8, i8* %2, i64 8
  %7 = bitcast i8* %6 to float**
  %8 = load float*, float** %7, align 8
  %9 = getelementptr inbounds i8, i8* %2, i64 16
  %10 = bitcast i8* %9 to float**
  %11 = load float*, float** %10, align 8
  %12 = getelementptr inbounds i8, i8* %2, i64 24
  %13 = bitcast i8* %12 to float**
  %14 = load float*, float** %13, align 8
  %15 = getelementptr inbounds i8, i8* %2, i64 32
  %16 = bitcast i8* %15 to float**
  %17 = load float*, float** %16, align 8
  %18 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, 1023
  %21 = sdiv i32 %20, %19
  %22 = add nsw i32 %0, 1
  %23 = mul nsw i32 %21, %22
  %24 = icmp slt i32 %23, 1024
  %25 = select i1 %24, i32 %23, i32 1024
  %26 = mul nsw i32 %21, %0
  %27 = icmp slt i32 %26, 1024
  %28 = select i1 %27, i32 %26, i32 1024
  %29 = icmp slt i32 %28, %25
  br i1 %29, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %30 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 8
  %31 = bitcast float* %30 to <8 x float>*
  %32 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 16
  %33 = bitcast float* %32 to <8 x float>*
  %34 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 24
  %35 = bitcast float* %34 to <8 x float>*
  %36 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 32
  %37 = bitcast float* %36 to <8 x float>*
  %38 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 40
  %39 = bitcast float* %38 to <8 x float>*
  %40 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 48
  %41 = bitcast float* %40 to <8 x float>*
  %42 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 56
  %43 = bitcast float* %42 to <8 x float>*
  %44 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 64
  %45 = bitcast float* %44 to <8 x float>*
  %46 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 72
  %47 = bitcast float* %46 to <8 x float>*
  %48 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 80
  %49 = bitcast float* %48 to <8 x float>*
  %50 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 88
  %51 = bitcast float* %50 to <8 x float>*
  %52 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 96
  %53 = bitcast float* %52 to <8 x float>*
  %54 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 104
  %55 = bitcast float* %54 to <8 x float>*
  %56 = bitcast [14 x <8 x float>]* %3 to i8*
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_end24.1
  %57 = phi i32 [ %28, %for_body.lr.ph ], [ %729, %for_end24.1 ]
  %58 = and i32 %57, 3
  %59 = mul nuw nsw i32 %58, 112
  %60 = lshr i32 %57, 2
  %61 = shl i32 %60, 12
  %62 = icmp eq i32 %58, 3
  %63 = zext i32 %59 to i64
  %64 = sext i32 %61 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %56, i8 0, i64 448, i1 false)
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end24.1, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_body
  %indvars.iv122 = phi i64 [ 0, %for_body ], [ %indvars.iv.next123, %for_end6 ]
  %.lcssa6895 = phi <8 x float> [ zeroinitializer, %for_body ], [ %.lcssa68, %for_end6 ]
  %.lcssa6693 = phi <8 x float> [ zeroinitializer, %for_body ], [ %.lcssa66, %for_end6 ]
  %.lcssa6491 = phi <8 x float> [ zeroinitializer, %for_body ], [ %.lcssa64, %for_end6 ]
  %.lcssa6289 = phi <8 x float> [ zeroinitializer, %for_body ], [ %.lcssa62, %for_end6 ]
  %.lcssa6087 = phi <8 x float> [ zeroinitializer, %for_body ], [ %.lcssa60, %for_end6 ]
  %.lcssa5885 = phi <8 x float> [ zeroinitializer, %for_body ], [ %.lcssa58, %for_end6 ]
  %.lcssa5683 = phi <8 x float> [ zeroinitializer, %for_body ], [ %.lcssa56, %for_end6 ]
  %.lcssa5481 = phi <8 x float> [ zeroinitializer, %for_body ], [ %538, %for_end6 ]
  %.lcssa5279 = phi <8 x float> [ zeroinitializer, %for_body ], [ %539, %for_end6 ]
  %.lcssa5077 = phi <8 x float> [ zeroinitializer, %for_body ], [ %540, %for_end6 ]
  %.lcssa4875 = phi <8 x float> [ zeroinitializer, %for_body ], [ %541, %for_end6 ]
  %.lcssa4673 = phi <8 x float> [ zeroinitializer, %for_body ], [ %542, %for_end6 ]
  %.lcssa4472 = phi <8 x float> [ zeroinitializer, %for_body ], [ %543, %for_end6 ]
  %.lcssa70 = phi <8 x float> [ zeroinitializer, %for_body ], [ %544, %for_end6 ]
  %65 = mul nuw nsw i64 %indvars.iv122, 392
  %66 = add nuw nsw i64 %65, %63
  %67 = shl i64 %indvars.iv122, 6
  %68 = add nuw nsw i64 %67, %64
  br i1 %62, label %for_body5.us.preheader, label %for_body5, !prof !50

for_body5.us.preheader:                           ; preds = %for_begin4.preheader
  %69 = getelementptr inbounds float, float* %5, i64 %66
  %70 = load float, float* %69, align 4, !tbaa !2421
  %71 = insertelement <8 x float> undef, float %70, i32 0
  %72 = shufflevector <8 x float> %71, <8 x float> undef, <8 x i32> zeroinitializer
  %73 = getelementptr inbounds float, float* %8, i64 %68
  %74 = bitcast float* %73 to <8 x float>*
  %75 = load <8 x float>, <8 x float>* %74, align 32, !tbaa !2424
  %76 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %72, <8 x float> %75, <8 x float> %.lcssa70)
  %77 = add nuw nsw i64 %66, 8
  %78 = getelementptr inbounds float, float* %5, i64 %77
  %79 = load float, float* %78, align 4, !tbaa !2421
  %80 = insertelement <8 x float> undef, float %79, i32 0
  %81 = shufflevector <8 x float> %80, <8 x float> undef, <8 x i32> zeroinitializer
  %82 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %81, <8 x float> %75, <8 x float> %.lcssa4472)
  %83 = add nuw nsw i64 %66, 16
  %84 = getelementptr inbounds float, float* %5, i64 %83
  %85 = load float, float* %84, align 4, !tbaa !2421
  %86 = insertelement <8 x float> undef, float %85, i32 0
  %87 = shufflevector <8 x float> %86, <8 x float> undef, <8 x i32> zeroinitializer
  %88 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %87, <8 x float> %75, <8 x float> %.lcssa4673)
  %89 = add nuw nsw i64 %66, 24
  %90 = getelementptr inbounds float, float* %5, i64 %89
  %91 = load float, float* %90, align 4, !tbaa !2421
  %92 = insertelement <8 x float> undef, float %91, i32 0
  %93 = shufflevector <8 x float> %92, <8 x float> undef, <8 x i32> zeroinitializer
  %94 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %93, <8 x float> %75, <8 x float> %.lcssa4875)
  %95 = add nuw nsw i64 %66, 32
  %96 = getelementptr inbounds float, float* %5, i64 %95
  %97 = load float, float* %96, align 4, !tbaa !2421
  %98 = insertelement <8 x float> undef, float %97, i32 0
  %99 = shufflevector <8 x float> %98, <8 x float> undef, <8 x i32> zeroinitializer
  %100 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %99, <8 x float> %75, <8 x float> %.lcssa5077)
  %101 = add nuw nsw i64 %66, 40
  %102 = getelementptr inbounds float, float* %5, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !2421
  %104 = insertelement <8 x float> undef, float %103, i32 0
  %105 = shufflevector <8 x float> %104, <8 x float> undef, <8 x i32> zeroinitializer
  %106 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %105, <8 x float> %75, <8 x float> %.lcssa5279)
  %107 = add nuw nsw i64 %66, 48
  %108 = getelementptr inbounds float, float* %5, i64 %107
  %109 = load float, float* %108, align 4, !tbaa !2421
  %110 = insertelement <8 x float> undef, float %109, i32 0
  %111 = shufflevector <8 x float> %110, <8 x float> undef, <8 x i32> zeroinitializer
  %112 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %111, <8 x float> %75, <8 x float> %.lcssa5481)
  %113 = or i64 %66, 1
  %114 = getelementptr inbounds float, float* %5, i64 %113
  %115 = load float, float* %114, align 4, !tbaa !2421
  %116 = insertelement <8 x float> undef, float %115, i32 0
  %117 = shufflevector <8 x float> %116, <8 x float> undef, <8 x i32> zeroinitializer
  %118 = or i64 %68, 8
  %119 = getelementptr inbounds float, float* %8, i64 %118
  %120 = bitcast float* %119 to <8 x float>*
  %121 = load <8 x float>, <8 x float>* %120, align 32, !tbaa !2424
  %122 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %117, <8 x float> %121, <8 x float> %76)
  %123 = add nuw nsw i64 %113, 8
  %124 = getelementptr inbounds float, float* %5, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !2421
  %126 = insertelement <8 x float> undef, float %125, i32 0
  %127 = shufflevector <8 x float> %126, <8 x float> undef, <8 x i32> zeroinitializer
  %128 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %127, <8 x float> %121, <8 x float> %82)
  %129 = add nuw nsw i64 %113, 16
  %130 = getelementptr inbounds float, float* %5, i64 %129
  %131 = load float, float* %130, align 4, !tbaa !2421
  %132 = insertelement <8 x float> undef, float %131, i32 0
  %133 = shufflevector <8 x float> %132, <8 x float> undef, <8 x i32> zeroinitializer
  %134 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %133, <8 x float> %121, <8 x float> %88)
  %135 = add nuw nsw i64 %113, 24
  %136 = getelementptr inbounds float, float* %5, i64 %135
  %137 = load float, float* %136, align 4, !tbaa !2421
  %138 = insertelement <8 x float> undef, float %137, i32 0
  %139 = shufflevector <8 x float> %138, <8 x float> undef, <8 x i32> zeroinitializer
  %140 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %139, <8 x float> %121, <8 x float> %94)
  %141 = add nuw nsw i64 %113, 32
  %142 = getelementptr inbounds float, float* %5, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !2421
  %144 = insertelement <8 x float> undef, float %143, i32 0
  %145 = shufflevector <8 x float> %144, <8 x float> undef, <8 x i32> zeroinitializer
  %146 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %145, <8 x float> %121, <8 x float> %100)
  %147 = add nuw nsw i64 %113, 40
  %148 = getelementptr inbounds float, float* %5, i64 %147
  %149 = load float, float* %148, align 4, !tbaa !2421
  %150 = insertelement <8 x float> undef, float %149, i32 0
  %151 = shufflevector <8 x float> %150, <8 x float> undef, <8 x i32> zeroinitializer
  %152 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %151, <8 x float> %121, <8 x float> %106)
  %153 = add nuw nsw i64 %113, 48
  %154 = getelementptr inbounds float, float* %5, i64 %153
  %155 = load float, float* %154, align 4, !tbaa !2421
  %156 = insertelement <8 x float> undef, float %155, i32 0
  %157 = shufflevector <8 x float> %156, <8 x float> undef, <8 x i32> zeroinitializer
  %158 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %157, <8 x float> %121, <8 x float> %112)
  %159 = or i64 %66, 2
  %160 = getelementptr inbounds float, float* %5, i64 %159
  %161 = load float, float* %160, align 4, !tbaa !2421
  %162 = insertelement <8 x float> undef, float %161, i32 0
  %163 = shufflevector <8 x float> %162, <8 x float> undef, <8 x i32> zeroinitializer
  %164 = or i64 %68, 16
  %165 = getelementptr inbounds float, float* %8, i64 %164
  %166 = bitcast float* %165 to <8 x float>*
  %167 = load <8 x float>, <8 x float>* %166, align 32, !tbaa !2424
  %168 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %163, <8 x float> %167, <8 x float> %122)
  %169 = add nuw nsw i64 %159, 8
  %170 = getelementptr inbounds float, float* %5, i64 %169
  %171 = load float, float* %170, align 4, !tbaa !2421
  %172 = insertelement <8 x float> undef, float %171, i32 0
  %173 = shufflevector <8 x float> %172, <8 x float> undef, <8 x i32> zeroinitializer
  %174 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %173, <8 x float> %167, <8 x float> %128)
  %175 = add nuw nsw i64 %159, 16
  %176 = getelementptr inbounds float, float* %5, i64 %175
  %177 = load float, float* %176, align 4, !tbaa !2421
  %178 = insertelement <8 x float> undef, float %177, i32 0
  %179 = shufflevector <8 x float> %178, <8 x float> undef, <8 x i32> zeroinitializer
  %180 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %179, <8 x float> %167, <8 x float> %134)
  %181 = add nuw nsw i64 %159, 24
  %182 = getelementptr inbounds float, float* %5, i64 %181
  %183 = load float, float* %182, align 4, !tbaa !2421
  %184 = insertelement <8 x float> undef, float %183, i32 0
  %185 = shufflevector <8 x float> %184, <8 x float> undef, <8 x i32> zeroinitializer
  %186 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %185, <8 x float> %167, <8 x float> %140)
  %187 = add nuw nsw i64 %159, 32
  %188 = getelementptr inbounds float, float* %5, i64 %187
  %189 = load float, float* %188, align 4, !tbaa !2421
  %190 = insertelement <8 x float> undef, float %189, i32 0
  %191 = shufflevector <8 x float> %190, <8 x float> undef, <8 x i32> zeroinitializer
  %192 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %191, <8 x float> %167, <8 x float> %146)
  %193 = add nuw nsw i64 %159, 40
  %194 = getelementptr inbounds float, float* %5, i64 %193
  %195 = load float, float* %194, align 4, !tbaa !2421
  %196 = insertelement <8 x float> undef, float %195, i32 0
  %197 = shufflevector <8 x float> %196, <8 x float> undef, <8 x i32> zeroinitializer
  %198 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %197, <8 x float> %167, <8 x float> %152)
  %199 = add nuw nsw i64 %159, 48
  %200 = getelementptr inbounds float, float* %5, i64 %199
  %201 = load float, float* %200, align 4, !tbaa !2421
  %202 = insertelement <8 x float> undef, float %201, i32 0
  %203 = shufflevector <8 x float> %202, <8 x float> undef, <8 x i32> zeroinitializer
  %204 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %203, <8 x float> %167, <8 x float> %158)
  %205 = or i64 %66, 3
  %206 = getelementptr inbounds float, float* %5, i64 %205
  %207 = load float, float* %206, align 4, !tbaa !2421
  %208 = insertelement <8 x float> undef, float %207, i32 0
  %209 = shufflevector <8 x float> %208, <8 x float> undef, <8 x i32> zeroinitializer
  %210 = or i64 %68, 24
  %211 = getelementptr inbounds float, float* %8, i64 %210
  %212 = bitcast float* %211 to <8 x float>*
  %213 = load <8 x float>, <8 x float>* %212, align 32, !tbaa !2424
  %214 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %209, <8 x float> %213, <8 x float> %168)
  %215 = add nuw nsw i64 %205, 8
  %216 = getelementptr inbounds float, float* %5, i64 %215
  %217 = load float, float* %216, align 4, !tbaa !2421
  %218 = insertelement <8 x float> undef, float %217, i32 0
  %219 = shufflevector <8 x float> %218, <8 x float> undef, <8 x i32> zeroinitializer
  %220 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %219, <8 x float> %213, <8 x float> %174)
  %221 = add nuw nsw i64 %205, 16
  %222 = getelementptr inbounds float, float* %5, i64 %221
  %223 = load float, float* %222, align 4, !tbaa !2421
  %224 = insertelement <8 x float> undef, float %223, i32 0
  %225 = shufflevector <8 x float> %224, <8 x float> undef, <8 x i32> zeroinitializer
  %226 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %225, <8 x float> %213, <8 x float> %180)
  %227 = add nuw nsw i64 %205, 24
  %228 = getelementptr inbounds float, float* %5, i64 %227
  %229 = load float, float* %228, align 4, !tbaa !2421
  %230 = insertelement <8 x float> undef, float %229, i32 0
  %231 = shufflevector <8 x float> %230, <8 x float> undef, <8 x i32> zeroinitializer
  %232 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %231, <8 x float> %213, <8 x float> %186)
  %233 = add nuw nsw i64 %205, 32
  %234 = getelementptr inbounds float, float* %5, i64 %233
  %235 = load float, float* %234, align 4, !tbaa !2421
  %236 = insertelement <8 x float> undef, float %235, i32 0
  %237 = shufflevector <8 x float> %236, <8 x float> undef, <8 x i32> zeroinitializer
  %238 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %237, <8 x float> %213, <8 x float> %192)
  %239 = add nuw nsw i64 %205, 40
  %240 = getelementptr inbounds float, float* %5, i64 %239
  %241 = load float, float* %240, align 4, !tbaa !2421
  %242 = insertelement <8 x float> undef, float %241, i32 0
  %243 = shufflevector <8 x float> %242, <8 x float> undef, <8 x i32> zeroinitializer
  %244 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %243, <8 x float> %213, <8 x float> %198)
  %245 = add nuw nsw i64 %205, 48
  %246 = getelementptr inbounds float, float* %5, i64 %245
  %247 = load float, float* %246, align 4, !tbaa !2421
  %248 = insertelement <8 x float> undef, float %247, i32 0
  %249 = shufflevector <8 x float> %248, <8 x float> undef, <8 x i32> zeroinitializer
  %250 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %249, <8 x float> %213, <8 x float> %204)
  %251 = or i64 %66, 4
  %252 = getelementptr inbounds float, float* %5, i64 %251
  %253 = load float, float* %252, align 4, !tbaa !2421
  %254 = insertelement <8 x float> undef, float %253, i32 0
  %255 = shufflevector <8 x float> %254, <8 x float> undef, <8 x i32> zeroinitializer
  %256 = or i64 %68, 32
  %257 = getelementptr inbounds float, float* %8, i64 %256
  %258 = bitcast float* %257 to <8 x float>*
  %259 = load <8 x float>, <8 x float>* %258, align 32, !tbaa !2424
  %260 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %255, <8 x float> %259, <8 x float> %214)
  %261 = add nuw nsw i64 %251, 8
  %262 = getelementptr inbounds float, float* %5, i64 %261
  %263 = load float, float* %262, align 4, !tbaa !2421
  %264 = insertelement <8 x float> undef, float %263, i32 0
  %265 = shufflevector <8 x float> %264, <8 x float> undef, <8 x i32> zeroinitializer
  %266 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %265, <8 x float> %259, <8 x float> %220)
  %267 = add nuw nsw i64 %251, 16
  %268 = getelementptr inbounds float, float* %5, i64 %267
  %269 = load float, float* %268, align 4, !tbaa !2421
  %270 = insertelement <8 x float> undef, float %269, i32 0
  %271 = shufflevector <8 x float> %270, <8 x float> undef, <8 x i32> zeroinitializer
  %272 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %271, <8 x float> %259, <8 x float> %226)
  %273 = add nuw nsw i64 %251, 24
  %274 = getelementptr inbounds float, float* %5, i64 %273
  %275 = load float, float* %274, align 4, !tbaa !2421
  %276 = insertelement <8 x float> undef, float %275, i32 0
  %277 = shufflevector <8 x float> %276, <8 x float> undef, <8 x i32> zeroinitializer
  %278 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %277, <8 x float> %259, <8 x float> %232)
  %279 = add nuw nsw i64 %251, 32
  %280 = getelementptr inbounds float, float* %5, i64 %279
  %281 = load float, float* %280, align 4, !tbaa !2421
  %282 = insertelement <8 x float> undef, float %281, i32 0
  %283 = shufflevector <8 x float> %282, <8 x float> undef, <8 x i32> zeroinitializer
  %284 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %283, <8 x float> %259, <8 x float> %238)
  %285 = add nuw nsw i64 %251, 40
  %286 = getelementptr inbounds float, float* %5, i64 %285
  %287 = load float, float* %286, align 4, !tbaa !2421
  %288 = insertelement <8 x float> undef, float %287, i32 0
  %289 = shufflevector <8 x float> %288, <8 x float> undef, <8 x i32> zeroinitializer
  %290 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %289, <8 x float> %259, <8 x float> %244)
  %291 = add nuw nsw i64 %251, 48
  %292 = getelementptr inbounds float, float* %5, i64 %291
  %293 = load float, float* %292, align 4, !tbaa !2421
  %294 = insertelement <8 x float> undef, float %293, i32 0
  %295 = shufflevector <8 x float> %294, <8 x float> undef, <8 x i32> zeroinitializer
  %296 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %295, <8 x float> %259, <8 x float> %250)
  %297 = or i64 %66, 5
  %298 = getelementptr inbounds float, float* %5, i64 %297
  %299 = load float, float* %298, align 4, !tbaa !2421
  %300 = insertelement <8 x float> undef, float %299, i32 0
  %301 = shufflevector <8 x float> %300, <8 x float> undef, <8 x i32> zeroinitializer
  %302 = or i64 %68, 40
  %303 = getelementptr inbounds float, float* %8, i64 %302
  %304 = bitcast float* %303 to <8 x float>*
  %305 = load <8 x float>, <8 x float>* %304, align 32, !tbaa !2424
  %306 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %301, <8 x float> %305, <8 x float> %260)
  %307 = add nuw nsw i64 %297, 8
  %308 = getelementptr inbounds float, float* %5, i64 %307
  %309 = load float, float* %308, align 4, !tbaa !2421
  %310 = insertelement <8 x float> undef, float %309, i32 0
  %311 = shufflevector <8 x float> %310, <8 x float> undef, <8 x i32> zeroinitializer
  %312 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %311, <8 x float> %305, <8 x float> %266)
  %313 = add nuw nsw i64 %297, 16
  %314 = getelementptr inbounds float, float* %5, i64 %313
  %315 = load float, float* %314, align 4, !tbaa !2421
  %316 = insertelement <8 x float> undef, float %315, i32 0
  %317 = shufflevector <8 x float> %316, <8 x float> undef, <8 x i32> zeroinitializer
  %318 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %317, <8 x float> %305, <8 x float> %272)
  %319 = add nuw nsw i64 %297, 24
  %320 = getelementptr inbounds float, float* %5, i64 %319
  %321 = load float, float* %320, align 4, !tbaa !2421
  %322 = insertelement <8 x float> undef, float %321, i32 0
  %323 = shufflevector <8 x float> %322, <8 x float> undef, <8 x i32> zeroinitializer
  %324 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %323, <8 x float> %305, <8 x float> %278)
  %325 = add nuw nsw i64 %297, 32
  %326 = getelementptr inbounds float, float* %5, i64 %325
  %327 = load float, float* %326, align 4, !tbaa !2421
  %328 = insertelement <8 x float> undef, float %327, i32 0
  %329 = shufflevector <8 x float> %328, <8 x float> undef, <8 x i32> zeroinitializer
  %330 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %329, <8 x float> %305, <8 x float> %284)
  %331 = add nuw nsw i64 %297, 40
  %332 = getelementptr inbounds float, float* %5, i64 %331
  %333 = load float, float* %332, align 4, !tbaa !2421
  %334 = insertelement <8 x float> undef, float %333, i32 0
  %335 = shufflevector <8 x float> %334, <8 x float> undef, <8 x i32> zeroinitializer
  %336 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %335, <8 x float> %305, <8 x float> %290)
  %337 = add nuw nsw i64 %297, 48
  %338 = getelementptr inbounds float, float* %5, i64 %337
  %339 = load float, float* %338, align 4, !tbaa !2421
  %340 = insertelement <8 x float> undef, float %339, i32 0
  %341 = shufflevector <8 x float> %340, <8 x float> undef, <8 x i32> zeroinitializer
  %342 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %341, <8 x float> %305, <8 x float> %296)
  %343 = or i64 %66, 6
  %344 = getelementptr inbounds float, float* %5, i64 %343
  %345 = load float, float* %344, align 4, !tbaa !2421
  %346 = insertelement <8 x float> undef, float %345, i32 0
  %347 = shufflevector <8 x float> %346, <8 x float> undef, <8 x i32> zeroinitializer
  %348 = or i64 %68, 48
  %349 = getelementptr inbounds float, float* %8, i64 %348
  %350 = bitcast float* %349 to <8 x float>*
  %351 = load <8 x float>, <8 x float>* %350, align 32, !tbaa !2424
  %352 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %347, <8 x float> %351, <8 x float> %306)
  %353 = add nuw nsw i64 %343, 8
  %354 = getelementptr inbounds float, float* %5, i64 %353
  %355 = load float, float* %354, align 4, !tbaa !2421
  %356 = insertelement <8 x float> undef, float %355, i32 0
  %357 = shufflevector <8 x float> %356, <8 x float> undef, <8 x i32> zeroinitializer
  %358 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %357, <8 x float> %351, <8 x float> %312)
  %359 = add nuw nsw i64 %343, 16
  %360 = getelementptr inbounds float, float* %5, i64 %359
  %361 = load float, float* %360, align 4, !tbaa !2421
  %362 = insertelement <8 x float> undef, float %361, i32 0
  %363 = shufflevector <8 x float> %362, <8 x float> undef, <8 x i32> zeroinitializer
  %364 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %363, <8 x float> %351, <8 x float> %318)
  %365 = add nuw nsw i64 %343, 24
  %366 = getelementptr inbounds float, float* %5, i64 %365
  %367 = load float, float* %366, align 4, !tbaa !2421
  %368 = insertelement <8 x float> undef, float %367, i32 0
  %369 = shufflevector <8 x float> %368, <8 x float> undef, <8 x i32> zeroinitializer
  %370 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %369, <8 x float> %351, <8 x float> %324)
  %371 = add nuw nsw i64 %343, 32
  %372 = getelementptr inbounds float, float* %5, i64 %371
  %373 = load float, float* %372, align 4, !tbaa !2421
  %374 = insertelement <8 x float> undef, float %373, i32 0
  %375 = shufflevector <8 x float> %374, <8 x float> undef, <8 x i32> zeroinitializer
  %376 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %375, <8 x float> %351, <8 x float> %330)
  %377 = add nuw nsw i64 %343, 40
  %378 = getelementptr inbounds float, float* %5, i64 %377
  %379 = load float, float* %378, align 4, !tbaa !2421
  %380 = insertelement <8 x float> undef, float %379, i32 0
  %381 = shufflevector <8 x float> %380, <8 x float> undef, <8 x i32> zeroinitializer
  %382 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %381, <8 x float> %351, <8 x float> %336)
  %383 = add nuw nsw i64 %343, 48
  %384 = getelementptr inbounds float, float* %5, i64 %383
  %385 = load float, float* %384, align 4, !tbaa !2421
  %386 = insertelement <8 x float> undef, float %385, i32 0
  %387 = shufflevector <8 x float> %386, <8 x float> undef, <8 x i32> zeroinitializer
  %388 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %387, <8 x float> %351, <8 x float> %342)
  %389 = or i64 %66, 7
  %390 = getelementptr inbounds float, float* %5, i64 %389
  %391 = load float, float* %390, align 4, !tbaa !2421
  %392 = insertelement <8 x float> undef, float %391, i32 0
  %393 = shufflevector <8 x float> %392, <8 x float> undef, <8 x i32> zeroinitializer
  %394 = or i64 %68, 56
  %395 = getelementptr inbounds float, float* %8, i64 %394
  %396 = bitcast float* %395 to <8 x float>*
  %397 = load <8 x float>, <8 x float>* %396, align 32, !tbaa !2424
  %398 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %393, <8 x float> %397, <8 x float> %352)
  %399 = add nuw nsw i64 %389, 8
  %400 = getelementptr inbounds float, float* %5, i64 %399
  %401 = load float, float* %400, align 4, !tbaa !2421
  %402 = insertelement <8 x float> undef, float %401, i32 0
  %403 = shufflevector <8 x float> %402, <8 x float> undef, <8 x i32> zeroinitializer
  %404 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %403, <8 x float> %397, <8 x float> %358)
  %405 = add nuw nsw i64 %389, 16
  %406 = getelementptr inbounds float, float* %5, i64 %405
  %407 = load float, float* %406, align 4, !tbaa !2421
  %408 = insertelement <8 x float> undef, float %407, i32 0
  %409 = shufflevector <8 x float> %408, <8 x float> undef, <8 x i32> zeroinitializer
  %410 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %409, <8 x float> %397, <8 x float> %364)
  %411 = add nuw nsw i64 %389, 24
  %412 = getelementptr inbounds float, float* %5, i64 %411
  %413 = load float, float* %412, align 4, !tbaa !2421
  %414 = insertelement <8 x float> undef, float %413, i32 0
  %415 = shufflevector <8 x float> %414, <8 x float> undef, <8 x i32> zeroinitializer
  %416 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %415, <8 x float> %397, <8 x float> %370)
  %417 = add nuw nsw i64 %389, 32
  %418 = getelementptr inbounds float, float* %5, i64 %417
  %419 = load float, float* %418, align 4, !tbaa !2421
  %420 = insertelement <8 x float> undef, float %419, i32 0
  %421 = shufflevector <8 x float> %420, <8 x float> undef, <8 x i32> zeroinitializer
  %422 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %421, <8 x float> %397, <8 x float> %376)
  %423 = add nuw nsw i64 %389, 40
  %424 = getelementptr inbounds float, float* %5, i64 %423
  %425 = load float, float* %424, align 4, !tbaa !2421
  %426 = insertelement <8 x float> undef, float %425, i32 0
  %427 = shufflevector <8 x float> %426, <8 x float> undef, <8 x i32> zeroinitializer
  %428 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %427, <8 x float> %397, <8 x float> %382)
  %429 = add nuw nsw i64 %389, 48
  %430 = getelementptr inbounds float, float* %5, i64 %429
  %431 = load float, float* %430, align 4, !tbaa !2421
  %432 = insertelement <8 x float> undef, float %431, i32 0
  %433 = shufflevector <8 x float> %432, <8 x float> undef, <8 x i32> zeroinitializer
  %434 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %433, <8 x float> %397, <8 x float> %388)
  br label %for_end6

for_body5:                                        ; preds = %for_begin4.preheader, %for_body5
  %indvars.iv = phi i64 [ %indvars.iv.next, %for_body5 ], [ 0, %for_begin4.preheader ]
  %435 = phi <8 x float> [ %537, %for_body5 ], [ %.lcssa6895, %for_begin4.preheader ]
  %436 = phi <8 x float> [ %531, %for_body5 ], [ %.lcssa6693, %for_begin4.preheader ]
  %437 = phi <8 x float> [ %525, %for_body5 ], [ %.lcssa6491, %for_begin4.preheader ]
  %438 = phi <8 x float> [ %519, %for_body5 ], [ %.lcssa6289, %for_begin4.preheader ]
  %439 = phi <8 x float> [ %513, %for_body5 ], [ %.lcssa6087, %for_begin4.preheader ]
  %440 = phi <8 x float> [ %507, %for_body5 ], [ %.lcssa5885, %for_begin4.preheader ]
  %441 = phi <8 x float> [ %501, %for_body5 ], [ %.lcssa5683, %for_begin4.preheader ]
  %442 = phi <8 x float> [ %495, %for_body5 ], [ %.lcssa5481, %for_begin4.preheader ]
  %443 = phi <8 x float> [ %489, %for_body5 ], [ %.lcssa5279, %for_begin4.preheader ]
  %444 = phi <8 x float> [ %483, %for_body5 ], [ %.lcssa5077, %for_begin4.preheader ]
  %445 = phi <8 x float> [ %477, %for_body5 ], [ %.lcssa4875, %for_begin4.preheader ]
  %446 = phi <8 x float> [ %471, %for_body5 ], [ %.lcssa4673, %for_begin4.preheader ]
  %447 = phi <8 x float> [ %465, %for_body5 ], [ %.lcssa4472, %for_begin4.preheader ]
  %448 = phi <8 x float> [ %459, %for_body5 ], [ %.lcssa70, %for_begin4.preheader ]
  %449 = add nuw nsw i64 %66, %indvars.iv
  %450 = getelementptr inbounds float, float* %5, i64 %449
  %451 = load float, float* %450, align 4, !tbaa !2421
  %452 = insertelement <8 x float> undef, float %451, i32 0
  %453 = shufflevector <8 x float> %452, <8 x float> undef, <8 x i32> zeroinitializer
  %454 = shl i64 %indvars.iv, 3
  %455 = add nuw nsw i64 %68, %454
  %456 = getelementptr inbounds float, float* %8, i64 %455
  %457 = bitcast float* %456 to <8 x float>*
  %458 = load <8 x float>, <8 x float>* %457, align 32, !tbaa !2424
  %459 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %453, <8 x float> %458, <8 x float> %448)
  %460 = add nuw nsw i64 %449, 8
  %461 = getelementptr inbounds float, float* %5, i64 %460
  %462 = load float, float* %461, align 4, !tbaa !2421
  %463 = insertelement <8 x float> undef, float %462, i32 0
  %464 = shufflevector <8 x float> %463, <8 x float> undef, <8 x i32> zeroinitializer
  %465 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %464, <8 x float> %458, <8 x float> %447)
  %466 = add nuw nsw i64 %449, 16
  %467 = getelementptr inbounds float, float* %5, i64 %466
  %468 = load float, float* %467, align 4, !tbaa !2421
  %469 = insertelement <8 x float> undef, float %468, i32 0
  %470 = shufflevector <8 x float> %469, <8 x float> undef, <8 x i32> zeroinitializer
  %471 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %470, <8 x float> %458, <8 x float> %446)
  %472 = add nuw nsw i64 %449, 24
  %473 = getelementptr inbounds float, float* %5, i64 %472
  %474 = load float, float* %473, align 4, !tbaa !2421
  %475 = insertelement <8 x float> undef, float %474, i32 0
  %476 = shufflevector <8 x float> %475, <8 x float> undef, <8 x i32> zeroinitializer
  %477 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %476, <8 x float> %458, <8 x float> %445)
  %478 = add nuw nsw i64 %449, 32
  %479 = getelementptr inbounds float, float* %5, i64 %478
  %480 = load float, float* %479, align 4, !tbaa !2421
  %481 = insertelement <8 x float> undef, float %480, i32 0
  %482 = shufflevector <8 x float> %481, <8 x float> undef, <8 x i32> zeroinitializer
  %483 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %482, <8 x float> %458, <8 x float> %444)
  %484 = add nuw nsw i64 %449, 40
  %485 = getelementptr inbounds float, float* %5, i64 %484
  %486 = load float, float* %485, align 4, !tbaa !2421
  %487 = insertelement <8 x float> undef, float %486, i32 0
  %488 = shufflevector <8 x float> %487, <8 x float> undef, <8 x i32> zeroinitializer
  %489 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %488, <8 x float> %458, <8 x float> %443)
  %490 = add nuw nsw i64 %449, 48
  %491 = getelementptr inbounds float, float* %5, i64 %490
  %492 = load float, float* %491, align 4, !tbaa !2421
  %493 = insertelement <8 x float> undef, float %492, i32 0
  %494 = shufflevector <8 x float> %493, <8 x float> undef, <8 x i32> zeroinitializer
  %495 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %494, <8 x float> %458, <8 x float> %442)
  %496 = add nuw nsw i64 %449, 56
  %497 = getelementptr inbounds float, float* %5, i64 %496
  %498 = load float, float* %497, align 4, !tbaa !2421
  %499 = insertelement <8 x float> undef, float %498, i32 0
  %500 = shufflevector <8 x float> %499, <8 x float> undef, <8 x i32> zeroinitializer
  %501 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %500, <8 x float> %458, <8 x float> %441)
  %502 = add nuw nsw i64 %449, 64
  %503 = getelementptr inbounds float, float* %5, i64 %502
  %504 = load float, float* %503, align 4, !tbaa !2421
  %505 = insertelement <8 x float> undef, float %504, i32 0
  %506 = shufflevector <8 x float> %505, <8 x float> undef, <8 x i32> zeroinitializer
  %507 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %506, <8 x float> %458, <8 x float> %440)
  %508 = add nuw nsw i64 %449, 72
  %509 = getelementptr inbounds float, float* %5, i64 %508
  %510 = load float, float* %509, align 4, !tbaa !2421
  %511 = insertelement <8 x float> undef, float %510, i32 0
  %512 = shufflevector <8 x float> %511, <8 x float> undef, <8 x i32> zeroinitializer
  %513 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %512, <8 x float> %458, <8 x float> %439)
  %514 = add nuw nsw i64 %449, 80
  %515 = getelementptr inbounds float, float* %5, i64 %514
  %516 = load float, float* %515, align 4, !tbaa !2421
  %517 = insertelement <8 x float> undef, float %516, i32 0
  %518 = shufflevector <8 x float> %517, <8 x float> undef, <8 x i32> zeroinitializer
  %519 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %518, <8 x float> %458, <8 x float> %438)
  %520 = add nuw nsw i64 %449, 88
  %521 = getelementptr inbounds float, float* %5, i64 %520
  %522 = load float, float* %521, align 4, !tbaa !2421
  %523 = insertelement <8 x float> undef, float %522, i32 0
  %524 = shufflevector <8 x float> %523, <8 x float> undef, <8 x i32> zeroinitializer
  %525 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %524, <8 x float> %458, <8 x float> %437)
  %526 = add nuw nsw i64 %449, 96
  %527 = getelementptr inbounds float, float* %5, i64 %526
  %528 = load float, float* %527, align 4, !tbaa !2421
  %529 = insertelement <8 x float> undef, float %528, i32 0
  %530 = shufflevector <8 x float> %529, <8 x float> undef, <8 x i32> zeroinitializer
  %531 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %530, <8 x float> %458, <8 x float> %436)
  %532 = add nuw nsw i64 %449, 104
  %533 = getelementptr inbounds float, float* %5, i64 %532
  %534 = load float, float* %533, align 4, !tbaa !2421
  %535 = insertelement <8 x float> undef, float %534, i32 0
  %536 = shufflevector <8 x float> %535, <8 x float> undef, <8 x i32> zeroinitializer
  %537 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %536, <8 x float> %458, <8 x float> %435)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 8
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5, %for_body5.us.preheader
  %.lcssa68 = phi <8 x float> [ %.lcssa6895, %for_body5.us.preheader ], [ %537, %for_body5 ]
  %.lcssa66 = phi <8 x float> [ %.lcssa6693, %for_body5.us.preheader ], [ %531, %for_body5 ]
  %.lcssa64 = phi <8 x float> [ %.lcssa6491, %for_body5.us.preheader ], [ %525, %for_body5 ]
  %.lcssa62 = phi <8 x float> [ %.lcssa6289, %for_body5.us.preheader ], [ %519, %for_body5 ]
  %.lcssa60 = phi <8 x float> [ %.lcssa6087, %for_body5.us.preheader ], [ %513, %for_body5 ]
  %.lcssa58 = phi <8 x float> [ %.lcssa5885, %for_body5.us.preheader ], [ %507, %for_body5 ]
  %.lcssa56 = phi <8 x float> [ %.lcssa5683, %for_body5.us.preheader ], [ %501, %for_body5 ]
  %538 = phi <8 x float> [ %434, %for_body5.us.preheader ], [ %495, %for_body5 ]
  %539 = phi <8 x float> [ %428, %for_body5.us.preheader ], [ %489, %for_body5 ]
  %540 = phi <8 x float> [ %422, %for_body5.us.preheader ], [ %483, %for_body5 ]
  %541 = phi <8 x float> [ %416, %for_body5.us.preheader ], [ %477, %for_body5 ]
  %542 = phi <8 x float> [ %410, %for_body5.us.preheader ], [ %471, %for_body5 ]
  %543 = phi <8 x float> [ %404, %for_body5.us.preheader ], [ %465, %for_body5 ]
  %544 = phi <8 x float> [ %398, %for_body5.us.preheader ], [ %459, %for_body5 ]
  %indvars.iv.next123 = add nuw nsw i64 %indvars.iv122, 1
  %exitcond124 = icmp eq i64 %indvars.iv.next123, 64
  br i1 %exitcond124, label %for_end24, label %for_begin4.preheader, !prof !50

for_end24:                                        ; preds = %for_end6
  store <8 x float> %544, <8 x float>* %.sub, align 32, !tbaa !2427
  store <8 x float> %543, <8 x float>* %31, align 32, !tbaa !2438
  store <8 x float> %542, <8 x float>* %33, align 32, !tbaa !2440
  store <8 x float> %541, <8 x float>* %35, align 32, !tbaa !2443
  store <8 x float> %540, <8 x float>* %37, align 32, !tbaa !2445
  store <8 x float> %539, <8 x float>* %39, align 32, !tbaa !2449
  store <8 x float> %538, <8 x float>* %41, align 32, !tbaa !2451
  store <8 x float> %.lcssa56, <8 x float>* %43, align 32, !tbaa !2454
  store <8 x float> %.lcssa58, <8 x float>* %45, align 32, !tbaa !2456
  store <8 x float> %.lcssa60, <8 x float>* %47, align 32, !tbaa !2461
  store <8 x float> %.lcssa62, <8 x float>* %49, align 32, !tbaa !2463
  store <8 x float> %.lcssa64, <8 x float>* %51, align 32, !tbaa !2466
  store <8 x float> %.lcssa66, <8 x float>* %53, align 32, !tbaa !2468
  store <8 x float> %.lcssa68, <8 x float>* %55, align 32, !tbaa !2472
  %545 = shl nuw nsw i32 %58, 1
  %546 = ashr i32 %57, 2
  %547 = mul nsw i32 %546, 392
  %548 = shl nsw i32 %546, 3
  %549 = sext i32 %548 to i64
  %550 = getelementptr inbounds float, float* %14, i64 %549
  %551 = bitcast float* %550 to <8 x float>*
  %552 = add i32 %59, %547
  %553 = sext i32 %552 to i64
  %554 = getelementptr inbounds float, float* %17, i64 %553
  %555 = bitcast float* %554 to <8 x float>*
  %556 = load <8 x float>, <8 x float>* %555, align 32, !tbaa !2474
  %557 = load <8 x float>, <8 x float>* %551, align 32, !tbaa !2477
  %558 = fadd <8 x float> %557, %544
  %559 = fadd <8 x float> %556, %558
  %560 = fcmp ogt <8 x float> %559, zeroinitializer
  %561 = select <8 x i1> %560, <8 x float> %559, <8 x float> zeroinitializer
  %562 = getelementptr inbounds float, float* %11, i64 %553
  %563 = bitcast float* %562 to <8 x float>*
  store <8 x float> %561, <8 x float>* %563, align 32, !tbaa !2480
  %564 = or i32 %59, 8
  %565 = add i32 %564, %547
  %566 = sext i32 %565 to i64
  %567 = getelementptr inbounds float, float* %17, i64 %566
  %568 = bitcast float* %567 to <8 x float>*
  %569 = load <8 x float>, <8 x float>* %568, align 32, !tbaa !2474
  %570 = fadd <8 x float> %557, %543
  %571 = fadd <8 x float> %569, %570
  %572 = fcmp ogt <8 x float> %571, zeroinitializer
  %573 = select <8 x i1> %572, <8 x float> %571, <8 x float> zeroinitializer
  %574 = getelementptr inbounds float, float* %11, i64 %566
  %575 = bitcast float* %574 to <8 x float>*
  store <8 x float> %573, <8 x float>* %575, align 32, !tbaa !2480
  %576 = add nuw nsw i32 %59, 16
  %577 = add i32 %576, %547
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds float, float* %17, i64 %578
  %580 = bitcast float* %579 to <8 x float>*
  %581 = load <8 x float>, <8 x float>* %580, align 32, !tbaa !2474
  %582 = fadd <8 x float> %557, %542
  %583 = fadd <8 x float> %581, %582
  %584 = fcmp ogt <8 x float> %583, zeroinitializer
  %585 = select <8 x i1> %584, <8 x float> %583, <8 x float> zeroinitializer
  %586 = getelementptr inbounds float, float* %11, i64 %578
  %587 = bitcast float* %586 to <8 x float>*
  store <8 x float> %585, <8 x float>* %587, align 32, !tbaa !2480
  %588 = add nuw nsw i32 %59, 24
  %589 = add i32 %588, %547
  %590 = sext i32 %589 to i64
  %591 = getelementptr inbounds float, float* %17, i64 %590
  %592 = bitcast float* %591 to <8 x float>*
  %593 = load <8 x float>, <8 x float>* %592, align 32, !tbaa !2474
  %594 = fadd <8 x float> %557, %541
  %595 = fadd <8 x float> %593, %594
  %596 = fcmp ogt <8 x float> %595, zeroinitializer
  %597 = select <8 x i1> %596, <8 x float> %595, <8 x float> zeroinitializer
  %598 = getelementptr inbounds float, float* %11, i64 %590
  %599 = bitcast float* %598 to <8 x float>*
  store <8 x float> %597, <8 x float>* %599, align 32, !tbaa !2480
  %600 = add nuw nsw i32 %59, 32
  %601 = add i32 %600, %547
  %602 = sext i32 %601 to i64
  %603 = getelementptr inbounds float, float* %17, i64 %602
  %604 = bitcast float* %603 to <8 x float>*
  %605 = load <8 x float>, <8 x float>* %604, align 32, !tbaa !2474
  %606 = fadd <8 x float> %557, %540
  %607 = fadd <8 x float> %605, %606
  %608 = fcmp ogt <8 x float> %607, zeroinitializer
  %609 = select <8 x i1> %608, <8 x float> %607, <8 x float> zeroinitializer
  %610 = getelementptr inbounds float, float* %11, i64 %602
  %611 = bitcast float* %610 to <8 x float>*
  store <8 x float> %609, <8 x float>* %611, align 32, !tbaa !2480
  %612 = add nuw nsw i32 %59, 40
  %613 = add i32 %612, %547
  %614 = sext i32 %613 to i64
  %615 = getelementptr inbounds float, float* %17, i64 %614
  %616 = bitcast float* %615 to <8 x float>*
  %617 = load <8 x float>, <8 x float>* %616, align 32, !tbaa !2474
  %618 = fadd <8 x float> %557, %539
  %619 = fadd <8 x float> %617, %618
  %620 = fcmp ogt <8 x float> %619, zeroinitializer
  %621 = select <8 x i1> %620, <8 x float> %619, <8 x float> zeroinitializer
  %622 = getelementptr inbounds float, float* %11, i64 %614
  %623 = bitcast float* %622 to <8 x float>*
  store <8 x float> %621, <8 x float>* %623, align 32, !tbaa !2480
  %narrow = add nuw nsw i32 %59, 48
  %624 = add i32 %narrow, %547
  %625 = sext i32 %624 to i64
  %626 = getelementptr inbounds float, float* %17, i64 %625
  %627 = bitcast float* %626 to <8 x float>*
  %628 = load <8 x float>, <8 x float>* %627, align 32, !tbaa !2474
  %629 = fadd <8 x float> %557, %538
  %630 = fadd <8 x float> %628, %629
  %631 = fcmp ogt <8 x float> %630, zeroinitializer
  %632 = select <8 x i1> %631, <8 x float> %630, <8 x float> zeroinitializer
  %633 = getelementptr inbounds float, float* %11, i64 %625
  %634 = bitcast float* %633 to <8 x float>*
  store <8 x float> %632, <8 x float>* %634, align 32, !tbaa !2480
  %635 = or i32 %545, 1
  %636 = icmp eq i32 %635, 7
  br i1 %636, label %for_end24.1, label %for_body23.us.preheader.1, !prof !50

for_body23.us.preheader.1:                        ; preds = %for_end24
  %637 = add nuw nsw i32 %59, 56
  %638 = add i32 %637, %547
  %639 = sext i32 %638 to i64
  %640 = getelementptr inbounds float, float* %17, i64 %639
  %641 = bitcast float* %640 to <8 x float>*
  %642 = load <8 x float>, <8 x float>* %641, align 32, !tbaa !2474
  %643 = load <8 x float>, <8 x float>* %551, align 32, !tbaa !2477
  %644 = load <8 x float>, <8 x float>* %43, align 32, !tbaa !2483
  %645 = fadd <8 x float> %643, %644
  %646 = fadd <8 x float> %642, %645
  %647 = fcmp ogt <8 x float> %646, zeroinitializer
  %648 = select <8 x i1> %647, <8 x float> %646, <8 x float> zeroinitializer
  %649 = getelementptr inbounds float, float* %11, i64 %639
  %650 = bitcast float* %649 to <8 x float>*
  store <8 x float> %648, <8 x float>* %650, align 32, !tbaa !2480
  %651 = add nuw nsw i32 %59, 64
  %652 = add i32 %651, %547
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds float, float* %17, i64 %653
  %655 = bitcast float* %654 to <8 x float>*
  %656 = load <8 x float>, <8 x float>* %655, align 32, !tbaa !2474
  %657 = load <8 x float>, <8 x float>* %45, align 32, !tbaa !2483
  %658 = fadd <8 x float> %643, %657
  %659 = fadd <8 x float> %656, %658
  %660 = fcmp ogt <8 x float> %659, zeroinitializer
  %661 = select <8 x i1> %660, <8 x float> %659, <8 x float> zeroinitializer
  %662 = getelementptr inbounds float, float* %11, i64 %653
  %663 = bitcast float* %662 to <8 x float>*
  store <8 x float> %661, <8 x float>* %663, align 32, !tbaa !2480
  %664 = add nuw nsw i32 %59, 72
  %665 = add i32 %664, %547
  %666 = sext i32 %665 to i64
  %667 = getelementptr inbounds float, float* %17, i64 %666
  %668 = bitcast float* %667 to <8 x float>*
  %669 = load <8 x float>, <8 x float>* %668, align 32, !tbaa !2474
  %670 = load <8 x float>, <8 x float>* %47, align 32, !tbaa !2483
  %671 = fadd <8 x float> %643, %670
  %672 = fadd <8 x float> %669, %671
  %673 = fcmp ogt <8 x float> %672, zeroinitializer
  %674 = select <8 x i1> %673, <8 x float> %672, <8 x float> zeroinitializer
  %675 = getelementptr inbounds float, float* %11, i64 %666
  %676 = bitcast float* %675 to <8 x float>*
  store <8 x float> %674, <8 x float>* %676, align 32, !tbaa !2480
  %677 = add nuw nsw i32 %59, 80
  %678 = add i32 %677, %547
  %679 = sext i32 %678 to i64
  %680 = getelementptr inbounds float, float* %17, i64 %679
  %681 = bitcast float* %680 to <8 x float>*
  %682 = load <8 x float>, <8 x float>* %681, align 32, !tbaa !2474
  %683 = load <8 x float>, <8 x float>* %49, align 32, !tbaa !2483
  %684 = fadd <8 x float> %643, %683
  %685 = fadd <8 x float> %682, %684
  %686 = fcmp ogt <8 x float> %685, zeroinitializer
  %687 = select <8 x i1> %686, <8 x float> %685, <8 x float> zeroinitializer
  %688 = getelementptr inbounds float, float* %11, i64 %679
  %689 = bitcast float* %688 to <8 x float>*
  store <8 x float> %687, <8 x float>* %689, align 32, !tbaa !2480
  %690 = add nuw nsw i32 %59, 88
  %691 = add i32 %690, %547
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds float, float* %17, i64 %692
  %694 = bitcast float* %693 to <8 x float>*
  %695 = load <8 x float>, <8 x float>* %694, align 32, !tbaa !2474
  %696 = load <8 x float>, <8 x float>* %51, align 32, !tbaa !2483
  %697 = fadd <8 x float> %643, %696
  %698 = fadd <8 x float> %695, %697
  %699 = fcmp ogt <8 x float> %698, zeroinitializer
  %700 = select <8 x i1> %699, <8 x float> %698, <8 x float> zeroinitializer
  %701 = getelementptr inbounds float, float* %11, i64 %692
  %702 = bitcast float* %701 to <8 x float>*
  store <8 x float> %700, <8 x float>* %702, align 32, !tbaa !2480
  %703 = add nuw nsw i32 %59, 96
  %704 = add i32 %703, %547
  %705 = sext i32 %704 to i64
  %706 = getelementptr inbounds float, float* %17, i64 %705
  %707 = bitcast float* %706 to <8 x float>*
  %708 = load <8 x float>, <8 x float>* %707, align 32, !tbaa !2474
  %709 = load <8 x float>, <8 x float>* %53, align 32, !tbaa !2483
  %710 = fadd <8 x float> %643, %709
  %711 = fadd <8 x float> %708, %710
  %712 = fcmp ogt <8 x float> %711, zeroinitializer
  %713 = select <8 x i1> %712, <8 x float> %711, <8 x float> zeroinitializer
  %714 = getelementptr inbounds float, float* %11, i64 %705
  %715 = bitcast float* %714 to <8 x float>*
  store <8 x float> %713, <8 x float>* %715, align 32, !tbaa !2480
  %716 = add nuw nsw i32 %59, 104
  %717 = add i32 %716, %547
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds float, float* %17, i64 %718
  %720 = bitcast float* %719 to <8 x float>*
  %721 = load <8 x float>, <8 x float>* %720, align 32, !tbaa !2474
  %722 = load <8 x float>, <8 x float>* %55, align 32, !tbaa !2483
  %723 = fadd <8 x float> %643, %722
  %724 = fadd <8 x float> %721, %723
  %725 = fcmp ogt <8 x float> %724, zeroinitializer
  %726 = select <8 x i1> %725, <8 x float> %724, <8 x float> zeroinitializer
  %727 = getelementptr inbounds float, float* %11, i64 %718
  %728 = bitcast float* %727 to <8 x float>*
  store <8 x float> %726, <8 x float>* %728, align 32, !tbaa !2480
  br label %for_end24.1

for_end24.1:                                      ; preds = %for_end24, %for_body23.us.preheader.1
  %729 = add nsw i32 %57, 1
  %730 = icmp slt i32 %729, %25
  br i1 %730, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.217, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !2484
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !2498
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !2501
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !2503
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %55 = load i64*, i64** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %61 = load i64*, i64** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %63 = load i64*, i64** %62, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %64 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %64(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.218, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %65 = getelementptr inbounds i8, i8* %1, i64 4
  %66 = bitcast i8* %65 to i32*
  %67 = load i32, i32* %66, align 4, !tbaa !2507
  switch i32 %67, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %68 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %68(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.219, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %69(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.220, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.221, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.222, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %72 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, 5
  br i1 %74, label %assert_end14, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %77 = load i16, i16* %76, align 2
  %78 = icmp eq i16 %77, 1
  %79 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, 32
  %82 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %83, 2
  %85 = and i1 %81, %84
  %86 = and i1 %78, %85
  br i1 %86, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %87(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %88 = load i64, i64* %35, align 8, !tbaa !2509
  %89 = trunc i64 %88 to i32
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %92 = getelementptr inbounds i64, i64* %35, i64 1
  %93 = load i64, i64* %92, align 8, !tbaa !2523
  %94 = trunc i64 %93 to i32
  %95 = icmp eq i32 %94, 8
  br i1 %95, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %97 = getelementptr inbounds i64, i64* %35, i64 2
  %98 = load i64, i64* %97, align 8, !tbaa !2525
  %99 = trunc i64 %98 to i32
  %100 = icmp eq i32 %99, 28
  br i1 %100, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %102 = getelementptr inbounds i64, i64* %35, i64 3
  %103 = load i64, i64* %102, align 8, !tbaa !2528
  %104 = trunc i64 %103 to i32
  %105 = icmp eq i32 %104, 28
  br i1 %105, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %106 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %106(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %107 = getelementptr inbounds i64, i64* %35, i64 4
  %108 = load i64, i64* %107, align 8, !tbaa !2530
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 16
  br i1 %110, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %111 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %111(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %112 = icmp eq i64* %37, null
  br i1 %112, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %113 = load i64, i64* %37, align 8, !tbaa !2534
  %114 = trunc i64 %113 to i32
  %115 = icmp eq i32 %114, 100352
  %116 = getelementptr inbounds i64, i64* %37, i64 1
  %117 = load i64, i64* %116, align 8, !tbaa !2548
  %118 = trunc i64 %117 to i32
  %119 = icmp eq i32 %118, 12544
  %120 = getelementptr inbounds i64, i64* %37, i64 2
  %121 = load i64, i64* %120, align 8, !tbaa !2550
  %122 = trunc i64 %121 to i32
  %123 = icmp eq i32 %122, 448
  %124 = getelementptr inbounds i64, i64* %37, i64 3
  %125 = load i64, i64* %124, align 8, !tbaa !2553
  %126 = trunc i64 %125 to i32
  %127 = icmp eq i32 %126, 16
  %128 = getelementptr inbounds i64, i64* %37, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !2555
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 1
  %132 = and i1 %127, %131
  %133 = and i1 %123, %132
  %134 = and i1 %119, %133
  %135 = and i1 %115, %134
  br i1 %135, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %136 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %137 = load i64, i64* %136, align 8
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %139(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.225, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %141 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 6
  br i1 %147, label %assert_end36, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end32
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %150 = load i16, i16* %149, align 2
  %151 = icmp eq i16 %150, 1
  %152 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 32
  %155 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %156 = load i8, i8* %155, align 1
  %157 = icmp eq i8 %156, 2
  %158 = and i1 %154, %157
  %159 = and i1 %151, %158
  br i1 %159, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %161 = load i64, i64* %43, align 8, !tbaa !2559
  %162 = trunc i64 %161 to i32
  %163 = icmp eq i32 %162, 16
  br i1 %163, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %165 = getelementptr inbounds i64, i64* %43, i64 1
  %166 = load i64, i64* %165, align 8, !tbaa !2573
  %167 = trunc i64 %166 to i32
  %168 = icmp eq i32 %167, 8
  br i1 %168, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.226, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %170 = getelementptr inbounds i64, i64* %43, i64 2
  %171 = load i64, i64* %170, align 8, !tbaa !2575
  %172 = trunc i64 %171 to i32
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %175 = getelementptr inbounds i64, i64* %43, i64 3
  %176 = load i64, i64* %175, align 8, !tbaa !2578
  %177 = trunc i64 %176 to i32
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %179(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %180 = getelementptr inbounds i64, i64* %43, i64 4
  %181 = load i64, i64* %180, align 8, !tbaa !2580
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %182, 16
  br i1 %183, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %184(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %185 = getelementptr inbounds i64, i64* %43, i64 5
  %186 = load i64, i64* %185, align 8, !tbaa !2584
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 32
  br i1 %188, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.227, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %190 = icmp eq i64* %45, null
  br i1 %190, label %if_end52, label %if_then51, !prof !50

if_then51:                                        ; preds = %assert_end50
  %191 = load i64, i64* %45, align 8, !tbaa !2586
  %192 = trunc i64 %191 to i32
  %193 = icmp eq i32 %192, 4096
  %194 = getelementptr inbounds i64, i64* %45, i64 1
  %195 = load i64, i64* %194, align 8, !tbaa !2600
  %196 = trunc i64 %195 to i32
  %197 = icmp eq i32 %196, 512
  %198 = getelementptr inbounds i64, i64* %45, i64 2
  %199 = load i64, i64* %198, align 8, !tbaa !2602
  %200 = trunc i64 %199 to i32
  %201 = icmp eq i32 %200, 512
  %202 = getelementptr inbounds i64, i64* %45, i64 3
  %203 = load i64, i64* %202, align 8, !tbaa !2605
  %204 = trunc i64 %203 to i32
  %205 = icmp eq i32 %204, 512
  %206 = getelementptr inbounds i64, i64* %45, i64 4
  %207 = load i64, i64* %206, align 8, !tbaa !2607
  %208 = trunc i64 %207 to i32
  %209 = icmp eq i32 %208, 32
  %210 = getelementptr inbounds i64, i64* %45, i64 5
  %211 = load i64, i64* %210, align 8, !tbaa !2611
  %212 = trunc i64 %211 to i32
  %213 = icmp eq i32 %212, 1
  %214 = and i1 %209, %213
  %215 = and i1 %205, %214
  %216 = and i1 %201, %215
  %217 = and i1 %197, %216
  %218 = and i1 %193, %217
  br i1 %218, label %if_end52, label %assert_fail53, !prof !5

if_end52:                                         ; preds = %assert_end50, %if_then51
  %219 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %220 = load i64, i64* %219, align 8
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %assert_end56, label %assert_fail55, !prof !5

assert_fail53:                                    ; preds = %if_then51
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.228, i64 0, i64 0))
  ret i32 -1

assert_fail55:                                    ; preds = %if_end52
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %223(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %if_end52
  %224 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %225 = load i32, i32* %224, align 4
  %226 = icmp eq i32 %225, 1
  br i1 %226, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %227(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %228 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %229 = load i32, i32* %228, align 4
  %230 = icmp eq i32 %39, %229
  br i1 %230, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %231 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %231(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %232 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = icmp eq i32 %233, 5
  br i1 %234, label %assert_end64, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end60
  %236 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %237 = load i16, i16* %236, align 2
  %238 = icmp eq i16 %237, 1
  %239 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %240 = load i8, i8* %239, align 1
  %241 = icmp eq i8 %240, 32
  %242 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %243 = load i8, i8* %242, align 1
  %244 = icmp eq i8 %243, 2
  %245 = and i1 %241, %244
  %246 = and i1 %238, %245
  br i1 %246, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %247(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %248 = load i64, i64* %49, align 8, !tbaa !2613
  %249 = trunc i64 %248 to i32
  %250 = icmp eq i32 %249, 1
  br i1 %250, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %251 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %251(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %252 = getelementptr inbounds i64, i64* %49, i64 1
  %253 = load i64, i64* %252, align 8, !tbaa !2627
  %254 = trunc i64 %253 to i32
  %255 = icmp eq i32 %254, 16
  br i1 %255, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %256(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %257 = getelementptr inbounds i64, i64* %49, i64 2
  %258 = load i64, i64* %257, align 8, !tbaa !2629
  %259 = trunc i64 %258 to i32
  %260 = icmp eq i32 %259, 1
  br i1 %260, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %262 = getelementptr inbounds i64, i64* %49, i64 3
  %263 = load i64, i64* %262, align 8, !tbaa !2632
  %264 = trunc i64 %263 to i32
  %265 = icmp eq i32 %264, 1
  br i1 %265, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %266 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %266(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %267 = getelementptr inbounds i64, i64* %49, i64 4
  %268 = load i64, i64* %267, align 8, !tbaa !2634
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 32
  br i1 %270, label %assert_end76, label %assert_fail75, !prof !5

assert_fail75:                                    ; preds = %assert_end74
  %271 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %271(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.229, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %assert_end74
  %272 = icmp eq i64* %51, null
  br i1 %272, label %if_end78, label %if_then77, !prof !50

if_then77:                                        ; preds = %assert_end76
  %273 = load i64, i64* %51, align 8, !tbaa !2638
  %274 = trunc i64 %273 to i32
  %275 = icmp eq i32 %274, 512
  %276 = getelementptr inbounds i64, i64* %51, i64 1
  %277 = load i64, i64* %276, align 8, !tbaa !2652
  %278 = trunc i64 %277 to i32
  %279 = icmp eq i32 %278, 32
  %280 = getelementptr inbounds i64, i64* %51, i64 2
  %281 = load i64, i64* %280, align 8, !tbaa !2654
  %282 = trunc i64 %281 to i32
  %283 = icmp eq i32 %282, 32
  %284 = getelementptr inbounds i64, i64* %51, i64 3
  %285 = load i64, i64* %284, align 8, !tbaa !2657
  %286 = trunc i64 %285 to i32
  %287 = icmp eq i32 %286, 32
  %288 = getelementptr inbounds i64, i64* %51, i64 4
  %289 = load i64, i64* %288, align 8, !tbaa !2659
  %290 = trunc i64 %289 to i32
  %291 = icmp eq i32 %290, 1
  %292 = and i1 %287, %291
  %293 = and i1 %283, %292
  %294 = and i1 %279, %293
  %295 = and i1 %275, %294
  br i1 %295, label %if_end78, label %assert_fail79, !prof !5

if_end78:                                         ; preds = %assert_end76, %if_then77
  %296 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %297 = load i64, i64* %296, align 8
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %assert_end82, label %assert_fail81, !prof !5

assert_fail79:                                    ; preds = %if_then77
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.230, i64 0, i64 0))
  ret i32 -1

assert_fail81:                                    ; preds = %if_end78
  %300 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %300(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %if_end78
  %301 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %302 = load i32, i32* %301, align 4
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %305 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %306 = load i32, i32* %305, align 4
  %307 = icmp eq i32 %39, %306
  br i1 %307, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %308 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %308(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %309 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %310 = load i32, i32* %309, align 4
  %311 = icmp eq i32 %310, 5
  br i1 %311, label %assert_end90, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %312 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %312(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end86
  %313 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %314 = load i16, i16* %313, align 2
  %315 = icmp eq i16 %314, 1
  %316 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %317 = load i8, i8* %316, align 1
  %318 = icmp eq i8 %317, 32
  %319 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %320 = load i8, i8* %319, align 1
  %321 = icmp eq i8 %320, 2
  %322 = and i1 %318, %321
  %323 = and i1 %315, %322
  br i1 %323, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %325 = load i64, i64* %55, align 8, !tbaa !2663
  %326 = trunc i64 %325 to i32
  %327 = icmp eq i32 %326, 1
  br i1 %327, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %328 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %328(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %329 = getelementptr inbounds i64, i64* %55, i64 1
  %330 = load i64, i64* %329, align 8, !tbaa !2677
  %331 = trunc i64 %330 to i32
  %332 = icmp eq i32 %331, 16
  br i1 %332, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %334 = getelementptr inbounds i64, i64* %55, i64 2
  %335 = load i64, i64* %334, align 8, !tbaa !2679
  %336 = trunc i64 %335 to i32
  %337 = icmp eq i32 %336, 28
  br i1 %337, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %338 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %338(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %339 = getelementptr inbounds i64, i64* %55, i64 3
  %340 = load i64, i64* %339, align 8, !tbaa !2682
  %341 = trunc i64 %340 to i32
  %342 = icmp eq i32 %341, 28
  br i1 %342, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %343 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %343(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.113, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %344 = getelementptr inbounds i64, i64* %55, i64 4
  %345 = load i64, i64* %344, align 8, !tbaa !2684
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 32
  br i1 %347, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %348 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %348(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.231, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %349 = icmp eq i64* %57, null
  br i1 %349, label %if_end104, label %if_then103, !prof !50

if_then103:                                       ; preds = %assert_end102
  %350 = load i64, i64* %57, align 8, !tbaa !2688
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 401408
  %353 = getelementptr inbounds i64, i64* %57, i64 1
  %354 = load i64, i64* %353, align 8, !tbaa !2702
  %355 = trunc i64 %354 to i32
  %356 = icmp eq i32 %355, 25088
  %357 = getelementptr inbounds i64, i64* %57, i64 2
  %358 = load i64, i64* %357, align 8, !tbaa !2704
  %359 = trunc i64 %358 to i32
  %360 = icmp eq i32 %359, 896
  %361 = getelementptr inbounds i64, i64* %57, i64 3
  %362 = load i64, i64* %361, align 8, !tbaa !2707
  %363 = trunc i64 %362 to i32
  %364 = icmp eq i32 %363, 32
  %365 = getelementptr inbounds i64, i64* %57, i64 4
  %366 = load i64, i64* %365, align 8, !tbaa !2709
  %367 = trunc i64 %366 to i32
  %368 = icmp eq i32 %367, 1
  %369 = and i1 %364, %368
  %370 = and i1 %360, %369
  %371 = and i1 %356, %370
  %372 = and i1 %352, %371
  br i1 %372, label %if_end104, label %assert_fail105, !prof !5

if_end104:                                        ; preds = %assert_end102, %if_then103
  %373 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %374 = load i64, i64* %373, align 8
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %assert_end108, label %assert_fail107, !prof !5

assert_fail105:                                   ; preds = %if_then103
  %376 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %376(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.232, i64 0, i64 0))
  ret i32 -1

assert_fail107:                                   ; preds = %if_end104
  %377 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %377(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %if_end104
  %378 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %379 = load i32, i32* %378, align 4
  %380 = icmp eq i32 %379, 1
  br i1 %380, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %381 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %381(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %382 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %383 = load i32, i32* %382, align 4
  %384 = icmp eq i32 %39, %383
  br i1 %384, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %385 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %385(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %386 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %387 = load i32, i32* %386, align 4
  %388 = icmp eq i32 %387, 5
  br i1 %388, label %assert_end116, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.137, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end112
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %391 = load i16, i16* %390, align 2
  %392 = icmp eq i16 %391, 1
  %393 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %394 = load i8, i8* %393, align 1
  %395 = icmp eq i8 %394, 32
  %396 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %397 = load i8, i8* %396, align 1
  %398 = icmp eq i8 %397, 2
  %399 = and i1 %395, %398
  %400 = and i1 %392, %399
  br i1 %400, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %401 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %401(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.138, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %402 = load i64, i64* %61, align 8, !tbaa !2713
  %403 = trunc i64 %402 to i32
  %404 = icmp eq i32 %403, 1
  br i1 %404, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %405 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %405(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.139, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %406 = getelementptr inbounds i64, i64* %61, i64 1
  %407 = load i64, i64* %406, align 8, !tbaa !2727
  %408 = trunc i64 %407 to i32
  %409 = icmp eq i32 %408, 16
  br i1 %409, label %assert_end122, label %assert_fail121, !prof !5

assert_fail121:                                   ; preds = %assert_end120
  %410 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %410(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.233, i64 0, i64 0))
  ret i32 -1

assert_end122:                                    ; preds = %assert_end120
  %411 = getelementptr inbounds i64, i64* %61, i64 2
  %412 = load i64, i64* %411, align 8, !tbaa !2729
  %413 = trunc i64 %412 to i32
  %414 = icmp eq i32 %413, 28
  br i1 %414, label %assert_end124, label %assert_fail123, !prof !5

assert_fail123:                                   ; preds = %assert_end122
  %415 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %415(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.234, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %assert_end122
  %416 = getelementptr inbounds i64, i64* %61, i64 3
  %417 = load i64, i64* %416, align 8, !tbaa !2732
  %418 = trunc i64 %417 to i32
  %419 = icmp eq i32 %418, 28
  br i1 %419, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %420 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %420(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.235, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %421 = getelementptr inbounds i64, i64* %61, i64 4
  %422 = load i64, i64* %421, align 8, !tbaa !2734
  %423 = trunc i64 %422 to i32
  %424 = icmp eq i32 %423, 32
  br i1 %424, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %425 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %425(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.236, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %426 = icmp eq i64* %63, null
  br i1 %426, label %if_end130, label %if_then129, !prof !50

if_then129:                                       ; preds = %assert_end128
  %427 = load i64, i64* %63, align 8, !tbaa !2738
  %428 = trunc i64 %427 to i32
  %429 = icmp eq i32 %428, 401408
  %430 = getelementptr inbounds i64, i64* %63, i64 1
  %431 = load i64, i64* %430, align 8, !tbaa !2752
  %432 = trunc i64 %431 to i32
  %433 = icmp eq i32 %432, 25088
  %434 = getelementptr inbounds i64, i64* %63, i64 2
  %435 = load i64, i64* %434, align 8, !tbaa !2754
  %436 = trunc i64 %435 to i32
  %437 = icmp eq i32 %436, 896
  %438 = getelementptr inbounds i64, i64* %63, i64 3
  %439 = load i64, i64* %438, align 8, !tbaa !2757
  %440 = trunc i64 %439 to i32
  %441 = icmp eq i32 %440, 32
  %442 = getelementptr inbounds i64, i64* %63, i64 4
  %443 = load i64, i64* %442, align 8, !tbaa !2759
  %444 = trunc i64 %443 to i32
  %445 = icmp eq i32 %444, 1
  %446 = and i1 %441, %445
  %447 = and i1 %437, %446
  %448 = and i1 %433, %447
  %449 = and i1 %429, %448
  br i1 %449, label %if_end130, label %assert_fail131, !prof !5

if_end130:                                        ; preds = %assert_end128, %if_then129
  %450 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %451 = load i64, i64* %450, align 8
  %452 = icmp eq i64 %451, 0
  br i1 %452, label %assert_end134, label %assert_fail133, !prof !5

assert_fail131:                                   ; preds = %if_then129
  %453 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %453(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.237, i64 0, i64 0))
  ret i32 -1

assert_fail133:                                   ; preds = %if_end130
  %454 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %454(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.145, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %if_end130
  %455 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %456 = load i32, i32* %455, align 4
  %457 = icmp eq i32 %456, 1
  br i1 %457, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %458 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %458(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.146, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %459 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %460 = load i32, i32* %459, align 4
  %461 = icmp eq i32 %39, %460
  br i1 %461, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %462 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %462(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %463 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2_compute_(i8* %33, i8* %41, i8* %59, i8* %47, i8* %53, i32 %39)
  ret i32 %463
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = alloca %17, align 8
  %7 = getelementptr inbounds %17, %17* %6, i64 0, i32 0
  store i8* %0, i8** %7, align 8
  %8 = getelementptr inbounds %17, %17* %6, i64 0, i32 1
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %17, %17* %6, i64 0, i32 2
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %17, %17* %6, i64 0, i32 3
  store i8* %3, i8** %10, align 8
  %11 = getelementptr inbounds %17, %17* %6, i64 0, i32 4
  store i8* %4, i8** %11, align 8
  %12 = getelementptr inbounds %17, %17* %6, i64 0, i32 5
  store i32 %5, i32* %12, align 8
  %13 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %14 = bitcast %17* %6 to i8*
  %15 = call i32 %13(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.238, i8* nonnull %14, i32 0)
  ret i32 %15
}

define private i32 @__tvm_parallel_lambda.238(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 447
  %23 = sdiv i32 %22, %21
  %24 = add nsw i32 %0, 1
  %25 = mul nsw i32 %23, %24
  %26 = icmp slt i32 %25, 448
  %27 = select i1 %26, i32 %25, i32 448
  %28 = mul nsw i32 %23, %0
  %29 = icmp slt i32 %28, 448
  %30 = select i1 %29, i32 %28, i32 448
  %31 = icmp slt i32 %30, %27
  br i1 %31, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %32 = sext i32 %30 to i64
  %33 = sext i32 %27 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_begin10.preheader
  %indvars.iv36 = phi i64 [ %32, %for_body.preheader ], [ %indvars.iv.next37, %for_begin10.preheader ]
  %34 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %35 = tail call i8* %34(i32 1, i32 %19, i64 3584, i32 2, i32 32)
  %36 = bitcast i8* %35 to float*
  %37 = trunc i64 %indvars.iv36 to i32
  %38 = sdiv i32 %37, 28
  %39 = mul i32 %38, 28
  %.decomposed = sub i32 %37, %39
  %40 = mul nsw i32 %.decomposed, 448
  %41 = shl i32 %38, 12
  %42 = sext i32 %41 to i64
  %43 = sext i32 %40 to i64
  br label %for_body2

for_end:                                          ; preds = %for_begin10.preheader, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end6
  %44 = mul nsw i64 %indvars.iv36, 896
  %45 = shl nsw i32 %38, 5
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %13, i64 %46
  %48 = bitcast float* %47 to <32 x float>*
  %49 = load <32 x float>, <32 x float>* %48, align 128, !tbaa !2763
  %50 = getelementptr inbounds float, float* %16, i64 %44
  %51 = bitcast float* %50 to <32 x float>*
  %52 = load <32 x float>, <32 x float>* %51, align 128, !tbaa !2766
  %53 = bitcast i8* %35 to <32 x float>*
  %54 = load <32 x float>, <32 x float>* %53, align 128, !tbaa !2769
  %55 = fadd <32 x float> %49, %54
  %56 = fadd <32 x float> %52, %55
  %57 = fcmp ogt <32 x float> %56, zeroinitializer
  %58 = select <32 x i1> %57, <32 x float> %56, <32 x float> zeroinitializer
  %59 = getelementptr inbounds float, float* %10, i64 %44
  %60 = bitcast float* %59 to <32 x float>*
  store <32 x float> %58, <32 x float>* %60, align 128, !tbaa !2772
  %61 = mul i64 %indvars.iv36, 3848290697216
  %sext = ashr exact i64 %61, 32
  %62 = or i64 %sext, 32
  %63 = getelementptr inbounds float, float* %16, i64 %62
  %64 = bitcast float* %63 to <32 x float>*
  %65 = load <32 x float>, <32 x float>* %64, align 128, !tbaa !2766
  %66 = getelementptr inbounds i8, i8* %35, i64 128
  %67 = bitcast i8* %66 to <32 x float>*
  %68 = load <32 x float>, <32 x float>* %67, align 128, !tbaa !2769
  %69 = fadd <32 x float> %49, %68
  %70 = fadd <32 x float> %65, %69
  %71 = fcmp ogt <32 x float> %70, zeroinitializer
  %72 = select <32 x i1> %71, <32 x float> %70, <32 x float> zeroinitializer
  %73 = getelementptr inbounds float, float* %10, i64 %62
  %74 = bitcast float* %73 to <32 x float>*
  store <32 x float> %72, <32 x float>* %74, align 128, !tbaa !2772
  %75 = mul i64 %indvars.iv36, 3848290697216
  %sext38 = ashr exact i64 %75, 32
  %76 = or i64 %sext38, 64
  %77 = getelementptr inbounds float, float* %16, i64 %76
  %78 = bitcast float* %77 to <32 x float>*
  %79 = load <32 x float>, <32 x float>* %78, align 128, !tbaa !2766
  %80 = getelementptr inbounds i8, i8* %35, i64 256
  %81 = bitcast i8* %80 to <32 x float>*
  %82 = load <32 x float>, <32 x float>* %81, align 128, !tbaa !2769
  %83 = fadd <32 x float> %49, %82
  %84 = fadd <32 x float> %79, %83
  %85 = fcmp ogt <32 x float> %84, zeroinitializer
  %86 = select <32 x i1> %85, <32 x float> %84, <32 x float> zeroinitializer
  %87 = getelementptr inbounds float, float* %10, i64 %76
  %88 = bitcast float* %87 to <32 x float>*
  store <32 x float> %86, <32 x float>* %88, align 128, !tbaa !2772
  %89 = mul i64 %indvars.iv36, 3848290697216
  %sext39 = ashr exact i64 %89, 32
  %90 = or i64 %sext39, 96
  %91 = getelementptr inbounds float, float* %16, i64 %90
  %92 = bitcast float* %91 to <32 x float>*
  %93 = load <32 x float>, <32 x float>* %92, align 128, !tbaa !2766
  %94 = getelementptr inbounds i8, i8* %35, i64 384
  %95 = bitcast i8* %94 to <32 x float>*
  %96 = load <32 x float>, <32 x float>* %95, align 128, !tbaa !2769
  %97 = fadd <32 x float> %49, %96
  %98 = fadd <32 x float> %93, %97
  %99 = fcmp ogt <32 x float> %98, zeroinitializer
  %100 = select <32 x i1> %99, <32 x float> %98, <32 x float> zeroinitializer
  %101 = getelementptr inbounds float, float* %10, i64 %90
  %102 = bitcast float* %101 to <32 x float>*
  store <32 x float> %100, <32 x float>* %102, align 128, !tbaa !2772
  %103 = mul i64 %indvars.iv36, 3848290697216
  %sext40 = add i64 %103, 549755813888
  %104 = ashr exact i64 %sext40, 32
  %105 = getelementptr inbounds float, float* %16, i64 %104
  %106 = bitcast float* %105 to <32 x float>*
  %107 = load <32 x float>, <32 x float>* %106, align 128, !tbaa !2766
  %108 = getelementptr inbounds i8, i8* %35, i64 512
  %109 = bitcast i8* %108 to <32 x float>*
  %110 = load <32 x float>, <32 x float>* %109, align 128, !tbaa !2769
  %111 = fadd <32 x float> %49, %110
  %112 = fadd <32 x float> %107, %111
  %113 = fcmp ogt <32 x float> %112, zeroinitializer
  %114 = select <32 x i1> %113, <32 x float> %112, <32 x float> zeroinitializer
  %115 = getelementptr inbounds float, float* %10, i64 %104
  %116 = bitcast float* %115 to <32 x float>*
  store <32 x float> %114, <32 x float>* %116, align 128, !tbaa !2772
  %117 = mul i64 %indvars.iv36, 3848290697216
  %sext41 = add i64 %117, 687194767360
  %118 = ashr exact i64 %sext41, 32
  %119 = getelementptr inbounds float, float* %16, i64 %118
  %120 = bitcast float* %119 to <32 x float>*
  %121 = load <32 x float>, <32 x float>* %120, align 128, !tbaa !2766
  %122 = getelementptr inbounds i8, i8* %35, i64 640
  %123 = bitcast i8* %122 to <32 x float>*
  %124 = load <32 x float>, <32 x float>* %123, align 128, !tbaa !2769
  %125 = fadd <32 x float> %49, %124
  %126 = fadd <32 x float> %121, %125
  %127 = fcmp ogt <32 x float> %126, zeroinitializer
  %128 = select <32 x i1> %127, <32 x float> %126, <32 x float> zeroinitializer
  %129 = getelementptr inbounds float, float* %10, i64 %118
  %130 = bitcast float* %129 to <32 x float>*
  store <32 x float> %128, <32 x float>* %130, align 128, !tbaa !2772
  %131 = mul i64 %indvars.iv36, 3848290697216
  %sext42 = add i64 %131, 824633720832
  %132 = ashr exact i64 %sext42, 32
  %133 = getelementptr inbounds float, float* %16, i64 %132
  %134 = bitcast float* %133 to <32 x float>*
  %135 = load <32 x float>, <32 x float>* %134, align 128, !tbaa !2766
  %136 = getelementptr inbounds i8, i8* %35, i64 768
  %137 = bitcast i8* %136 to <32 x float>*
  %138 = load <32 x float>, <32 x float>* %137, align 128, !tbaa !2769
  %139 = fadd <32 x float> %49, %138
  %140 = fadd <32 x float> %135, %139
  %141 = fcmp ogt <32 x float> %140, zeroinitializer
  %142 = select <32 x i1> %141, <32 x float> %140, <32 x float> zeroinitializer
  %143 = getelementptr inbounds float, float* %10, i64 %132
  %144 = bitcast float* %143 to <32 x float>*
  store <32 x float> %142, <32 x float>* %144, align 128, !tbaa !2772
  %145 = mul i64 %indvars.iv36, 3848290697216
  %sext43 = add i64 %145, 962072674304
  %146 = ashr exact i64 %sext43, 32
  %147 = getelementptr inbounds float, float* %16, i64 %146
  %148 = bitcast float* %147 to <32 x float>*
  %149 = load <32 x float>, <32 x float>* %148, align 128, !tbaa !2766
  %150 = getelementptr inbounds i8, i8* %35, i64 896
  %151 = bitcast i8* %150 to <32 x float>*
  %152 = load <32 x float>, <32 x float>* %151, align 128, !tbaa !2769
  %153 = fadd <32 x float> %49, %152
  %154 = fadd <32 x float> %149, %153
  %155 = fcmp ogt <32 x float> %154, zeroinitializer
  %156 = select <32 x i1> %155, <32 x float> %154, <32 x float> zeroinitializer
  %157 = getelementptr inbounds float, float* %10, i64 %146
  %158 = bitcast float* %157 to <32 x float>*
  store <32 x float> %156, <32 x float>* %158, align 128, !tbaa !2772
  %159 = mul i64 %indvars.iv36, 3848290697216
  %sext44 = add i64 %159, 1099511627776
  %160 = ashr exact i64 %sext44, 32
  %161 = getelementptr inbounds float, float* %16, i64 %160
  %162 = bitcast float* %161 to <32 x float>*
  %163 = load <32 x float>, <32 x float>* %162, align 128, !tbaa !2766
  %164 = getelementptr inbounds i8, i8* %35, i64 1024
  %165 = bitcast i8* %164 to <32 x float>*
  %166 = load <32 x float>, <32 x float>* %165, align 128, !tbaa !2769
  %167 = fadd <32 x float> %49, %166
  %168 = fadd <32 x float> %163, %167
  %169 = fcmp ogt <32 x float> %168, zeroinitializer
  %170 = select <32 x i1> %169, <32 x float> %168, <32 x float> zeroinitializer
  %171 = getelementptr inbounds float, float* %10, i64 %160
  %172 = bitcast float* %171 to <32 x float>*
  store <32 x float> %170, <32 x float>* %172, align 128, !tbaa !2772
  %173 = mul i64 %indvars.iv36, 3848290697216
  %sext45 = add i64 %173, 1236950581248
  %174 = ashr exact i64 %sext45, 32
  %175 = getelementptr inbounds float, float* %16, i64 %174
  %176 = bitcast float* %175 to <32 x float>*
  %177 = load <32 x float>, <32 x float>* %176, align 128, !tbaa !2766
  %178 = getelementptr inbounds i8, i8* %35, i64 1152
  %179 = bitcast i8* %178 to <32 x float>*
  %180 = load <32 x float>, <32 x float>* %179, align 128, !tbaa !2769
  %181 = fadd <32 x float> %49, %180
  %182 = fadd <32 x float> %177, %181
  %183 = fcmp ogt <32 x float> %182, zeroinitializer
  %184 = select <32 x i1> %183, <32 x float> %182, <32 x float> zeroinitializer
  %185 = getelementptr inbounds float, float* %10, i64 %174
  %186 = bitcast float* %185 to <32 x float>*
  store <32 x float> %184, <32 x float>* %186, align 128, !tbaa !2772
  %187 = mul i64 %indvars.iv36, 3848290697216
  %sext46 = add i64 %187, 1374389534720
  %188 = ashr exact i64 %sext46, 32
  %189 = getelementptr inbounds float, float* %16, i64 %188
  %190 = bitcast float* %189 to <32 x float>*
  %191 = load <32 x float>, <32 x float>* %190, align 128, !tbaa !2766
  %192 = getelementptr inbounds i8, i8* %35, i64 1280
  %193 = bitcast i8* %192 to <32 x float>*
  %194 = load <32 x float>, <32 x float>* %193, align 128, !tbaa !2769
  %195 = fadd <32 x float> %49, %194
  %196 = fadd <32 x float> %191, %195
  %197 = fcmp ogt <32 x float> %196, zeroinitializer
  %198 = select <32 x i1> %197, <32 x float> %196, <32 x float> zeroinitializer
  %199 = getelementptr inbounds float, float* %10, i64 %188
  %200 = bitcast float* %199 to <32 x float>*
  store <32 x float> %198, <32 x float>* %200, align 128, !tbaa !2772
  %201 = mul i64 %indvars.iv36, 3848290697216
  %sext47 = add i64 %201, 1511828488192
  %202 = ashr exact i64 %sext47, 32
  %203 = getelementptr inbounds float, float* %16, i64 %202
  %204 = bitcast float* %203 to <32 x float>*
  %205 = load <32 x float>, <32 x float>* %204, align 128, !tbaa !2766
  %206 = getelementptr inbounds i8, i8* %35, i64 1408
  %207 = bitcast i8* %206 to <32 x float>*
  %208 = load <32 x float>, <32 x float>* %207, align 128, !tbaa !2769
  %209 = fadd <32 x float> %49, %208
  %210 = fadd <32 x float> %205, %209
  %211 = fcmp ogt <32 x float> %210, zeroinitializer
  %212 = select <32 x i1> %211, <32 x float> %210, <32 x float> zeroinitializer
  %213 = getelementptr inbounds float, float* %10, i64 %202
  %214 = bitcast float* %213 to <32 x float>*
  store <32 x float> %212, <32 x float>* %214, align 128, !tbaa !2772
  %215 = mul i64 %indvars.iv36, 3848290697216
  %sext48 = add i64 %215, 1649267441664
  %216 = ashr exact i64 %sext48, 32
  %217 = getelementptr inbounds float, float* %16, i64 %216
  %218 = bitcast float* %217 to <32 x float>*
  %219 = load <32 x float>, <32 x float>* %218, align 128, !tbaa !2766
  %220 = getelementptr inbounds i8, i8* %35, i64 1536
  %221 = bitcast i8* %220 to <32 x float>*
  %222 = load <32 x float>, <32 x float>* %221, align 128, !tbaa !2769
  %223 = fadd <32 x float> %49, %222
  %224 = fadd <32 x float> %219, %223
  %225 = fcmp ogt <32 x float> %224, zeroinitializer
  %226 = select <32 x i1> %225, <32 x float> %224, <32 x float> zeroinitializer
  %227 = getelementptr inbounds float, float* %10, i64 %216
  %228 = bitcast float* %227 to <32 x float>*
  store <32 x float> %226, <32 x float>* %228, align 128, !tbaa !2772
  %229 = mul i64 %indvars.iv36, 3848290697216
  %sext49 = add i64 %229, 1786706395136
  %230 = ashr exact i64 %sext49, 32
  %231 = getelementptr inbounds float, float* %16, i64 %230
  %232 = bitcast float* %231 to <32 x float>*
  %233 = load <32 x float>, <32 x float>* %232, align 128, !tbaa !2766
  %234 = getelementptr inbounds i8, i8* %35, i64 1664
  %235 = bitcast i8* %234 to <32 x float>*
  %236 = load <32 x float>, <32 x float>* %235, align 128, !tbaa !2769
  %237 = fadd <32 x float> %49, %236
  %238 = fadd <32 x float> %233, %237
  %239 = fcmp ogt <32 x float> %238, zeroinitializer
  %240 = select <32 x i1> %239, <32 x float> %238, <32 x float> zeroinitializer
  %241 = getelementptr inbounds float, float* %10, i64 %230
  %242 = bitcast float* %241 to <32 x float>*
  store <32 x float> %240, <32 x float>* %242, align 128, !tbaa !2772
  %243 = mul i64 %indvars.iv36, 3848290697216
  %sext50 = add i64 %243, 1924145348608
  %244 = ashr exact i64 %sext50, 32
  %245 = getelementptr inbounds float, float* %16, i64 %244
  %246 = bitcast float* %245 to <32 x float>*
  %247 = load <32 x float>, <32 x float>* %246, align 128, !tbaa !2766
  %248 = getelementptr inbounds i8, i8* %35, i64 1792
  %249 = bitcast i8* %248 to <32 x float>*
  %250 = load <32 x float>, <32 x float>* %249, align 128, !tbaa !2769
  %251 = fadd <32 x float> %49, %250
  %252 = fadd <32 x float> %247, %251
  %253 = fcmp ogt <32 x float> %252, zeroinitializer
  %254 = select <32 x i1> %253, <32 x float> %252, <32 x float> zeroinitializer
  %255 = getelementptr inbounds float, float* %10, i64 %244
  %256 = bitcast float* %255 to <32 x float>*
  store <32 x float> %254, <32 x float>* %256, align 128, !tbaa !2772
  %257 = mul i64 %indvars.iv36, 3848290697216
  %sext51 = add i64 %257, 2061584302080
  %258 = ashr exact i64 %sext51, 32
  %259 = getelementptr inbounds float, float* %16, i64 %258
  %260 = bitcast float* %259 to <32 x float>*
  %261 = load <32 x float>, <32 x float>* %260, align 128, !tbaa !2766
  %262 = getelementptr inbounds i8, i8* %35, i64 1920
  %263 = bitcast i8* %262 to <32 x float>*
  %264 = load <32 x float>, <32 x float>* %263, align 128, !tbaa !2769
  %265 = fadd <32 x float> %49, %264
  %266 = fadd <32 x float> %261, %265
  %267 = fcmp ogt <32 x float> %266, zeroinitializer
  %268 = select <32 x i1> %267, <32 x float> %266, <32 x float> zeroinitializer
  %269 = getelementptr inbounds float, float* %10, i64 %258
  %270 = bitcast float* %269 to <32 x float>*
  store <32 x float> %268, <32 x float>* %270, align 128, !tbaa !2772
  %271 = mul i64 %indvars.iv36, 3848290697216
  %sext52 = add i64 %271, 2199023255552
  %272 = ashr exact i64 %sext52, 32
  %273 = getelementptr inbounds float, float* %16, i64 %272
  %274 = bitcast float* %273 to <32 x float>*
  %275 = load <32 x float>, <32 x float>* %274, align 128, !tbaa !2766
  %276 = getelementptr inbounds i8, i8* %35, i64 2048
  %277 = bitcast i8* %276 to <32 x float>*
  %278 = load <32 x float>, <32 x float>* %277, align 128, !tbaa !2769
  %279 = fadd <32 x float> %49, %278
  %280 = fadd <32 x float> %275, %279
  %281 = fcmp ogt <32 x float> %280, zeroinitializer
  %282 = select <32 x i1> %281, <32 x float> %280, <32 x float> zeroinitializer
  %283 = getelementptr inbounds float, float* %10, i64 %272
  %284 = bitcast float* %283 to <32 x float>*
  store <32 x float> %282, <32 x float>* %284, align 128, !tbaa !2772
  %285 = mul i64 %indvars.iv36, 3848290697216
  %sext53 = add i64 %285, 2336462209024
  %286 = ashr exact i64 %sext53, 32
  %287 = getelementptr inbounds float, float* %16, i64 %286
  %288 = bitcast float* %287 to <32 x float>*
  %289 = load <32 x float>, <32 x float>* %288, align 128, !tbaa !2766
  %290 = getelementptr inbounds i8, i8* %35, i64 2176
  %291 = bitcast i8* %290 to <32 x float>*
  %292 = load <32 x float>, <32 x float>* %291, align 128, !tbaa !2769
  %293 = fadd <32 x float> %49, %292
  %294 = fadd <32 x float> %289, %293
  %295 = fcmp ogt <32 x float> %294, zeroinitializer
  %296 = select <32 x i1> %295, <32 x float> %294, <32 x float> zeroinitializer
  %297 = getelementptr inbounds float, float* %10, i64 %286
  %298 = bitcast float* %297 to <32 x float>*
  store <32 x float> %296, <32 x float>* %298, align 128, !tbaa !2772
  %299 = mul i64 %indvars.iv36, 3848290697216
  %sext54 = add i64 %299, 2473901162496
  %300 = ashr exact i64 %sext54, 32
  %301 = getelementptr inbounds float, float* %16, i64 %300
  %302 = bitcast float* %301 to <32 x float>*
  %303 = load <32 x float>, <32 x float>* %302, align 128, !tbaa !2766
  %304 = getelementptr inbounds i8, i8* %35, i64 2304
  %305 = bitcast i8* %304 to <32 x float>*
  %306 = load <32 x float>, <32 x float>* %305, align 128, !tbaa !2769
  %307 = fadd <32 x float> %49, %306
  %308 = fadd <32 x float> %303, %307
  %309 = fcmp ogt <32 x float> %308, zeroinitializer
  %310 = select <32 x i1> %309, <32 x float> %308, <32 x float> zeroinitializer
  %311 = getelementptr inbounds float, float* %10, i64 %300
  %312 = bitcast float* %311 to <32 x float>*
  store <32 x float> %310, <32 x float>* %312, align 128, !tbaa !2772
  %313 = mul i64 %indvars.iv36, 3848290697216
  %sext55 = add i64 %313, 2611340115968
  %314 = ashr exact i64 %sext55, 32
  %315 = getelementptr inbounds float, float* %16, i64 %314
  %316 = bitcast float* %315 to <32 x float>*
  %317 = load <32 x float>, <32 x float>* %316, align 128, !tbaa !2766
  %318 = getelementptr inbounds i8, i8* %35, i64 2432
  %319 = bitcast i8* %318 to <32 x float>*
  %320 = load <32 x float>, <32 x float>* %319, align 128, !tbaa !2769
  %321 = fadd <32 x float> %49, %320
  %322 = fadd <32 x float> %317, %321
  %323 = fcmp ogt <32 x float> %322, zeroinitializer
  %324 = select <32 x i1> %323, <32 x float> %322, <32 x float> zeroinitializer
  %325 = getelementptr inbounds float, float* %10, i64 %314
  %326 = bitcast float* %325 to <32 x float>*
  store <32 x float> %324, <32 x float>* %326, align 128, !tbaa !2772
  %327 = mul i64 %indvars.iv36, 3848290697216
  %sext56 = add i64 %327, 2748779069440
  %328 = ashr exact i64 %sext56, 32
  %329 = getelementptr inbounds float, float* %16, i64 %328
  %330 = bitcast float* %329 to <32 x float>*
  %331 = load <32 x float>, <32 x float>* %330, align 128, !tbaa !2766
  %332 = getelementptr inbounds i8, i8* %35, i64 2560
  %333 = bitcast i8* %332 to <32 x float>*
  %334 = load <32 x float>, <32 x float>* %333, align 128, !tbaa !2769
  %335 = fadd <32 x float> %49, %334
  %336 = fadd <32 x float> %331, %335
  %337 = fcmp ogt <32 x float> %336, zeroinitializer
  %338 = select <32 x i1> %337, <32 x float> %336, <32 x float> zeroinitializer
  %339 = getelementptr inbounds float, float* %10, i64 %328
  %340 = bitcast float* %339 to <32 x float>*
  store <32 x float> %338, <32 x float>* %340, align 128, !tbaa !2772
  %341 = mul i64 %indvars.iv36, 3848290697216
  %sext57 = add i64 %341, 2886218022912
  %342 = ashr exact i64 %sext57, 32
  %343 = getelementptr inbounds float, float* %16, i64 %342
  %344 = bitcast float* %343 to <32 x float>*
  %345 = load <32 x float>, <32 x float>* %344, align 128, !tbaa !2766
  %346 = getelementptr inbounds i8, i8* %35, i64 2688
  %347 = bitcast i8* %346 to <32 x float>*
  %348 = load <32 x float>, <32 x float>* %347, align 128, !tbaa !2769
  %349 = fadd <32 x float> %49, %348
  %350 = fadd <32 x float> %345, %349
  %351 = fcmp ogt <32 x float> %350, zeroinitializer
  %352 = select <32 x i1> %351, <32 x float> %350, <32 x float> zeroinitializer
  %353 = getelementptr inbounds float, float* %10, i64 %342
  %354 = bitcast float* %353 to <32 x float>*
  store <32 x float> %352, <32 x float>* %354, align 128, !tbaa !2772
  %355 = mul i64 %indvars.iv36, 3848290697216
  %sext58 = add i64 %355, 3023656976384
  %356 = ashr exact i64 %sext58, 32
  %357 = getelementptr inbounds float, float* %16, i64 %356
  %358 = bitcast float* %357 to <32 x float>*
  %359 = load <32 x float>, <32 x float>* %358, align 128, !tbaa !2766
  %360 = getelementptr inbounds i8, i8* %35, i64 2816
  %361 = bitcast i8* %360 to <32 x float>*
  %362 = load <32 x float>, <32 x float>* %361, align 128, !tbaa !2769
  %363 = fadd <32 x float> %49, %362
  %364 = fadd <32 x float> %359, %363
  %365 = fcmp ogt <32 x float> %364, zeroinitializer
  %366 = select <32 x i1> %365, <32 x float> %364, <32 x float> zeroinitializer
  %367 = getelementptr inbounds float, float* %10, i64 %356
  %368 = bitcast float* %367 to <32 x float>*
  store <32 x float> %366, <32 x float>* %368, align 128, !tbaa !2772
  %369 = mul i64 %indvars.iv36, 3848290697216
  %sext59 = add i64 %369, 3161095929856
  %370 = ashr exact i64 %sext59, 32
  %371 = getelementptr inbounds float, float* %16, i64 %370
  %372 = bitcast float* %371 to <32 x float>*
  %373 = load <32 x float>, <32 x float>* %372, align 128, !tbaa !2766
  %374 = getelementptr inbounds i8, i8* %35, i64 2944
  %375 = bitcast i8* %374 to <32 x float>*
  %376 = load <32 x float>, <32 x float>* %375, align 128, !tbaa !2769
  %377 = fadd <32 x float> %49, %376
  %378 = fadd <32 x float> %373, %377
  %379 = fcmp ogt <32 x float> %378, zeroinitializer
  %380 = select <32 x i1> %379, <32 x float> %378, <32 x float> zeroinitializer
  %381 = getelementptr inbounds float, float* %10, i64 %370
  %382 = bitcast float* %381 to <32 x float>*
  store <32 x float> %380, <32 x float>* %382, align 128, !tbaa !2772
  %383 = mul i64 %indvars.iv36, 3848290697216
  %sext60 = add i64 %383, 3298534883328
  %384 = ashr exact i64 %sext60, 32
  %385 = getelementptr inbounds float, float* %16, i64 %384
  %386 = bitcast float* %385 to <32 x float>*
  %387 = load <32 x float>, <32 x float>* %386, align 128, !tbaa !2766
  %388 = getelementptr inbounds i8, i8* %35, i64 3072
  %389 = bitcast i8* %388 to <32 x float>*
  %390 = load <32 x float>, <32 x float>* %389, align 128, !tbaa !2769
  %391 = fadd <32 x float> %49, %390
  %392 = fadd <32 x float> %387, %391
  %393 = fcmp ogt <32 x float> %392, zeroinitializer
  %394 = select <32 x i1> %393, <32 x float> %392, <32 x float> zeroinitializer
  %395 = getelementptr inbounds float, float* %10, i64 %384
  %396 = bitcast float* %395 to <32 x float>*
  store <32 x float> %394, <32 x float>* %396, align 128, !tbaa !2772
  %397 = mul i64 %indvars.iv36, 3848290697216
  %sext61 = add i64 %397, 3435973836800
  %398 = ashr exact i64 %sext61, 32
  %399 = getelementptr inbounds float, float* %16, i64 %398
  %400 = bitcast float* %399 to <32 x float>*
  %401 = load <32 x float>, <32 x float>* %400, align 128, !tbaa !2766
  %402 = getelementptr inbounds i8, i8* %35, i64 3200
  %403 = bitcast i8* %402 to <32 x float>*
  %404 = load <32 x float>, <32 x float>* %403, align 128, !tbaa !2769
  %405 = fadd <32 x float> %49, %404
  %406 = fadd <32 x float> %401, %405
  %407 = fcmp ogt <32 x float> %406, zeroinitializer
  %408 = select <32 x i1> %407, <32 x float> %406, <32 x float> zeroinitializer
  %409 = getelementptr inbounds float, float* %10, i64 %398
  %410 = bitcast float* %409 to <32 x float>*
  store <32 x float> %408, <32 x float>* %410, align 128, !tbaa !2772
  %411 = mul i64 %indvars.iv36, 3848290697216
  %sext62 = add i64 %411, 3573412790272
  %412 = ashr exact i64 %sext62, 32
  %413 = getelementptr inbounds float, float* %16, i64 %412
  %414 = bitcast float* %413 to <32 x float>*
  %415 = load <32 x float>, <32 x float>* %414, align 128, !tbaa !2766
  %416 = getelementptr inbounds i8, i8* %35, i64 3328
  %417 = bitcast i8* %416 to <32 x float>*
  %418 = load <32 x float>, <32 x float>* %417, align 128, !tbaa !2769
  %419 = fadd <32 x float> %49, %418
  %420 = fadd <32 x float> %415, %419
  %421 = fcmp ogt <32 x float> %420, zeroinitializer
  %422 = select <32 x i1> %421, <32 x float> %420, <32 x float> zeroinitializer
  %423 = getelementptr inbounds float, float* %10, i64 %412
  %424 = bitcast float* %423 to <32 x float>*
  store <32 x float> %422, <32 x float>* %424, align 128, !tbaa !2772
  %425 = mul i64 %indvars.iv36, 3848290697216
  %sext63 = add i64 %425, 3710851743744
  %426 = ashr exact i64 %sext63, 32
  %427 = getelementptr inbounds float, float* %16, i64 %426
  %428 = bitcast float* %427 to <32 x float>*
  %429 = load <32 x float>, <32 x float>* %428, align 128, !tbaa !2766
  %430 = getelementptr inbounds i8, i8* %35, i64 3456
  %431 = bitcast i8* %430 to <32 x float>*
  %432 = load <32 x float>, <32 x float>* %431, align 128, !tbaa !2769
  %433 = fadd <32 x float> %49, %432
  %434 = fadd <32 x float> %429, %433
  %435 = fcmp ogt <32 x float> %434, zeroinitializer
  %436 = select <32 x i1> %435, <32 x float> %434, <32 x float> zeroinitializer
  %437 = getelementptr inbounds float, float* %10, i64 %426
  %438 = bitcast float* %437 to <32 x float>*
  store <32 x float> %436, <32 x float>* %438, align 128, !tbaa !2772
  %439 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %440 = tail call i32 %439(i32 1, i32 %19, i8* nonnull %35)
  %indvars.iv.next37 = add nsw i64 %indvars.iv36, 1
  %441 = icmp slt i64 %indvars.iv.next37, %33
  br i1 %441, label %for_body, label %for_end, !prof !5

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv27 = phi i64 [ 0, %for_body ], [ %indvars.iv.next28, %for_end6 ]
  %442 = shl nsw i64 %indvars.iv27, 6
  %443 = getelementptr inbounds float, float* %36, i64 %442
  %444 = bitcast float* %443 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %444, align 128, !tbaa !2769
  %445 = or i64 %442, 32
  %446 = getelementptr inbounds float, float* %36, i64 %445
  %447 = bitcast float* %446 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %447, align 128, !tbaa !2769
  %448 = shl i64 %indvars.iv27, 5
  %449 = add nsw i64 %448, %43
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_begin7.preheader, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_begin7.preheader ]
  %.lcssa2225 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %707, %for_begin7.preheader ]
  %.lcssa24 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %701, %for_begin7.preheader ]
  %450 = mul nuw nsw i64 %indvars.iv, 12544
  %451 = add nsw i64 %449, %450
  %452 = shl i64 %indvars.iv, 9
  %453 = add nuw nsw i64 %452, %42
  %454 = getelementptr inbounds float, float* %4, i64 %451
  %455 = load float, float* %454, align 4, !tbaa !2775
  %456 = insertelement <32 x float> undef, float %455, i32 0
  %457 = shufflevector <32 x float> %456, <32 x float> undef, <32 x i32> zeroinitializer
  %458 = getelementptr inbounds float, float* %7, i64 %453
  %459 = bitcast float* %458 to <32 x float>*
  %460 = load <32 x float>, <32 x float>* %459, align 128, !tbaa !2778
  %461 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %457, <32 x float> %460, <32 x float> %.lcssa24)
  %462 = or i64 %451, 16
  %463 = getelementptr inbounds float, float* %4, i64 %462
  %464 = load float, float* %463, align 4, !tbaa !2775
  %465 = insertelement <32 x float> undef, float %464, i32 0
  %466 = shufflevector <32 x float> %465, <32 x float> undef, <32 x i32> zeroinitializer
  %467 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %466, <32 x float> %460, <32 x float> %.lcssa2225)
  %468 = or i64 %451, 1
  %469 = getelementptr inbounds float, float* %4, i64 %468
  %470 = load float, float* %469, align 4, !tbaa !2775
  %471 = insertelement <32 x float> undef, float %470, i32 0
  %472 = shufflevector <32 x float> %471, <32 x float> undef, <32 x i32> zeroinitializer
  %473 = or i64 %453, 32
  %474 = getelementptr inbounds float, float* %7, i64 %473
  %475 = bitcast float* %474 to <32 x float>*
  %476 = load <32 x float>, <32 x float>* %475, align 128, !tbaa !2778
  %477 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %472, <32 x float> %476, <32 x float> %461)
  %478 = or i64 %451, 17
  %479 = getelementptr inbounds float, float* %4, i64 %478
  %480 = load float, float* %479, align 4, !tbaa !2775
  %481 = insertelement <32 x float> undef, float %480, i32 0
  %482 = shufflevector <32 x float> %481, <32 x float> undef, <32 x i32> zeroinitializer
  %483 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %482, <32 x float> %476, <32 x float> %467)
  %484 = or i64 %451, 2
  %485 = getelementptr inbounds float, float* %4, i64 %484
  %486 = load float, float* %485, align 4, !tbaa !2775
  %487 = insertelement <32 x float> undef, float %486, i32 0
  %488 = shufflevector <32 x float> %487, <32 x float> undef, <32 x i32> zeroinitializer
  %489 = or i64 %453, 64
  %490 = getelementptr inbounds float, float* %7, i64 %489
  %491 = bitcast float* %490 to <32 x float>*
  %492 = load <32 x float>, <32 x float>* %491, align 128, !tbaa !2778
  %493 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %488, <32 x float> %492, <32 x float> %477)
  %494 = or i64 %451, 18
  %495 = getelementptr inbounds float, float* %4, i64 %494
  %496 = load float, float* %495, align 4, !tbaa !2775
  %497 = insertelement <32 x float> undef, float %496, i32 0
  %498 = shufflevector <32 x float> %497, <32 x float> undef, <32 x i32> zeroinitializer
  %499 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %498, <32 x float> %492, <32 x float> %483)
  %500 = or i64 %451, 3
  %501 = getelementptr inbounds float, float* %4, i64 %500
  %502 = load float, float* %501, align 4, !tbaa !2775
  %503 = insertelement <32 x float> undef, float %502, i32 0
  %504 = shufflevector <32 x float> %503, <32 x float> undef, <32 x i32> zeroinitializer
  %505 = or i64 %453, 96
  %506 = getelementptr inbounds float, float* %7, i64 %505
  %507 = bitcast float* %506 to <32 x float>*
  %508 = load <32 x float>, <32 x float>* %507, align 128, !tbaa !2778
  %509 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %504, <32 x float> %508, <32 x float> %493)
  %510 = or i64 %451, 19
  %511 = getelementptr inbounds float, float* %4, i64 %510
  %512 = load float, float* %511, align 4, !tbaa !2775
  %513 = insertelement <32 x float> undef, float %512, i32 0
  %514 = shufflevector <32 x float> %513, <32 x float> undef, <32 x i32> zeroinitializer
  %515 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %514, <32 x float> %508, <32 x float> %499)
  %516 = or i64 %451, 4
  %517 = getelementptr inbounds float, float* %4, i64 %516
  %518 = load float, float* %517, align 4, !tbaa !2775
  %519 = insertelement <32 x float> undef, float %518, i32 0
  %520 = shufflevector <32 x float> %519, <32 x float> undef, <32 x i32> zeroinitializer
  %521 = or i64 %453, 128
  %522 = getelementptr inbounds float, float* %7, i64 %521
  %523 = bitcast float* %522 to <32 x float>*
  %524 = load <32 x float>, <32 x float>* %523, align 128, !tbaa !2778
  %525 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %520, <32 x float> %524, <32 x float> %509)
  %526 = or i64 %451, 20
  %527 = getelementptr inbounds float, float* %4, i64 %526
  %528 = load float, float* %527, align 4, !tbaa !2775
  %529 = insertelement <32 x float> undef, float %528, i32 0
  %530 = shufflevector <32 x float> %529, <32 x float> undef, <32 x i32> zeroinitializer
  %531 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %530, <32 x float> %524, <32 x float> %515)
  %532 = or i64 %451, 5
  %533 = getelementptr inbounds float, float* %4, i64 %532
  %534 = load float, float* %533, align 4, !tbaa !2775
  %535 = insertelement <32 x float> undef, float %534, i32 0
  %536 = shufflevector <32 x float> %535, <32 x float> undef, <32 x i32> zeroinitializer
  %537 = or i64 %453, 160
  %538 = getelementptr inbounds float, float* %7, i64 %537
  %539 = bitcast float* %538 to <32 x float>*
  %540 = load <32 x float>, <32 x float>* %539, align 128, !tbaa !2778
  %541 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %536, <32 x float> %540, <32 x float> %525)
  %542 = or i64 %451, 21
  %543 = getelementptr inbounds float, float* %4, i64 %542
  %544 = load float, float* %543, align 4, !tbaa !2775
  %545 = insertelement <32 x float> undef, float %544, i32 0
  %546 = shufflevector <32 x float> %545, <32 x float> undef, <32 x i32> zeroinitializer
  %547 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %546, <32 x float> %540, <32 x float> %531)
  %548 = or i64 %451, 6
  %549 = getelementptr inbounds float, float* %4, i64 %548
  %550 = load float, float* %549, align 4, !tbaa !2775
  %551 = insertelement <32 x float> undef, float %550, i32 0
  %552 = shufflevector <32 x float> %551, <32 x float> undef, <32 x i32> zeroinitializer
  %553 = or i64 %453, 192
  %554 = getelementptr inbounds float, float* %7, i64 %553
  %555 = bitcast float* %554 to <32 x float>*
  %556 = load <32 x float>, <32 x float>* %555, align 128, !tbaa !2778
  %557 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %552, <32 x float> %556, <32 x float> %541)
  %558 = or i64 %451, 22
  %559 = getelementptr inbounds float, float* %4, i64 %558
  %560 = load float, float* %559, align 4, !tbaa !2775
  %561 = insertelement <32 x float> undef, float %560, i32 0
  %562 = shufflevector <32 x float> %561, <32 x float> undef, <32 x i32> zeroinitializer
  %563 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %562, <32 x float> %556, <32 x float> %547)
  %564 = or i64 %451, 7
  %565 = getelementptr inbounds float, float* %4, i64 %564
  %566 = load float, float* %565, align 4, !tbaa !2775
  %567 = insertelement <32 x float> undef, float %566, i32 0
  %568 = shufflevector <32 x float> %567, <32 x float> undef, <32 x i32> zeroinitializer
  %569 = or i64 %453, 224
  %570 = getelementptr inbounds float, float* %7, i64 %569
  %571 = bitcast float* %570 to <32 x float>*
  %572 = load <32 x float>, <32 x float>* %571, align 128, !tbaa !2778
  %573 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %568, <32 x float> %572, <32 x float> %557)
  %574 = or i64 %451, 23
  %575 = getelementptr inbounds float, float* %4, i64 %574
  %576 = load float, float* %575, align 4, !tbaa !2775
  %577 = insertelement <32 x float> undef, float %576, i32 0
  %578 = shufflevector <32 x float> %577, <32 x float> undef, <32 x i32> zeroinitializer
  %579 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %578, <32 x float> %572, <32 x float> %563)
  %580 = or i64 %451, 8
  %581 = getelementptr inbounds float, float* %4, i64 %580
  %582 = load float, float* %581, align 4, !tbaa !2775
  %583 = insertelement <32 x float> undef, float %582, i32 0
  %584 = shufflevector <32 x float> %583, <32 x float> undef, <32 x i32> zeroinitializer
  %585 = or i64 %453, 256
  %586 = getelementptr inbounds float, float* %7, i64 %585
  %587 = bitcast float* %586 to <32 x float>*
  %588 = load <32 x float>, <32 x float>* %587, align 128, !tbaa !2778
  %589 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %584, <32 x float> %588, <32 x float> %573)
  %590 = or i64 %451, 24
  %591 = getelementptr inbounds float, float* %4, i64 %590
  %592 = load float, float* %591, align 4, !tbaa !2775
  %593 = insertelement <32 x float> undef, float %592, i32 0
  %594 = shufflevector <32 x float> %593, <32 x float> undef, <32 x i32> zeroinitializer
  %595 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %594, <32 x float> %588, <32 x float> %579)
  %596 = or i64 %451, 9
  %597 = getelementptr inbounds float, float* %4, i64 %596
  %598 = load float, float* %597, align 4, !tbaa !2775
  %599 = insertelement <32 x float> undef, float %598, i32 0
  %600 = shufflevector <32 x float> %599, <32 x float> undef, <32 x i32> zeroinitializer
  %601 = or i64 %453, 288
  %602 = getelementptr inbounds float, float* %7, i64 %601
  %603 = bitcast float* %602 to <32 x float>*
  %604 = load <32 x float>, <32 x float>* %603, align 128, !tbaa !2778
  %605 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %600, <32 x float> %604, <32 x float> %589)
  %606 = or i64 %451, 25
  %607 = getelementptr inbounds float, float* %4, i64 %606
  %608 = load float, float* %607, align 4, !tbaa !2775
  %609 = insertelement <32 x float> undef, float %608, i32 0
  %610 = shufflevector <32 x float> %609, <32 x float> undef, <32 x i32> zeroinitializer
  %611 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %610, <32 x float> %604, <32 x float> %595)
  %612 = or i64 %451, 10
  %613 = getelementptr inbounds float, float* %4, i64 %612
  %614 = load float, float* %613, align 4, !tbaa !2775
  %615 = insertelement <32 x float> undef, float %614, i32 0
  %616 = shufflevector <32 x float> %615, <32 x float> undef, <32 x i32> zeroinitializer
  %617 = or i64 %453, 320
  %618 = getelementptr inbounds float, float* %7, i64 %617
  %619 = bitcast float* %618 to <32 x float>*
  %620 = load <32 x float>, <32 x float>* %619, align 128, !tbaa !2778
  %621 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %616, <32 x float> %620, <32 x float> %605)
  %622 = or i64 %451, 26
  %623 = getelementptr inbounds float, float* %4, i64 %622
  %624 = load float, float* %623, align 4, !tbaa !2775
  %625 = insertelement <32 x float> undef, float %624, i32 0
  %626 = shufflevector <32 x float> %625, <32 x float> undef, <32 x i32> zeroinitializer
  %627 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %626, <32 x float> %620, <32 x float> %611)
  %628 = or i64 %451, 11
  %629 = getelementptr inbounds float, float* %4, i64 %628
  %630 = load float, float* %629, align 4, !tbaa !2775
  %631 = insertelement <32 x float> undef, float %630, i32 0
  %632 = shufflevector <32 x float> %631, <32 x float> undef, <32 x i32> zeroinitializer
  %633 = or i64 %453, 352
  %634 = getelementptr inbounds float, float* %7, i64 %633
  %635 = bitcast float* %634 to <32 x float>*
  %636 = load <32 x float>, <32 x float>* %635, align 128, !tbaa !2778
  %637 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %632, <32 x float> %636, <32 x float> %621)
  %638 = or i64 %451, 27
  %639 = getelementptr inbounds float, float* %4, i64 %638
  %640 = load float, float* %639, align 4, !tbaa !2775
  %641 = insertelement <32 x float> undef, float %640, i32 0
  %642 = shufflevector <32 x float> %641, <32 x float> undef, <32 x i32> zeroinitializer
  %643 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %642, <32 x float> %636, <32 x float> %627)
  %644 = or i64 %451, 12
  %645 = getelementptr inbounds float, float* %4, i64 %644
  %646 = load float, float* %645, align 4, !tbaa !2775
  %647 = insertelement <32 x float> undef, float %646, i32 0
  %648 = shufflevector <32 x float> %647, <32 x float> undef, <32 x i32> zeroinitializer
  %649 = or i64 %453, 384
  %650 = getelementptr inbounds float, float* %7, i64 %649
  %651 = bitcast float* %650 to <32 x float>*
  %652 = load <32 x float>, <32 x float>* %651, align 128, !tbaa !2778
  %653 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %648, <32 x float> %652, <32 x float> %637)
  %654 = or i64 %451, 28
  %655 = getelementptr inbounds float, float* %4, i64 %654
  %656 = load float, float* %655, align 4, !tbaa !2775
  %657 = insertelement <32 x float> undef, float %656, i32 0
  %658 = shufflevector <32 x float> %657, <32 x float> undef, <32 x i32> zeroinitializer
  %659 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %658, <32 x float> %652, <32 x float> %643)
  %660 = or i64 %451, 13
  %661 = getelementptr inbounds float, float* %4, i64 %660
  %662 = load float, float* %661, align 4, !tbaa !2775
  %663 = insertelement <32 x float> undef, float %662, i32 0
  %664 = shufflevector <32 x float> %663, <32 x float> undef, <32 x i32> zeroinitializer
  %665 = or i64 %453, 416
  %666 = getelementptr inbounds float, float* %7, i64 %665
  %667 = bitcast float* %666 to <32 x float>*
  %668 = load <32 x float>, <32 x float>* %667, align 128, !tbaa !2778
  %669 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %664, <32 x float> %668, <32 x float> %653)
  %670 = or i64 %451, 29
  %671 = getelementptr inbounds float, float* %4, i64 %670
  %672 = load float, float* %671, align 4, !tbaa !2775
  %673 = insertelement <32 x float> undef, float %672, i32 0
  %674 = shufflevector <32 x float> %673, <32 x float> undef, <32 x i32> zeroinitializer
  %675 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %674, <32 x float> %668, <32 x float> %659)
  %676 = or i64 %451, 14
  %677 = getelementptr inbounds float, float* %4, i64 %676
  %678 = load float, float* %677, align 4, !tbaa !2775
  %679 = insertelement <32 x float> undef, float %678, i32 0
  %680 = shufflevector <32 x float> %679, <32 x float> undef, <32 x i32> zeroinitializer
  %681 = or i64 %453, 448
  %682 = getelementptr inbounds float, float* %7, i64 %681
  %683 = bitcast float* %682 to <32 x float>*
  %684 = load <32 x float>, <32 x float>* %683, align 128, !tbaa !2778
  %685 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %680, <32 x float> %684, <32 x float> %669)
  %686 = or i64 %451, 30
  %687 = getelementptr inbounds float, float* %4, i64 %686
  %688 = load float, float* %687, align 4, !tbaa !2775
  %689 = insertelement <32 x float> undef, float %688, i32 0
  %690 = shufflevector <32 x float> %689, <32 x float> undef, <32 x i32> zeroinitializer
  %691 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %690, <32 x float> %684, <32 x float> %675)
  %692 = or i64 %451, 15
  %693 = getelementptr inbounds float, float* %4, i64 %692
  %694 = load float, float* %693, align 4, !tbaa !2775
  %695 = insertelement <32 x float> undef, float %694, i32 0
  %696 = shufflevector <32 x float> %695, <32 x float> undef, <32 x i32> zeroinitializer
  %697 = or i64 %453, 480
  %698 = getelementptr inbounds float, float* %7, i64 %697
  %699 = bitcast float* %698 to <32 x float>*
  %700 = load <32 x float>, <32 x float>* %699, align 128, !tbaa !2778
  %701 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %696, <32 x float> %700, <32 x float> %685)
  %702 = or i64 %451, 31
  %703 = getelementptr inbounds float, float* %4, i64 %702
  %704 = load float, float* %703, align 4, !tbaa !2775
  %705 = insertelement <32 x float> undef, float %704, i32 0
  %706 = shufflevector <32 x float> %705, <32 x float> undef, <32 x i32> zeroinitializer
  %707 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %706, <32 x float> %700, <32 x float> %691)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 8
  br i1 %exitcond, label %for_end6, label %for_begin7.preheader, !prof !50

for_end6:                                         ; preds = %for_begin7.preheader
  store <32 x float> %701, <32 x float>* %444, align 128, !tbaa !2769
  store <32 x float> %707, <32 x float>* %447, align 128, !tbaa !2769
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %exitcond29 = icmp eq i64 %indvars.iv.next28, 14
  br i1 %exitcond29, label %for_begin10.preheader, label %for_body2, !prof !50
}

; Function Attrs: nounwind readnone speculatable
declare <32 x float> @llvm.fmuladd.v32f32(<32 x float>, <32 x float>, <32 x float>) #2

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.239, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !2781
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !2795
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !2798
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !2800
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %55 = load i64*, i64** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %61 = load i64*, i64** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %63 = load i64*, i64** %62, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %64 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %64(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.240, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %65 = getelementptr inbounds i8, i8* %1, i64 4
  %66 = bitcast i8* %65 to i32*
  %67 = load i32, i32* %66, align 4, !tbaa !2804
  switch i32 %67, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %68 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %68(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.241, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %69(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.242, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.243, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.244, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %72 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, 5
  br i1 %74, label %assert_end14, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %77 = load i16, i16* %76, align 2
  %78 = icmp eq i16 %77, 1
  %79 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, 32
  %82 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %83, 2
  %85 = and i1 %81, %84
  %86 = and i1 %78, %85
  br i1 %86, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %87(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %88 = load i64, i64* %35, align 8, !tbaa !2806
  %89 = trunc i64 %88 to i32
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %92 = getelementptr inbounds i64, i64* %35, i64 1
  %93 = load i64, i64* %92, align 8, !tbaa !2820
  %94 = trunc i64 %93 to i32
  %95 = icmp eq i32 %94, 4
  br i1 %95, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.90, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %97 = getelementptr inbounds i64, i64* %35, i64 2
  %98 = load i64, i64* %97, align 8, !tbaa !2822
  %99 = trunc i64 %98 to i32
  %100 = icmp eq i32 %99, 56
  br i1 %100, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %102 = getelementptr inbounds i64, i64* %35, i64 3
  %103 = load i64, i64* %102, align 8, !tbaa !2825
  %104 = trunc i64 %103 to i32
  %105 = icmp eq i32 %104, 56
  br i1 %105, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %106 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %106(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %107 = getelementptr inbounds i64, i64* %35, i64 4
  %108 = load i64, i64* %107, align 8, !tbaa !2827
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 16
  br i1 %110, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %111 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %111(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %112 = icmp eq i64* %37, null
  br i1 %112, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %113 = load i64, i64* %37, align 8, !tbaa !2831
  %114 = trunc i64 %113 to i32
  %115 = icmp eq i32 %114, 200704
  %116 = getelementptr inbounds i64, i64* %37, i64 1
  %117 = load i64, i64* %116, align 8, !tbaa !2845
  %118 = trunc i64 %117 to i32
  %119 = icmp eq i32 %118, 50176
  %120 = getelementptr inbounds i64, i64* %37, i64 2
  %121 = load i64, i64* %120, align 8, !tbaa !2847
  %122 = trunc i64 %121 to i32
  %123 = icmp eq i32 %122, 896
  %124 = getelementptr inbounds i64, i64* %37, i64 3
  %125 = load i64, i64* %124, align 8, !tbaa !2850
  %126 = trunc i64 %125 to i32
  %127 = icmp eq i32 %126, 16
  %128 = getelementptr inbounds i64, i64* %37, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !2852
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 1
  %132 = and i1 %127, %131
  %133 = and i1 %123, %132
  %134 = and i1 %119, %133
  %135 = and i1 %115, %134
  br i1 %135, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %136 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %137 = load i64, i64* %136, align 8
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %139(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.91, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %141 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 6
  br i1 %147, label %assert_end36, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end32
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %150 = load i16, i16* %149, align 2
  %151 = icmp eq i16 %150, 1
  %152 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 32
  %155 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %156 = load i8, i8* %155, align 1
  %157 = icmp eq i8 %156, 2
  %158 = and i1 %154, %157
  %159 = and i1 %151, %158
  br i1 %159, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %161 = load i64, i64* %43, align 8, !tbaa !2856
  %162 = trunc i64 %161 to i32
  %163 = icmp eq i32 %162, 8
  br i1 %163, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %165 = getelementptr inbounds i64, i64* %43, i64 1
  %166 = load i64, i64* %165, align 8, !tbaa !2870
  %167 = trunc i64 %166 to i32
  %168 = icmp eq i32 %167, 4
  br i1 %168, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %170 = getelementptr inbounds i64, i64* %43, i64 2
  %171 = load i64, i64* %170, align 8, !tbaa !2872
  %172 = trunc i64 %171 to i32
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %175 = getelementptr inbounds i64, i64* %43, i64 3
  %176 = load i64, i64* %175, align 8, !tbaa !2875
  %177 = trunc i64 %176 to i32
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %179(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %180 = getelementptr inbounds i64, i64* %43, i64 4
  %181 = load i64, i64* %180, align 8, !tbaa !2877
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %182, 16
  br i1 %183, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %184(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %185 = getelementptr inbounds i64, i64* %43, i64 5
  %186 = load i64, i64* %185, align 8, !tbaa !2881
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 32
  br i1 %188, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.227, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %190 = icmp eq i64* %45, null
  br i1 %190, label %if_end52, label %if_then51, !prof !50

if_then51:                                        ; preds = %assert_end50
  %191 = load i64, i64* %45, align 8, !tbaa !2883
  %192 = trunc i64 %191 to i32
  %193 = icmp eq i32 %192, 2048
  %194 = getelementptr inbounds i64, i64* %45, i64 1
  %195 = load i64, i64* %194, align 8, !tbaa !2897
  %196 = trunc i64 %195 to i32
  %197 = icmp eq i32 %196, 512
  %198 = getelementptr inbounds i64, i64* %45, i64 2
  %199 = load i64, i64* %198, align 8, !tbaa !2899
  %200 = trunc i64 %199 to i32
  %201 = icmp eq i32 %200, 512
  %202 = getelementptr inbounds i64, i64* %45, i64 3
  %203 = load i64, i64* %202, align 8, !tbaa !2902
  %204 = trunc i64 %203 to i32
  %205 = icmp eq i32 %204, 512
  %206 = getelementptr inbounds i64, i64* %45, i64 4
  %207 = load i64, i64* %206, align 8, !tbaa !2904
  %208 = trunc i64 %207 to i32
  %209 = icmp eq i32 %208, 32
  %210 = getelementptr inbounds i64, i64* %45, i64 5
  %211 = load i64, i64* %210, align 8, !tbaa !2908
  %212 = trunc i64 %211 to i32
  %213 = icmp eq i32 %212, 1
  %214 = and i1 %209, %213
  %215 = and i1 %205, %214
  %216 = and i1 %201, %215
  %217 = and i1 %197, %216
  %218 = and i1 %193, %217
  br i1 %218, label %if_end52, label %assert_fail53, !prof !5

if_end52:                                         ; preds = %assert_end50, %if_then51
  %219 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %220 = load i64, i64* %219, align 8
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %assert_end56, label %assert_fail55, !prof !5

assert_fail53:                                    ; preds = %if_then51
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.246, i64 0, i64 0))
  ret i32 -1

assert_fail55:                                    ; preds = %if_end52
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %223(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %if_end52
  %224 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %225 = load i32, i32* %224, align 4
  %226 = icmp eq i32 %225, 1
  br i1 %226, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %227(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %228 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %229 = load i32, i32* %228, align 4
  %230 = icmp eq i32 %39, %229
  br i1 %230, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %231 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %231(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %232 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = icmp eq i32 %233, 5
  br i1 %234, label %assert_end64, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end60
  %236 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %237 = load i16, i16* %236, align 2
  %238 = icmp eq i16 %237, 1
  %239 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %240 = load i8, i8* %239, align 1
  %241 = icmp eq i8 %240, 32
  %242 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %243 = load i8, i8* %242, align 1
  %244 = icmp eq i8 %243, 2
  %245 = and i1 %241, %244
  %246 = and i1 %238, %245
  br i1 %246, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %247(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %248 = load i64, i64* %49, align 8, !tbaa !2910
  %249 = trunc i64 %248 to i32
  %250 = icmp eq i32 %249, 1
  br i1 %250, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %251 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %251(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %252 = getelementptr inbounds i64, i64* %49, i64 1
  %253 = load i64, i64* %252, align 8, !tbaa !2924
  %254 = trunc i64 %253 to i32
  %255 = icmp eq i32 %254, 8
  br i1 %255, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %256(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %257 = getelementptr inbounds i64, i64* %49, i64 2
  %258 = load i64, i64* %257, align 8, !tbaa !2926
  %259 = trunc i64 %258 to i32
  %260 = icmp eq i32 %259, 1
  br i1 %260, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %262 = getelementptr inbounds i64, i64* %49, i64 3
  %263 = load i64, i64* %262, align 8, !tbaa !2929
  %264 = trunc i64 %263 to i32
  %265 = icmp eq i32 %264, 1
  br i1 %265, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %266 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %266(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %267 = getelementptr inbounds i64, i64* %49, i64 4
  %268 = load i64, i64* %267, align 8, !tbaa !2931
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 32
  br i1 %270, label %assert_end76, label %assert_fail75, !prof !5

assert_fail75:                                    ; preds = %assert_end74
  %271 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %271(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.229, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %assert_end74
  %272 = icmp eq i64* %51, null
  br i1 %272, label %if_end78, label %if_then77, !prof !50

if_then77:                                        ; preds = %assert_end76
  %273 = load i64, i64* %51, align 8, !tbaa !2935
  %274 = trunc i64 %273 to i32
  %275 = icmp eq i32 %274, 256
  %276 = getelementptr inbounds i64, i64* %51, i64 1
  %277 = load i64, i64* %276, align 8, !tbaa !2949
  %278 = trunc i64 %277 to i32
  %279 = icmp eq i32 %278, 32
  %280 = getelementptr inbounds i64, i64* %51, i64 2
  %281 = load i64, i64* %280, align 8, !tbaa !2951
  %282 = trunc i64 %281 to i32
  %283 = icmp eq i32 %282, 32
  %284 = getelementptr inbounds i64, i64* %51, i64 3
  %285 = load i64, i64* %284, align 8, !tbaa !2954
  %286 = trunc i64 %285 to i32
  %287 = icmp eq i32 %286, 32
  %288 = getelementptr inbounds i64, i64* %51, i64 4
  %289 = load i64, i64* %288, align 8, !tbaa !2956
  %290 = trunc i64 %289 to i32
  %291 = icmp eq i32 %290, 1
  %292 = and i1 %287, %291
  %293 = and i1 %283, %292
  %294 = and i1 %279, %293
  %295 = and i1 %275, %294
  br i1 %295, label %if_end78, label %assert_fail79, !prof !5

if_end78:                                         ; preds = %assert_end76, %if_then77
  %296 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %297 = load i64, i64* %296, align 8
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %assert_end82, label %assert_fail81, !prof !5

assert_fail79:                                    ; preds = %if_then77
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.247, i64 0, i64 0))
  ret i32 -1

assert_fail81:                                    ; preds = %if_end78
  %300 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %300(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %if_end78
  %301 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %302 = load i32, i32* %301, align 4
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %305 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %306 = load i32, i32* %305, align 4
  %307 = icmp eq i32 %39, %306
  br i1 %307, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %308 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %308(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %309 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %310 = load i32, i32* %309, align 4
  %311 = icmp eq i32 %310, 5
  br i1 %311, label %assert_end90, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %312 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %312(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end86
  %313 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %314 = load i16, i16* %313, align 2
  %315 = icmp eq i16 %314, 1
  %316 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %317 = load i8, i8* %316, align 1
  %318 = icmp eq i8 %317, 32
  %319 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %320 = load i8, i8* %319, align 1
  %321 = icmp eq i8 %320, 2
  %322 = and i1 %318, %321
  %323 = and i1 %315, %322
  br i1 %323, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %325 = load i64, i64* %55, align 8, !tbaa !2960
  %326 = trunc i64 %325 to i32
  %327 = icmp eq i32 %326, 1
  br i1 %327, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %328 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %328(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %329 = getelementptr inbounds i64, i64* %55, i64 1
  %330 = load i64, i64* %329, align 8, !tbaa !2974
  %331 = trunc i64 %330 to i32
  %332 = icmp eq i32 %331, 8
  br i1 %332, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %334 = getelementptr inbounds i64, i64* %55, i64 2
  %335 = load i64, i64* %334, align 8, !tbaa !2976
  %336 = trunc i64 %335 to i32
  %337 = icmp eq i32 %336, 56
  br i1 %337, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %338 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %338(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %339 = getelementptr inbounds i64, i64* %55, i64 3
  %340 = load i64, i64* %339, align 8, !tbaa !2979
  %341 = trunc i64 %340 to i32
  %342 = icmp eq i32 %341, 56
  br i1 %342, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %343 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %343(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %344 = getelementptr inbounds i64, i64* %55, i64 4
  %345 = load i64, i64* %344, align 8, !tbaa !2981
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 32
  br i1 %347, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %348 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %348(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.231, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %349 = icmp eq i64* %57, null
  br i1 %349, label %if_end104, label %if_then103, !prof !50

if_then103:                                       ; preds = %assert_end102
  %350 = load i64, i64* %57, align 8, !tbaa !2985
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 802816
  %353 = getelementptr inbounds i64, i64* %57, i64 1
  %354 = load i64, i64* %353, align 8, !tbaa !2999
  %355 = trunc i64 %354 to i32
  %356 = icmp eq i32 %355, 100352
  %357 = getelementptr inbounds i64, i64* %57, i64 2
  %358 = load i64, i64* %357, align 8, !tbaa !3001
  %359 = trunc i64 %358 to i32
  %360 = icmp eq i32 %359, 1792
  %361 = getelementptr inbounds i64, i64* %57, i64 3
  %362 = load i64, i64* %361, align 8, !tbaa !3004
  %363 = trunc i64 %362 to i32
  %364 = icmp eq i32 %363, 32
  %365 = getelementptr inbounds i64, i64* %57, i64 4
  %366 = load i64, i64* %365, align 8, !tbaa !3006
  %367 = trunc i64 %366 to i32
  %368 = icmp eq i32 %367, 1
  %369 = and i1 %364, %368
  %370 = and i1 %360, %369
  %371 = and i1 %356, %370
  %372 = and i1 %352, %371
  br i1 %372, label %if_end104, label %assert_fail105, !prof !5

if_end104:                                        ; preds = %assert_end102, %if_then103
  %373 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %374 = load i64, i64* %373, align 8
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %assert_end108, label %assert_fail107, !prof !5

assert_fail105:                                   ; preds = %if_then103
  %376 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %376(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.248, i64 0, i64 0))
  ret i32 -1

assert_fail107:                                   ; preds = %if_end104
  %377 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %377(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %if_end104
  %378 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %379 = load i32, i32* %378, align 4
  %380 = icmp eq i32 %379, 1
  br i1 %380, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %381 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %381(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %382 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %383 = load i32, i32* %382, align 4
  %384 = icmp eq i32 %39, %383
  br i1 %384, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %385 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %385(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %386 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %387 = load i32, i32* %386, align 4
  %388 = icmp eq i32 %387, 5
  br i1 %388, label %assert_end116, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.137, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end112
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %391 = load i16, i16* %390, align 2
  %392 = icmp eq i16 %391, 1
  %393 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %394 = load i8, i8* %393, align 1
  %395 = icmp eq i8 %394, 32
  %396 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %397 = load i8, i8* %396, align 1
  %398 = icmp eq i8 %397, 2
  %399 = and i1 %395, %398
  %400 = and i1 %392, %399
  br i1 %400, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %401 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %401(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.138, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %402 = load i64, i64* %61, align 8, !tbaa !3010
  %403 = trunc i64 %402 to i32
  %404 = icmp eq i32 %403, 1
  br i1 %404, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %405 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %405(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.139, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %406 = getelementptr inbounds i64, i64* %61, i64 1
  %407 = load i64, i64* %406, align 8, !tbaa !3024
  %408 = trunc i64 %407 to i32
  %409 = icmp eq i32 %408, 8
  br i1 %409, label %assert_end122, label %assert_fail121, !prof !5

assert_fail121:                                   ; preds = %assert_end120
  %410 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %410(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.249, i64 0, i64 0))
  ret i32 -1

assert_end122:                                    ; preds = %assert_end120
  %411 = getelementptr inbounds i64, i64* %61, i64 2
  %412 = load i64, i64* %411, align 8, !tbaa !3026
  %413 = trunc i64 %412 to i32
  %414 = icmp eq i32 %413, 56
  br i1 %414, label %assert_end124, label %assert_fail123, !prof !5

assert_fail123:                                   ; preds = %assert_end122
  %415 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %415(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.250, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %assert_end122
  %416 = getelementptr inbounds i64, i64* %61, i64 3
  %417 = load i64, i64* %416, align 8, !tbaa !3029
  %418 = trunc i64 %417 to i32
  %419 = icmp eq i32 %418, 56
  br i1 %419, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %420 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %420(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.251, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %421 = getelementptr inbounds i64, i64* %61, i64 4
  %422 = load i64, i64* %421, align 8, !tbaa !3031
  %423 = trunc i64 %422 to i32
  %424 = icmp eq i32 %423, 32
  br i1 %424, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %425 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %425(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.236, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %426 = icmp eq i64* %63, null
  br i1 %426, label %if_end130, label %if_then129, !prof !50

if_then129:                                       ; preds = %assert_end128
  %427 = load i64, i64* %63, align 8, !tbaa !3035
  %428 = trunc i64 %427 to i32
  %429 = icmp eq i32 %428, 802816
  %430 = getelementptr inbounds i64, i64* %63, i64 1
  %431 = load i64, i64* %430, align 8, !tbaa !3049
  %432 = trunc i64 %431 to i32
  %433 = icmp eq i32 %432, 100352
  %434 = getelementptr inbounds i64, i64* %63, i64 2
  %435 = load i64, i64* %434, align 8, !tbaa !3051
  %436 = trunc i64 %435 to i32
  %437 = icmp eq i32 %436, 1792
  %438 = getelementptr inbounds i64, i64* %63, i64 3
  %439 = load i64, i64* %438, align 8, !tbaa !3054
  %440 = trunc i64 %439 to i32
  %441 = icmp eq i32 %440, 32
  %442 = getelementptr inbounds i64, i64* %63, i64 4
  %443 = load i64, i64* %442, align 8, !tbaa !3056
  %444 = trunc i64 %443 to i32
  %445 = icmp eq i32 %444, 1
  %446 = and i1 %441, %445
  %447 = and i1 %437, %446
  %448 = and i1 %433, %447
  %449 = and i1 %429, %448
  br i1 %449, label %if_end130, label %assert_fail131, !prof !5

if_end130:                                        ; preds = %assert_end128, %if_then129
  %450 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %451 = load i64, i64* %450, align 8
  %452 = icmp eq i64 %451, 0
  br i1 %452, label %assert_end134, label %assert_fail133, !prof !5

assert_fail131:                                   ; preds = %if_then129
  %453 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %453(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.252, i64 0, i64 0))
  ret i32 -1

assert_fail133:                                   ; preds = %if_end130
  %454 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %454(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.145, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %if_end130
  %455 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %456 = load i32, i32* %455, align 4
  %457 = icmp eq i32 %456, 1
  br i1 %457, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %458 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %458(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.146, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %459 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %460 = load i32, i32* %459, align 4
  %461 = icmp eq i32 %39, %460
  br i1 %461, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %462 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %462(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %463 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3_compute_(i8* %33, i8* %41, i8* %59, i8* %47, i8* %53, i32 %39)
  ret i32 %463
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = alloca %18, align 8
  %7 = getelementptr inbounds %18, %18* %6, i64 0, i32 0
  store i8* %0, i8** %7, align 8
  %8 = getelementptr inbounds %18, %18* %6, i64 0, i32 1
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %18, %18* %6, i64 0, i32 2
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %18, %18* %6, i64 0, i32 3
  store i8* %3, i8** %10, align 8
  %11 = getelementptr inbounds %18, %18* %6, i64 0, i32 4
  store i8* %4, i8** %11, align 8
  %12 = getelementptr inbounds %18, %18* %6, i64 0, i32 5
  store i32 %5, i32* %12, align 8
  %13 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %14 = bitcast %18* %6 to i8*
  %15 = call i32 %13(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.253, i8* nonnull %14, i32 0)
  ret i32 %15
}

define private i32 @__tvm_parallel_lambda.253(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 223
  %23 = sdiv i32 %22, %21
  %24 = add nsw i32 %0, 1
  %25 = mul nsw i32 %23, %24
  %26 = icmp slt i32 %25, 224
  %27 = select i1 %26, i32 %25, i32 224
  %28 = mul nsw i32 %23, %0
  %29 = icmp slt i32 %28, 224
  %30 = select i1 %29, i32 %28, i32 224
  %31 = icmp slt i32 %30, %27
  br i1 %31, label %for_body, label %for_end, !prof !5

for_body:                                         ; preds = %entry, %for_end12
  %32 = phi i32 [ %348, %for_end12 ], [ %30, %entry ]
  %33 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %34 = tail call i8* %33(i32 1, i32 %19, i64 14336, i32 2, i32 32)
  %35 = bitcast i8* %34 to float*
  %36 = sdiv i32 %32, 28
  %37 = mul i32 %36, 28
  %.decomposed = sub i32 %32, %37
  %38 = mul nsw i32 %.decomposed, 1792
  %39 = shl i32 %36, 11
  %40 = sext i32 %39 to i64
  %41 = sext i32 %38 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end12, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end6
  %42 = mul nsw i32 %32, 3584
  %43 = shl nsw i32 %36, 5
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds float, float* %13, i64 %44
  %46 = bitcast float* %45 to <32 x float>*
  %47 = load <32 x float>, <32 x float>* %46, align 128, !tbaa !3060
  br label %for_begin13.preheader

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv27 = phi i64 [ 0, %for_body ], [ %indvars.iv.next28, %for_end6 ]
  %48 = shl nsw i64 %indvars.iv27, 5
  %49 = getelementptr inbounds float, float* %35, i64 %48
  %50 = bitcast float* %49 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %50, align 128, !tbaa !3063
  %51 = add nuw nsw i64 %48, 1792
  %52 = getelementptr inbounds float, float* %35, i64 %51
  %53 = bitcast float* %52 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %53, align 128, !tbaa !3063
  %54 = shl i64 %indvars.iv27, 4
  %55 = add nsw i64 %54, %41
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_begin7.preheader, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_begin7.preheader ]
  %.lcssa2225 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %313, %for_begin7.preheader ]
  %.lcssa24 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %307, %for_begin7.preheader ]
  %56 = mul nuw nsw i64 %indvars.iv, 50176
  %57 = add nsw i64 %55, %56
  %58 = shl i64 %indvars.iv, 9
  %59 = add nuw nsw i64 %58, %40
  %60 = getelementptr inbounds float, float* %4, i64 %57
  %61 = load float, float* %60, align 4, !tbaa !3066
  %62 = insertelement <32 x float> undef, float %61, i32 0
  %63 = shufflevector <32 x float> %62, <32 x float> undef, <32 x i32> zeroinitializer
  %64 = getelementptr inbounds float, float* %7, i64 %59
  %65 = bitcast float* %64 to <32 x float>*
  %66 = load <32 x float>, <32 x float>* %65, align 128, !tbaa !3069
  %67 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %63, <32 x float> %66, <32 x float> %.lcssa24)
  %68 = add nsw i64 %57, 896
  %69 = getelementptr inbounds float, float* %4, i64 %68
  %70 = load float, float* %69, align 4, !tbaa !3066
  %71 = insertelement <32 x float> undef, float %70, i32 0
  %72 = shufflevector <32 x float> %71, <32 x float> undef, <32 x i32> zeroinitializer
  %73 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %72, <32 x float> %66, <32 x float> %.lcssa2225)
  %74 = or i64 %57, 1
  %75 = getelementptr inbounds float, float* %4, i64 %74
  %76 = load float, float* %75, align 4, !tbaa !3066
  %77 = insertelement <32 x float> undef, float %76, i32 0
  %78 = shufflevector <32 x float> %77, <32 x float> undef, <32 x i32> zeroinitializer
  %79 = or i64 %59, 32
  %80 = getelementptr inbounds float, float* %7, i64 %79
  %81 = bitcast float* %80 to <32 x float>*
  %82 = load <32 x float>, <32 x float>* %81, align 128, !tbaa !3069
  %83 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %78, <32 x float> %82, <32 x float> %67)
  %84 = add nsw i64 %74, 896
  %85 = getelementptr inbounds float, float* %4, i64 %84
  %86 = load float, float* %85, align 4, !tbaa !3066
  %87 = insertelement <32 x float> undef, float %86, i32 0
  %88 = shufflevector <32 x float> %87, <32 x float> undef, <32 x i32> zeroinitializer
  %89 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %88, <32 x float> %82, <32 x float> %73)
  %90 = or i64 %57, 2
  %91 = getelementptr inbounds float, float* %4, i64 %90
  %92 = load float, float* %91, align 4, !tbaa !3066
  %93 = insertelement <32 x float> undef, float %92, i32 0
  %94 = shufflevector <32 x float> %93, <32 x float> undef, <32 x i32> zeroinitializer
  %95 = or i64 %59, 64
  %96 = getelementptr inbounds float, float* %7, i64 %95
  %97 = bitcast float* %96 to <32 x float>*
  %98 = load <32 x float>, <32 x float>* %97, align 128, !tbaa !3069
  %99 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %94, <32 x float> %98, <32 x float> %83)
  %100 = add nsw i64 %90, 896
  %101 = getelementptr inbounds float, float* %4, i64 %100
  %102 = load float, float* %101, align 4, !tbaa !3066
  %103 = insertelement <32 x float> undef, float %102, i32 0
  %104 = shufflevector <32 x float> %103, <32 x float> undef, <32 x i32> zeroinitializer
  %105 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %104, <32 x float> %98, <32 x float> %89)
  %106 = or i64 %57, 3
  %107 = getelementptr inbounds float, float* %4, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !3066
  %109 = insertelement <32 x float> undef, float %108, i32 0
  %110 = shufflevector <32 x float> %109, <32 x float> undef, <32 x i32> zeroinitializer
  %111 = or i64 %59, 96
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = bitcast float* %112 to <32 x float>*
  %114 = load <32 x float>, <32 x float>* %113, align 128, !tbaa !3069
  %115 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %110, <32 x float> %114, <32 x float> %99)
  %116 = add nsw i64 %106, 896
  %117 = getelementptr inbounds float, float* %4, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !3066
  %119 = insertelement <32 x float> undef, float %118, i32 0
  %120 = shufflevector <32 x float> %119, <32 x float> undef, <32 x i32> zeroinitializer
  %121 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %120, <32 x float> %114, <32 x float> %105)
  %122 = or i64 %57, 4
  %123 = getelementptr inbounds float, float* %4, i64 %122
  %124 = load float, float* %123, align 4, !tbaa !3066
  %125 = insertelement <32 x float> undef, float %124, i32 0
  %126 = shufflevector <32 x float> %125, <32 x float> undef, <32 x i32> zeroinitializer
  %127 = or i64 %59, 128
  %128 = getelementptr inbounds float, float* %7, i64 %127
  %129 = bitcast float* %128 to <32 x float>*
  %130 = load <32 x float>, <32 x float>* %129, align 128, !tbaa !3069
  %131 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %126, <32 x float> %130, <32 x float> %115)
  %132 = add nsw i64 %122, 896
  %133 = getelementptr inbounds float, float* %4, i64 %132
  %134 = load float, float* %133, align 4, !tbaa !3066
  %135 = insertelement <32 x float> undef, float %134, i32 0
  %136 = shufflevector <32 x float> %135, <32 x float> undef, <32 x i32> zeroinitializer
  %137 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %136, <32 x float> %130, <32 x float> %121)
  %138 = or i64 %57, 5
  %139 = getelementptr inbounds float, float* %4, i64 %138
  %140 = load float, float* %139, align 4, !tbaa !3066
  %141 = insertelement <32 x float> undef, float %140, i32 0
  %142 = shufflevector <32 x float> %141, <32 x float> undef, <32 x i32> zeroinitializer
  %143 = or i64 %59, 160
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = bitcast float* %144 to <32 x float>*
  %146 = load <32 x float>, <32 x float>* %145, align 128, !tbaa !3069
  %147 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %142, <32 x float> %146, <32 x float> %131)
  %148 = add nsw i64 %138, 896
  %149 = getelementptr inbounds float, float* %4, i64 %148
  %150 = load float, float* %149, align 4, !tbaa !3066
  %151 = insertelement <32 x float> undef, float %150, i32 0
  %152 = shufflevector <32 x float> %151, <32 x float> undef, <32 x i32> zeroinitializer
  %153 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %152, <32 x float> %146, <32 x float> %137)
  %154 = or i64 %57, 6
  %155 = getelementptr inbounds float, float* %4, i64 %154
  %156 = load float, float* %155, align 4, !tbaa !3066
  %157 = insertelement <32 x float> undef, float %156, i32 0
  %158 = shufflevector <32 x float> %157, <32 x float> undef, <32 x i32> zeroinitializer
  %159 = or i64 %59, 192
  %160 = getelementptr inbounds float, float* %7, i64 %159
  %161 = bitcast float* %160 to <32 x float>*
  %162 = load <32 x float>, <32 x float>* %161, align 128, !tbaa !3069
  %163 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %158, <32 x float> %162, <32 x float> %147)
  %164 = add nsw i64 %154, 896
  %165 = getelementptr inbounds float, float* %4, i64 %164
  %166 = load float, float* %165, align 4, !tbaa !3066
  %167 = insertelement <32 x float> undef, float %166, i32 0
  %168 = shufflevector <32 x float> %167, <32 x float> undef, <32 x i32> zeroinitializer
  %169 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %168, <32 x float> %162, <32 x float> %153)
  %170 = or i64 %57, 7
  %171 = getelementptr inbounds float, float* %4, i64 %170
  %172 = load float, float* %171, align 4, !tbaa !3066
  %173 = insertelement <32 x float> undef, float %172, i32 0
  %174 = shufflevector <32 x float> %173, <32 x float> undef, <32 x i32> zeroinitializer
  %175 = or i64 %59, 224
  %176 = getelementptr inbounds float, float* %7, i64 %175
  %177 = bitcast float* %176 to <32 x float>*
  %178 = load <32 x float>, <32 x float>* %177, align 128, !tbaa !3069
  %179 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %174, <32 x float> %178, <32 x float> %163)
  %180 = add nsw i64 %170, 896
  %181 = getelementptr inbounds float, float* %4, i64 %180
  %182 = load float, float* %181, align 4, !tbaa !3066
  %183 = insertelement <32 x float> undef, float %182, i32 0
  %184 = shufflevector <32 x float> %183, <32 x float> undef, <32 x i32> zeroinitializer
  %185 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %184, <32 x float> %178, <32 x float> %169)
  %186 = or i64 %57, 8
  %187 = getelementptr inbounds float, float* %4, i64 %186
  %188 = load float, float* %187, align 4, !tbaa !3066
  %189 = insertelement <32 x float> undef, float %188, i32 0
  %190 = shufflevector <32 x float> %189, <32 x float> undef, <32 x i32> zeroinitializer
  %191 = or i64 %59, 256
  %192 = getelementptr inbounds float, float* %7, i64 %191
  %193 = bitcast float* %192 to <32 x float>*
  %194 = load <32 x float>, <32 x float>* %193, align 128, !tbaa !3069
  %195 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %190, <32 x float> %194, <32 x float> %179)
  %196 = add nsw i64 %186, 896
  %197 = getelementptr inbounds float, float* %4, i64 %196
  %198 = load float, float* %197, align 4, !tbaa !3066
  %199 = insertelement <32 x float> undef, float %198, i32 0
  %200 = shufflevector <32 x float> %199, <32 x float> undef, <32 x i32> zeroinitializer
  %201 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %200, <32 x float> %194, <32 x float> %185)
  %202 = or i64 %57, 9
  %203 = getelementptr inbounds float, float* %4, i64 %202
  %204 = load float, float* %203, align 4, !tbaa !3066
  %205 = insertelement <32 x float> undef, float %204, i32 0
  %206 = shufflevector <32 x float> %205, <32 x float> undef, <32 x i32> zeroinitializer
  %207 = or i64 %59, 288
  %208 = getelementptr inbounds float, float* %7, i64 %207
  %209 = bitcast float* %208 to <32 x float>*
  %210 = load <32 x float>, <32 x float>* %209, align 128, !tbaa !3069
  %211 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %206, <32 x float> %210, <32 x float> %195)
  %212 = add nsw i64 %202, 896
  %213 = getelementptr inbounds float, float* %4, i64 %212
  %214 = load float, float* %213, align 4, !tbaa !3066
  %215 = insertelement <32 x float> undef, float %214, i32 0
  %216 = shufflevector <32 x float> %215, <32 x float> undef, <32 x i32> zeroinitializer
  %217 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %216, <32 x float> %210, <32 x float> %201)
  %218 = or i64 %57, 10
  %219 = getelementptr inbounds float, float* %4, i64 %218
  %220 = load float, float* %219, align 4, !tbaa !3066
  %221 = insertelement <32 x float> undef, float %220, i32 0
  %222 = shufflevector <32 x float> %221, <32 x float> undef, <32 x i32> zeroinitializer
  %223 = or i64 %59, 320
  %224 = getelementptr inbounds float, float* %7, i64 %223
  %225 = bitcast float* %224 to <32 x float>*
  %226 = load <32 x float>, <32 x float>* %225, align 128, !tbaa !3069
  %227 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %222, <32 x float> %226, <32 x float> %211)
  %228 = add nsw i64 %218, 896
  %229 = getelementptr inbounds float, float* %4, i64 %228
  %230 = load float, float* %229, align 4, !tbaa !3066
  %231 = insertelement <32 x float> undef, float %230, i32 0
  %232 = shufflevector <32 x float> %231, <32 x float> undef, <32 x i32> zeroinitializer
  %233 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %232, <32 x float> %226, <32 x float> %217)
  %234 = or i64 %57, 11
  %235 = getelementptr inbounds float, float* %4, i64 %234
  %236 = load float, float* %235, align 4, !tbaa !3066
  %237 = insertelement <32 x float> undef, float %236, i32 0
  %238 = shufflevector <32 x float> %237, <32 x float> undef, <32 x i32> zeroinitializer
  %239 = or i64 %59, 352
  %240 = getelementptr inbounds float, float* %7, i64 %239
  %241 = bitcast float* %240 to <32 x float>*
  %242 = load <32 x float>, <32 x float>* %241, align 128, !tbaa !3069
  %243 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %238, <32 x float> %242, <32 x float> %227)
  %244 = add nsw i64 %234, 896
  %245 = getelementptr inbounds float, float* %4, i64 %244
  %246 = load float, float* %245, align 4, !tbaa !3066
  %247 = insertelement <32 x float> undef, float %246, i32 0
  %248 = shufflevector <32 x float> %247, <32 x float> undef, <32 x i32> zeroinitializer
  %249 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %242, <32 x float> %233)
  %250 = or i64 %57, 12
  %251 = getelementptr inbounds float, float* %4, i64 %250
  %252 = load float, float* %251, align 4, !tbaa !3066
  %253 = insertelement <32 x float> undef, float %252, i32 0
  %254 = shufflevector <32 x float> %253, <32 x float> undef, <32 x i32> zeroinitializer
  %255 = or i64 %59, 384
  %256 = getelementptr inbounds float, float* %7, i64 %255
  %257 = bitcast float* %256 to <32 x float>*
  %258 = load <32 x float>, <32 x float>* %257, align 128, !tbaa !3069
  %259 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %254, <32 x float> %258, <32 x float> %243)
  %260 = add nsw i64 %250, 896
  %261 = getelementptr inbounds float, float* %4, i64 %260
  %262 = load float, float* %261, align 4, !tbaa !3066
  %263 = insertelement <32 x float> undef, float %262, i32 0
  %264 = shufflevector <32 x float> %263, <32 x float> undef, <32 x i32> zeroinitializer
  %265 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %264, <32 x float> %258, <32 x float> %249)
  %266 = or i64 %57, 13
  %267 = getelementptr inbounds float, float* %4, i64 %266
  %268 = load float, float* %267, align 4, !tbaa !3066
  %269 = insertelement <32 x float> undef, float %268, i32 0
  %270 = shufflevector <32 x float> %269, <32 x float> undef, <32 x i32> zeroinitializer
  %271 = or i64 %59, 416
  %272 = getelementptr inbounds float, float* %7, i64 %271
  %273 = bitcast float* %272 to <32 x float>*
  %274 = load <32 x float>, <32 x float>* %273, align 128, !tbaa !3069
  %275 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %270, <32 x float> %274, <32 x float> %259)
  %276 = add nsw i64 %266, 896
  %277 = getelementptr inbounds float, float* %4, i64 %276
  %278 = load float, float* %277, align 4, !tbaa !3066
  %279 = insertelement <32 x float> undef, float %278, i32 0
  %280 = shufflevector <32 x float> %279, <32 x float> undef, <32 x i32> zeroinitializer
  %281 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %280, <32 x float> %274, <32 x float> %265)
  %282 = or i64 %57, 14
  %283 = getelementptr inbounds float, float* %4, i64 %282
  %284 = load float, float* %283, align 4, !tbaa !3066
  %285 = insertelement <32 x float> undef, float %284, i32 0
  %286 = shufflevector <32 x float> %285, <32 x float> undef, <32 x i32> zeroinitializer
  %287 = or i64 %59, 448
  %288 = getelementptr inbounds float, float* %7, i64 %287
  %289 = bitcast float* %288 to <32 x float>*
  %290 = load <32 x float>, <32 x float>* %289, align 128, !tbaa !3069
  %291 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %286, <32 x float> %290, <32 x float> %275)
  %292 = add nsw i64 %282, 896
  %293 = getelementptr inbounds float, float* %4, i64 %292
  %294 = load float, float* %293, align 4, !tbaa !3066
  %295 = insertelement <32 x float> undef, float %294, i32 0
  %296 = shufflevector <32 x float> %295, <32 x float> undef, <32 x i32> zeroinitializer
  %297 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %296, <32 x float> %290, <32 x float> %281)
  %298 = or i64 %57, 15
  %299 = getelementptr inbounds float, float* %4, i64 %298
  %300 = load float, float* %299, align 4, !tbaa !3066
  %301 = insertelement <32 x float> undef, float %300, i32 0
  %302 = shufflevector <32 x float> %301, <32 x float> undef, <32 x i32> zeroinitializer
  %303 = or i64 %59, 480
  %304 = getelementptr inbounds float, float* %7, i64 %303
  %305 = bitcast float* %304 to <32 x float>*
  %306 = load <32 x float>, <32 x float>* %305, align 128, !tbaa !3069
  %307 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %302, <32 x float> %306, <32 x float> %291)
  %308 = add nsw i64 %298, 896
  %309 = getelementptr inbounds float, float* %4, i64 %308
  %310 = load float, float* %309, align 4, !tbaa !3066
  %311 = insertelement <32 x float> undef, float %310, i32 0
  %312 = shufflevector <32 x float> %311, <32 x float> undef, <32 x i32> zeroinitializer
  %313 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %312, <32 x float> %306, <32 x float> %297)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond, label %for_end6, label %for_begin7.preheader, !prof !50

for_end6:                                         ; preds = %for_begin7.preheader
  store <32 x float> %307, <32 x float>* %50, align 128, !tbaa !3063
  store <32 x float> %313, <32 x float>* %53, align 128, !tbaa !3063
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %exitcond29 = icmp eq i64 %indvars.iv.next28, 56
  br i1 %exitcond29, label %for_begin10.preheader, label %for_body2, !prof !50

for_begin13.preheader:                            ; preds = %for_begin13.preheader, %for_begin10.preheader
  %indvars.iv33 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next34, %for_begin13.preheader ]
  %314 = shl nsw i64 %indvars.iv33, 5
  %315 = trunc i64 %314 to i32
  %316 = add i32 %42, %315
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds float, float* %16, i64 %317
  %319 = bitcast float* %318 to <32 x float>*
  %320 = load <32 x float>, <32 x float>* %319, align 128, !tbaa !3072
  %321 = getelementptr inbounds float, float* %35, i64 %314
  %322 = bitcast float* %321 to <32 x float>*
  %323 = load <32 x float>, <32 x float>* %322, align 128, !tbaa !3063
  %324 = fadd <32 x float> %47, %323
  %325 = fadd <32 x float> %320, %324
  %326 = fcmp ogt <32 x float> %325, zeroinitializer
  %327 = select <32 x i1> %326, <32 x float> %325, <32 x float> zeroinitializer
  %328 = getelementptr inbounds float, float* %10, i64 %317
  %329 = bitcast float* %328 to <32 x float>*
  store <32 x float> %327, <32 x float>* %329, align 128, !tbaa !3075
  %330 = add nuw nsw i64 %314, 1792
  %331 = trunc i64 %330 to i32
  %332 = add i32 %42, %331
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds float, float* %16, i64 %333
  %335 = bitcast float* %334 to <32 x float>*
  %336 = load <32 x float>, <32 x float>* %335, align 128, !tbaa !3072
  %337 = getelementptr inbounds float, float* %35, i64 %330
  %338 = bitcast float* %337 to <32 x float>*
  %339 = load <32 x float>, <32 x float>* %338, align 128, !tbaa !3063
  %340 = fadd <32 x float> %47, %339
  %341 = fadd <32 x float> %336, %340
  %342 = fcmp ogt <32 x float> %341, zeroinitializer
  %343 = select <32 x i1> %342, <32 x float> %341, <32 x float> zeroinitializer
  %344 = getelementptr inbounds float, float* %10, i64 %333
  %345 = bitcast float* %344 to <32 x float>*
  store <32 x float> %343, <32 x float>* %345, align 128, !tbaa !3075
  %indvars.iv.next34 = add nuw nsw i64 %indvars.iv33, 1
  %exitcond35 = icmp eq i64 %indvars.iv.next34, 56
  br i1 %exitcond35, label %for_end12, label %for_begin13.preheader, !prof !50

for_end12:                                        ; preds = %for_begin13.preheader
  %346 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %347 = tail call i32 %346(i32 1, i32 %19, i8* nonnull %34)
  %348 = add nsw i32 %32, 1
  %349 = icmp slt i32 %348, %27
  br i1 %349, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_max_pool2d(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.254, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !3078
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.255, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !3092
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.256, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !3094
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !3108
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 4
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.90, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !3110
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 112
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.257, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !3113
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 112
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.258, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !3115
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 16
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !3119
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 802816
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !3133
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 200704
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !3135
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 1792
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !3138
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 16
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !3140
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.259, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !3144
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !3158
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 4
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !3160
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 56
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !3163
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 56
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !3165
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 16
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !3169
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 200704
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !3183
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 50176
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !3185
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 896
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !3188
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 16
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !3190
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.260, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_nn_max_pool2d_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_max_pool2d_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %19, align 8
  %3 = getelementptr inbounds %19, %19* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %19, %19* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %19* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.261, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.261(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 223
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 224
  %15 = select i1 %14, i32 %13, i32 224
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 224
  %18 = select i1 %17, i32 %16, i32 224
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv10, 896
  %23 = trunc i64 %indvars.iv10 to i32
  %24 = srem i32 %23, 56
  %25 = shl nsw i32 %24, 1
  %26 = trunc i64 %indvars.iv10 to i32
  %27 = mul i32 %26, 3584
  %28 = add i32 %27, -1808
  %29 = icmp sgt i32 %24, 0
  %30 = or i32 %25, 1
  %31 = icmp sgt i32 %30, 0
  %32 = icmp sgt i32 %24, -1
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %if_end.8, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %if_end.8 ]
  %33 = shl i64 %indvars.iv, 4
  %34 = add nsw i64 %33, %22
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = bitcast float* %35 to <16 x float>*
  store <16 x float> <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>, <16 x float>* %36, align 64, !tbaa !3194
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %37 = shl i32 %indvars.iv.tr, 5
  %38 = add i32 %28, %37
  %39 = icmp ne i64 %indvars.iv, 0
  %40 = and i1 %29, %39
  br i1 %40, label %if_then, label %if_end

for_end3:                                         ; preds = %if_end.8
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %41 = icmp slt i64 %indvars.iv.next11, %21
  br i1 %41, label %for_begin1.preheader, label %for_end, !prof !5

if_then:                                          ; preds = %for_body2
  %42 = sext i32 %38 to i64
  %43 = getelementptr inbounds float, float* %7, i64 %42
  %44 = bitcast float* %43 to <16 x float>*
  %45 = load <16 x float>, <16 x float>* %44, align 64, !tbaa !3197
  br label %if_end

if_end:                                           ; preds = %for_body2, %if_then
  %46 = phi <16 x float> [ %45, %if_then ], [ <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>, %for_body2 ]
  %47 = fcmp olt <16 x float> %46, <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>
  %48 = select <16 x i1> %47, <16 x float> <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>, <16 x float> %46
  br i1 %29, label %if_then.2, label %if_end.2

if_then.2:                                        ; preds = %if_end
  %49 = add i32 %38, 16
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds float, float* %7, i64 %50
  %52 = bitcast float* %51 to <16 x float>*
  %53 = load <16 x float>, <16 x float>* %52, align 64, !tbaa !3197
  %54 = fcmp ogt <16 x float> %48, %53
  %55 = select <16 x i1> %54, <16 x float> %48, <16 x float> %53
  %56 = add i32 %38, 32
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds float, float* %7, i64 %57
  %59 = bitcast float* %58 to <16 x float>*
  %60 = load <16 x float>, <16 x float>* %59, align 64, !tbaa !3197
  br label %if_end.2

if_end.2:                                         ; preds = %if_end, %if_then.2
  %61 = phi <16 x float> [ %55, %if_then.2 ], [ %48, %if_end ]
  %62 = phi <16 x float> [ %60, %if_then.2 ], [ <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>, %if_end ]
  %63 = fcmp ogt <16 x float> %61, %62
  %64 = select <16 x i1> %63, <16 x float> %61, <16 x float> %62
  %65 = and i1 %31, %39
  br i1 %65, label %if_then.3, label %if_end.3

if_then.3:                                        ; preds = %if_end.2
  %66 = add i32 %38, 1792
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds float, float* %7, i64 %67
  %69 = bitcast float* %68 to <16 x float>*
  %70 = load <16 x float>, <16 x float>* %69, align 64, !tbaa !3197
  br label %if_end.3

if_end.3:                                         ; preds = %if_then.3, %if_end.2
  %71 = phi <16 x float> [ %70, %if_then.3 ], [ <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>, %if_end.2 ]
  %72 = fcmp ogt <16 x float> %64, %71
  %73 = select <16 x i1> %72, <16 x float> %64, <16 x float> %71
  br i1 %31, label %if_then.5, label %if_end.4

if_end.4:                                         ; preds = %if_end.3
  %74 = fcmp ogt <16 x float> %73, <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>
  %75 = select <16 x i1> %74, <16 x float> %73, <16 x float> <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>
  br label %if_end.5

if_then.5:                                        ; preds = %if_end.3
  %76 = add i32 %27, %37
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds float, float* %7, i64 %77
  %79 = bitcast float* %78 to <16 x float>*
  %80 = load <16 x float>, <16 x float>* %79, align 64, !tbaa !3197
  %81 = fcmp ogt <16 x float> %73, %80
  %82 = select <16 x i1> %81, <16 x float> %73, <16 x float> %80
  %83 = add i32 %38, 1824
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds float, float* %7, i64 %84
  %86 = bitcast float* %85 to <16 x float>*
  %87 = load <16 x float>, <16 x float>* %86, align 64, !tbaa !3197
  br label %if_end.5

if_end.5:                                         ; preds = %if_end.4, %if_then.5
  %88 = phi <16 x float> [ %82, %if_then.5 ], [ %75, %if_end.4 ]
  %89 = phi <16 x float> [ %87, %if_then.5 ], [ <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>, %if_end.4 ]
  %90 = fcmp ogt <16 x float> %88, %89
  %91 = select <16 x i1> %90, <16 x float> %88, <16 x float> %89
  %92 = and i1 %32, %39
  br i1 %92, label %if_then.6, label %if_end.6

if_then.6:                                        ; preds = %if_end.5
  %93 = add i32 %38, 3584
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds float, float* %7, i64 %94
  %96 = bitcast float* %95 to <16 x float>*
  %97 = load <16 x float>, <16 x float>* %96, align 64, !tbaa !3197
  br label %if_end.6

if_end.6:                                         ; preds = %if_then.6, %if_end.5
  %98 = phi <16 x float> [ %97, %if_then.6 ], [ <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>, %if_end.5 ]
  %99 = fcmp ogt <16 x float> %91, %98
  %100 = select <16 x i1> %99, <16 x float> %91, <16 x float> %98
  br i1 %32, label %if_then.8, label %if_end.7

if_end.7:                                         ; preds = %if_end.6
  %101 = fcmp ogt <16 x float> %100, <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>
  %102 = select <16 x i1> %101, <16 x float> %100, <16 x float> <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>
  br label %if_end.8

if_then.8:                                        ; preds = %if_end.6
  %103 = add i32 %38, 3600
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds float, float* %7, i64 %104
  %106 = bitcast float* %105 to <16 x float>*
  %107 = load <16 x float>, <16 x float>* %106, align 64, !tbaa !3197
  %108 = fcmp ogt <16 x float> %100, %107
  %109 = select <16 x i1> %108, <16 x float> %100, <16 x float> %107
  %110 = add i32 %38, 3616
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = bitcast float* %112 to <16 x float>*
  %114 = load <16 x float>, <16 x float>* %113, align 64, !tbaa !3197
  br label %if_end.8

if_end.8:                                         ; preds = %if_end.7, %if_then.8
  %115 = phi <16 x float> [ %109, %if_then.8 ], [ %102, %if_end.7 ]
  %116 = phi <16 x float> [ %114, %if_then.8 ], [ <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>, %if_end.7 ]
  %117 = fcmp ogt <16 x float> %115, %116
  %118 = select <16 x i1> %117, <16 x float> %115, <16 x float> %116
  store <16 x float> %118, <16 x float>* %36, align 64, !tbaa !3194
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 56
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.262, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !3200
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !3214
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !3217
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.263, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !3219
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.264, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.265, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.266, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !3221
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !3235
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 1
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.29, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !3237
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 56
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !3240
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 56
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !3242
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 64
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.267, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !3246
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 200704
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !3260
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 200704
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !3262
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 3584
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !3265
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 64
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !3267
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.268, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !3271
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 8
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !3285
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !3287
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 3
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !3290
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 3
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.105, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !3292
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 64
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.92, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !3296
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !3298
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 4608
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !3312
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 4608
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !3314
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 1536
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !3317
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 512
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !3319
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 8
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !3323
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([273 x i8], [273 x i8]* @.str.269, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !3325
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !3339
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 8
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !3341
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !3344
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !3346
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 8
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !3350
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 64
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !3364
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 8
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !3366
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 8
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !3369
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 8
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !3371
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([228 x i8], [228 x i8]* @.str.270, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !3375
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !3389
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 8
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !3391
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 56
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !3394
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 56
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !3396
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 8
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !3400
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 200704
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !3414
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 25088
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !3416
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 448
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !3419
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 8
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !3421
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.271, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %6 = tail call i8* %5(i32 1, i32 %4, i64 861184, i32 2, i32 32)
  %7 = alloca %20, align 8
  %8 = getelementptr inbounds %20, %20* %7, i64 0, i32 0
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds %20, %20* %7, i64 0, i32 1
  store i8* %0, i8** %9, align 8
  %10 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %11 = bitcast %20* %7 to i8*
  %12 = call i32 %10(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.272, i8* nonnull %11, i32 0)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %12, %entry ], [ 0, %call_end2 ], [ %22, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %14 = alloca %21, align 8
  %15 = getelementptr inbounds %21, %21* %14, i64 0, i32 0
  store i8* %6, i8** %15, align 8
  %16 = getelementptr inbounds %21, %21* %14, i64 0, i32 1
  store i8* %1, i8** %16, align 8
  %17 = getelementptr inbounds %21, %21* %14, i64 0, i32 2
  store i8* %2, i8** %17, align 8
  %18 = getelementptr inbounds %21, %21* %14, i64 0, i32 3
  store i8* %3, i8** %18, align 8
  %19 = getelementptr inbounds %21, %21* %14, i64 0, i32 4
  store i32 %4, i32* %19, align 8
  %20 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %21 = bitcast %21* %14 to i8*
  %22 = call i32 %20(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.273, i8* nonnull %21, i32 0)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %24 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %25 = call i32 %24(i32 1, i32 %4, i8* %6)
  br label %call_fail
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.272(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 57
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 58
  %15 = select i1 %14, i32 %13, i32 58
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 58
  %18 = select i1 %17, i32 %16, i32 58
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv6 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next7, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv6, 3712
  %23 = trunc i64 %indvars.iv6 to i32
  %.off = add i32 %23, -1
  %24 = icmp ult i32 %.off, 56
  %25 = mul i64 %indvars.iv6, 3584
  %26 = add i64 %25, 4294963648
  br i1 %24, label %for_body2.us, label %for_body2.preheader

for_body2.preheader:                              ; preds = %for_begin1.preheader
  %27 = add i32 %18, %indvar
  %28 = mul i32 %27, 3712
  %29 = sext i32 %28 to i64
  %scevgep = getelementptr float, float* %4, i64 %29
  %scevgep5 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 128 %scevgep5, i8 0, i64 14848, i1 false)
  br label %for_end3

for_body2.us:                                     ; preds = %for_begin1.preheader, %if_end.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %if_end.us ], [ 0, %for_begin1.preheader ]
  %30 = shl nsw i64 %indvars.iv, 6
  %31 = add nsw i64 %30, %22
  %32 = trunc i64 %indvars.iv to i32
  switch i32 %32, label %if_then.us [
    i32 57, label %if_end.us
    i32 0, label %if_end.us
  ]

if_then.us:                                       ; preds = %for_body2.us
  %33 = add i64 %26, %30
  %sext = shl i64 %33, 32
  %34 = ashr exact i64 %sext, 32
  %35 = getelementptr inbounds float, float* %7, i64 %34
  %36 = bitcast float* %35 to <64 x float>*
  %37 = load <64 x float>, <64 x float>* %36, align 128, !tbaa !3425
  br label %if_end.us

if_end.us:                                        ; preds = %if_then.us, %for_body2.us, %for_body2.us
  %38 = phi <64 x float> [ %37, %if_then.us ], [ zeroinitializer, %for_body2.us ], [ zeroinitializer, %for_body2.us ]
  %39 = getelementptr inbounds float, float* %4, i64 %31
  %40 = bitcast float* %39 to <64 x float>*
  store <64 x float> %38, <64 x float>* %40, align 128, !tbaa !3428
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 58
  br i1 %exitcond, label %for_end3, label %for_body2.us, !prof !50

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %if_end.us, %for_body2.preheader
  %indvars.iv.next7 = add nsw i64 %indvars.iv6, 1
  %41 = icmp slt i64 %indvars.iv.next7, %21
  %indvar.next = add i32 %indvar, 1
  br i1 %41, label %for_begin1.preheader, label %for_end, !prof !5
}

define private i32 @__tvm_parallel_lambda.273(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = alloca [14 x <8 x float>], align 32
  %4 = bitcast [14 x <8 x float>]* %3 to i8*
  %.sub = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0
  %5 = bitcast i8* %2 to float**
  %6 = load float*, float** %5, align 8
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to float**
  %9 = load float*, float** %8, align 8
  %10 = getelementptr inbounds i8, i8* %2, i64 16
  %11 = bitcast i8* %10 to float**
  %12 = load float*, float** %11, align 8
  %13 = getelementptr inbounds i8, i8* %2, i64 24
  %14 = bitcast i8* %13 to float**
  %15 = load float*, float** %14, align 8
  %16 = getelementptr inbounds i8, i8* %2, i64 32
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 447
  %22 = sdiv i32 %21, %20
  %23 = add nsw i32 %0, 1
  %24 = mul nsw i32 %22, %23
  %25 = icmp slt i32 %24, 448
  %26 = select i1 %25, i32 %24, i32 448
  %27 = mul nsw i32 %22, %0
  %28 = icmp slt i32 %27, 448
  %29 = select i1 %28, i32 %27, i32 448
  %30 = icmp slt i32 %29, %26
  br i1 %30, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %31 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 8
  %32 = bitcast float* %31 to <8 x float>*
  %33 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 16
  %34 = bitcast float* %33 to <8 x float>*
  %35 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 24
  %36 = bitcast float* %35 to <8 x float>*
  %37 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 32
  %38 = bitcast float* %37 to <8 x float>*
  %39 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 40
  %40 = bitcast float* %39 to <8 x float>*
  %41 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 48
  %42 = bitcast float* %41 to <8 x float>*
  %43 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 56
  %44 = bitcast float* %43 to <8 x float>*
  %45 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 64
  %46 = bitcast float* %45 to <8 x float>*
  %47 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 72
  %48 = bitcast float* %47 to <8 x float>*
  %49 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 80
  %50 = bitcast float* %49 to <8 x float>*
  %51 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 88
  %52 = bitcast float* %51 to <8 x float>*
  %53 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 96
  %54 = bitcast float* %53 to <8 x float>*
  %55 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 104
  %56 = bitcast float* %55 to <8 x float>*
  %57 = sext i32 %29 to i64
  %58 = sext i32 %26 to i64
  %59 = bitcast [14 x <8 x float>]* %3 to i8*
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_begin16.preheader
  %indvars.iv135 = phi i64 [ %57, %for_body.lr.ph ], [ %indvars.iv.next136, %for_begin16.preheader ]
  %60 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %61 = tail call i8* %60(i32 1, i32 %18, i64 1792, i32 2, i32 32)
  %62 = trunc i64 %indvars.iv135 to i32
  %63 = sdiv i32 %62, 56
  %64 = mul i32 %63, 56
  %.decomposed = sub i32 %62, %64
  %65 = mul nsw i32 %63, 4608
  %66 = sext i32 %65 to i64
  br label %for_body2

for_end:                                          ; preds = %for_begin16.preheader, %entry
  ret i32 0

for_begin16.preheader:                            ; preds = %for_begin13.preheader
  %67 = mul nsw i64 %indvars.iv135, 448
  %68 = shl nsw i32 %63, 3
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds float, float* %15, i64 %69
  %71 = bitcast float* %70 to <8 x float>*
  %72 = load <8 x float>, <8 x float>* %71, align 32, !tbaa !3431
  %73 = bitcast i8* %61 to <8 x float>*
  %74 = load <8 x float>, <8 x float>* %73, align 32, !tbaa !3434
  %75 = fadd <8 x float> %72, %74
  %76 = fcmp ogt <8 x float> %75, zeroinitializer
  %77 = select <8 x i1> %76, <8 x float> %75, <8 x float> zeroinitializer
  %78 = getelementptr inbounds float, float* %12, i64 %67
  %79 = bitcast float* %78 to <8 x float>*
  store <8 x float> %77, <8 x float>* %79, align 32, !tbaa !3437
  %80 = getelementptr inbounds i8, i8* %61, i64 32
  %81 = bitcast i8* %80 to <8 x float>*
  %82 = load <8 x float>, <8 x float>* %81, align 32, !tbaa !3434
  %83 = fadd <8 x float> %72, %82
  %84 = fcmp ogt <8 x float> %83, zeroinitializer
  %85 = select <8 x i1> %84, <8 x float> %83, <8 x float> zeroinitializer
  %86 = mul i64 %indvars.iv135, 1924145348608
  %sext = ashr exact i64 %86, 32
  %87 = or i64 %sext, 8
  %88 = getelementptr inbounds float, float* %12, i64 %87
  %89 = bitcast float* %88 to <8 x float>*
  store <8 x float> %85, <8 x float>* %89, align 32, !tbaa !3437
  %90 = getelementptr inbounds i8, i8* %61, i64 64
  %91 = bitcast i8* %90 to <8 x float>*
  %92 = load <8 x float>, <8 x float>* %91, align 32, !tbaa !3434
  %93 = fadd <8 x float> %72, %92
  %94 = fcmp ogt <8 x float> %93, zeroinitializer
  %95 = select <8 x i1> %94, <8 x float> %93, <8 x float> zeroinitializer
  %96 = mul i64 %indvars.iv135, 1924145348608
  %sext137 = ashr exact i64 %96, 32
  %97 = or i64 %sext137, 16
  %98 = getelementptr inbounds float, float* %12, i64 %97
  %99 = bitcast float* %98 to <8 x float>*
  store <8 x float> %95, <8 x float>* %99, align 32, !tbaa !3437
  %100 = getelementptr inbounds i8, i8* %61, i64 96
  %101 = bitcast i8* %100 to <8 x float>*
  %102 = load <8 x float>, <8 x float>* %101, align 32, !tbaa !3434
  %103 = fadd <8 x float> %72, %102
  %104 = fcmp ogt <8 x float> %103, zeroinitializer
  %105 = select <8 x i1> %104, <8 x float> %103, <8 x float> zeroinitializer
  %106 = mul i64 %indvars.iv135, 1924145348608
  %sext138 = ashr exact i64 %106, 32
  %107 = or i64 %sext138, 24
  %108 = getelementptr inbounds float, float* %12, i64 %107
  %109 = bitcast float* %108 to <8 x float>*
  store <8 x float> %105, <8 x float>* %109, align 32, !tbaa !3437
  %110 = getelementptr inbounds i8, i8* %61, i64 128
  %111 = bitcast i8* %110 to <8 x float>*
  %112 = load <8 x float>, <8 x float>* %111, align 32, !tbaa !3434
  %113 = fadd <8 x float> %72, %112
  %114 = fcmp ogt <8 x float> %113, zeroinitializer
  %115 = select <8 x i1> %114, <8 x float> %113, <8 x float> zeroinitializer
  %116 = mul i64 %indvars.iv135, 1924145348608
  %sext139 = ashr exact i64 %116, 32
  %117 = or i64 %sext139, 32
  %118 = getelementptr inbounds float, float* %12, i64 %117
  %119 = bitcast float* %118 to <8 x float>*
  store <8 x float> %115, <8 x float>* %119, align 32, !tbaa !3437
  %120 = getelementptr inbounds i8, i8* %61, i64 160
  %121 = bitcast i8* %120 to <8 x float>*
  %122 = load <8 x float>, <8 x float>* %121, align 32, !tbaa !3434
  %123 = fadd <8 x float> %72, %122
  %124 = fcmp ogt <8 x float> %123, zeroinitializer
  %125 = select <8 x i1> %124, <8 x float> %123, <8 x float> zeroinitializer
  %126 = mul i64 %indvars.iv135, 1924145348608
  %sext140 = ashr exact i64 %126, 32
  %127 = or i64 %sext140, 40
  %128 = getelementptr inbounds float, float* %12, i64 %127
  %129 = bitcast float* %128 to <8 x float>*
  store <8 x float> %125, <8 x float>* %129, align 32, !tbaa !3437
  %130 = getelementptr inbounds i8, i8* %61, i64 192
  %131 = bitcast i8* %130 to <8 x float>*
  %132 = load <8 x float>, <8 x float>* %131, align 32, !tbaa !3434
  %133 = fadd <8 x float> %72, %132
  %134 = fcmp ogt <8 x float> %133, zeroinitializer
  %135 = select <8 x i1> %134, <8 x float> %133, <8 x float> zeroinitializer
  %136 = mul i64 %indvars.iv135, 1924145348608
  %sext141 = ashr exact i64 %136, 32
  %137 = or i64 %sext141, 48
  %138 = getelementptr inbounds float, float* %12, i64 %137
  %139 = bitcast float* %138 to <8 x float>*
  store <8 x float> %135, <8 x float>* %139, align 32, !tbaa !3437
  %140 = getelementptr inbounds i8, i8* %61, i64 224
  %141 = bitcast i8* %140 to <8 x float>*
  %142 = load <8 x float>, <8 x float>* %141, align 32, !tbaa !3434
  %143 = fadd <8 x float> %72, %142
  %144 = fcmp ogt <8 x float> %143, zeroinitializer
  %145 = select <8 x i1> %144, <8 x float> %143, <8 x float> zeroinitializer
  %146 = mul i64 %indvars.iv135, 1924145348608
  %sext142 = ashr exact i64 %146, 32
  %147 = or i64 %sext142, 56
  %148 = getelementptr inbounds float, float* %12, i64 %147
  %149 = bitcast float* %148 to <8 x float>*
  store <8 x float> %145, <8 x float>* %149, align 32, !tbaa !3437
  %150 = getelementptr inbounds i8, i8* %61, i64 256
  %151 = bitcast i8* %150 to <8 x float>*
  %152 = load <8 x float>, <8 x float>* %151, align 32, !tbaa !3434
  %153 = fadd <8 x float> %72, %152
  %154 = fcmp ogt <8 x float> %153, zeroinitializer
  %155 = select <8 x i1> %154, <8 x float> %153, <8 x float> zeroinitializer
  %156 = mul i64 %indvars.iv135, 1924145348608
  %sext143 = add i64 %156, 274877906944
  %157 = ashr exact i64 %sext143, 32
  %158 = getelementptr inbounds float, float* %12, i64 %157
  %159 = bitcast float* %158 to <8 x float>*
  store <8 x float> %155, <8 x float>* %159, align 32, !tbaa !3437
  %160 = getelementptr inbounds i8, i8* %61, i64 288
  %161 = bitcast i8* %160 to <8 x float>*
  %162 = load <8 x float>, <8 x float>* %161, align 32, !tbaa !3434
  %163 = fadd <8 x float> %72, %162
  %164 = fcmp ogt <8 x float> %163, zeroinitializer
  %165 = select <8 x i1> %164, <8 x float> %163, <8 x float> zeroinitializer
  %166 = mul i64 %indvars.iv135, 1924145348608
  %sext144 = add i64 %166, 309237645312
  %167 = ashr exact i64 %sext144, 32
  %168 = getelementptr inbounds float, float* %12, i64 %167
  %169 = bitcast float* %168 to <8 x float>*
  store <8 x float> %165, <8 x float>* %169, align 32, !tbaa !3437
  %170 = getelementptr inbounds i8, i8* %61, i64 320
  %171 = bitcast i8* %170 to <8 x float>*
  %172 = load <8 x float>, <8 x float>* %171, align 32, !tbaa !3434
  %173 = fadd <8 x float> %72, %172
  %174 = fcmp ogt <8 x float> %173, zeroinitializer
  %175 = select <8 x i1> %174, <8 x float> %173, <8 x float> zeroinitializer
  %176 = mul i64 %indvars.iv135, 1924145348608
  %sext145 = add i64 %176, 343597383680
  %177 = ashr exact i64 %sext145, 32
  %178 = getelementptr inbounds float, float* %12, i64 %177
  %179 = bitcast float* %178 to <8 x float>*
  store <8 x float> %175, <8 x float>* %179, align 32, !tbaa !3437
  %180 = getelementptr inbounds i8, i8* %61, i64 352
  %181 = bitcast i8* %180 to <8 x float>*
  %182 = load <8 x float>, <8 x float>* %181, align 32, !tbaa !3434
  %183 = fadd <8 x float> %72, %182
  %184 = fcmp ogt <8 x float> %183, zeroinitializer
  %185 = select <8 x i1> %184, <8 x float> %183, <8 x float> zeroinitializer
  %186 = mul i64 %indvars.iv135, 1924145348608
  %sext146 = add i64 %186, 377957122048
  %187 = ashr exact i64 %sext146, 32
  %188 = getelementptr inbounds float, float* %12, i64 %187
  %189 = bitcast float* %188 to <8 x float>*
  store <8 x float> %185, <8 x float>* %189, align 32, !tbaa !3437
  %190 = getelementptr inbounds i8, i8* %61, i64 384
  %191 = bitcast i8* %190 to <8 x float>*
  %192 = load <8 x float>, <8 x float>* %191, align 32, !tbaa !3434
  %193 = fadd <8 x float> %72, %192
  %194 = fcmp ogt <8 x float> %193, zeroinitializer
  %195 = select <8 x i1> %194, <8 x float> %193, <8 x float> zeroinitializer
  %196 = mul i64 %indvars.iv135, 1924145348608
  %sext147 = add i64 %196, 412316860416
  %197 = ashr exact i64 %sext147, 32
  %198 = getelementptr inbounds float, float* %12, i64 %197
  %199 = bitcast float* %198 to <8 x float>*
  store <8 x float> %195, <8 x float>* %199, align 32, !tbaa !3437
  %200 = getelementptr inbounds i8, i8* %61, i64 416
  %201 = bitcast i8* %200 to <8 x float>*
  %202 = load <8 x float>, <8 x float>* %201, align 32, !tbaa !3434
  %203 = fadd <8 x float> %72, %202
  %204 = fcmp ogt <8 x float> %203, zeroinitializer
  %205 = select <8 x i1> %204, <8 x float> %203, <8 x float> zeroinitializer
  %206 = mul i64 %indvars.iv135, 1924145348608
  %sext148 = add i64 %206, 446676598784
  %207 = ashr exact i64 %sext148, 32
  %208 = getelementptr inbounds float, float* %12, i64 %207
  %209 = bitcast float* %208 to <8 x float>*
  store <8 x float> %205, <8 x float>* %209, align 32, !tbaa !3437
  %210 = getelementptr inbounds i8, i8* %61, i64 448
  %211 = bitcast i8* %210 to <8 x float>*
  %212 = load <8 x float>, <8 x float>* %211, align 32, !tbaa !3434
  %213 = fadd <8 x float> %72, %212
  %214 = fcmp ogt <8 x float> %213, zeroinitializer
  %215 = select <8 x i1> %214, <8 x float> %213, <8 x float> zeroinitializer
  %216 = mul i64 %indvars.iv135, 1924145348608
  %sext149 = add i64 %216, 481036337152
  %217 = ashr exact i64 %sext149, 32
  %218 = getelementptr inbounds float, float* %12, i64 %217
  %219 = bitcast float* %218 to <8 x float>*
  store <8 x float> %215, <8 x float>* %219, align 32, !tbaa !3437
  %220 = getelementptr inbounds i8, i8* %61, i64 480
  %221 = bitcast i8* %220 to <8 x float>*
  %222 = load <8 x float>, <8 x float>* %221, align 32, !tbaa !3434
  %223 = fadd <8 x float> %72, %222
  %224 = fcmp ogt <8 x float> %223, zeroinitializer
  %225 = select <8 x i1> %224, <8 x float> %223, <8 x float> zeroinitializer
  %226 = mul i64 %indvars.iv135, 1924145348608
  %sext150 = add i64 %226, 515396075520
  %227 = ashr exact i64 %sext150, 32
  %228 = getelementptr inbounds float, float* %12, i64 %227
  %229 = bitcast float* %228 to <8 x float>*
  store <8 x float> %225, <8 x float>* %229, align 32, !tbaa !3437
  %230 = getelementptr inbounds i8, i8* %61, i64 512
  %231 = bitcast i8* %230 to <8 x float>*
  %232 = load <8 x float>, <8 x float>* %231, align 32, !tbaa !3434
  %233 = fadd <8 x float> %72, %232
  %234 = fcmp ogt <8 x float> %233, zeroinitializer
  %235 = select <8 x i1> %234, <8 x float> %233, <8 x float> zeroinitializer
  %236 = mul i64 %indvars.iv135, 1924145348608
  %sext151 = add i64 %236, 549755813888
  %237 = ashr exact i64 %sext151, 32
  %238 = getelementptr inbounds float, float* %12, i64 %237
  %239 = bitcast float* %238 to <8 x float>*
  store <8 x float> %235, <8 x float>* %239, align 32, !tbaa !3437
  %240 = getelementptr inbounds i8, i8* %61, i64 544
  %241 = bitcast i8* %240 to <8 x float>*
  %242 = load <8 x float>, <8 x float>* %241, align 32, !tbaa !3434
  %243 = fadd <8 x float> %72, %242
  %244 = fcmp ogt <8 x float> %243, zeroinitializer
  %245 = select <8 x i1> %244, <8 x float> %243, <8 x float> zeroinitializer
  %246 = mul i64 %indvars.iv135, 1924145348608
  %sext152 = add i64 %246, 584115552256
  %247 = ashr exact i64 %sext152, 32
  %248 = getelementptr inbounds float, float* %12, i64 %247
  %249 = bitcast float* %248 to <8 x float>*
  store <8 x float> %245, <8 x float>* %249, align 32, !tbaa !3437
  %250 = getelementptr inbounds i8, i8* %61, i64 576
  %251 = bitcast i8* %250 to <8 x float>*
  %252 = load <8 x float>, <8 x float>* %251, align 32, !tbaa !3434
  %253 = fadd <8 x float> %72, %252
  %254 = fcmp ogt <8 x float> %253, zeroinitializer
  %255 = select <8 x i1> %254, <8 x float> %253, <8 x float> zeroinitializer
  %256 = mul i64 %indvars.iv135, 1924145348608
  %sext153 = add i64 %256, 618475290624
  %257 = ashr exact i64 %sext153, 32
  %258 = getelementptr inbounds float, float* %12, i64 %257
  %259 = bitcast float* %258 to <8 x float>*
  store <8 x float> %255, <8 x float>* %259, align 32, !tbaa !3437
  %260 = getelementptr inbounds i8, i8* %61, i64 608
  %261 = bitcast i8* %260 to <8 x float>*
  %262 = load <8 x float>, <8 x float>* %261, align 32, !tbaa !3434
  %263 = fadd <8 x float> %72, %262
  %264 = fcmp ogt <8 x float> %263, zeroinitializer
  %265 = select <8 x i1> %264, <8 x float> %263, <8 x float> zeroinitializer
  %266 = mul i64 %indvars.iv135, 1924145348608
  %sext154 = add i64 %266, 652835028992
  %267 = ashr exact i64 %sext154, 32
  %268 = getelementptr inbounds float, float* %12, i64 %267
  %269 = bitcast float* %268 to <8 x float>*
  store <8 x float> %265, <8 x float>* %269, align 32, !tbaa !3437
  %270 = getelementptr inbounds i8, i8* %61, i64 640
  %271 = bitcast i8* %270 to <8 x float>*
  %272 = load <8 x float>, <8 x float>* %271, align 32, !tbaa !3434
  %273 = fadd <8 x float> %72, %272
  %274 = fcmp ogt <8 x float> %273, zeroinitializer
  %275 = select <8 x i1> %274, <8 x float> %273, <8 x float> zeroinitializer
  %276 = mul i64 %indvars.iv135, 1924145348608
  %sext155 = add i64 %276, 687194767360
  %277 = ashr exact i64 %sext155, 32
  %278 = getelementptr inbounds float, float* %12, i64 %277
  %279 = bitcast float* %278 to <8 x float>*
  store <8 x float> %275, <8 x float>* %279, align 32, !tbaa !3437
  %280 = getelementptr inbounds i8, i8* %61, i64 672
  %281 = bitcast i8* %280 to <8 x float>*
  %282 = load <8 x float>, <8 x float>* %281, align 32, !tbaa !3434
  %283 = fadd <8 x float> %72, %282
  %284 = fcmp ogt <8 x float> %283, zeroinitializer
  %285 = select <8 x i1> %284, <8 x float> %283, <8 x float> zeroinitializer
  %286 = mul i64 %indvars.iv135, 1924145348608
  %sext156 = add i64 %286, 721554505728
  %287 = ashr exact i64 %sext156, 32
  %288 = getelementptr inbounds float, float* %12, i64 %287
  %289 = bitcast float* %288 to <8 x float>*
  store <8 x float> %285, <8 x float>* %289, align 32, !tbaa !3437
  %290 = getelementptr inbounds i8, i8* %61, i64 704
  %291 = bitcast i8* %290 to <8 x float>*
  %292 = load <8 x float>, <8 x float>* %291, align 32, !tbaa !3434
  %293 = fadd <8 x float> %72, %292
  %294 = fcmp ogt <8 x float> %293, zeroinitializer
  %295 = select <8 x i1> %294, <8 x float> %293, <8 x float> zeroinitializer
  %296 = mul i64 %indvars.iv135, 1924145348608
  %sext157 = add i64 %296, 755914244096
  %297 = ashr exact i64 %sext157, 32
  %298 = getelementptr inbounds float, float* %12, i64 %297
  %299 = bitcast float* %298 to <8 x float>*
  store <8 x float> %295, <8 x float>* %299, align 32, !tbaa !3437
  %300 = getelementptr inbounds i8, i8* %61, i64 736
  %301 = bitcast i8* %300 to <8 x float>*
  %302 = load <8 x float>, <8 x float>* %301, align 32, !tbaa !3434
  %303 = fadd <8 x float> %72, %302
  %304 = fcmp ogt <8 x float> %303, zeroinitializer
  %305 = select <8 x i1> %304, <8 x float> %303, <8 x float> zeroinitializer
  %306 = mul i64 %indvars.iv135, 1924145348608
  %sext158 = add i64 %306, 790273982464
  %307 = ashr exact i64 %sext158, 32
  %308 = getelementptr inbounds float, float* %12, i64 %307
  %309 = bitcast float* %308 to <8 x float>*
  store <8 x float> %305, <8 x float>* %309, align 32, !tbaa !3437
  %310 = getelementptr inbounds i8, i8* %61, i64 768
  %311 = bitcast i8* %310 to <8 x float>*
  %312 = load <8 x float>, <8 x float>* %311, align 32, !tbaa !3434
  %313 = fadd <8 x float> %72, %312
  %314 = fcmp ogt <8 x float> %313, zeroinitializer
  %315 = select <8 x i1> %314, <8 x float> %313, <8 x float> zeroinitializer
  %316 = mul i64 %indvars.iv135, 1924145348608
  %sext159 = add i64 %316, 824633720832
  %317 = ashr exact i64 %sext159, 32
  %318 = getelementptr inbounds float, float* %12, i64 %317
  %319 = bitcast float* %318 to <8 x float>*
  store <8 x float> %315, <8 x float>* %319, align 32, !tbaa !3437
  %320 = getelementptr inbounds i8, i8* %61, i64 800
  %321 = bitcast i8* %320 to <8 x float>*
  %322 = load <8 x float>, <8 x float>* %321, align 32, !tbaa !3434
  %323 = fadd <8 x float> %72, %322
  %324 = fcmp ogt <8 x float> %323, zeroinitializer
  %325 = select <8 x i1> %324, <8 x float> %323, <8 x float> zeroinitializer
  %326 = mul i64 %indvars.iv135, 1924145348608
  %sext160 = add i64 %326, 858993459200
  %327 = ashr exact i64 %sext160, 32
  %328 = getelementptr inbounds float, float* %12, i64 %327
  %329 = bitcast float* %328 to <8 x float>*
  store <8 x float> %325, <8 x float>* %329, align 32, !tbaa !3437
  %330 = getelementptr inbounds i8, i8* %61, i64 832
  %331 = bitcast i8* %330 to <8 x float>*
  %332 = load <8 x float>, <8 x float>* %331, align 32, !tbaa !3434
  %333 = fadd <8 x float> %72, %332
  %334 = fcmp ogt <8 x float> %333, zeroinitializer
  %335 = select <8 x i1> %334, <8 x float> %333, <8 x float> zeroinitializer
  %336 = mul i64 %indvars.iv135, 1924145348608
  %sext161 = add i64 %336, 893353197568
  %337 = ashr exact i64 %sext161, 32
  %338 = getelementptr inbounds float, float* %12, i64 %337
  %339 = bitcast float* %338 to <8 x float>*
  store <8 x float> %335, <8 x float>* %339, align 32, !tbaa !3437
  %340 = getelementptr inbounds i8, i8* %61, i64 864
  %341 = bitcast i8* %340 to <8 x float>*
  %342 = load <8 x float>, <8 x float>* %341, align 32, !tbaa !3434
  %343 = fadd <8 x float> %72, %342
  %344 = fcmp ogt <8 x float> %343, zeroinitializer
  %345 = select <8 x i1> %344, <8 x float> %343, <8 x float> zeroinitializer
  %346 = mul i64 %indvars.iv135, 1924145348608
  %sext162 = add i64 %346, 927712935936
  %347 = ashr exact i64 %sext162, 32
  %348 = getelementptr inbounds float, float* %12, i64 %347
  %349 = bitcast float* %348 to <8 x float>*
  store <8 x float> %345, <8 x float>* %349, align 32, !tbaa !3437
  %350 = getelementptr inbounds i8, i8* %61, i64 896
  %351 = bitcast i8* %350 to <8 x float>*
  %352 = load <8 x float>, <8 x float>* %351, align 32, !tbaa !3434
  %353 = fadd <8 x float> %72, %352
  %354 = fcmp ogt <8 x float> %353, zeroinitializer
  %355 = select <8 x i1> %354, <8 x float> %353, <8 x float> zeroinitializer
  %356 = mul i64 %indvars.iv135, 1924145348608
  %sext163 = add i64 %356, 962072674304
  %357 = ashr exact i64 %sext163, 32
  %358 = getelementptr inbounds float, float* %12, i64 %357
  %359 = bitcast float* %358 to <8 x float>*
  store <8 x float> %355, <8 x float>* %359, align 32, !tbaa !3437
  %360 = getelementptr inbounds i8, i8* %61, i64 928
  %361 = bitcast i8* %360 to <8 x float>*
  %362 = load <8 x float>, <8 x float>* %361, align 32, !tbaa !3434
  %363 = fadd <8 x float> %72, %362
  %364 = fcmp ogt <8 x float> %363, zeroinitializer
  %365 = select <8 x i1> %364, <8 x float> %363, <8 x float> zeroinitializer
  %366 = mul i64 %indvars.iv135, 1924145348608
  %sext164 = add i64 %366, 996432412672
  %367 = ashr exact i64 %sext164, 32
  %368 = getelementptr inbounds float, float* %12, i64 %367
  %369 = bitcast float* %368 to <8 x float>*
  store <8 x float> %365, <8 x float>* %369, align 32, !tbaa !3437
  %370 = getelementptr inbounds i8, i8* %61, i64 960
  %371 = bitcast i8* %370 to <8 x float>*
  %372 = load <8 x float>, <8 x float>* %371, align 32, !tbaa !3434
  %373 = fadd <8 x float> %72, %372
  %374 = fcmp ogt <8 x float> %373, zeroinitializer
  %375 = select <8 x i1> %374, <8 x float> %373, <8 x float> zeroinitializer
  %376 = mul i64 %indvars.iv135, 1924145348608
  %sext165 = add i64 %376, 1030792151040
  %377 = ashr exact i64 %sext165, 32
  %378 = getelementptr inbounds float, float* %12, i64 %377
  %379 = bitcast float* %378 to <8 x float>*
  store <8 x float> %375, <8 x float>* %379, align 32, !tbaa !3437
  %380 = getelementptr inbounds i8, i8* %61, i64 992
  %381 = bitcast i8* %380 to <8 x float>*
  %382 = load <8 x float>, <8 x float>* %381, align 32, !tbaa !3434
  %383 = fadd <8 x float> %72, %382
  %384 = fcmp ogt <8 x float> %383, zeroinitializer
  %385 = select <8 x i1> %384, <8 x float> %383, <8 x float> zeroinitializer
  %386 = mul i64 %indvars.iv135, 1924145348608
  %sext166 = add i64 %386, 1065151889408
  %387 = ashr exact i64 %sext166, 32
  %388 = getelementptr inbounds float, float* %12, i64 %387
  %389 = bitcast float* %388 to <8 x float>*
  store <8 x float> %385, <8 x float>* %389, align 32, !tbaa !3437
  %390 = getelementptr inbounds i8, i8* %61, i64 1024
  %391 = bitcast i8* %390 to <8 x float>*
  %392 = load <8 x float>, <8 x float>* %391, align 32, !tbaa !3434
  %393 = fadd <8 x float> %72, %392
  %394 = fcmp ogt <8 x float> %393, zeroinitializer
  %395 = select <8 x i1> %394, <8 x float> %393, <8 x float> zeroinitializer
  %396 = mul i64 %indvars.iv135, 1924145348608
  %sext167 = add i64 %396, 1099511627776
  %397 = ashr exact i64 %sext167, 32
  %398 = getelementptr inbounds float, float* %12, i64 %397
  %399 = bitcast float* %398 to <8 x float>*
  store <8 x float> %395, <8 x float>* %399, align 32, !tbaa !3437
  %400 = getelementptr inbounds i8, i8* %61, i64 1056
  %401 = bitcast i8* %400 to <8 x float>*
  %402 = load <8 x float>, <8 x float>* %401, align 32, !tbaa !3434
  %403 = fadd <8 x float> %72, %402
  %404 = fcmp ogt <8 x float> %403, zeroinitializer
  %405 = select <8 x i1> %404, <8 x float> %403, <8 x float> zeroinitializer
  %406 = mul i64 %indvars.iv135, 1924145348608
  %sext168 = add i64 %406, 1133871366144
  %407 = ashr exact i64 %sext168, 32
  %408 = getelementptr inbounds float, float* %12, i64 %407
  %409 = bitcast float* %408 to <8 x float>*
  store <8 x float> %405, <8 x float>* %409, align 32, !tbaa !3437
  %410 = getelementptr inbounds i8, i8* %61, i64 1088
  %411 = bitcast i8* %410 to <8 x float>*
  %412 = load <8 x float>, <8 x float>* %411, align 32, !tbaa !3434
  %413 = fadd <8 x float> %72, %412
  %414 = fcmp ogt <8 x float> %413, zeroinitializer
  %415 = select <8 x i1> %414, <8 x float> %413, <8 x float> zeroinitializer
  %416 = mul i64 %indvars.iv135, 1924145348608
  %sext169 = add i64 %416, 1168231104512
  %417 = ashr exact i64 %sext169, 32
  %418 = getelementptr inbounds float, float* %12, i64 %417
  %419 = bitcast float* %418 to <8 x float>*
  store <8 x float> %415, <8 x float>* %419, align 32, !tbaa !3437
  %420 = getelementptr inbounds i8, i8* %61, i64 1120
  %421 = bitcast i8* %420 to <8 x float>*
  %422 = load <8 x float>, <8 x float>* %421, align 32, !tbaa !3434
  %423 = fadd <8 x float> %72, %422
  %424 = fcmp ogt <8 x float> %423, zeroinitializer
  %425 = select <8 x i1> %424, <8 x float> %423, <8 x float> zeroinitializer
  %426 = mul i64 %indvars.iv135, 1924145348608
  %sext170 = add i64 %426, 1202590842880
  %427 = ashr exact i64 %sext170, 32
  %428 = getelementptr inbounds float, float* %12, i64 %427
  %429 = bitcast float* %428 to <8 x float>*
  store <8 x float> %425, <8 x float>* %429, align 32, !tbaa !3437
  %430 = getelementptr inbounds i8, i8* %61, i64 1152
  %431 = bitcast i8* %430 to <8 x float>*
  %432 = load <8 x float>, <8 x float>* %431, align 32, !tbaa !3434
  %433 = fadd <8 x float> %72, %432
  %434 = fcmp ogt <8 x float> %433, zeroinitializer
  %435 = select <8 x i1> %434, <8 x float> %433, <8 x float> zeroinitializer
  %436 = mul i64 %indvars.iv135, 1924145348608
  %sext171 = add i64 %436, 1236950581248
  %437 = ashr exact i64 %sext171, 32
  %438 = getelementptr inbounds float, float* %12, i64 %437
  %439 = bitcast float* %438 to <8 x float>*
  store <8 x float> %435, <8 x float>* %439, align 32, !tbaa !3437
  %440 = getelementptr inbounds i8, i8* %61, i64 1184
  %441 = bitcast i8* %440 to <8 x float>*
  %442 = load <8 x float>, <8 x float>* %441, align 32, !tbaa !3434
  %443 = fadd <8 x float> %72, %442
  %444 = fcmp ogt <8 x float> %443, zeroinitializer
  %445 = select <8 x i1> %444, <8 x float> %443, <8 x float> zeroinitializer
  %446 = mul i64 %indvars.iv135, 1924145348608
  %sext172 = add i64 %446, 1271310319616
  %447 = ashr exact i64 %sext172, 32
  %448 = getelementptr inbounds float, float* %12, i64 %447
  %449 = bitcast float* %448 to <8 x float>*
  store <8 x float> %445, <8 x float>* %449, align 32, !tbaa !3437
  %450 = getelementptr inbounds i8, i8* %61, i64 1216
  %451 = bitcast i8* %450 to <8 x float>*
  %452 = load <8 x float>, <8 x float>* %451, align 32, !tbaa !3434
  %453 = fadd <8 x float> %72, %452
  %454 = fcmp ogt <8 x float> %453, zeroinitializer
  %455 = select <8 x i1> %454, <8 x float> %453, <8 x float> zeroinitializer
  %456 = mul i64 %indvars.iv135, 1924145348608
  %sext173 = add i64 %456, 1305670057984
  %457 = ashr exact i64 %sext173, 32
  %458 = getelementptr inbounds float, float* %12, i64 %457
  %459 = bitcast float* %458 to <8 x float>*
  store <8 x float> %455, <8 x float>* %459, align 32, !tbaa !3437
  %460 = getelementptr inbounds i8, i8* %61, i64 1248
  %461 = bitcast i8* %460 to <8 x float>*
  %462 = load <8 x float>, <8 x float>* %461, align 32, !tbaa !3434
  %463 = fadd <8 x float> %72, %462
  %464 = fcmp ogt <8 x float> %463, zeroinitializer
  %465 = select <8 x i1> %464, <8 x float> %463, <8 x float> zeroinitializer
  %466 = mul i64 %indvars.iv135, 1924145348608
  %sext174 = add i64 %466, 1340029796352
  %467 = ashr exact i64 %sext174, 32
  %468 = getelementptr inbounds float, float* %12, i64 %467
  %469 = bitcast float* %468 to <8 x float>*
  store <8 x float> %465, <8 x float>* %469, align 32, !tbaa !3437
  %470 = getelementptr inbounds i8, i8* %61, i64 1280
  %471 = bitcast i8* %470 to <8 x float>*
  %472 = load <8 x float>, <8 x float>* %471, align 32, !tbaa !3434
  %473 = fadd <8 x float> %72, %472
  %474 = fcmp ogt <8 x float> %473, zeroinitializer
  %475 = select <8 x i1> %474, <8 x float> %473, <8 x float> zeroinitializer
  %476 = mul i64 %indvars.iv135, 1924145348608
  %sext175 = add i64 %476, 1374389534720
  %477 = ashr exact i64 %sext175, 32
  %478 = getelementptr inbounds float, float* %12, i64 %477
  %479 = bitcast float* %478 to <8 x float>*
  store <8 x float> %475, <8 x float>* %479, align 32, !tbaa !3437
  %480 = getelementptr inbounds i8, i8* %61, i64 1312
  %481 = bitcast i8* %480 to <8 x float>*
  %482 = load <8 x float>, <8 x float>* %481, align 32, !tbaa !3434
  %483 = fadd <8 x float> %72, %482
  %484 = fcmp ogt <8 x float> %483, zeroinitializer
  %485 = select <8 x i1> %484, <8 x float> %483, <8 x float> zeroinitializer
  %486 = mul i64 %indvars.iv135, 1924145348608
  %sext176 = add i64 %486, 1408749273088
  %487 = ashr exact i64 %sext176, 32
  %488 = getelementptr inbounds float, float* %12, i64 %487
  %489 = bitcast float* %488 to <8 x float>*
  store <8 x float> %485, <8 x float>* %489, align 32, !tbaa !3437
  %490 = getelementptr inbounds i8, i8* %61, i64 1344
  %491 = bitcast i8* %490 to <8 x float>*
  %492 = load <8 x float>, <8 x float>* %491, align 32, !tbaa !3434
  %493 = fadd <8 x float> %72, %492
  %494 = fcmp ogt <8 x float> %493, zeroinitializer
  %495 = select <8 x i1> %494, <8 x float> %493, <8 x float> zeroinitializer
  %496 = mul i64 %indvars.iv135, 1924145348608
  %sext177 = add i64 %496, 1443109011456
  %497 = ashr exact i64 %sext177, 32
  %498 = getelementptr inbounds float, float* %12, i64 %497
  %499 = bitcast float* %498 to <8 x float>*
  store <8 x float> %495, <8 x float>* %499, align 32, !tbaa !3437
  %500 = getelementptr inbounds i8, i8* %61, i64 1376
  %501 = bitcast i8* %500 to <8 x float>*
  %502 = load <8 x float>, <8 x float>* %501, align 32, !tbaa !3434
  %503 = fadd <8 x float> %72, %502
  %504 = fcmp ogt <8 x float> %503, zeroinitializer
  %505 = select <8 x i1> %504, <8 x float> %503, <8 x float> zeroinitializer
  %506 = mul i64 %indvars.iv135, 1924145348608
  %sext178 = add i64 %506, 1477468749824
  %507 = ashr exact i64 %sext178, 32
  %508 = getelementptr inbounds float, float* %12, i64 %507
  %509 = bitcast float* %508 to <8 x float>*
  store <8 x float> %505, <8 x float>* %509, align 32, !tbaa !3437
  %510 = getelementptr inbounds i8, i8* %61, i64 1408
  %511 = bitcast i8* %510 to <8 x float>*
  %512 = load <8 x float>, <8 x float>* %511, align 32, !tbaa !3434
  %513 = fadd <8 x float> %72, %512
  %514 = fcmp ogt <8 x float> %513, zeroinitializer
  %515 = select <8 x i1> %514, <8 x float> %513, <8 x float> zeroinitializer
  %516 = mul i64 %indvars.iv135, 1924145348608
  %sext179 = add i64 %516, 1511828488192
  %517 = ashr exact i64 %sext179, 32
  %518 = getelementptr inbounds float, float* %12, i64 %517
  %519 = bitcast float* %518 to <8 x float>*
  store <8 x float> %515, <8 x float>* %519, align 32, !tbaa !3437
  %520 = getelementptr inbounds i8, i8* %61, i64 1440
  %521 = bitcast i8* %520 to <8 x float>*
  %522 = load <8 x float>, <8 x float>* %521, align 32, !tbaa !3434
  %523 = fadd <8 x float> %72, %522
  %524 = fcmp ogt <8 x float> %523, zeroinitializer
  %525 = select <8 x i1> %524, <8 x float> %523, <8 x float> zeroinitializer
  %526 = mul i64 %indvars.iv135, 1924145348608
  %sext180 = add i64 %526, 1546188226560
  %527 = ashr exact i64 %sext180, 32
  %528 = getelementptr inbounds float, float* %12, i64 %527
  %529 = bitcast float* %528 to <8 x float>*
  store <8 x float> %525, <8 x float>* %529, align 32, !tbaa !3437
  %530 = getelementptr inbounds i8, i8* %61, i64 1472
  %531 = bitcast i8* %530 to <8 x float>*
  %532 = load <8 x float>, <8 x float>* %531, align 32, !tbaa !3434
  %533 = fadd <8 x float> %72, %532
  %534 = fcmp ogt <8 x float> %533, zeroinitializer
  %535 = select <8 x i1> %534, <8 x float> %533, <8 x float> zeroinitializer
  %536 = mul i64 %indvars.iv135, 1924145348608
  %sext181 = add i64 %536, 1580547964928
  %537 = ashr exact i64 %sext181, 32
  %538 = getelementptr inbounds float, float* %12, i64 %537
  %539 = bitcast float* %538 to <8 x float>*
  store <8 x float> %535, <8 x float>* %539, align 32, !tbaa !3437
  %540 = getelementptr inbounds i8, i8* %61, i64 1504
  %541 = bitcast i8* %540 to <8 x float>*
  %542 = load <8 x float>, <8 x float>* %541, align 32, !tbaa !3434
  %543 = fadd <8 x float> %72, %542
  %544 = fcmp ogt <8 x float> %543, zeroinitializer
  %545 = select <8 x i1> %544, <8 x float> %543, <8 x float> zeroinitializer
  %546 = mul i64 %indvars.iv135, 1924145348608
  %sext182 = add i64 %546, 1614907703296
  %547 = ashr exact i64 %sext182, 32
  %548 = getelementptr inbounds float, float* %12, i64 %547
  %549 = bitcast float* %548 to <8 x float>*
  store <8 x float> %545, <8 x float>* %549, align 32, !tbaa !3437
  %550 = getelementptr inbounds i8, i8* %61, i64 1536
  %551 = bitcast i8* %550 to <8 x float>*
  %552 = load <8 x float>, <8 x float>* %551, align 32, !tbaa !3434
  %553 = fadd <8 x float> %72, %552
  %554 = fcmp ogt <8 x float> %553, zeroinitializer
  %555 = select <8 x i1> %554, <8 x float> %553, <8 x float> zeroinitializer
  %556 = mul i64 %indvars.iv135, 1924145348608
  %sext183 = add i64 %556, 1649267441664
  %557 = ashr exact i64 %sext183, 32
  %558 = getelementptr inbounds float, float* %12, i64 %557
  %559 = bitcast float* %558 to <8 x float>*
  store <8 x float> %555, <8 x float>* %559, align 32, !tbaa !3437
  %560 = getelementptr inbounds i8, i8* %61, i64 1568
  %561 = bitcast i8* %560 to <8 x float>*
  %562 = load <8 x float>, <8 x float>* %561, align 32, !tbaa !3434
  %563 = fadd <8 x float> %72, %562
  %564 = fcmp ogt <8 x float> %563, zeroinitializer
  %565 = select <8 x i1> %564, <8 x float> %563, <8 x float> zeroinitializer
  %566 = mul i64 %indvars.iv135, 1924145348608
  %sext184 = add i64 %566, 1683627180032
  %567 = ashr exact i64 %sext184, 32
  %568 = getelementptr inbounds float, float* %12, i64 %567
  %569 = bitcast float* %568 to <8 x float>*
  store <8 x float> %565, <8 x float>* %569, align 32, !tbaa !3437
  %570 = getelementptr inbounds i8, i8* %61, i64 1600
  %571 = bitcast i8* %570 to <8 x float>*
  %572 = load <8 x float>, <8 x float>* %571, align 32, !tbaa !3434
  %573 = fadd <8 x float> %72, %572
  %574 = fcmp ogt <8 x float> %573, zeroinitializer
  %575 = select <8 x i1> %574, <8 x float> %573, <8 x float> zeroinitializer
  %576 = mul i64 %indvars.iv135, 1924145348608
  %sext185 = add i64 %576, 1717986918400
  %577 = ashr exact i64 %sext185, 32
  %578 = getelementptr inbounds float, float* %12, i64 %577
  %579 = bitcast float* %578 to <8 x float>*
  store <8 x float> %575, <8 x float>* %579, align 32, !tbaa !3437
  %580 = getelementptr inbounds i8, i8* %61, i64 1632
  %581 = bitcast i8* %580 to <8 x float>*
  %582 = load <8 x float>, <8 x float>* %581, align 32, !tbaa !3434
  %583 = fadd <8 x float> %72, %582
  %584 = fcmp ogt <8 x float> %583, zeroinitializer
  %585 = select <8 x i1> %584, <8 x float> %583, <8 x float> zeroinitializer
  %586 = mul i64 %indvars.iv135, 1924145348608
  %sext186 = add i64 %586, 1752346656768
  %587 = ashr exact i64 %sext186, 32
  %588 = getelementptr inbounds float, float* %12, i64 %587
  %589 = bitcast float* %588 to <8 x float>*
  store <8 x float> %585, <8 x float>* %589, align 32, !tbaa !3437
  %590 = getelementptr inbounds i8, i8* %61, i64 1664
  %591 = bitcast i8* %590 to <8 x float>*
  %592 = load <8 x float>, <8 x float>* %591, align 32, !tbaa !3434
  %593 = fadd <8 x float> %72, %592
  %594 = fcmp ogt <8 x float> %593, zeroinitializer
  %595 = select <8 x i1> %594, <8 x float> %593, <8 x float> zeroinitializer
  %596 = mul i64 %indvars.iv135, 1924145348608
  %sext187 = add i64 %596, 1786706395136
  %597 = ashr exact i64 %sext187, 32
  %598 = getelementptr inbounds float, float* %12, i64 %597
  %599 = bitcast float* %598 to <8 x float>*
  store <8 x float> %595, <8 x float>* %599, align 32, !tbaa !3437
  %600 = getelementptr inbounds i8, i8* %61, i64 1696
  %601 = bitcast i8* %600 to <8 x float>*
  %602 = load <8 x float>, <8 x float>* %601, align 32, !tbaa !3434
  %603 = fadd <8 x float> %72, %602
  %604 = fcmp ogt <8 x float> %603, zeroinitializer
  %605 = select <8 x i1> %604, <8 x float> %603, <8 x float> zeroinitializer
  %606 = mul i64 %indvars.iv135, 1924145348608
  %sext188 = add i64 %606, 1821066133504
  %607 = ashr exact i64 %sext188, 32
  %608 = getelementptr inbounds float, float* %12, i64 %607
  %609 = bitcast float* %608 to <8 x float>*
  store <8 x float> %605, <8 x float>* %609, align 32, !tbaa !3437
  %610 = getelementptr inbounds i8, i8* %61, i64 1728
  %611 = bitcast i8* %610 to <8 x float>*
  %612 = load <8 x float>, <8 x float>* %611, align 32, !tbaa !3434
  %613 = fadd <8 x float> %72, %612
  %614 = fcmp ogt <8 x float> %613, zeroinitializer
  %615 = select <8 x i1> %614, <8 x float> %613, <8 x float> zeroinitializer
  %616 = mul i64 %indvars.iv135, 1924145348608
  %sext189 = add i64 %616, 1855425871872
  %617 = ashr exact i64 %sext189, 32
  %618 = getelementptr inbounds float, float* %12, i64 %617
  %619 = bitcast float* %618 to <8 x float>*
  store <8 x float> %615, <8 x float>* %619, align 32, !tbaa !3437
  %620 = getelementptr inbounds i8, i8* %61, i64 1760
  %621 = bitcast i8* %620 to <8 x float>*
  %622 = load <8 x float>, <8 x float>* %621, align 32, !tbaa !3434
  %623 = fadd <8 x float> %72, %622
  %624 = fcmp ogt <8 x float> %623, zeroinitializer
  %625 = select <8 x i1> %624, <8 x float> %623, <8 x float> zeroinitializer
  %626 = mul i64 %indvars.iv135, 1924145348608
  %sext190 = add i64 %626, 1889785610240
  %627 = ashr exact i64 %sext190, 32
  %628 = getelementptr inbounds float, float* %12, i64 %627
  %629 = bitcast float* %628 to <8 x float>*
  store <8 x float> %625, <8 x float>* %629, align 32, !tbaa !3437
  %630 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %631 = tail call i32 %630(i32 1, i32 %18, i8* nonnull %61)
  %indvars.iv.next136 = add nsw i64 %indvars.iv135, 1
  %632 = icmp slt i64 %indvars.iv.next136, %58
  br i1 %632, label %for_body, label %for_end, !prof !5

for_body2:                                        ; preds = %for_begin13.preheader, %for_body
  %indvar = phi i64 [ 0, %for_body ], [ %indvar.next, %for_begin13.preheader ]
  %633 = phi i32 [ 0, %for_body ], [ %636, %for_begin13.preheader ]
  %634 = mul nuw nsw i64 %indvar, 448
  %scevgep = getelementptr i8, i8* %61, i64 %634
  %635 = mul nuw nsw i32 %633, 896
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %59, i8 0, i64 448, i1 false)
  br label %for_begin7.preheader

for_begin13.preheader:                            ; preds = %for_end12.2
  store <8 x float> %878, <8 x float>* %.sub, align 32, !tbaa !3440
  store <8 x float> %884, <8 x float>* %32, align 32, !tbaa !3451
  store <8 x float> %890, <8 x float>* %34, align 32, !tbaa !3453
  store <8 x float> %896, <8 x float>* %36, align 32, !tbaa !3456
  store <8 x float> %902, <8 x float>* %38, align 32, !tbaa !3458
  store <8 x float> %908, <8 x float>* %40, align 32, !tbaa !3462
  store <8 x float> %914, <8 x float>* %42, align 32, !tbaa !3464
  store <8 x float> %920, <8 x float>* %44, align 32, !tbaa !3467
  store <8 x float> %926, <8 x float>* %46, align 32, !tbaa !3469
  store <8 x float> %932, <8 x float>* %48, align 32, !tbaa !3474
  store <8 x float> %938, <8 x float>* %50, align 32, !tbaa !3476
  store <8 x float> %944, <8 x float>* %52, align 32, !tbaa !3479
  store <8 x float> %950, <8 x float>* %54, align 32, !tbaa !3481
  store <8 x float> %956, <8 x float>* %56, align 32, !tbaa !3485
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %scevgep, i8* nonnull align 32 %4, i64 448, i1 false)
  %636 = add nuw nsw i32 %633, 1
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond128 = icmp eq i64 %indvar.next, 4
  br i1 %exitcond128, label %for_begin16.preheader, label %for_body2, !prof !50

for_begin7.preheader:                             ; preds = %for_end12.2, %for_body2
  %indvars.iv122 = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next123, %for_end12.2 ]
  %.lcssa52.lcssa105 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %956, %for_end12.2 ]
  %.lcssa50.lcssa103 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %950, %for_end12.2 ]
  %.lcssa48.lcssa101 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %944, %for_end12.2 ]
  %.lcssa46.lcssa99 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %938, %for_end12.2 ]
  %.lcssa44.lcssa97 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %932, %for_end12.2 ]
  %.lcssa42.lcssa95 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %926, %for_end12.2 ]
  %.lcssa40.lcssa93 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %920, %for_end12.2 ]
  %.lcssa38.lcssa91 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %914, %for_end12.2 ]
  %.lcssa36.lcssa89 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %908, %for_end12.2 ]
  %.lcssa34.lcssa87 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %902, %for_end12.2 ]
  %.lcssa32.lcssa85 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %896, %for_end12.2 ]
  %.lcssa30.lcssa84 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %890, %for_end12.2 ]
  %.lcssa28.lcssa82 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %884, %for_end12.2 ]
  %.lcssa.lcssa80 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %878, %for_end12.2 ]
  %637 = phi i32 [ 0, %for_body2 ], [ %957, %for_end12.2 ]
  %638 = add nsw i32 %637, %.decomposed
  %639 = mul i32 %638, 3712
  %640 = add nsw i32 %639, %635
  %641 = mul nuw nsw i64 %indvars.iv122, 1536
  %642 = add nsw i64 %641, %66
  %643 = sext i32 %640 to i64
  br label %for_body11

for_body11:                                       ; preds = %for_body11, %for_begin7.preheader
  %indvars.iv = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next, %for_body11 ]
  %644 = phi <8 x float> [ %.lcssa52.lcssa105, %for_begin7.preheader ], [ %746, %for_body11 ]
  %645 = phi <8 x float> [ %.lcssa50.lcssa103, %for_begin7.preheader ], [ %740, %for_body11 ]
  %646 = phi <8 x float> [ %.lcssa48.lcssa101, %for_begin7.preheader ], [ %734, %for_body11 ]
  %647 = phi <8 x float> [ %.lcssa46.lcssa99, %for_begin7.preheader ], [ %728, %for_body11 ]
  %648 = phi <8 x float> [ %.lcssa44.lcssa97, %for_begin7.preheader ], [ %722, %for_body11 ]
  %649 = phi <8 x float> [ %.lcssa42.lcssa95, %for_begin7.preheader ], [ %716, %for_body11 ]
  %650 = phi <8 x float> [ %.lcssa40.lcssa93, %for_begin7.preheader ], [ %710, %for_body11 ]
  %651 = phi <8 x float> [ %.lcssa38.lcssa91, %for_begin7.preheader ], [ %704, %for_body11 ]
  %652 = phi <8 x float> [ %.lcssa36.lcssa89, %for_begin7.preheader ], [ %698, %for_body11 ]
  %653 = phi <8 x float> [ %.lcssa34.lcssa87, %for_begin7.preheader ], [ %692, %for_body11 ]
  %654 = phi <8 x float> [ %.lcssa32.lcssa85, %for_begin7.preheader ], [ %686, %for_body11 ]
  %655 = phi <8 x float> [ %.lcssa30.lcssa84, %for_begin7.preheader ], [ %680, %for_body11 ]
  %656 = phi <8 x float> [ %.lcssa28.lcssa82, %for_begin7.preheader ], [ %674, %for_body11 ]
  %657 = phi <8 x float> [ %.lcssa.lcssa80, %for_begin7.preheader ], [ %668, %for_body11 ]
  %658 = add nsw i64 %indvars.iv, %643
  %659 = getelementptr inbounds float, float* %6, i64 %658
  %660 = load float, float* %659, align 4, !tbaa !3428
  %661 = insertelement <8 x float> undef, float %660, i32 0
  %662 = shufflevector <8 x float> %661, <8 x float> undef, <8 x i32> zeroinitializer
  %663 = shl i64 %indvars.iv, 3
  %664 = add nsw i64 %642, %663
  %665 = getelementptr inbounds float, float* %9, i64 %664
  %666 = bitcast float* %665 to <8 x float>*
  %667 = load <8 x float>, <8 x float>* %666, align 32, !tbaa !3487
  %668 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %662, <8 x float> %667, <8 x float> %657)
  %669 = add nsw i64 %658, 64
  %670 = getelementptr inbounds float, float* %6, i64 %669
  %671 = load float, float* %670, align 4, !tbaa !3428
  %672 = insertelement <8 x float> undef, float %671, i32 0
  %673 = shufflevector <8 x float> %672, <8 x float> undef, <8 x i32> zeroinitializer
  %674 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %673, <8 x float> %667, <8 x float> %656)
  %675 = add nsw i64 %658, 128
  %676 = getelementptr inbounds float, float* %6, i64 %675
  %677 = load float, float* %676, align 4, !tbaa !3428
  %678 = insertelement <8 x float> undef, float %677, i32 0
  %679 = shufflevector <8 x float> %678, <8 x float> undef, <8 x i32> zeroinitializer
  %680 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %679, <8 x float> %667, <8 x float> %655)
  %681 = add nsw i64 %658, 192
  %682 = getelementptr inbounds float, float* %6, i64 %681
  %683 = load float, float* %682, align 4, !tbaa !3428
  %684 = insertelement <8 x float> undef, float %683, i32 0
  %685 = shufflevector <8 x float> %684, <8 x float> undef, <8 x i32> zeroinitializer
  %686 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %685, <8 x float> %667, <8 x float> %654)
  %687 = add nsw i64 %658, 256
  %688 = getelementptr inbounds float, float* %6, i64 %687
  %689 = load float, float* %688, align 4, !tbaa !3428
  %690 = insertelement <8 x float> undef, float %689, i32 0
  %691 = shufflevector <8 x float> %690, <8 x float> undef, <8 x i32> zeroinitializer
  %692 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %691, <8 x float> %667, <8 x float> %653)
  %693 = add nsw i64 %658, 320
  %694 = getelementptr inbounds float, float* %6, i64 %693
  %695 = load float, float* %694, align 4, !tbaa !3428
  %696 = insertelement <8 x float> undef, float %695, i32 0
  %697 = shufflevector <8 x float> %696, <8 x float> undef, <8 x i32> zeroinitializer
  %698 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %697, <8 x float> %667, <8 x float> %652)
  %699 = add nsw i64 %658, 384
  %700 = getelementptr inbounds float, float* %6, i64 %699
  %701 = load float, float* %700, align 4, !tbaa !3428
  %702 = insertelement <8 x float> undef, float %701, i32 0
  %703 = shufflevector <8 x float> %702, <8 x float> undef, <8 x i32> zeroinitializer
  %704 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %703, <8 x float> %667, <8 x float> %651)
  %705 = add nsw i64 %658, 448
  %706 = getelementptr inbounds float, float* %6, i64 %705
  %707 = load float, float* %706, align 4, !tbaa !3428
  %708 = insertelement <8 x float> undef, float %707, i32 0
  %709 = shufflevector <8 x float> %708, <8 x float> undef, <8 x i32> zeroinitializer
  %710 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %709, <8 x float> %667, <8 x float> %650)
  %711 = add nsw i64 %658, 512
  %712 = getelementptr inbounds float, float* %6, i64 %711
  %713 = load float, float* %712, align 4, !tbaa !3428
  %714 = insertelement <8 x float> undef, float %713, i32 0
  %715 = shufflevector <8 x float> %714, <8 x float> undef, <8 x i32> zeroinitializer
  %716 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %715, <8 x float> %667, <8 x float> %649)
  %717 = add nsw i64 %658, 576
  %718 = getelementptr inbounds float, float* %6, i64 %717
  %719 = load float, float* %718, align 4, !tbaa !3428
  %720 = insertelement <8 x float> undef, float %719, i32 0
  %721 = shufflevector <8 x float> %720, <8 x float> undef, <8 x i32> zeroinitializer
  %722 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %721, <8 x float> %667, <8 x float> %648)
  %723 = add nsw i64 %658, 640
  %724 = getelementptr inbounds float, float* %6, i64 %723
  %725 = load float, float* %724, align 4, !tbaa !3428
  %726 = insertelement <8 x float> undef, float %725, i32 0
  %727 = shufflevector <8 x float> %726, <8 x float> undef, <8 x i32> zeroinitializer
  %728 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %727, <8 x float> %667, <8 x float> %647)
  %729 = add nsw i64 %658, 704
  %730 = getelementptr inbounds float, float* %6, i64 %729
  %731 = load float, float* %730, align 4, !tbaa !3428
  %732 = insertelement <8 x float> undef, float %731, i32 0
  %733 = shufflevector <8 x float> %732, <8 x float> undef, <8 x i32> zeroinitializer
  %734 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %733, <8 x float> %667, <8 x float> %646)
  %735 = add nsw i64 %658, 768
  %736 = getelementptr inbounds float, float* %6, i64 %735
  %737 = load float, float* %736, align 4, !tbaa !3428
  %738 = insertelement <8 x float> undef, float %737, i32 0
  %739 = shufflevector <8 x float> %738, <8 x float> undef, <8 x i32> zeroinitializer
  %740 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %739, <8 x float> %667, <8 x float> %645)
  %741 = add nsw i64 %658, 832
  %742 = getelementptr inbounds float, float* %6, i64 %741
  %743 = load float, float* %742, align 4, !tbaa !3428
  %744 = insertelement <8 x float> undef, float %743, i32 0
  %745 = shufflevector <8 x float> %744, <8 x float> undef, <8 x i32> zeroinitializer
  %746 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %745, <8 x float> %667, <8 x float> %644)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 64
  br i1 %exitcond, label %for_end12, label %for_body11, !prof !50

for_end12:                                        ; preds = %for_body11
  %747 = or i64 %643, 64
  %748 = add nsw i64 %642, 512
  br label %for_body11.1

for_body11.1:                                     ; preds = %for_body11.1, %for_end12
  %indvars.iv.1 = phi i64 [ 0, %for_end12 ], [ %indvars.iv.next.1, %for_body11.1 ]
  %749 = phi <8 x float> [ %746, %for_end12 ], [ %851, %for_body11.1 ]
  %750 = phi <8 x float> [ %740, %for_end12 ], [ %845, %for_body11.1 ]
  %751 = phi <8 x float> [ %734, %for_end12 ], [ %839, %for_body11.1 ]
  %752 = phi <8 x float> [ %728, %for_end12 ], [ %833, %for_body11.1 ]
  %753 = phi <8 x float> [ %722, %for_end12 ], [ %827, %for_body11.1 ]
  %754 = phi <8 x float> [ %716, %for_end12 ], [ %821, %for_body11.1 ]
  %755 = phi <8 x float> [ %710, %for_end12 ], [ %815, %for_body11.1 ]
  %756 = phi <8 x float> [ %704, %for_end12 ], [ %809, %for_body11.1 ]
  %757 = phi <8 x float> [ %698, %for_end12 ], [ %803, %for_body11.1 ]
  %758 = phi <8 x float> [ %692, %for_end12 ], [ %797, %for_body11.1 ]
  %759 = phi <8 x float> [ %686, %for_end12 ], [ %791, %for_body11.1 ]
  %760 = phi <8 x float> [ %680, %for_end12 ], [ %785, %for_body11.1 ]
  %761 = phi <8 x float> [ %674, %for_end12 ], [ %779, %for_body11.1 ]
  %762 = phi <8 x float> [ %668, %for_end12 ], [ %773, %for_body11.1 ]
  %763 = add nsw i64 %747, %indvars.iv.1
  %764 = getelementptr inbounds float, float* %6, i64 %763
  %765 = load float, float* %764, align 4, !tbaa !3428
  %766 = insertelement <8 x float> undef, float %765, i32 0
  %767 = shufflevector <8 x float> %766, <8 x float> undef, <8 x i32> zeroinitializer
  %768 = shl i64 %indvars.iv.1, 3
  %769 = add nsw i64 %748, %768
  %770 = getelementptr inbounds float, float* %9, i64 %769
  %771 = bitcast float* %770 to <8 x float>*
  %772 = load <8 x float>, <8 x float>* %771, align 32, !tbaa !3487
  %773 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %767, <8 x float> %772, <8 x float> %762)
  %774 = add nsw i64 %763, 64
  %775 = getelementptr inbounds float, float* %6, i64 %774
  %776 = load float, float* %775, align 4, !tbaa !3428
  %777 = insertelement <8 x float> undef, float %776, i32 0
  %778 = shufflevector <8 x float> %777, <8 x float> undef, <8 x i32> zeroinitializer
  %779 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %778, <8 x float> %772, <8 x float> %761)
  %780 = add nsw i64 %763, 128
  %781 = getelementptr inbounds float, float* %6, i64 %780
  %782 = load float, float* %781, align 4, !tbaa !3428
  %783 = insertelement <8 x float> undef, float %782, i32 0
  %784 = shufflevector <8 x float> %783, <8 x float> undef, <8 x i32> zeroinitializer
  %785 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %784, <8 x float> %772, <8 x float> %760)
  %786 = add nsw i64 %763, 192
  %787 = getelementptr inbounds float, float* %6, i64 %786
  %788 = load float, float* %787, align 4, !tbaa !3428
  %789 = insertelement <8 x float> undef, float %788, i32 0
  %790 = shufflevector <8 x float> %789, <8 x float> undef, <8 x i32> zeroinitializer
  %791 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %790, <8 x float> %772, <8 x float> %759)
  %792 = add nsw i64 %763, 256
  %793 = getelementptr inbounds float, float* %6, i64 %792
  %794 = load float, float* %793, align 4, !tbaa !3428
  %795 = insertelement <8 x float> undef, float %794, i32 0
  %796 = shufflevector <8 x float> %795, <8 x float> undef, <8 x i32> zeroinitializer
  %797 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %796, <8 x float> %772, <8 x float> %758)
  %798 = add nsw i64 %763, 320
  %799 = getelementptr inbounds float, float* %6, i64 %798
  %800 = load float, float* %799, align 4, !tbaa !3428
  %801 = insertelement <8 x float> undef, float %800, i32 0
  %802 = shufflevector <8 x float> %801, <8 x float> undef, <8 x i32> zeroinitializer
  %803 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %802, <8 x float> %772, <8 x float> %757)
  %804 = add nsw i64 %763, 384
  %805 = getelementptr inbounds float, float* %6, i64 %804
  %806 = load float, float* %805, align 4, !tbaa !3428
  %807 = insertelement <8 x float> undef, float %806, i32 0
  %808 = shufflevector <8 x float> %807, <8 x float> undef, <8 x i32> zeroinitializer
  %809 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %808, <8 x float> %772, <8 x float> %756)
  %810 = add nsw i64 %763, 448
  %811 = getelementptr inbounds float, float* %6, i64 %810
  %812 = load float, float* %811, align 4, !tbaa !3428
  %813 = insertelement <8 x float> undef, float %812, i32 0
  %814 = shufflevector <8 x float> %813, <8 x float> undef, <8 x i32> zeroinitializer
  %815 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %814, <8 x float> %772, <8 x float> %755)
  %816 = add nsw i64 %763, 512
  %817 = getelementptr inbounds float, float* %6, i64 %816
  %818 = load float, float* %817, align 4, !tbaa !3428
  %819 = insertelement <8 x float> undef, float %818, i32 0
  %820 = shufflevector <8 x float> %819, <8 x float> undef, <8 x i32> zeroinitializer
  %821 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %820, <8 x float> %772, <8 x float> %754)
  %822 = add nsw i64 %763, 576
  %823 = getelementptr inbounds float, float* %6, i64 %822
  %824 = load float, float* %823, align 4, !tbaa !3428
  %825 = insertelement <8 x float> undef, float %824, i32 0
  %826 = shufflevector <8 x float> %825, <8 x float> undef, <8 x i32> zeroinitializer
  %827 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %826, <8 x float> %772, <8 x float> %753)
  %828 = add nsw i64 %763, 640
  %829 = getelementptr inbounds float, float* %6, i64 %828
  %830 = load float, float* %829, align 4, !tbaa !3428
  %831 = insertelement <8 x float> undef, float %830, i32 0
  %832 = shufflevector <8 x float> %831, <8 x float> undef, <8 x i32> zeroinitializer
  %833 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %832, <8 x float> %772, <8 x float> %752)
  %834 = add nsw i64 %763, 704
  %835 = getelementptr inbounds float, float* %6, i64 %834
  %836 = load float, float* %835, align 4, !tbaa !3428
  %837 = insertelement <8 x float> undef, float %836, i32 0
  %838 = shufflevector <8 x float> %837, <8 x float> undef, <8 x i32> zeroinitializer
  %839 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %838, <8 x float> %772, <8 x float> %751)
  %840 = add nsw i64 %763, 768
  %841 = getelementptr inbounds float, float* %6, i64 %840
  %842 = load float, float* %841, align 4, !tbaa !3428
  %843 = insertelement <8 x float> undef, float %842, i32 0
  %844 = shufflevector <8 x float> %843, <8 x float> undef, <8 x i32> zeroinitializer
  %845 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %844, <8 x float> %772, <8 x float> %750)
  %846 = add nsw i64 %763, 832
  %847 = getelementptr inbounds float, float* %6, i64 %846
  %848 = load float, float* %847, align 4, !tbaa !3428
  %849 = insertelement <8 x float> undef, float %848, i32 0
  %850 = shufflevector <8 x float> %849, <8 x float> undef, <8 x i32> zeroinitializer
  %851 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %850, <8 x float> %772, <8 x float> %749)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 64
  br i1 %exitcond.1, label %for_end12.1, label %for_body11.1, !prof !50

for_end12.1:                                      ; preds = %for_body11.1
  %852 = add nsw i64 %643, 128
  %853 = add nsw i64 %642, 1024
  br label %for_body11.2

for_body11.2:                                     ; preds = %for_body11.2, %for_end12.1
  %indvars.iv.2 = phi i64 [ 0, %for_end12.1 ], [ %indvars.iv.next.2, %for_body11.2 ]
  %854 = phi <8 x float> [ %851, %for_end12.1 ], [ %956, %for_body11.2 ]
  %855 = phi <8 x float> [ %845, %for_end12.1 ], [ %950, %for_body11.2 ]
  %856 = phi <8 x float> [ %839, %for_end12.1 ], [ %944, %for_body11.2 ]
  %857 = phi <8 x float> [ %833, %for_end12.1 ], [ %938, %for_body11.2 ]
  %858 = phi <8 x float> [ %827, %for_end12.1 ], [ %932, %for_body11.2 ]
  %859 = phi <8 x float> [ %821, %for_end12.1 ], [ %926, %for_body11.2 ]
  %860 = phi <8 x float> [ %815, %for_end12.1 ], [ %920, %for_body11.2 ]
  %861 = phi <8 x float> [ %809, %for_end12.1 ], [ %914, %for_body11.2 ]
  %862 = phi <8 x float> [ %803, %for_end12.1 ], [ %908, %for_body11.2 ]
  %863 = phi <8 x float> [ %797, %for_end12.1 ], [ %902, %for_body11.2 ]
  %864 = phi <8 x float> [ %791, %for_end12.1 ], [ %896, %for_body11.2 ]
  %865 = phi <8 x float> [ %785, %for_end12.1 ], [ %890, %for_body11.2 ]
  %866 = phi <8 x float> [ %779, %for_end12.1 ], [ %884, %for_body11.2 ]
  %867 = phi <8 x float> [ %773, %for_end12.1 ], [ %878, %for_body11.2 ]
  %868 = add nsw i64 %852, %indvars.iv.2
  %869 = getelementptr inbounds float, float* %6, i64 %868
  %870 = load float, float* %869, align 4, !tbaa !3428
  %871 = insertelement <8 x float> undef, float %870, i32 0
  %872 = shufflevector <8 x float> %871, <8 x float> undef, <8 x i32> zeroinitializer
  %873 = shl i64 %indvars.iv.2, 3
  %874 = add nsw i64 %853, %873
  %875 = getelementptr inbounds float, float* %9, i64 %874
  %876 = bitcast float* %875 to <8 x float>*
  %877 = load <8 x float>, <8 x float>* %876, align 32, !tbaa !3487
  %878 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %872, <8 x float> %877, <8 x float> %867)
  %879 = add nsw i64 %868, 64
  %880 = getelementptr inbounds float, float* %6, i64 %879
  %881 = load float, float* %880, align 4, !tbaa !3428
  %882 = insertelement <8 x float> undef, float %881, i32 0
  %883 = shufflevector <8 x float> %882, <8 x float> undef, <8 x i32> zeroinitializer
  %884 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %883, <8 x float> %877, <8 x float> %866)
  %885 = add nsw i64 %868, 128
  %886 = getelementptr inbounds float, float* %6, i64 %885
  %887 = load float, float* %886, align 4, !tbaa !3428
  %888 = insertelement <8 x float> undef, float %887, i32 0
  %889 = shufflevector <8 x float> %888, <8 x float> undef, <8 x i32> zeroinitializer
  %890 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %889, <8 x float> %877, <8 x float> %865)
  %891 = add nsw i64 %868, 192
  %892 = getelementptr inbounds float, float* %6, i64 %891
  %893 = load float, float* %892, align 4, !tbaa !3428
  %894 = insertelement <8 x float> undef, float %893, i32 0
  %895 = shufflevector <8 x float> %894, <8 x float> undef, <8 x i32> zeroinitializer
  %896 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %895, <8 x float> %877, <8 x float> %864)
  %897 = add nsw i64 %868, 256
  %898 = getelementptr inbounds float, float* %6, i64 %897
  %899 = load float, float* %898, align 4, !tbaa !3428
  %900 = insertelement <8 x float> undef, float %899, i32 0
  %901 = shufflevector <8 x float> %900, <8 x float> undef, <8 x i32> zeroinitializer
  %902 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %901, <8 x float> %877, <8 x float> %863)
  %903 = add nsw i64 %868, 320
  %904 = getelementptr inbounds float, float* %6, i64 %903
  %905 = load float, float* %904, align 4, !tbaa !3428
  %906 = insertelement <8 x float> undef, float %905, i32 0
  %907 = shufflevector <8 x float> %906, <8 x float> undef, <8 x i32> zeroinitializer
  %908 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %907, <8 x float> %877, <8 x float> %862)
  %909 = add nsw i64 %868, 384
  %910 = getelementptr inbounds float, float* %6, i64 %909
  %911 = load float, float* %910, align 4, !tbaa !3428
  %912 = insertelement <8 x float> undef, float %911, i32 0
  %913 = shufflevector <8 x float> %912, <8 x float> undef, <8 x i32> zeroinitializer
  %914 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %913, <8 x float> %877, <8 x float> %861)
  %915 = add nsw i64 %868, 448
  %916 = getelementptr inbounds float, float* %6, i64 %915
  %917 = load float, float* %916, align 4, !tbaa !3428
  %918 = insertelement <8 x float> undef, float %917, i32 0
  %919 = shufflevector <8 x float> %918, <8 x float> undef, <8 x i32> zeroinitializer
  %920 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %919, <8 x float> %877, <8 x float> %860)
  %921 = add nsw i64 %868, 512
  %922 = getelementptr inbounds float, float* %6, i64 %921
  %923 = load float, float* %922, align 4, !tbaa !3428
  %924 = insertelement <8 x float> undef, float %923, i32 0
  %925 = shufflevector <8 x float> %924, <8 x float> undef, <8 x i32> zeroinitializer
  %926 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %925, <8 x float> %877, <8 x float> %859)
  %927 = add nsw i64 %868, 576
  %928 = getelementptr inbounds float, float* %6, i64 %927
  %929 = load float, float* %928, align 4, !tbaa !3428
  %930 = insertelement <8 x float> undef, float %929, i32 0
  %931 = shufflevector <8 x float> %930, <8 x float> undef, <8 x i32> zeroinitializer
  %932 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %931, <8 x float> %877, <8 x float> %858)
  %933 = add nsw i64 %868, 640
  %934 = getelementptr inbounds float, float* %6, i64 %933
  %935 = load float, float* %934, align 4, !tbaa !3428
  %936 = insertelement <8 x float> undef, float %935, i32 0
  %937 = shufflevector <8 x float> %936, <8 x float> undef, <8 x i32> zeroinitializer
  %938 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %937, <8 x float> %877, <8 x float> %857)
  %939 = add nsw i64 %868, 704
  %940 = getelementptr inbounds float, float* %6, i64 %939
  %941 = load float, float* %940, align 4, !tbaa !3428
  %942 = insertelement <8 x float> undef, float %941, i32 0
  %943 = shufflevector <8 x float> %942, <8 x float> undef, <8 x i32> zeroinitializer
  %944 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %943, <8 x float> %877, <8 x float> %856)
  %945 = add nsw i64 %868, 768
  %946 = getelementptr inbounds float, float* %6, i64 %945
  %947 = load float, float* %946, align 4, !tbaa !3428
  %948 = insertelement <8 x float> undef, float %947, i32 0
  %949 = shufflevector <8 x float> %948, <8 x float> undef, <8 x i32> zeroinitializer
  %950 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %949, <8 x float> %877, <8 x float> %855)
  %951 = add nsw i64 %868, 832
  %952 = getelementptr inbounds float, float* %6, i64 %951
  %953 = load float, float* %952, align 4, !tbaa !3428
  %954 = insertelement <8 x float> undef, float %953, i32 0
  %955 = shufflevector <8 x float> %954, <8 x float> undef, <8 x i32> zeroinitializer
  %956 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %955, <8 x float> %877, <8 x float> %854)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 64
  br i1 %exitcond.2, label %for_end12.2, label %for_body11.2, !prof !50

for_end12.2:                                      ; preds = %for_body11.2
  %indvars.iv.next123 = add nuw nsw i64 %indvars.iv122, 1
  %957 = add nuw nsw i32 %637, 1
  %exitcond124 = icmp eq i64 %indvars.iv.next123, 3
  br i1 %exitcond124, label %for_begin13.preheader, label %for_begin7.preheader, !prof !50
}

define dllexport i32 @fused_layout_transform_35(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.274, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !3490
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.275, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !3504
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.276, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !3506
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !3520
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 16
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.100, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !3522
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 28
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !3525
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 28
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !3527
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 16
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !3531
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 200704
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !3545
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 12544
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !3547
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 448
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !3550
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 16
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !3552
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.277, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !3556
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !3570
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 32
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.129, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !3572
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 28
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.278, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !3575
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 28
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.279, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !3577
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 8
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !3581
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 200704
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !3595
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 6272
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !3597
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 224
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !3600
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 8
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !3602
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.280, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_35_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_35_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %22, align 8
  %3 = getelementptr inbounds %22, %22* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %22, %22* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %22* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.281, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.281(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 895
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 896
  %15 = select i1 %14, i32 %13, i32 896
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 896
  %18 = select i1 %17, i32 %16, i32 896
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv4 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next5, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv4, 224
  %23 = trunc i64 %indvars.iv4 to i32
  %24 = sdiv i32 %23, 28
  %25 = shl nsw i32 %24, 3
  %26 = insertelement <8 x i32> undef, i32 %25, i32 0
  %27 = insertelement <4 x i32> undef, i32 %25, i32 0
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> zeroinitializer
  %29 = or <4 x i32> %28, <i32 1, i32 2, i32 3, i32 4>
  %30 = extractelement <4 x i32> %29, i32 0
  %31 = insertelement <8 x i32> %26, i32 %30, i32 1
  %32 = extractelement <4 x i32> %29, i32 1
  %33 = insertelement <8 x i32> %31, i32 %32, i32 2
  %34 = extractelement <4 x i32> %29, i32 2
  %35 = insertelement <8 x i32> %33, i32 %34, i32 3
  %36 = extractelement <4 x i32> %29, i32 3
  %37 = insertelement <8 x i32> %35, i32 %36, i32 4
  %38 = insertelement <2 x i32> undef, i32 %25, i32 0
  %39 = shufflevector <2 x i32> %38, <2 x i32> undef, <2 x i32> zeroinitializer
  %40 = or <2 x i32> %39, <i32 5, i32 6>
  %41 = extractelement <2 x i32> %40, i32 0
  %42 = insertelement <8 x i32> %37, i32 %41, i32 5
  %43 = extractelement <2 x i32> %40, i32 1
  %44 = insertelement <8 x i32> %42, i32 %43, i32 6
  %45 = or i32 %25, 7
  %46 = insertelement <8 x i32> %44, i32 %45, i32 7
  %47 = sdiv <8 x i32> %46, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %48 = mul <8 x i32> %47, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %.decomposed = sub <8 x i32> %46, %48
  %49 = add nsw <8 x i32> %.decomposed, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %50 = icmp sgt <8 x i32> %.decomposed, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = select <8 x i1> %50, <8 x i32> %.decomposed, <8 x i32> %49
  %52 = mul i32 %24, 28
  %.decomposed6 = sub i32 %23, %52
  %53 = mul nsw i32 %.decomposed6, 448
  %54 = insertelement <8 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <8 x i32> %54, <8 x i32> undef, <8 x i32> zeroinitializer
  %not. = xor <8 x i1> %50, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %56 = zext <8 x i1> %not. to <8 x i32>
  %57 = sub nsw <8 x i32> %47, %56
  %58 = mul nsw <8 x i32> %57, <i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544>
  %59 = add <8 x i32> %51, %55
  %60 = add <8 x i32> %59, %58
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %61 = shl i64 %indvars.iv, 3
  %62 = add nsw i64 %61, %22
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %63 = shl i32 %indvars.iv.tr, 4
  %64 = insertelement <8 x i32> undef, i32 %63, i32 0
  %65 = shufflevector <8 x i32> %64, <8 x i32> undef, <8 x i32> zeroinitializer
  %66 = add <8 x i32> %60, %65
  %67 = extractelement <8 x i32> %66, i64 0
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds float, float* %7, i64 %68
  %70 = load float, float* %69, align 4, !tbaa !3606
  %71 = insertelement <8 x float> undef, float %70, i32 0
  %72 = extractelement <8 x i32> %66, i64 1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds float, float* %7, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !3606
  %76 = insertelement <8 x float> %71, float %75, i32 1
  %77 = extractelement <8 x i32> %66, i64 2
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds float, float* %7, i64 %78
  %80 = load float, float* %79, align 4, !tbaa !3606
  %81 = insertelement <8 x float> %76, float %80, i32 2
  %82 = extractelement <8 x i32> %66, i64 3
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds float, float* %7, i64 %83
  %85 = load float, float* %84, align 4, !tbaa !3606
  %86 = insertelement <8 x float> %81, float %85, i32 3
  %87 = extractelement <8 x i32> %66, i64 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds float, float* %7, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !3606
  %91 = insertelement <8 x float> %86, float %90, i32 4
  %92 = extractelement <8 x i32> %66, i64 5
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds float, float* %7, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !3606
  %96 = insertelement <8 x float> %91, float %95, i32 5
  %97 = extractelement <8 x i32> %66, i64 6
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds float, float* %7, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !3606
  %101 = insertelement <8 x float> %96, float %100, i32 6
  %102 = extractelement <8 x i32> %66, i64 7
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !3606
  %106 = insertelement <8 x float> %101, float %105, i32 7
  %107 = getelementptr inbounds float, float* %4, i64 %62
  %108 = bitcast float* %107 to <8 x float>*
  store <8 x float> %106, <8 x float>* %108, align 32, !tbaa !3609
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, 1
  %109 = icmp slt i64 %indvars.iv.next5, %21
  br i1 %109, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.282, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !3612
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !3626
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !3629
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([169 x i8], [169 x i8]* @.str.283, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !3631
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([169 x i8], [169 x i8]* @.str.284, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([169 x i8], [169 x i8]* @.str.285, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([169 x i8], [169 x i8]* @.str.286, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !3633
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !3647
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 64
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.162, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !3649
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 7
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.174, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !3652
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 7
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.175, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !3654
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 8
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !3658
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 25088
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !3672
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 392
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !3674
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 56
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !3677
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 8
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !3679
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([234 x i8], [234 x i8]* @.str.203, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !3683
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 64
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.128, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !3697
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 64
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.205, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !3699
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 3
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !3702
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 3
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.105, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !3704
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 8
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !3708
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !3710
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 36864
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !3724
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 576
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !3726
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 192
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !3729
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 64
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !3731
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 8
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !3735
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([271 x i8], [271 x i8]* @.str.287, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !3737
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !3751
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 64
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.131, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !3753
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !3756
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !3758
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 8
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !3762
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 512
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !3776
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 8
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !3778
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 8
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !3781
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 8
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !3783
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.179, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !3787
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !3801
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 64
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.133, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !3803
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 7
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !3806
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 7
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.181, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !3808
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 8
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !3812
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 25088
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !3826
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 392
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !3828
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 56
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !3831
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 8
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !3833
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([234 x i8], [234 x i8]* @.str.182, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %6 = tail call i8* %5(i32 1, i32 %4, i64 165888, i32 2, i32 32)
  %7 = alloca %23, align 8
  %8 = getelementptr inbounds %23, %23* %7, i64 0, i32 0
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds %23, %23* %7, i64 0, i32 1
  store i8* %0, i8** %9, align 8
  %10 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %11 = bitcast %23* %7 to i8*
  %12 = call i32 %10(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.288, i8* nonnull %11, i32 0)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %12, %entry ], [ 0, %call_end2 ], [ %21, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %14 = alloca %24, align 8
  %15 = getelementptr inbounds %24, %24* %14, i64 0, i32 0
  store i8* %6, i8** %15, align 8
  %16 = getelementptr inbounds %24, %24* %14, i64 0, i32 1
  store i8* %1, i8** %16, align 8
  %17 = getelementptr inbounds %24, %24* %14, i64 0, i32 2
  store i8* %2, i8** %17, align 8
  %18 = getelementptr inbounds %24, %24* %14, i64 0, i32 3
  store i8* %3, i8** %18, align 8
  %19 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %20 = bitcast %24* %14 to i8*
  %21 = call i32 %19(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.289, i8* nonnull %20, i32 0)
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %23 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %24 = call i32 %23(i32 1, i32 %4, i8* %6)
  br label %call_fail
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.288(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 575
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 576
  %15 = select i1 %14, i32 %13, i32 576
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 576
  %18 = select i1 %17, i32 %16, i32 576
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv, 72
  %23 = trunc i64 %indvars.iv to i32
  %24 = sdiv i32 %23, 9
  %25 = mul i32 %24, 9
  %.decomposed = sub i32 %23, %25
  %.off = add nsw i32 %.decomposed, -1
  %26 = icmp ult i32 %.off, 7
  %27 = mul nsw i32 %.decomposed, 56
  %28 = mul nsw i32 %24, 392
  %29 = add nsw i32 %27, -64
  %30 = add i32 %29, %28
  br i1 %26, label %if_end.us.8, label %for_body2.preheader

for_body2.preheader:                              ; preds = %for_begin1.preheader
  %31 = add i32 %18, %indvar
  %32 = mul i32 %31, 72
  %33 = sext i32 %32 to i64
  %scevgep = getelementptr float, float* %4, i64 %33
  %scevgep5 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %scevgep5, i8 0, i64 288, i1 false)
  br label %for_end3

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %for_body2.preheader, %if_end.us.8
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %34 = icmp slt i64 %indvars.iv.next, %21
  %indvar.next = add i32 %indvar, 1
  br i1 %34, label %for_begin1.preheader, label %for_end, !prof !5

if_end.us.8:                                      ; preds = %for_begin1.preheader
  %35 = getelementptr inbounds float, float* %4, i64 %22
  %36 = bitcast float* %35 to <8 x float>*
  store <8 x float> zeroinitializer, <8 x float>* %36, align 32, !tbaa !3837
  %37 = add nsw i64 %22, 8
  %38 = add i32 %30, 8
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds float, float* %7, i64 %39
  %41 = bitcast float* %40 to <8 x float>*
  %42 = load <8 x float>, <8 x float>* %41, align 32, !tbaa !3840
  %43 = getelementptr inbounds float, float* %4, i64 %37
  %44 = bitcast float* %43 to <8 x float>*
  store <8 x float> %42, <8 x float>* %44, align 32, !tbaa !3837
  %45 = add nsw i64 %22, 16
  %46 = add i32 %30, 16
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds float, float* %7, i64 %47
  %49 = bitcast float* %48 to <8 x float>*
  %50 = load <8 x float>, <8 x float>* %49, align 32, !tbaa !3840
  %51 = getelementptr inbounds float, float* %4, i64 %45
  %52 = bitcast float* %51 to <8 x float>*
  store <8 x float> %50, <8 x float>* %52, align 32, !tbaa !3837
  %53 = add nsw i64 %22, 24
  %54 = add i32 %30, 24
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds float, float* %7, i64 %55
  %57 = bitcast float* %56 to <8 x float>*
  %58 = load <8 x float>, <8 x float>* %57, align 32, !tbaa !3840
  %59 = getelementptr inbounds float, float* %4, i64 %53
  %60 = bitcast float* %59 to <8 x float>*
  store <8 x float> %58, <8 x float>* %60, align 32, !tbaa !3837
  %61 = add nsw i64 %22, 32
  %62 = add i32 %30, 32
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %7, i64 %63
  %65 = bitcast float* %64 to <8 x float>*
  %66 = load <8 x float>, <8 x float>* %65, align 32, !tbaa !3840
  %67 = getelementptr inbounds float, float* %4, i64 %61
  %68 = bitcast float* %67 to <8 x float>*
  store <8 x float> %66, <8 x float>* %68, align 32, !tbaa !3837
  %69 = add nsw i64 %22, 40
  %70 = add i32 %30, 40
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %7, i64 %71
  %73 = bitcast float* %72 to <8 x float>*
  %74 = load <8 x float>, <8 x float>* %73, align 32, !tbaa !3840
  %75 = getelementptr inbounds float, float* %4, i64 %69
  %76 = bitcast float* %75 to <8 x float>*
  store <8 x float> %74, <8 x float>* %76, align 32, !tbaa !3837
  %77 = add nsw i64 %22, 48
  %78 = add i32 %30, 48
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %7, i64 %79
  %81 = bitcast float* %80 to <8 x float>*
  %82 = load <8 x float>, <8 x float>* %81, align 32, !tbaa !3840
  %83 = getelementptr inbounds float, float* %4, i64 %77
  %84 = bitcast float* %83 to <8 x float>*
  store <8 x float> %82, <8 x float>* %84, align 32, !tbaa !3837
  %85 = add nsw i64 %22, 56
  %86 = add i32 %30, 56
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %7, i64 %87
  %89 = bitcast float* %88 to <8 x float>*
  %90 = load <8 x float>, <8 x float>* %89, align 32, !tbaa !3840
  %91 = getelementptr inbounds float, float* %4, i64 %85
  %92 = bitcast float* %91 to <8 x float>*
  store <8 x float> %90, <8 x float>* %92, align 32, !tbaa !3837
  %93 = add nsw i64 %22, 64
  %94 = getelementptr inbounds float, float* %4, i64 %93
  %95 = bitcast float* %94 to <8 x float>*
  store <8 x float> zeroinitializer, <8 x float>* %95, align 32, !tbaa !3837
  br label %for_end3
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.289(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 447
  %17 = sdiv i32 %16, %15
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %17, %18
  %20 = icmp slt i32 %19, 448
  %21 = select i1 %20, i32 %19, i32 448
  %22 = mul nsw i32 %17, %0
  %23 = icmp slt i32 %22, 448
  %24 = select i1 %23, i32 %22, i32 448
  %25 = icmp slt i32 %24, %21
  br i1 %25, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %26 = sext i32 %24 to i64
  %27 = sext i32 %21 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_begin13.preheader
  %indvars.iv83 = phi i64 [ %26, %for_body.lr.ph ], [ %indvars.iv.next84, %for_begin13.preheader ]
  %28 = trunc i64 %indvars.iv83 to i32
  %29 = sdiv i32 %28, 7
  %30 = mul i32 %29, 7
  %.decomposed = sub i32 %28, %30
  %31 = mul nsw i32 %29, 36864
  %32 = sext i32 %31 to i64
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_begin13.preheader, %entry
  ret i32 0

for_begin13.preheader:                            ; preds = %for_end6
  %33 = mul nsw i64 %indvars.iv83, 56
  %34 = shl nsw i32 %29, 3
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds float, float* %13, i64 %35
  %37 = bitcast float* %36 to <8 x float>*
  %38 = load <8 x float>, <8 x float>* %37, align 32, !tbaa !3843
  %39 = fadd <8 x float> %38, %423
  %40 = fcmp ogt <8 x float> %39, zeroinitializer
  %41 = select <8 x i1> %40, <8 x float> %39, <8 x float> zeroinitializer
  %42 = getelementptr inbounds float, float* %10, i64 %33
  %43 = bitcast float* %42 to <8 x float>*
  store <8 x float> %41, <8 x float>* %43, align 32, !tbaa !3846
  %44 = add nsw i64 %33, 8
  %45 = fadd <8 x float> %38, %429
  %46 = fcmp ogt <8 x float> %45, zeroinitializer
  %47 = select <8 x i1> %46, <8 x float> %45, <8 x float> zeroinitializer
  %48 = getelementptr inbounds float, float* %10, i64 %44
  %49 = bitcast float* %48 to <8 x float>*
  store <8 x float> %47, <8 x float>* %49, align 32, !tbaa !3846
  %50 = add nsw i64 %33, 16
  %51 = fadd <8 x float> %38, %435
  %52 = fcmp ogt <8 x float> %51, zeroinitializer
  %53 = select <8 x i1> %52, <8 x float> %51, <8 x float> zeroinitializer
  %54 = getelementptr inbounds float, float* %10, i64 %50
  %55 = bitcast float* %54 to <8 x float>*
  store <8 x float> %53, <8 x float>* %55, align 32, !tbaa !3846
  %56 = add nsw i64 %33, 24
  %57 = fadd <8 x float> %38, %441
  %58 = fcmp ogt <8 x float> %57, zeroinitializer
  %59 = select <8 x i1> %58, <8 x float> %57, <8 x float> zeroinitializer
  %60 = getelementptr inbounds float, float* %10, i64 %56
  %61 = bitcast float* %60 to <8 x float>*
  store <8 x float> %59, <8 x float>* %61, align 32, !tbaa !3846
  %62 = add nsw i64 %33, 32
  %63 = fadd <8 x float> %38, %447
  %64 = fcmp ogt <8 x float> %63, zeroinitializer
  %65 = select <8 x i1> %64, <8 x float> %63, <8 x float> zeroinitializer
  %66 = getelementptr inbounds float, float* %10, i64 %62
  %67 = bitcast float* %66 to <8 x float>*
  store <8 x float> %65, <8 x float>* %67, align 32, !tbaa !3846
  %68 = add nsw i64 %33, 40
  %69 = fadd <8 x float> %38, %453
  %70 = fcmp ogt <8 x float> %69, zeroinitializer
  %71 = select <8 x i1> %70, <8 x float> %69, <8 x float> zeroinitializer
  %72 = getelementptr inbounds float, float* %10, i64 %68
  %73 = bitcast float* %72 to <8 x float>*
  store <8 x float> %71, <8 x float>* %73, align 32, !tbaa !3846
  %74 = add nsw i64 %33, 48
  %75 = fadd <8 x float> %38, %459
  %76 = fcmp ogt <8 x float> %75, zeroinitializer
  %77 = select <8 x i1> %76, <8 x float> %75, <8 x float> zeroinitializer
  %78 = getelementptr inbounds float, float* %10, i64 %74
  %79 = bitcast float* %78 to <8 x float>*
  store <8 x float> %77, <8 x float>* %79, align 32, !tbaa !3846
  %indvars.iv.next84 = add nsw i64 %indvars.iv83, 1
  %80 = icmp slt i64 %indvars.iv.next84, %27
  br i1 %80, label %for_body, label %for_end, !prof !5

for_begin4.preheader:                             ; preds = %for_end6, %for_body
  %indvars.iv77 = phi i64 [ 0, %for_body ], [ %indvars.iv.next78, %for_end6 ]
  %.lcssa28.lcssa.lcssa66 = phi <8 x float> [ zeroinitializer, %for_body ], [ %459, %for_end6 ]
  %.lcssa26.lcssa.lcssa64 = phi <8 x float> [ zeroinitializer, %for_body ], [ %453, %for_end6 ]
  %.lcssa24.lcssa.lcssa62 = phi <8 x float> [ zeroinitializer, %for_body ], [ %447, %for_end6 ]
  %.lcssa22.lcssa.lcssa61 = phi <8 x float> [ zeroinitializer, %for_body ], [ %441, %for_end6 ]
  %.lcssa20.lcssa.lcssa59 = phi <8 x float> [ zeroinitializer, %for_body ], [ %435, %for_end6 ]
  %.lcssa18.lcssa.lcssa57 = phi <8 x float> [ zeroinitializer, %for_body ], [ %429, %for_end6 ]
  %.lcssa.lcssa.lcssa55 = phi <8 x float> [ zeroinitializer, %for_body ], [ %423, %for_end6 ]
  %81 = mul nuw nsw i64 %indvars.iv77, 576
  %82 = add nsw i64 %81, %32
  %83 = trunc i64 %indvars.iv77 to i32
  %84 = mul i32 %83, 648
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_end9, %for_begin4.preheader
  %indvars.iv73 = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next74, %for_end9 ]
  %.lcssa28.lcssa53 = phi <8 x float> [ %.lcssa28.lcssa.lcssa66, %for_begin4.preheader ], [ %459, %for_end9 ]
  %.lcssa26.lcssa51 = phi <8 x float> [ %.lcssa26.lcssa.lcssa64, %for_begin4.preheader ], [ %453, %for_end9 ]
  %.lcssa24.lcssa49 = phi <8 x float> [ %.lcssa24.lcssa.lcssa62, %for_begin4.preheader ], [ %447, %for_end9 ]
  %.lcssa22.lcssa47 = phi <8 x float> [ %.lcssa22.lcssa.lcssa61, %for_begin4.preheader ], [ %441, %for_end9 ]
  %.lcssa20.lcssa46 = phi <8 x float> [ %.lcssa20.lcssa.lcssa59, %for_begin4.preheader ], [ %435, %for_end9 ]
  %.lcssa18.lcssa44 = phi <8 x float> [ %.lcssa18.lcssa.lcssa57, %for_begin4.preheader ], [ %429, %for_end9 ]
  %.lcssa.lcssa42 = phi <8 x float> [ %.lcssa.lcssa.lcssa55, %for_begin4.preheader ], [ %423, %for_end9 ]
  %85 = phi i32 [ 0, %for_begin4.preheader ], [ %460, %for_end9 ]
  %reass.add = add nsw i32 %85, %.decomposed
  %reass.mul = mul i32 %reass.add, 72
  %86 = add nsw i32 %reass.mul, %84
  %87 = mul nuw nsw i64 %indvars.iv73, 192
  %88 = add nsw i64 %82, %87
  %89 = sext i32 %86 to i64
  br label %for_begin10.preheader

for_end6:                                         ; preds = %for_end9
  %indvars.iv.next78 = add nuw nsw i64 %indvars.iv77, 1
  %exitcond79 = icmp eq i64 %indvars.iv.next78, 64
  br i1 %exitcond79, label %for_begin13.preheader, label %for_begin4.preheader, !prof !50

for_begin10.preheader:                            ; preds = %for_begin10.preheader, %for_begin7.preheader
  %indvars.iv = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next, %for_begin10.preheader ]
  %.lcssa2841 = phi <8 x float> [ %.lcssa28.lcssa53, %for_begin7.preheader ], [ %459, %for_begin10.preheader ]
  %.lcssa2639 = phi <8 x float> [ %.lcssa26.lcssa51, %for_begin7.preheader ], [ %453, %for_begin10.preheader ]
  %.lcssa2437 = phi <8 x float> [ %.lcssa24.lcssa49, %for_begin7.preheader ], [ %447, %for_begin10.preheader ]
  %.lcssa2235 = phi <8 x float> [ %.lcssa22.lcssa47, %for_begin7.preheader ], [ %441, %for_begin10.preheader ]
  %.lcssa2033 = phi <8 x float> [ %.lcssa20.lcssa46, %for_begin7.preheader ], [ %435, %for_begin10.preheader ]
  %.lcssa1832 = phi <8 x float> [ %.lcssa18.lcssa44, %for_begin7.preheader ], [ %429, %for_begin10.preheader ]
  %.lcssa30 = phi <8 x float> [ %.lcssa.lcssa42, %for_begin7.preheader ], [ %423, %for_begin10.preheader ]
  %90 = shl i64 %indvars.iv, 3
  %91 = add nsw i64 %90, %89
  %92 = shl i64 %indvars.iv, 6
  %93 = add nsw i64 %88, %92
  %94 = getelementptr inbounds float, float* %4, i64 %91
  %95 = load float, float* %94, align 4, !tbaa !3837
  %96 = insertelement <8 x float> undef, float %95, i32 0
  %97 = shufflevector <8 x float> %96, <8 x float> undef, <8 x i32> zeroinitializer
  %98 = getelementptr inbounds float, float* %7, i64 %93
  %99 = bitcast float* %98 to <8 x float>*
  %100 = load <8 x float>, <8 x float>* %99, align 32, !tbaa !3849
  %101 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %97, <8 x float> %100, <8 x float> %.lcssa30)
  %102 = add nsw i64 %91, 8
  %103 = getelementptr inbounds float, float* %4, i64 %102
  %104 = load float, float* %103, align 4, !tbaa !3837
  %105 = insertelement <8 x float> undef, float %104, i32 0
  %106 = shufflevector <8 x float> %105, <8 x float> undef, <8 x i32> zeroinitializer
  %107 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %106, <8 x float> %100, <8 x float> %.lcssa1832)
  %108 = add nsw i64 %91, 16
  %109 = getelementptr inbounds float, float* %4, i64 %108
  %110 = load float, float* %109, align 4, !tbaa !3837
  %111 = insertelement <8 x float> undef, float %110, i32 0
  %112 = shufflevector <8 x float> %111, <8 x float> undef, <8 x i32> zeroinitializer
  %113 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %112, <8 x float> %100, <8 x float> %.lcssa2033)
  %114 = add nsw i64 %91, 24
  %115 = getelementptr inbounds float, float* %4, i64 %114
  %116 = load float, float* %115, align 4, !tbaa !3837
  %117 = insertelement <8 x float> undef, float %116, i32 0
  %118 = shufflevector <8 x float> %117, <8 x float> undef, <8 x i32> zeroinitializer
  %119 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %118, <8 x float> %100, <8 x float> %.lcssa2235)
  %120 = add nsw i64 %91, 32
  %121 = getelementptr inbounds float, float* %4, i64 %120
  %122 = load float, float* %121, align 4, !tbaa !3837
  %123 = insertelement <8 x float> undef, float %122, i32 0
  %124 = shufflevector <8 x float> %123, <8 x float> undef, <8 x i32> zeroinitializer
  %125 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %124, <8 x float> %100, <8 x float> %.lcssa2437)
  %126 = add nsw i64 %91, 40
  %127 = getelementptr inbounds float, float* %4, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !3837
  %129 = insertelement <8 x float> undef, float %128, i32 0
  %130 = shufflevector <8 x float> %129, <8 x float> undef, <8 x i32> zeroinitializer
  %131 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %130, <8 x float> %100, <8 x float> %.lcssa2639)
  %132 = add nsw i64 %91, 48
  %133 = getelementptr inbounds float, float* %4, i64 %132
  %134 = load float, float* %133, align 4, !tbaa !3837
  %135 = insertelement <8 x float> undef, float %134, i32 0
  %136 = shufflevector <8 x float> %135, <8 x float> undef, <8 x i32> zeroinitializer
  %137 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %136, <8 x float> %100, <8 x float> %.lcssa2841)
  %138 = or i64 %91, 1
  %139 = getelementptr inbounds float, float* %4, i64 %138
  %140 = load float, float* %139, align 4, !tbaa !3837
  %141 = insertelement <8 x float> undef, float %140, i32 0
  %142 = shufflevector <8 x float> %141, <8 x float> undef, <8 x i32> zeroinitializer
  %143 = or i64 %93, 8
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = bitcast float* %144 to <8 x float>*
  %146 = load <8 x float>, <8 x float>* %145, align 32, !tbaa !3849
  %147 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %142, <8 x float> %146, <8 x float> %101)
  %148 = add nsw i64 %138, 8
  %149 = getelementptr inbounds float, float* %4, i64 %148
  %150 = load float, float* %149, align 4, !tbaa !3837
  %151 = insertelement <8 x float> undef, float %150, i32 0
  %152 = shufflevector <8 x float> %151, <8 x float> undef, <8 x i32> zeroinitializer
  %153 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %152, <8 x float> %146, <8 x float> %107)
  %154 = add nsw i64 %138, 16
  %155 = getelementptr inbounds float, float* %4, i64 %154
  %156 = load float, float* %155, align 4, !tbaa !3837
  %157 = insertelement <8 x float> undef, float %156, i32 0
  %158 = shufflevector <8 x float> %157, <8 x float> undef, <8 x i32> zeroinitializer
  %159 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %158, <8 x float> %146, <8 x float> %113)
  %160 = add nsw i64 %138, 24
  %161 = getelementptr inbounds float, float* %4, i64 %160
  %162 = load float, float* %161, align 4, !tbaa !3837
  %163 = insertelement <8 x float> undef, float %162, i32 0
  %164 = shufflevector <8 x float> %163, <8 x float> undef, <8 x i32> zeroinitializer
  %165 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %164, <8 x float> %146, <8 x float> %119)
  %166 = add nsw i64 %138, 32
  %167 = getelementptr inbounds float, float* %4, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !3837
  %169 = insertelement <8 x float> undef, float %168, i32 0
  %170 = shufflevector <8 x float> %169, <8 x float> undef, <8 x i32> zeroinitializer
  %171 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %170, <8 x float> %146, <8 x float> %125)
  %172 = add nsw i64 %138, 40
  %173 = getelementptr inbounds float, float* %4, i64 %172
  %174 = load float, float* %173, align 4, !tbaa !3837
  %175 = insertelement <8 x float> undef, float %174, i32 0
  %176 = shufflevector <8 x float> %175, <8 x float> undef, <8 x i32> zeroinitializer
  %177 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %176, <8 x float> %146, <8 x float> %131)
  %178 = add nsw i64 %138, 48
  %179 = getelementptr inbounds float, float* %4, i64 %178
  %180 = load float, float* %179, align 4, !tbaa !3837
  %181 = insertelement <8 x float> undef, float %180, i32 0
  %182 = shufflevector <8 x float> %181, <8 x float> undef, <8 x i32> zeroinitializer
  %183 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %182, <8 x float> %146, <8 x float> %137)
  %184 = or i64 %91, 2
  %185 = getelementptr inbounds float, float* %4, i64 %184
  %186 = load float, float* %185, align 4, !tbaa !3837
  %187 = insertelement <8 x float> undef, float %186, i32 0
  %188 = shufflevector <8 x float> %187, <8 x float> undef, <8 x i32> zeroinitializer
  %189 = or i64 %93, 16
  %190 = getelementptr inbounds float, float* %7, i64 %189
  %191 = bitcast float* %190 to <8 x float>*
  %192 = load <8 x float>, <8 x float>* %191, align 32, !tbaa !3849
  %193 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %188, <8 x float> %192, <8 x float> %147)
  %194 = add nsw i64 %184, 8
  %195 = getelementptr inbounds float, float* %4, i64 %194
  %196 = load float, float* %195, align 4, !tbaa !3837
  %197 = insertelement <8 x float> undef, float %196, i32 0
  %198 = shufflevector <8 x float> %197, <8 x float> undef, <8 x i32> zeroinitializer
  %199 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %198, <8 x float> %192, <8 x float> %153)
  %200 = add nsw i64 %184, 16
  %201 = getelementptr inbounds float, float* %4, i64 %200
  %202 = load float, float* %201, align 4, !tbaa !3837
  %203 = insertelement <8 x float> undef, float %202, i32 0
  %204 = shufflevector <8 x float> %203, <8 x float> undef, <8 x i32> zeroinitializer
  %205 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %204, <8 x float> %192, <8 x float> %159)
  %206 = add nsw i64 %184, 24
  %207 = getelementptr inbounds float, float* %4, i64 %206
  %208 = load float, float* %207, align 4, !tbaa !3837
  %209 = insertelement <8 x float> undef, float %208, i32 0
  %210 = shufflevector <8 x float> %209, <8 x float> undef, <8 x i32> zeroinitializer
  %211 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %210, <8 x float> %192, <8 x float> %165)
  %212 = add nsw i64 %184, 32
  %213 = getelementptr inbounds float, float* %4, i64 %212
  %214 = load float, float* %213, align 4, !tbaa !3837
  %215 = insertelement <8 x float> undef, float %214, i32 0
  %216 = shufflevector <8 x float> %215, <8 x float> undef, <8 x i32> zeroinitializer
  %217 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %216, <8 x float> %192, <8 x float> %171)
  %218 = add nsw i64 %184, 40
  %219 = getelementptr inbounds float, float* %4, i64 %218
  %220 = load float, float* %219, align 4, !tbaa !3837
  %221 = insertelement <8 x float> undef, float %220, i32 0
  %222 = shufflevector <8 x float> %221, <8 x float> undef, <8 x i32> zeroinitializer
  %223 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %222, <8 x float> %192, <8 x float> %177)
  %224 = add nsw i64 %184, 48
  %225 = getelementptr inbounds float, float* %4, i64 %224
  %226 = load float, float* %225, align 4, !tbaa !3837
  %227 = insertelement <8 x float> undef, float %226, i32 0
  %228 = shufflevector <8 x float> %227, <8 x float> undef, <8 x i32> zeroinitializer
  %229 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %228, <8 x float> %192, <8 x float> %183)
  %230 = or i64 %91, 3
  %231 = getelementptr inbounds float, float* %4, i64 %230
  %232 = load float, float* %231, align 4, !tbaa !3837
  %233 = insertelement <8 x float> undef, float %232, i32 0
  %234 = shufflevector <8 x float> %233, <8 x float> undef, <8 x i32> zeroinitializer
  %235 = or i64 %93, 24
  %236 = getelementptr inbounds float, float* %7, i64 %235
  %237 = bitcast float* %236 to <8 x float>*
  %238 = load <8 x float>, <8 x float>* %237, align 32, !tbaa !3849
  %239 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %234, <8 x float> %238, <8 x float> %193)
  %240 = add nsw i64 %230, 8
  %241 = getelementptr inbounds float, float* %4, i64 %240
  %242 = load float, float* %241, align 4, !tbaa !3837
  %243 = insertelement <8 x float> undef, float %242, i32 0
  %244 = shufflevector <8 x float> %243, <8 x float> undef, <8 x i32> zeroinitializer
  %245 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %244, <8 x float> %238, <8 x float> %199)
  %246 = add nsw i64 %230, 16
  %247 = getelementptr inbounds float, float* %4, i64 %246
  %248 = load float, float* %247, align 4, !tbaa !3837
  %249 = insertelement <8 x float> undef, float %248, i32 0
  %250 = shufflevector <8 x float> %249, <8 x float> undef, <8 x i32> zeroinitializer
  %251 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %250, <8 x float> %238, <8 x float> %205)
  %252 = add nsw i64 %230, 24
  %253 = getelementptr inbounds float, float* %4, i64 %252
  %254 = load float, float* %253, align 4, !tbaa !3837
  %255 = insertelement <8 x float> undef, float %254, i32 0
  %256 = shufflevector <8 x float> %255, <8 x float> undef, <8 x i32> zeroinitializer
  %257 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %256, <8 x float> %238, <8 x float> %211)
  %258 = add nsw i64 %230, 32
  %259 = getelementptr inbounds float, float* %4, i64 %258
  %260 = load float, float* %259, align 4, !tbaa !3837
  %261 = insertelement <8 x float> undef, float %260, i32 0
  %262 = shufflevector <8 x float> %261, <8 x float> undef, <8 x i32> zeroinitializer
  %263 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %262, <8 x float> %238, <8 x float> %217)
  %264 = add nsw i64 %230, 40
  %265 = getelementptr inbounds float, float* %4, i64 %264
  %266 = load float, float* %265, align 4, !tbaa !3837
  %267 = insertelement <8 x float> undef, float %266, i32 0
  %268 = shufflevector <8 x float> %267, <8 x float> undef, <8 x i32> zeroinitializer
  %269 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %268, <8 x float> %238, <8 x float> %223)
  %270 = add nsw i64 %230, 48
  %271 = getelementptr inbounds float, float* %4, i64 %270
  %272 = load float, float* %271, align 4, !tbaa !3837
  %273 = insertelement <8 x float> undef, float %272, i32 0
  %274 = shufflevector <8 x float> %273, <8 x float> undef, <8 x i32> zeroinitializer
  %275 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %274, <8 x float> %238, <8 x float> %229)
  %276 = or i64 %91, 4
  %277 = getelementptr inbounds float, float* %4, i64 %276
  %278 = load float, float* %277, align 4, !tbaa !3837
  %279 = insertelement <8 x float> undef, float %278, i32 0
  %280 = shufflevector <8 x float> %279, <8 x float> undef, <8 x i32> zeroinitializer
  %281 = or i64 %93, 32
  %282 = getelementptr inbounds float, float* %7, i64 %281
  %283 = bitcast float* %282 to <8 x float>*
  %284 = load <8 x float>, <8 x float>* %283, align 32, !tbaa !3849
  %285 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %280, <8 x float> %284, <8 x float> %239)
  %286 = add nsw i64 %276, 8
  %287 = getelementptr inbounds float, float* %4, i64 %286
  %288 = load float, float* %287, align 4, !tbaa !3837
  %289 = insertelement <8 x float> undef, float %288, i32 0
  %290 = shufflevector <8 x float> %289, <8 x float> undef, <8 x i32> zeroinitializer
  %291 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %290, <8 x float> %284, <8 x float> %245)
  %292 = add nsw i64 %276, 16
  %293 = getelementptr inbounds float, float* %4, i64 %292
  %294 = load float, float* %293, align 4, !tbaa !3837
  %295 = insertelement <8 x float> undef, float %294, i32 0
  %296 = shufflevector <8 x float> %295, <8 x float> undef, <8 x i32> zeroinitializer
  %297 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %296, <8 x float> %284, <8 x float> %251)
  %298 = add nsw i64 %276, 24
  %299 = getelementptr inbounds float, float* %4, i64 %298
  %300 = load float, float* %299, align 4, !tbaa !3837
  %301 = insertelement <8 x float> undef, float %300, i32 0
  %302 = shufflevector <8 x float> %301, <8 x float> undef, <8 x i32> zeroinitializer
  %303 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %302, <8 x float> %284, <8 x float> %257)
  %304 = add nsw i64 %276, 32
  %305 = getelementptr inbounds float, float* %4, i64 %304
  %306 = load float, float* %305, align 4, !tbaa !3837
  %307 = insertelement <8 x float> undef, float %306, i32 0
  %308 = shufflevector <8 x float> %307, <8 x float> undef, <8 x i32> zeroinitializer
  %309 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %308, <8 x float> %284, <8 x float> %263)
  %310 = add nsw i64 %276, 40
  %311 = getelementptr inbounds float, float* %4, i64 %310
  %312 = load float, float* %311, align 4, !tbaa !3837
  %313 = insertelement <8 x float> undef, float %312, i32 0
  %314 = shufflevector <8 x float> %313, <8 x float> undef, <8 x i32> zeroinitializer
  %315 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %314, <8 x float> %284, <8 x float> %269)
  %316 = add nsw i64 %276, 48
  %317 = getelementptr inbounds float, float* %4, i64 %316
  %318 = load float, float* %317, align 4, !tbaa !3837
  %319 = insertelement <8 x float> undef, float %318, i32 0
  %320 = shufflevector <8 x float> %319, <8 x float> undef, <8 x i32> zeroinitializer
  %321 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %320, <8 x float> %284, <8 x float> %275)
  %322 = or i64 %91, 5
  %323 = getelementptr inbounds float, float* %4, i64 %322
  %324 = load float, float* %323, align 4, !tbaa !3837
  %325 = insertelement <8 x float> undef, float %324, i32 0
  %326 = shufflevector <8 x float> %325, <8 x float> undef, <8 x i32> zeroinitializer
  %327 = or i64 %93, 40
  %328 = getelementptr inbounds float, float* %7, i64 %327
  %329 = bitcast float* %328 to <8 x float>*
  %330 = load <8 x float>, <8 x float>* %329, align 32, !tbaa !3849
  %331 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %326, <8 x float> %330, <8 x float> %285)
  %332 = add nsw i64 %322, 8
  %333 = getelementptr inbounds float, float* %4, i64 %332
  %334 = load float, float* %333, align 4, !tbaa !3837
  %335 = insertelement <8 x float> undef, float %334, i32 0
  %336 = shufflevector <8 x float> %335, <8 x float> undef, <8 x i32> zeroinitializer
  %337 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %336, <8 x float> %330, <8 x float> %291)
  %338 = add nsw i64 %322, 16
  %339 = getelementptr inbounds float, float* %4, i64 %338
  %340 = load float, float* %339, align 4, !tbaa !3837
  %341 = insertelement <8 x float> undef, float %340, i32 0
  %342 = shufflevector <8 x float> %341, <8 x float> undef, <8 x i32> zeroinitializer
  %343 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %342, <8 x float> %330, <8 x float> %297)
  %344 = add nsw i64 %322, 24
  %345 = getelementptr inbounds float, float* %4, i64 %344
  %346 = load float, float* %345, align 4, !tbaa !3837
  %347 = insertelement <8 x float> undef, float %346, i32 0
  %348 = shufflevector <8 x float> %347, <8 x float> undef, <8 x i32> zeroinitializer
  %349 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %348, <8 x float> %330, <8 x float> %303)
  %350 = add nsw i64 %322, 32
  %351 = getelementptr inbounds float, float* %4, i64 %350
  %352 = load float, float* %351, align 4, !tbaa !3837
  %353 = insertelement <8 x float> undef, float %352, i32 0
  %354 = shufflevector <8 x float> %353, <8 x float> undef, <8 x i32> zeroinitializer
  %355 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %354, <8 x float> %330, <8 x float> %309)
  %356 = add nsw i64 %322, 40
  %357 = getelementptr inbounds float, float* %4, i64 %356
  %358 = load float, float* %357, align 4, !tbaa !3837
  %359 = insertelement <8 x float> undef, float %358, i32 0
  %360 = shufflevector <8 x float> %359, <8 x float> undef, <8 x i32> zeroinitializer
  %361 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %360, <8 x float> %330, <8 x float> %315)
  %362 = add nsw i64 %322, 48
  %363 = getelementptr inbounds float, float* %4, i64 %362
  %364 = load float, float* %363, align 4, !tbaa !3837
  %365 = insertelement <8 x float> undef, float %364, i32 0
  %366 = shufflevector <8 x float> %365, <8 x float> undef, <8 x i32> zeroinitializer
  %367 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %366, <8 x float> %330, <8 x float> %321)
  %368 = or i64 %91, 6
  %369 = getelementptr inbounds float, float* %4, i64 %368
  %370 = load float, float* %369, align 4, !tbaa !3837
  %371 = insertelement <8 x float> undef, float %370, i32 0
  %372 = shufflevector <8 x float> %371, <8 x float> undef, <8 x i32> zeroinitializer
  %373 = or i64 %93, 48
  %374 = getelementptr inbounds float, float* %7, i64 %373
  %375 = bitcast float* %374 to <8 x float>*
  %376 = load <8 x float>, <8 x float>* %375, align 32, !tbaa !3849
  %377 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %372, <8 x float> %376, <8 x float> %331)
  %378 = add nsw i64 %368, 8
  %379 = getelementptr inbounds float, float* %4, i64 %378
  %380 = load float, float* %379, align 4, !tbaa !3837
  %381 = insertelement <8 x float> undef, float %380, i32 0
  %382 = shufflevector <8 x float> %381, <8 x float> undef, <8 x i32> zeroinitializer
  %383 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %382, <8 x float> %376, <8 x float> %337)
  %384 = add nsw i64 %368, 16
  %385 = getelementptr inbounds float, float* %4, i64 %384
  %386 = load float, float* %385, align 4, !tbaa !3837
  %387 = insertelement <8 x float> undef, float %386, i32 0
  %388 = shufflevector <8 x float> %387, <8 x float> undef, <8 x i32> zeroinitializer
  %389 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %388, <8 x float> %376, <8 x float> %343)
  %390 = add nsw i64 %368, 24
  %391 = getelementptr inbounds float, float* %4, i64 %390
  %392 = load float, float* %391, align 4, !tbaa !3837
  %393 = insertelement <8 x float> undef, float %392, i32 0
  %394 = shufflevector <8 x float> %393, <8 x float> undef, <8 x i32> zeroinitializer
  %395 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %394, <8 x float> %376, <8 x float> %349)
  %396 = add nsw i64 %368, 32
  %397 = getelementptr inbounds float, float* %4, i64 %396
  %398 = load float, float* %397, align 4, !tbaa !3837
  %399 = insertelement <8 x float> undef, float %398, i32 0
  %400 = shufflevector <8 x float> %399, <8 x float> undef, <8 x i32> zeroinitializer
  %401 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %400, <8 x float> %376, <8 x float> %355)
  %402 = add nsw i64 %368, 40
  %403 = getelementptr inbounds float, float* %4, i64 %402
  %404 = load float, float* %403, align 4, !tbaa !3837
  %405 = insertelement <8 x float> undef, float %404, i32 0
  %406 = shufflevector <8 x float> %405, <8 x float> undef, <8 x i32> zeroinitializer
  %407 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %406, <8 x float> %376, <8 x float> %361)
  %408 = add nsw i64 %368, 48
  %409 = getelementptr inbounds float, float* %4, i64 %408
  %410 = load float, float* %409, align 4, !tbaa !3837
  %411 = insertelement <8 x float> undef, float %410, i32 0
  %412 = shufflevector <8 x float> %411, <8 x float> undef, <8 x i32> zeroinitializer
  %413 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %412, <8 x float> %376, <8 x float> %367)
  %414 = or i64 %91, 7
  %415 = getelementptr inbounds float, float* %4, i64 %414
  %416 = load float, float* %415, align 4, !tbaa !3837
  %417 = insertelement <8 x float> undef, float %416, i32 0
  %418 = shufflevector <8 x float> %417, <8 x float> undef, <8 x i32> zeroinitializer
  %419 = or i64 %93, 56
  %420 = getelementptr inbounds float, float* %7, i64 %419
  %421 = bitcast float* %420 to <8 x float>*
  %422 = load <8 x float>, <8 x float>* %421, align 32, !tbaa !3849
  %423 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %418, <8 x float> %422, <8 x float> %377)
  %424 = add nsw i64 %414, 8
  %425 = getelementptr inbounds float, float* %4, i64 %424
  %426 = load float, float* %425, align 4, !tbaa !3837
  %427 = insertelement <8 x float> undef, float %426, i32 0
  %428 = shufflevector <8 x float> %427, <8 x float> undef, <8 x i32> zeroinitializer
  %429 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %428, <8 x float> %422, <8 x float> %383)
  %430 = add nsw i64 %414, 16
  %431 = getelementptr inbounds float, float* %4, i64 %430
  %432 = load float, float* %431, align 4, !tbaa !3837
  %433 = insertelement <8 x float> undef, float %432, i32 0
  %434 = shufflevector <8 x float> %433, <8 x float> undef, <8 x i32> zeroinitializer
  %435 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %434, <8 x float> %422, <8 x float> %389)
  %436 = add nsw i64 %414, 24
  %437 = getelementptr inbounds float, float* %4, i64 %436
  %438 = load float, float* %437, align 4, !tbaa !3837
  %439 = insertelement <8 x float> undef, float %438, i32 0
  %440 = shufflevector <8 x float> %439, <8 x float> undef, <8 x i32> zeroinitializer
  %441 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %440, <8 x float> %422, <8 x float> %395)
  %442 = add nsw i64 %414, 32
  %443 = getelementptr inbounds float, float* %4, i64 %442
  %444 = load float, float* %443, align 4, !tbaa !3837
  %445 = insertelement <8 x float> undef, float %444, i32 0
  %446 = shufflevector <8 x float> %445, <8 x float> undef, <8 x i32> zeroinitializer
  %447 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %446, <8 x float> %422, <8 x float> %401)
  %448 = add nsw i64 %414, 40
  %449 = getelementptr inbounds float, float* %4, i64 %448
  %450 = load float, float* %449, align 4, !tbaa !3837
  %451 = insertelement <8 x float> undef, float %450, i32 0
  %452 = shufflevector <8 x float> %451, <8 x float> undef, <8 x i32> zeroinitializer
  %453 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %452, <8 x float> %422, <8 x float> %407)
  %454 = add nsw i64 %414, 48
  %455 = getelementptr inbounds float, float* %4, i64 %454
  %456 = load float, float* %455, align 4, !tbaa !3837
  %457 = insertelement <8 x float> undef, float %456, i32 0
  %458 = shufflevector <8 x float> %457, <8 x float> undef, <8 x i32> zeroinitializer
  %459 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %458, <8 x float> %422, <8 x float> %413)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %for_end9, label %for_begin10.preheader, !prof !50

for_end9:                                         ; preds = %for_begin10.preheader
  %indvars.iv.next74 = add nuw nsw i64 %indvars.iv73, 1
  %460 = add nuw nsw i32 %85, 1
  %exitcond76 = icmp eq i64 %indvars.iv.next74, 3
  br i1 %exitcond76, label %for_end6, label %for_begin7.preheader, !prof !50
}

define dllexport i32 @fused_layout_transform_39(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.290, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !3852
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.291, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !3866
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.292, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !3868
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !3882
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 16
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.100, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !3884
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 28
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !3887
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 28
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !3889
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 32
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !3893
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 401408
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !3907
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 25088
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !3909
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 896
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !3912
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 32
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !3914
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.293, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !3918
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !3932
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 4
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !3934
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 28
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.278, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !3937
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 28
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.279, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !3939
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 128
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.294, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !3943
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 401408
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !3957
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 100352
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !3959
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 3584
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !3962
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 128
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !3964
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([242 x i8], [242 x i8]* @.str.295, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_39_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_39_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %25, align 8
  %3 = getelementptr inbounds %25, %25* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %25, %25* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %25* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.296, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.296(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 111
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 112
  %15 = select i1 %14, i32 %13, i32 112
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 112
  %18 = select i1 %17, i32 %16, i32 112
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv10, 3584
  %23 = trunc i64 %indvars.iv10 to i32
  %24 = sdiv i32 %23, 28
  %25 = mul i32 %24, 28
  %.decomposed = sub i32 %23, %25
  %26 = mul nsw i32 %.decomposed, 896
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  %28 = mul nsw i32 %24, 100352
  %29 = insertelement <16 x i32> undef, i32 %28, i32 0
  %30 = add <16 x i32> %27, %29
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %31 = shl i64 %indvars.iv7, 7
  %32 = add nsw i64 %31, %22
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %33 = shl i32 %indvars.iv7.tr, 5
  %34 = insertelement <16 x i32> undef, i32 %33, i32 0
  %35 = add <16 x i32> %30, %34
  %36 = shufflevector <16 x i32> %35, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %37 = icmp slt i64 %indvars.iv.next11, %21
  br i1 %37, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %38 = shl nsw i64 %indvars.iv, 4
  %39 = add nsw i64 %32, %38
  %40 = trunc i64 %38 to i32
  %41 = insertelement <16 x i32> undef, i32 %40, i32 0
  %42 = trunc i64 %38 to i32
  %43 = or i32 %42, 1
  %44 = insertelement <16 x i32> %41, i32 %43, i32 1
  %45 = trunc i64 %38 to i32
  %46 = or i32 %45, 2
  %47 = insertelement <16 x i32> %44, i32 %46, i32 2
  %48 = trunc i64 %38 to i32
  %49 = or i32 %48, 3
  %50 = insertelement <16 x i32> %47, i32 %49, i32 3
  %51 = trunc i64 %38 to i32
  %52 = or i32 %51, 4
  %53 = insertelement <16 x i32> %50, i32 %52, i32 4
  %54 = trunc i64 %38 to i32
  %55 = or i32 %54, 5
  %56 = insertelement <16 x i32> %53, i32 %55, i32 5
  %57 = trunc i64 %38 to i32
  %58 = or i32 %57, 6
  %59 = insertelement <16 x i32> %56, i32 %58, i32 6
  %60 = trunc i64 %38 to i32
  %61 = or i32 %60, 7
  %62 = insertelement <16 x i32> %59, i32 %61, i32 7
  %63 = trunc i64 %38 to i32
  %64 = or i32 %63, 8
  %65 = insertelement <16 x i32> %62, i32 %64, i32 8
  %66 = trunc i64 %38 to i32
  %67 = or i32 %66, 9
  %68 = insertelement <16 x i32> %65, i32 %67, i32 9
  %69 = trunc i64 %38 to i32
  %70 = or i32 %69, 10
  %71 = insertelement <16 x i32> %68, i32 %70, i32 10
  %72 = trunc i64 %38 to i32
  %73 = or i32 %72, 11
  %74 = insertelement <16 x i32> %71, i32 %73, i32 11
  %75 = trunc i64 %38 to i32
  %76 = or i32 %75, 12
  %77 = insertelement <16 x i32> %74, i32 %76, i32 12
  %78 = trunc i64 %38 to i32
  %79 = or i32 %78, 13
  %80 = insertelement <16 x i32> %77, i32 %79, i32 13
  %81 = trunc i64 %38 to i32
  %82 = or i32 %81, 14
  %83 = insertelement <16 x i32> %80, i32 %82, i32 14
  %84 = trunc i64 %38 to i32
  %85 = or i32 %84, 15
  %86 = insertelement <16 x i32> %83, i32 %85, i32 15
  %87 = sdiv <16 x i32> %86, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %88 = mul <16 x i32> %87, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %.decomposed12 = sub <16 x i32> %86, %88
  %89 = add nsw <16 x i32> %.decomposed12, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %90 = icmp sgt <16 x i32> %.decomposed12, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %91 = select <16 x i1> %90, <16 x i32> %.decomposed12, <16 x i32> %89
  %not. = xor <16 x i1> %90, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %92 = zext <16 x i1> %not. to <16 x i32>
  %93 = sub nsw <16 x i32> %87, %92
  %94 = mul nsw <16 x i32> %93, <i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088>
  %95 = add <16 x i32> %36, %91
  %96 = add <16 x i32> %95, %94
  %97 = extractelement <16 x i32> %96, i64 0
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds float, float* %7, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !3968
  %101 = insertelement <16 x float> undef, float %100, i32 0
  %102 = extractelement <16 x i32> %96, i64 1
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !3968
  %106 = insertelement <16 x float> %101, float %105, i32 1
  %107 = extractelement <16 x i32> %96, i64 2
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float* %7, i64 %108
  %110 = load float, float* %109, align 4, !tbaa !3968
  %111 = insertelement <16 x float> %106, float %110, i32 2
  %112 = extractelement <16 x i32> %96, i64 3
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds float, float* %7, i64 %113
  %115 = load float, float* %114, align 4, !tbaa !3968
  %116 = insertelement <16 x float> %111, float %115, i32 3
  %117 = extractelement <16 x i32> %96, i64 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds float, float* %7, i64 %118
  %120 = load float, float* %119, align 4, !tbaa !3968
  %121 = insertelement <16 x float> %116, float %120, i32 4
  %122 = extractelement <16 x i32> %96, i64 5
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds float, float* %7, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !3968
  %126 = insertelement <16 x float> %121, float %125, i32 5
  %127 = extractelement <16 x i32> %96, i64 6
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds float, float* %7, i64 %128
  %130 = load float, float* %129, align 4, !tbaa !3968
  %131 = insertelement <16 x float> %126, float %130, i32 6
  %132 = extractelement <16 x i32> %96, i64 7
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds float, float* %7, i64 %133
  %135 = load float, float* %134, align 4, !tbaa !3968
  %136 = insertelement <16 x float> %131, float %135, i32 7
  %137 = extractelement <16 x i32> %96, i64 8
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds float, float* %7, i64 %138
  %140 = load float, float* %139, align 4, !tbaa !3968
  %141 = insertelement <16 x float> %136, float %140, i32 8
  %142 = extractelement <16 x i32> %96, i64 9
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = load float, float* %144, align 4, !tbaa !3968
  %146 = insertelement <16 x float> %141, float %145, i32 9
  %147 = extractelement <16 x i32> %96, i64 10
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds float, float* %7, i64 %148
  %150 = load float, float* %149, align 4, !tbaa !3968
  %151 = insertelement <16 x float> %146, float %150, i32 10
  %152 = extractelement <16 x i32> %96, i64 11
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds float, float* %7, i64 %153
  %155 = load float, float* %154, align 4, !tbaa !3968
  %156 = insertelement <16 x float> %151, float %155, i32 11
  %157 = extractelement <16 x i32> %96, i64 12
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds float, float* %7, i64 %158
  %160 = load float, float* %159, align 4, !tbaa !3968
  %161 = insertelement <16 x float> %156, float %160, i32 12
  %162 = extractelement <16 x i32> %96, i64 13
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds float, float* %7, i64 %163
  %165 = load float, float* %164, align 4, !tbaa !3968
  %166 = insertelement <16 x float> %161, float %165, i32 13
  %167 = extractelement <16 x i32> %96, i64 14
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds float, float* %7, i64 %168
  %170 = load float, float* %169, align 4, !tbaa !3968
  %171 = insertelement <16 x float> %166, float %170, i32 14
  %172 = extractelement <16 x i32> %96, i64 15
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds float, float* %7, i64 %173
  %175 = load float, float* %174, align 4, !tbaa !3968
  %176 = insertelement <16 x float> %171, float %175, i32 15
  %177 = getelementptr inbounds float, float* %4, i64 %39
  %178 = bitcast float* %177 to <16 x float>*
  store <16 x float> %176, <16 x float>* %178, align 64, !tbaa !3971
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 8
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 28
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.297, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !3974
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !3988
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !3991
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.298, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !3993
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.299, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.300, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.301, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !3995
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !4009
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 4
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.90, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !4011
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 56
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !4014
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 56
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !4016
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 16
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !4020
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 200704
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !4034
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 50176
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !4036
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 896
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !4039
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 16
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !4041
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.91, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !4045
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 4
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.33, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !4059
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 4
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !4061
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !4064
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !4066
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 16
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !4070
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 16
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !4072
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 1024
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !4086
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 256
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !4088
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 256
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !4091
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 256
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !4093
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 16
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !4097
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.302, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !4099
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !4113
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 4
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.41, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !4115
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !4118
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !4120
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 16
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !4124
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 64
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !4138
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 16
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !4140
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 16
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !4143
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 16
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !4145
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([231 x i8], [231 x i8]* @.str.45, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !4149
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !4163
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 4
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.52, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !4165
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 56
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !4168
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 56
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !4170
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 16
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !4174
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 200704
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !4188
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 50176
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !4190
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 896
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !4193
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 16
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !4195
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = alloca %26, align 8
  %6 = getelementptr inbounds %26, %26* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %26, %26* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %26, %26* %5, i64 0, i32 2
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %26, %26* %5, i64 0, i32 3
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %26, %26* %5, i64 0, i32 4
  store i32 %4, i32* %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %26* %5 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.303, i8* nonnull %12, i32 0)
  ret i32 %13
}

define private i32 @__tvm_parallel_lambda.303(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 111
  %20 = sdiv i32 %19, %18
  %21 = add nsw i32 %0, 1
  %22 = mul nsw i32 %20, %21
  %23 = icmp slt i32 %22, 112
  %24 = select i1 %23, i32 %22, i32 112
  %25 = mul nsw i32 %20, %0
  %26 = icmp slt i32 %25, 112
  %27 = select i1 %26, i32 %25, i32 112
  %28 = icmp slt i32 %27, %24
  br i1 %28, label %for_body, label %for_end, !prof !5

for_body:                                         ; preds = %entry, %for_end12
  %29 = phi i32 [ %336, %for_end12 ], [ %27, %entry ]
  %30 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %31 = tail call i8* %30(i32 1, i32 %16, i64 7168, i32 2, i32 32)
  %32 = bitcast i8* %31 to float*
  %33 = sdiv i32 %29, 28
  %34 = mul i32 %33, 28
  %.decomposed = sub i32 %29, %34
  %35 = mul nsw i32 %.decomposed, 1792
  %36 = shl i32 %33, 10
  %37 = sext i32 %36 to i64
  %38 = sext i32 %35 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end12, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end6
  %39 = mul nsw i32 %29, 1792
  %40 = shl nsw i32 %33, 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %13, i64 %41
  %43 = bitcast float* %42 to <16 x float>*
  %44 = load <16 x float>, <16 x float>* %43, align 64, !tbaa !4199
  br label %for_begin13.preheader

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv27 = phi i64 [ 0, %for_body ], [ %indvars.iv.next28, %for_end6 ]
  %45 = shl nsw i64 %indvars.iv27, 4
  %46 = getelementptr inbounds float, float* %32, i64 %45
  %47 = bitcast float* %46 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %47, align 64, !tbaa !4202
  %48 = add nuw nsw i64 %45, 896
  %49 = getelementptr inbounds float, float* %32, i64 %48
  %50 = bitcast float* %49 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %50, align 64, !tbaa !4202
  %51 = add nsw i64 %45, %38
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_begin7.preheader, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_begin7.preheader ]
  %.lcssa2225 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %309, %for_begin7.preheader ]
  %.lcssa24 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %303, %for_begin7.preheader ]
  %52 = mul nuw nsw i64 %indvars.iv, 50176
  %53 = add nsw i64 %51, %52
  %54 = shl i64 %indvars.iv, 8
  %55 = add nuw nsw i64 %54, %37
  %56 = getelementptr inbounds float, float* %4, i64 %53
  %57 = load float, float* %56, align 4, !tbaa !4205
  %58 = insertelement <16 x float> undef, float %57, i32 0
  %59 = shufflevector <16 x float> %58, <16 x float> undef, <16 x i32> zeroinitializer
  %60 = getelementptr inbounds float, float* %7, i64 %55
  %61 = bitcast float* %60 to <16 x float>*
  %62 = load <16 x float>, <16 x float>* %61, align 64, !tbaa !4208
  %63 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %59, <16 x float> %62, <16 x float> %.lcssa24)
  %64 = add nsw i64 %53, 896
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = load float, float* %65, align 4, !tbaa !4205
  %67 = insertelement <16 x float> undef, float %66, i32 0
  %68 = shufflevector <16 x float> %67, <16 x float> undef, <16 x i32> zeroinitializer
  %69 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %68, <16 x float> %62, <16 x float> %.lcssa2225)
  %70 = or i64 %53, 1
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = load float, float* %71, align 4, !tbaa !4205
  %73 = insertelement <16 x float> undef, float %72, i32 0
  %74 = shufflevector <16 x float> %73, <16 x float> undef, <16 x i32> zeroinitializer
  %75 = or i64 %55, 16
  %76 = getelementptr inbounds float, float* %7, i64 %75
  %77 = bitcast float* %76 to <16 x float>*
  %78 = load <16 x float>, <16 x float>* %77, align 64, !tbaa !4208
  %79 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %74, <16 x float> %78, <16 x float> %63)
  %80 = add nsw i64 %70, 896
  %81 = getelementptr inbounds float, float* %4, i64 %80
  %82 = load float, float* %81, align 4, !tbaa !4205
  %83 = insertelement <16 x float> undef, float %82, i32 0
  %84 = shufflevector <16 x float> %83, <16 x float> undef, <16 x i32> zeroinitializer
  %85 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %84, <16 x float> %78, <16 x float> %69)
  %86 = or i64 %53, 2
  %87 = getelementptr inbounds float, float* %4, i64 %86
  %88 = load float, float* %87, align 4, !tbaa !4205
  %89 = insertelement <16 x float> undef, float %88, i32 0
  %90 = shufflevector <16 x float> %89, <16 x float> undef, <16 x i32> zeroinitializer
  %91 = or i64 %55, 32
  %92 = getelementptr inbounds float, float* %7, i64 %91
  %93 = bitcast float* %92 to <16 x float>*
  %94 = load <16 x float>, <16 x float>* %93, align 64, !tbaa !4208
  %95 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %90, <16 x float> %94, <16 x float> %79)
  %96 = add nsw i64 %86, 896
  %97 = getelementptr inbounds float, float* %4, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !4205
  %99 = insertelement <16 x float> undef, float %98, i32 0
  %100 = shufflevector <16 x float> %99, <16 x float> undef, <16 x i32> zeroinitializer
  %101 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %100, <16 x float> %94, <16 x float> %85)
  %102 = or i64 %53, 3
  %103 = getelementptr inbounds float, float* %4, i64 %102
  %104 = load float, float* %103, align 4, !tbaa !4205
  %105 = insertelement <16 x float> undef, float %104, i32 0
  %106 = shufflevector <16 x float> %105, <16 x float> undef, <16 x i32> zeroinitializer
  %107 = or i64 %55, 48
  %108 = getelementptr inbounds float, float* %7, i64 %107
  %109 = bitcast float* %108 to <16 x float>*
  %110 = load <16 x float>, <16 x float>* %109, align 64, !tbaa !4208
  %111 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %106, <16 x float> %110, <16 x float> %95)
  %112 = add nsw i64 %102, 896
  %113 = getelementptr inbounds float, float* %4, i64 %112
  %114 = load float, float* %113, align 4, !tbaa !4205
  %115 = insertelement <16 x float> undef, float %114, i32 0
  %116 = shufflevector <16 x float> %115, <16 x float> undef, <16 x i32> zeroinitializer
  %117 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %116, <16 x float> %110, <16 x float> %101)
  %118 = or i64 %53, 4
  %119 = getelementptr inbounds float, float* %4, i64 %118
  %120 = load float, float* %119, align 4, !tbaa !4205
  %121 = insertelement <16 x float> undef, float %120, i32 0
  %122 = shufflevector <16 x float> %121, <16 x float> undef, <16 x i32> zeroinitializer
  %123 = or i64 %55, 64
  %124 = getelementptr inbounds float, float* %7, i64 %123
  %125 = bitcast float* %124 to <16 x float>*
  %126 = load <16 x float>, <16 x float>* %125, align 64, !tbaa !4208
  %127 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %122, <16 x float> %126, <16 x float> %111)
  %128 = add nsw i64 %118, 896
  %129 = getelementptr inbounds float, float* %4, i64 %128
  %130 = load float, float* %129, align 4, !tbaa !4205
  %131 = insertelement <16 x float> undef, float %130, i32 0
  %132 = shufflevector <16 x float> %131, <16 x float> undef, <16 x i32> zeroinitializer
  %133 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %132, <16 x float> %126, <16 x float> %117)
  %134 = or i64 %53, 5
  %135 = getelementptr inbounds float, float* %4, i64 %134
  %136 = load float, float* %135, align 4, !tbaa !4205
  %137 = insertelement <16 x float> undef, float %136, i32 0
  %138 = shufflevector <16 x float> %137, <16 x float> undef, <16 x i32> zeroinitializer
  %139 = or i64 %55, 80
  %140 = getelementptr inbounds float, float* %7, i64 %139
  %141 = bitcast float* %140 to <16 x float>*
  %142 = load <16 x float>, <16 x float>* %141, align 64, !tbaa !4208
  %143 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %138, <16 x float> %142, <16 x float> %127)
  %144 = add nsw i64 %134, 896
  %145 = getelementptr inbounds float, float* %4, i64 %144
  %146 = load float, float* %145, align 4, !tbaa !4205
  %147 = insertelement <16 x float> undef, float %146, i32 0
  %148 = shufflevector <16 x float> %147, <16 x float> undef, <16 x i32> zeroinitializer
  %149 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %148, <16 x float> %142, <16 x float> %133)
  %150 = or i64 %53, 6
  %151 = getelementptr inbounds float, float* %4, i64 %150
  %152 = load float, float* %151, align 4, !tbaa !4205
  %153 = insertelement <16 x float> undef, float %152, i32 0
  %154 = shufflevector <16 x float> %153, <16 x float> undef, <16 x i32> zeroinitializer
  %155 = or i64 %55, 96
  %156 = getelementptr inbounds float, float* %7, i64 %155
  %157 = bitcast float* %156 to <16 x float>*
  %158 = load <16 x float>, <16 x float>* %157, align 64, !tbaa !4208
  %159 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %154, <16 x float> %158, <16 x float> %143)
  %160 = add nsw i64 %150, 896
  %161 = getelementptr inbounds float, float* %4, i64 %160
  %162 = load float, float* %161, align 4, !tbaa !4205
  %163 = insertelement <16 x float> undef, float %162, i32 0
  %164 = shufflevector <16 x float> %163, <16 x float> undef, <16 x i32> zeroinitializer
  %165 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %164, <16 x float> %158, <16 x float> %149)
  %166 = or i64 %53, 7
  %167 = getelementptr inbounds float, float* %4, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !4205
  %169 = insertelement <16 x float> undef, float %168, i32 0
  %170 = shufflevector <16 x float> %169, <16 x float> undef, <16 x i32> zeroinitializer
  %171 = or i64 %55, 112
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = bitcast float* %172 to <16 x float>*
  %174 = load <16 x float>, <16 x float>* %173, align 64, !tbaa !4208
  %175 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %170, <16 x float> %174, <16 x float> %159)
  %176 = add nsw i64 %166, 896
  %177 = getelementptr inbounds float, float* %4, i64 %176
  %178 = load float, float* %177, align 4, !tbaa !4205
  %179 = insertelement <16 x float> undef, float %178, i32 0
  %180 = shufflevector <16 x float> %179, <16 x float> undef, <16 x i32> zeroinitializer
  %181 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %180, <16 x float> %174, <16 x float> %165)
  %182 = or i64 %53, 8
  %183 = getelementptr inbounds float, float* %4, i64 %182
  %184 = load float, float* %183, align 4, !tbaa !4205
  %185 = insertelement <16 x float> undef, float %184, i32 0
  %186 = shufflevector <16 x float> %185, <16 x float> undef, <16 x i32> zeroinitializer
  %187 = or i64 %55, 128
  %188 = getelementptr inbounds float, float* %7, i64 %187
  %189 = bitcast float* %188 to <16 x float>*
  %190 = load <16 x float>, <16 x float>* %189, align 64, !tbaa !4208
  %191 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %186, <16 x float> %190, <16 x float> %175)
  %192 = add nsw i64 %182, 896
  %193 = getelementptr inbounds float, float* %4, i64 %192
  %194 = load float, float* %193, align 4, !tbaa !4205
  %195 = insertelement <16 x float> undef, float %194, i32 0
  %196 = shufflevector <16 x float> %195, <16 x float> undef, <16 x i32> zeroinitializer
  %197 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %196, <16 x float> %190, <16 x float> %181)
  %198 = or i64 %53, 9
  %199 = getelementptr inbounds float, float* %4, i64 %198
  %200 = load float, float* %199, align 4, !tbaa !4205
  %201 = insertelement <16 x float> undef, float %200, i32 0
  %202 = shufflevector <16 x float> %201, <16 x float> undef, <16 x i32> zeroinitializer
  %203 = or i64 %55, 144
  %204 = getelementptr inbounds float, float* %7, i64 %203
  %205 = bitcast float* %204 to <16 x float>*
  %206 = load <16 x float>, <16 x float>* %205, align 64, !tbaa !4208
  %207 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %202, <16 x float> %206, <16 x float> %191)
  %208 = add nsw i64 %198, 896
  %209 = getelementptr inbounds float, float* %4, i64 %208
  %210 = load float, float* %209, align 4, !tbaa !4205
  %211 = insertelement <16 x float> undef, float %210, i32 0
  %212 = shufflevector <16 x float> %211, <16 x float> undef, <16 x i32> zeroinitializer
  %213 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %212, <16 x float> %206, <16 x float> %197)
  %214 = or i64 %53, 10
  %215 = getelementptr inbounds float, float* %4, i64 %214
  %216 = load float, float* %215, align 4, !tbaa !4205
  %217 = insertelement <16 x float> undef, float %216, i32 0
  %218 = shufflevector <16 x float> %217, <16 x float> undef, <16 x i32> zeroinitializer
  %219 = or i64 %55, 160
  %220 = getelementptr inbounds float, float* %7, i64 %219
  %221 = bitcast float* %220 to <16 x float>*
  %222 = load <16 x float>, <16 x float>* %221, align 64, !tbaa !4208
  %223 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %218, <16 x float> %222, <16 x float> %207)
  %224 = add nsw i64 %214, 896
  %225 = getelementptr inbounds float, float* %4, i64 %224
  %226 = load float, float* %225, align 4, !tbaa !4205
  %227 = insertelement <16 x float> undef, float %226, i32 0
  %228 = shufflevector <16 x float> %227, <16 x float> undef, <16 x i32> zeroinitializer
  %229 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %228, <16 x float> %222, <16 x float> %213)
  %230 = or i64 %53, 11
  %231 = getelementptr inbounds float, float* %4, i64 %230
  %232 = load float, float* %231, align 4, !tbaa !4205
  %233 = insertelement <16 x float> undef, float %232, i32 0
  %234 = shufflevector <16 x float> %233, <16 x float> undef, <16 x i32> zeroinitializer
  %235 = or i64 %55, 176
  %236 = getelementptr inbounds float, float* %7, i64 %235
  %237 = bitcast float* %236 to <16 x float>*
  %238 = load <16 x float>, <16 x float>* %237, align 64, !tbaa !4208
  %239 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %234, <16 x float> %238, <16 x float> %223)
  %240 = add nsw i64 %230, 896
  %241 = getelementptr inbounds float, float* %4, i64 %240
  %242 = load float, float* %241, align 4, !tbaa !4205
  %243 = insertelement <16 x float> undef, float %242, i32 0
  %244 = shufflevector <16 x float> %243, <16 x float> undef, <16 x i32> zeroinitializer
  %245 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %244, <16 x float> %238, <16 x float> %229)
  %246 = or i64 %53, 12
  %247 = getelementptr inbounds float, float* %4, i64 %246
  %248 = load float, float* %247, align 4, !tbaa !4205
  %249 = insertelement <16 x float> undef, float %248, i32 0
  %250 = shufflevector <16 x float> %249, <16 x float> undef, <16 x i32> zeroinitializer
  %251 = or i64 %55, 192
  %252 = getelementptr inbounds float, float* %7, i64 %251
  %253 = bitcast float* %252 to <16 x float>*
  %254 = load <16 x float>, <16 x float>* %253, align 64, !tbaa !4208
  %255 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %250, <16 x float> %254, <16 x float> %239)
  %256 = add nsw i64 %246, 896
  %257 = getelementptr inbounds float, float* %4, i64 %256
  %258 = load float, float* %257, align 4, !tbaa !4205
  %259 = insertelement <16 x float> undef, float %258, i32 0
  %260 = shufflevector <16 x float> %259, <16 x float> undef, <16 x i32> zeroinitializer
  %261 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %260, <16 x float> %254, <16 x float> %245)
  %262 = or i64 %53, 13
  %263 = getelementptr inbounds float, float* %4, i64 %262
  %264 = load float, float* %263, align 4, !tbaa !4205
  %265 = insertelement <16 x float> undef, float %264, i32 0
  %266 = shufflevector <16 x float> %265, <16 x float> undef, <16 x i32> zeroinitializer
  %267 = or i64 %55, 208
  %268 = getelementptr inbounds float, float* %7, i64 %267
  %269 = bitcast float* %268 to <16 x float>*
  %270 = load <16 x float>, <16 x float>* %269, align 64, !tbaa !4208
  %271 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %266, <16 x float> %270, <16 x float> %255)
  %272 = add nsw i64 %262, 896
  %273 = getelementptr inbounds float, float* %4, i64 %272
  %274 = load float, float* %273, align 4, !tbaa !4205
  %275 = insertelement <16 x float> undef, float %274, i32 0
  %276 = shufflevector <16 x float> %275, <16 x float> undef, <16 x i32> zeroinitializer
  %277 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %276, <16 x float> %270, <16 x float> %261)
  %278 = or i64 %53, 14
  %279 = getelementptr inbounds float, float* %4, i64 %278
  %280 = load float, float* %279, align 4, !tbaa !4205
  %281 = insertelement <16 x float> undef, float %280, i32 0
  %282 = shufflevector <16 x float> %281, <16 x float> undef, <16 x i32> zeroinitializer
  %283 = or i64 %55, 224
  %284 = getelementptr inbounds float, float* %7, i64 %283
  %285 = bitcast float* %284 to <16 x float>*
  %286 = load <16 x float>, <16 x float>* %285, align 64, !tbaa !4208
  %287 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %282, <16 x float> %286, <16 x float> %271)
  %288 = add nsw i64 %278, 896
  %289 = getelementptr inbounds float, float* %4, i64 %288
  %290 = load float, float* %289, align 4, !tbaa !4205
  %291 = insertelement <16 x float> undef, float %290, i32 0
  %292 = shufflevector <16 x float> %291, <16 x float> undef, <16 x i32> zeroinitializer
  %293 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %292, <16 x float> %286, <16 x float> %277)
  %294 = or i64 %53, 15
  %295 = getelementptr inbounds float, float* %4, i64 %294
  %296 = load float, float* %295, align 4, !tbaa !4205
  %297 = insertelement <16 x float> undef, float %296, i32 0
  %298 = shufflevector <16 x float> %297, <16 x float> undef, <16 x i32> zeroinitializer
  %299 = or i64 %55, 240
  %300 = getelementptr inbounds float, float* %7, i64 %299
  %301 = bitcast float* %300 to <16 x float>*
  %302 = load <16 x float>, <16 x float>* %301, align 64, !tbaa !4208
  %303 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %298, <16 x float> %302, <16 x float> %287)
  %304 = add nsw i64 %294, 896
  %305 = getelementptr inbounds float, float* %4, i64 %304
  %306 = load float, float* %305, align 4, !tbaa !4205
  %307 = insertelement <16 x float> undef, float %306, i32 0
  %308 = shufflevector <16 x float> %307, <16 x float> undef, <16 x i32> zeroinitializer
  %309 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %308, <16 x float> %302, <16 x float> %293)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond, label %for_end6, label %for_begin7.preheader, !prof !50

for_end6:                                         ; preds = %for_begin7.preheader
  store <16 x float> %303, <16 x float>* %47, align 64, !tbaa !4202
  store <16 x float> %309, <16 x float>* %50, align 64, !tbaa !4202
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %exitcond29 = icmp eq i64 %indvars.iv.next28, 56
  br i1 %exitcond29, label %for_begin10.preheader, label %for_body2, !prof !50

for_begin13.preheader:                            ; preds = %for_begin13.preheader, %for_begin10.preheader
  %indvars.iv33 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next34, %for_begin13.preheader ]
  %310 = shl nsw i64 %indvars.iv33, 4
  %311 = trunc i64 %310 to i32
  %312 = add i32 %39, %311
  %313 = getelementptr inbounds float, float* %32, i64 %310
  %314 = bitcast float* %313 to <16 x float>*
  %315 = load <16 x float>, <16 x float>* %314, align 64, !tbaa !4202
  %316 = fadd <16 x float> %44, %315
  %317 = fcmp ogt <16 x float> %316, zeroinitializer
  %318 = select <16 x i1> %317, <16 x float> %316, <16 x float> zeroinitializer
  %319 = sext i32 %312 to i64
  %320 = getelementptr inbounds float, float* %10, i64 %319
  %321 = bitcast float* %320 to <16 x float>*
  store <16 x float> %318, <16 x float>* %321, align 64, !tbaa !4211
  %322 = add nuw nsw i64 %310, 896
  %323 = trunc i64 %322 to i32
  %324 = add i32 %39, %323
  %325 = getelementptr inbounds float, float* %32, i64 %322
  %326 = bitcast float* %325 to <16 x float>*
  %327 = load <16 x float>, <16 x float>* %326, align 64, !tbaa !4202
  %328 = fadd <16 x float> %44, %327
  %329 = fcmp ogt <16 x float> %328, zeroinitializer
  %330 = select <16 x i1> %329, <16 x float> %328, <16 x float> zeroinitializer
  %331 = sext i32 %324 to i64
  %332 = getelementptr inbounds float, float* %10, i64 %331
  %333 = bitcast float* %332 to <16 x float>*
  store <16 x float> %330, <16 x float>* %333, align 64, !tbaa !4211
  %indvars.iv.next34 = add nuw nsw i64 %indvars.iv33, 1
  %exitcond35 = icmp eq i64 %indvars.iv.next34, 56
  br i1 %exitcond35, label %for_end12, label %for_begin13.preheader, !prof !50

for_end12:                                        ; preds = %for_begin13.preheader
  %334 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %335 = tail call i32 %334(i32 1, i32 %16, i8* nonnull %31)
  %336 = add nsw i32 %29, 1
  %337 = icmp slt i32 %336, %24
  br i1 %337, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_dense_add(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.304, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !4214
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !4228
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !4231
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.305, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !4233
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.306, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.307, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.308, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 2
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.309, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !4235
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !4249
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 2048
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.310, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = icmp eq i64* %31, null
  br i1 %84, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end18
  %85 = load i64, i64* %31, align 8, !tbaa !4251
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 2048
  %88 = getelementptr inbounds i64, i64* %31, i64 1
  %89 = load i64, i64* %88, align 8, !tbaa !4265
  %90 = trunc i64 %89 to i32
  %91 = icmp eq i32 %90, 1
  %92 = and i1 %87, %91
  br i1 %92, label %if_end, label %assert_fail19, !prof !5

if_end:                                           ; preds = %assert_end18, %if_then
  %93 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %94 = load i64, i64* %93, align 8
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %assert_end22, label %assert_fail21, !prof !5

assert_fail19:                                    ; preds = %if_then
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.311, i64 0, i64 0))
  ret i32 -1

assert_fail21:                                    ; preds = %if_end
  %97 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %97(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %if_end
  %98 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, 1
  br i1 %100, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %102 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 2
  br i1 %104, label %assert_end28, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.156, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %107 = load i16, i16* %106, align 2
  %108 = icmp eq i16 %107, 1
  %109 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %110 = load i8, i8* %109, align 1
  %111 = icmp eq i8 %110, 32
  %112 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %113 = load i8, i8* %112, align 1
  %114 = icmp eq i8 %113, 2
  %115 = and i1 %111, %114
  %116 = and i1 %108, %115
  br i1 %116, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %118 = load i64, i64* %37, align 8, !tbaa !4267
  %119 = trunc i64 %118 to i32
  %120 = icmp eq i32 %119, 1000
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.312, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = getelementptr inbounds i64, i64* %37, i64 1
  %123 = load i64, i64* %122, align 8, !tbaa !4281
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %124, 2048
  br i1 %125, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.157, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %127 = icmp eq i64* %39, null
  br i1 %127, label %if_end36, label %if_then35, !prof !50

if_then35:                                        ; preds = %assert_end34
  %128 = load i64, i64* %39, align 8, !tbaa !4283
  %129 = trunc i64 %128 to i32
  %130 = icmp eq i32 %129, 2048
  %131 = getelementptr inbounds i64, i64* %39, i64 1
  %132 = load i64, i64* %131, align 8, !tbaa !4297
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 1
  %135 = and i1 %130, %134
  br i1 %135, label %if_end36, label %assert_fail37, !prof !5

if_end36:                                         ; preds = %assert_end34, %if_then35
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %137 = load i64, i64* %136, align 8
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %assert_end40, label %assert_fail39, !prof !5

assert_fail37:                                    ; preds = %if_then35
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %139(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.158, i64 0, i64 0))
  ret i32 -1

assert_fail39:                                    ; preds = %if_end36
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %if_end36
  %141 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %33, %146
  br i1 %147, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %149 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end48, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.313, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %154 = load i16, i16* %153, align 2
  %155 = icmp eq i16 %154, 1
  %156 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %157 = load i8, i8* %156, align 1
  %158 = icmp eq i8 %157, 32
  %159 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %160 = load i8, i8* %159, align 1
  %161 = icmp eq i8 %160, 2
  %162 = and i1 %158, %161
  %163 = and i1 %155, %162
  br i1 %163, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %165 = load i64, i64* %43, align 8, !tbaa !4299
  %166 = trunc i64 %165 to i32
  %167 = icmp eq i32 %166, 1000
  br i1 %167, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %168 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %168(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.314, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %169 = icmp eq i64* %45, null
  br i1 %169, label %if_end54, label %if_then53, !prof !50

if_then53:                                        ; preds = %assert_end52
  %170 = load i64, i64* %45, align 8, !tbaa !4313
  %171 = trunc i64 %170 to i32
  %172 = icmp eq i32 %171, 1
  br i1 %172, label %if_end54, label %assert_fail55, !prof !5

if_end54:                                         ; preds = %assert_end52, %if_then53
  %173 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %174 = load i64, i64* %173, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %assert_end58, label %assert_fail57, !prof !5

assert_fail55:                                    ; preds = %if_then53
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.315, i64 0, i64 0))
  ret i32 -1

assert_fail57:                                    ; preds = %if_end54
  %177 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %177(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %if_end54
  %178 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %179 = load i32, i32* %178, align 4
  %180 = icmp eq i32 %179, 1
  br i1 %180, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %181 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %181(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %182 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %183 = load i32, i32* %182, align 4
  %184 = icmp eq i32 %33, %183
  br i1 %184, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %185 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %185(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %186 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %187 = load i32, i32* %186, align 4
  %188 = icmp eq i32 %187, 2
  br i1 %188, label %assert_end66, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.316, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end62
  %190 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %191 = load i16, i16* %190, align 2
  %192 = icmp eq i16 %191, 1
  %193 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %194 = load i8, i8* %193, align 1
  %195 = icmp eq i8 %194, 32
  %196 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %197 = load i8, i8* %196, align 1
  %198 = icmp eq i8 %197, 2
  %199 = and i1 %195, %198
  %200 = and i1 %192, %199
  br i1 %200, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %202 = load i64, i64* %49, align 8, !tbaa !4327
  %203 = trunc i64 %202 to i32
  %204 = icmp eq i32 %203, 1
  br i1 %204, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %206 = getelementptr inbounds i64, i64* %49, i64 1
  %207 = load i64, i64* %206, align 8, !tbaa !4341
  %208 = trunc i64 %207 to i32
  %209 = icmp eq i32 %208, 1000
  br i1 %209, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.317, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %211 = icmp eq i64* %51, null
  br i1 %211, label %if_end74, label %if_then73, !prof !50

if_then73:                                        ; preds = %assert_end72
  %212 = load i64, i64* %51, align 8, !tbaa !4343
  %213 = trunc i64 %212 to i32
  %214 = icmp eq i32 %213, 1000
  %215 = getelementptr inbounds i64, i64* %51, i64 1
  %216 = load i64, i64* %215, align 8, !tbaa !4357
  %217 = trunc i64 %216 to i32
  %218 = icmp eq i32 %217, 1
  %219 = and i1 %214, %218
  br i1 %219, label %if_end74, label %assert_fail75, !prof !5

if_end74:                                         ; preds = %assert_end72, %if_then73
  %220 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %221 = load i64, i64* %220, align 8
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %assert_end78, label %assert_fail77, !prof !5

assert_fail75:                                    ; preds = %if_then73
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %223(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.318, i64 0, i64 0))
  ret i32 -1

assert_fail77:                                    ; preds = %if_end74
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %224(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %if_end74
  %225 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %226 = load i32, i32* %225, align 4
  %227 = icmp eq i32 %226, 1
  br i1 %227, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %228 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %228(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %229 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = icmp eq i32 %33, %230
  br i1 %231, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %232 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %232(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %233 = tail call fastcc i32 @fused_nn_dense_add_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %233
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_dense_add_compute_(i8* noalias, i8* noalias, i8* noalias nocapture, i8* noalias nocapture readonly, i32) unnamed_addr #0 {
entry:
  %5 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %6 = tail call i8* %5(i32 1, i32 %4, i64 4000, i32 2, i32 32)
  %7 = alloca %27, align 8
  %8 = getelementptr inbounds %27, %27* %7, i64 0, i32 0
  store i8* %0, i8** %8, align 8
  %9 = getelementptr inbounds %27, %27* %7, i64 0, i32 1
  store i8* %1, i8** %9, align 8
  %10 = getelementptr inbounds %27, %27* %7, i64 0, i32 2
  store i8* %6, i8** %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %27* %7 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.319, i8* nonnull %12, i32 0)
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %for_begin.preheader, label %call_fail, !prof !5

for_begin.preheader:                              ; preds = %entry
  %15 = bitcast i8* %3 to float*
  %16 = bitcast i8* %6 to float*
  %17 = bitcast i8* %2 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %for_begin.preheader
  %index = phi i64 [ 0, %for_begin.preheader ], [ %index.next, %vector.body ]
  %18 = getelementptr inbounds float, float* %15, i64 %index
  %19 = bitcast float* %18 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %19, align 4, !tbaa !4359
  %20 = getelementptr inbounds float, float* %18, i64 4
  %21 = bitcast float* %20 to <4 x float>*
  %wide.load5 = load <4 x float>, <4 x float>* %21, align 4, !tbaa !4359
  %22 = getelementptr inbounds float, float* %16, i64 %index
  %23 = bitcast float* %22 to <4 x float>*
  %wide.load6 = load <4 x float>, <4 x float>* %23, align 4, !tbaa !4362
  %24 = getelementptr inbounds float, float* %22, i64 4
  %25 = bitcast float* %24 to <4 x float>*
  %wide.load7 = load <4 x float>, <4 x float>* %25, align 4, !tbaa !4362
  %26 = fadd <4 x float> %wide.load, %wide.load6
  %27 = fadd <4 x float> %wide.load5, %wide.load7
  %28 = getelementptr inbounds float, float* %17, i64 %index
  %29 = bitcast float* %28 to <4 x float>*
  store <4 x float> %26, <4 x float>* %29, align 4, !tbaa !4365
  %30 = getelementptr inbounds float, float* %28, i64 4
  %31 = bitcast float* %30 to <4 x float>*
  store <4 x float> %27, <4 x float>* %31, align 4, !tbaa !4365
  %index.next = add i64 %index, 8
  %32 = icmp eq i64 %index.next, 1000
  br i1 %32, label %for_end, label %vector.body, !llvm.loop !4368

call_fail:                                        ; preds = %for_end, %entry
  %merge = phi i32 [ %13, %entry ], [ 0, %for_end ]
  ret i32 %merge

for_end:                                          ; preds = %vector.body
  %33 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %34 = call i32 %33(i32 1, i32 %4, i8* nonnull %6)
  br label %call_fail
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.319(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, 999
  %14 = sdiv i32 %13, %12
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %14, %15
  %17 = icmp slt i32 %16, 1000
  %18 = select i1 %17, i32 %16, i32 1000
  %19 = mul nsw i32 %14, %0
  %20 = icmp slt i32 %19, 1000
  %21 = select i1 %20, i32 %19, i32 1000
  %22 = icmp slt i32 %21, %18
  br i1 %22, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %23 = sext i32 %21 to i64
  %24 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %23, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %25 = trunc i64 %indvars.iv7 to i32
  %26 = shl i32 %25, 11
  %27 = sext i32 %26 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %.06 = phi <16 x float> [ zeroinitializer, %for_begin1.preheader ], [ %36, %for_body2 ]
  %28 = shl nsw i64 %indvars.iv, 4
  %29 = getelementptr inbounds float, float* %4, i64 %28
  %30 = bitcast float* %29 to <16 x float>*
  %31 = load <16 x float>, <16 x float>* %30, align 64, !tbaa !4370
  %32 = add nuw nsw i64 %28, %27
  %33 = getelementptr inbounds float, float* %7, i64 %32
  %34 = bitcast float* %33 to <16 x float>*
  %35 = load <16 x float>, <16 x float>* %34, align 64, !tbaa !4373
  %36 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %31, <16 x float> %35, <16 x float> %.06)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %37 = getelementptr inbounds float, float* %10, i64 %indvars.iv7
  %.0.vec.extract = extractelement <16 x float> %36, i32 0
  %38 = fadd float %.0.vec.extract, 0.000000e+00
  %.4.vec.extract = extractelement <16 x float> %36, i32 1
  %39 = fadd float %.4.vec.extract, %38
  %.8.vec.extract = extractelement <16 x float> %36, i32 2
  %40 = fadd float %.8.vec.extract, %39
  %.12.vec.extract = extractelement <16 x float> %36, i32 3
  %41 = fadd float %.12.vec.extract, %40
  %.16.vec.extract = extractelement <16 x float> %36, i32 4
  %42 = fadd float %.16.vec.extract, %41
  %.20.vec.extract = extractelement <16 x float> %36, i32 5
  %43 = fadd float %.20.vec.extract, %42
  %.24.vec.extract = extractelement <16 x float> %36, i32 6
  %44 = fadd float %.24.vec.extract, %43
  %.28.vec.extract = extractelement <16 x float> %36, i32 7
  %45 = fadd float %.28.vec.extract, %44
  %.32.vec.extract = extractelement <16 x float> %36, i32 8
  %46 = fadd float %.32.vec.extract, %45
  %.36.vec.extract = extractelement <16 x float> %36, i32 9
  %47 = fadd float %.36.vec.extract, %46
  %.40.vec.extract = extractelement <16 x float> %36, i32 10
  %48 = fadd float %.40.vec.extract, %47
  %.44.vec.extract = extractelement <16 x float> %36, i32 11
  %49 = fadd float %.44.vec.extract, %48
  %.48.vec.extract = extractelement <16 x float> %36, i32 12
  %50 = fadd float %.48.vec.extract, %49
  %.52.vec.extract = extractelement <16 x float> %36, i32 13
  %51 = fadd float %.52.vec.extract, %50
  %.56.vec.extract = extractelement <16 x float> %36, i32 14
  %52 = fadd float %.56.vec.extract, %51
  %.60.vec.extract = extractelement <16 x float> %36, i32 15
  %53 = fadd float %.60.vec.extract, %52
  store float %53, float* %37, align 4, !tbaa !4362
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %54 = icmp slt i64 %indvars.iv.next8, %24
  br i1 %54, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.320, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !4376
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !4390
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !4393
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.321, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !4395
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.322, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.323, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.324, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !4397
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !4411
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 32
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.124, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !4413
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 28
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !4416
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 28
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !4418
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 8
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !4422
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 200704
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !4436
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 6272
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !4438
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 224
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !4441
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 8
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !4443
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.325, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !4447
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 32
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.326, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !4461
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 32
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.129, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !4463
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 3
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !4466
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 3
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.105, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !4468
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 8
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !4472
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !4474
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 18432
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !4488
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 576
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !4490
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 192
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !4493
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 64
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !4495
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 8
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !4499
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([271 x i8], [271 x i8]* @.str.327, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !4501
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !4515
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 32
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.328, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !4517
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !4520
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !4522
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 8
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !4526
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 256
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !4540
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 8
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !4542
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 8
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !4545
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 8
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !4547
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.329, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !4551
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !4565
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 32
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.330, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !4567
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 14
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !4570
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 14
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.135, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !4572
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 8
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !4576
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 50176
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !4590
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 1568
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !4592
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 112
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !4595
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 8
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !4597
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([236 x i8], [236 x i8]* @.str.331, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %6 = tail call i8* %5(i32 1, i32 %4, i64 861184, i32 2, i32 32)
  %7 = alloca %28, align 8
  %8 = getelementptr inbounds %28, %28* %7, i64 0, i32 0
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds %28, %28* %7, i64 0, i32 1
  store i8* %0, i8** %9, align 8
  %10 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %11 = bitcast %28* %7 to i8*
  %12 = call i32 %10(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.332, i8* nonnull %11, i32 0)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %12, %entry ], [ 0, %call_end2 ], [ %21, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %14 = alloca %29, align 8
  %15 = getelementptr inbounds %29, %29* %14, i64 0, i32 0
  store i8* %6, i8** %15, align 8
  %16 = getelementptr inbounds %29, %29* %14, i64 0, i32 1
  store i8* %1, i8** %16, align 8
  %17 = getelementptr inbounds %29, %29* %14, i64 0, i32 2
  store i8* %2, i8** %17, align 8
  %18 = getelementptr inbounds %29, %29* %14, i64 0, i32 3
  store i8* %3, i8** %18, align 8
  %19 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %20 = bitcast %29* %14 to i8*
  %21 = call i32 %19(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.333, i8* nonnull %20, i32 0)
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %23 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %24 = call i32 %23(i32 1, i32 %4, i8* %6)
  br label %call_fail
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.332(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 927
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 928
  %15 = select i1 %14, i32 %13, i32 928
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 928
  %18 = select i1 %17, i32 %16, i32 928
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv, 232
  %23 = trunc i64 %indvars.iv to i32
  %24 = sdiv i32 %23, 29
  %25 = mul i32 %24, 29
  %.decomposed = sub i32 %23, %25
  %26 = icmp sgt i32 %.decomposed, 0
  %27 = mul nsw i32 %.decomposed, 224
  %28 = mul nsw i32 %24, 6272
  %29 = add nsw i32 %27, -232
  %30 = add i32 %29, %28
  br i1 %26, label %if_end.us.28, label %for_body2.preheader

for_body2.preheader:                              ; preds = %for_begin1.preheader
  %31 = add i32 %18, %indvar
  %32 = mul i32 %31, 232
  %33 = sext i32 %32 to i64
  %scevgep = getelementptr float, float* %4, i64 %33
  %scevgep6 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %scevgep6, i8 0, i64 928, i1 false)
  br label %for_end3

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %for_body2.preheader, %if_end.us.28
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %34 = icmp slt i64 %indvars.iv.next, %21
  %indvar.next = add i32 %indvar, 1
  br i1 %34, label %for_begin1.preheader, label %for_end, !prof !5

if_end.us.28:                                     ; preds = %for_begin1.preheader
  %35 = getelementptr inbounds float, float* %4, i64 %22
  %36 = bitcast float* %35 to <8 x float>*
  store <8 x float> zeroinitializer, <8 x float>* %36, align 32, !tbaa !4601
  %37 = add nsw i64 %22, 8
  %38 = add i32 %30, 8
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds float, float* %7, i64 %39
  %41 = bitcast float* %40 to <8 x float>*
  %42 = load <8 x float>, <8 x float>* %41, align 32, !tbaa !4604
  %43 = getelementptr inbounds float, float* %4, i64 %37
  %44 = bitcast float* %43 to <8 x float>*
  store <8 x float> %42, <8 x float>* %44, align 32, !tbaa !4601
  %45 = add nsw i64 %22, 16
  %46 = add i32 %30, 16
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds float, float* %7, i64 %47
  %49 = bitcast float* %48 to <8 x float>*
  %50 = load <8 x float>, <8 x float>* %49, align 32, !tbaa !4604
  %51 = getelementptr inbounds float, float* %4, i64 %45
  %52 = bitcast float* %51 to <8 x float>*
  store <8 x float> %50, <8 x float>* %52, align 32, !tbaa !4601
  %53 = add nsw i64 %22, 24
  %54 = add i32 %30, 24
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds float, float* %7, i64 %55
  %57 = bitcast float* %56 to <8 x float>*
  %58 = load <8 x float>, <8 x float>* %57, align 32, !tbaa !4604
  %59 = getelementptr inbounds float, float* %4, i64 %53
  %60 = bitcast float* %59 to <8 x float>*
  store <8 x float> %58, <8 x float>* %60, align 32, !tbaa !4601
  %61 = add nsw i64 %22, 32
  %62 = add i32 %30, 32
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %7, i64 %63
  %65 = bitcast float* %64 to <8 x float>*
  %66 = load <8 x float>, <8 x float>* %65, align 32, !tbaa !4604
  %67 = getelementptr inbounds float, float* %4, i64 %61
  %68 = bitcast float* %67 to <8 x float>*
  store <8 x float> %66, <8 x float>* %68, align 32, !tbaa !4601
  %69 = add nsw i64 %22, 40
  %70 = add i32 %30, 40
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %7, i64 %71
  %73 = bitcast float* %72 to <8 x float>*
  %74 = load <8 x float>, <8 x float>* %73, align 32, !tbaa !4604
  %75 = getelementptr inbounds float, float* %4, i64 %69
  %76 = bitcast float* %75 to <8 x float>*
  store <8 x float> %74, <8 x float>* %76, align 32, !tbaa !4601
  %77 = add nsw i64 %22, 48
  %78 = add i32 %30, 48
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %7, i64 %79
  %81 = bitcast float* %80 to <8 x float>*
  %82 = load <8 x float>, <8 x float>* %81, align 32, !tbaa !4604
  %83 = getelementptr inbounds float, float* %4, i64 %77
  %84 = bitcast float* %83 to <8 x float>*
  store <8 x float> %82, <8 x float>* %84, align 32, !tbaa !4601
  %85 = add nsw i64 %22, 56
  %86 = add i32 %30, 56
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %7, i64 %87
  %89 = bitcast float* %88 to <8 x float>*
  %90 = load <8 x float>, <8 x float>* %89, align 32, !tbaa !4604
  %91 = getelementptr inbounds float, float* %4, i64 %85
  %92 = bitcast float* %91 to <8 x float>*
  store <8 x float> %90, <8 x float>* %92, align 32, !tbaa !4601
  %93 = add nsw i64 %22, 64
  %94 = add i32 %30, 64
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds float, float* %7, i64 %95
  %97 = bitcast float* %96 to <8 x float>*
  %98 = load <8 x float>, <8 x float>* %97, align 32, !tbaa !4604
  %99 = getelementptr inbounds float, float* %4, i64 %93
  %100 = bitcast float* %99 to <8 x float>*
  store <8 x float> %98, <8 x float>* %100, align 32, !tbaa !4601
  %101 = add nsw i64 %22, 72
  %102 = add i32 %30, 72
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 32, !tbaa !4604
  %107 = getelementptr inbounds float, float* %4, i64 %101
  %108 = bitcast float* %107 to <8 x float>*
  store <8 x float> %106, <8 x float>* %108, align 32, !tbaa !4601
  %109 = add nsw i64 %22, 80
  %110 = add i32 %30, 80
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = bitcast float* %112 to <8 x float>*
  %114 = load <8 x float>, <8 x float>* %113, align 32, !tbaa !4604
  %115 = getelementptr inbounds float, float* %4, i64 %109
  %116 = bitcast float* %115 to <8 x float>*
  store <8 x float> %114, <8 x float>* %116, align 32, !tbaa !4601
  %117 = add nsw i64 %22, 88
  %118 = add i32 %30, 88
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds float, float* %7, i64 %119
  %121 = bitcast float* %120 to <8 x float>*
  %122 = load <8 x float>, <8 x float>* %121, align 32, !tbaa !4604
  %123 = getelementptr inbounds float, float* %4, i64 %117
  %124 = bitcast float* %123 to <8 x float>*
  store <8 x float> %122, <8 x float>* %124, align 32, !tbaa !4601
  %125 = add nsw i64 %22, 96
  %126 = add i32 %30, 96
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds float, float* %7, i64 %127
  %129 = bitcast float* %128 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 32, !tbaa !4604
  %131 = getelementptr inbounds float, float* %4, i64 %125
  %132 = bitcast float* %131 to <8 x float>*
  store <8 x float> %130, <8 x float>* %132, align 32, !tbaa !4601
  %133 = add nsw i64 %22, 104
  %134 = add i32 %30, 104
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds float, float* %7, i64 %135
  %137 = bitcast float* %136 to <8 x float>*
  %138 = load <8 x float>, <8 x float>* %137, align 32, !tbaa !4604
  %139 = getelementptr inbounds float, float* %4, i64 %133
  %140 = bitcast float* %139 to <8 x float>*
  store <8 x float> %138, <8 x float>* %140, align 32, !tbaa !4601
  %141 = add nsw i64 %22, 112
  %142 = add i32 %30, 112
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = bitcast float* %144 to <8 x float>*
  %146 = load <8 x float>, <8 x float>* %145, align 32, !tbaa !4604
  %147 = getelementptr inbounds float, float* %4, i64 %141
  %148 = bitcast float* %147 to <8 x float>*
  store <8 x float> %146, <8 x float>* %148, align 32, !tbaa !4601
  %149 = add nsw i64 %22, 120
  %150 = add i32 %30, 120
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = bitcast float* %152 to <8 x float>*
  %154 = load <8 x float>, <8 x float>* %153, align 32, !tbaa !4604
  %155 = getelementptr inbounds float, float* %4, i64 %149
  %156 = bitcast float* %155 to <8 x float>*
  store <8 x float> %154, <8 x float>* %156, align 32, !tbaa !4601
  %157 = add nsw i64 %22, 128
  %158 = add i32 %30, 128
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds float, float* %7, i64 %159
  %161 = bitcast float* %160 to <8 x float>*
  %162 = load <8 x float>, <8 x float>* %161, align 32, !tbaa !4604
  %163 = getelementptr inbounds float, float* %4, i64 %157
  %164 = bitcast float* %163 to <8 x float>*
  store <8 x float> %162, <8 x float>* %164, align 32, !tbaa !4601
  %165 = add nsw i64 %22, 136
  %166 = add i32 %30, 136
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds float, float* %7, i64 %167
  %169 = bitcast float* %168 to <8 x float>*
  %170 = load <8 x float>, <8 x float>* %169, align 32, !tbaa !4604
  %171 = getelementptr inbounds float, float* %4, i64 %165
  %172 = bitcast float* %171 to <8 x float>*
  store <8 x float> %170, <8 x float>* %172, align 32, !tbaa !4601
  %173 = add nsw i64 %22, 144
  %174 = add i32 %30, 144
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds float, float* %7, i64 %175
  %177 = bitcast float* %176 to <8 x float>*
  %178 = load <8 x float>, <8 x float>* %177, align 32, !tbaa !4604
  %179 = getelementptr inbounds float, float* %4, i64 %173
  %180 = bitcast float* %179 to <8 x float>*
  store <8 x float> %178, <8 x float>* %180, align 32, !tbaa !4601
  %181 = add nsw i64 %22, 152
  %182 = add i32 %30, 152
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds float, float* %7, i64 %183
  %185 = bitcast float* %184 to <8 x float>*
  %186 = load <8 x float>, <8 x float>* %185, align 32, !tbaa !4604
  %187 = getelementptr inbounds float, float* %4, i64 %181
  %188 = bitcast float* %187 to <8 x float>*
  store <8 x float> %186, <8 x float>* %188, align 32, !tbaa !4601
  %189 = add nsw i64 %22, 160
  %190 = add i32 %30, 160
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds float, float* %7, i64 %191
  %193 = bitcast float* %192 to <8 x float>*
  %194 = load <8 x float>, <8 x float>* %193, align 32, !tbaa !4604
  %195 = getelementptr inbounds float, float* %4, i64 %189
  %196 = bitcast float* %195 to <8 x float>*
  store <8 x float> %194, <8 x float>* %196, align 32, !tbaa !4601
  %197 = add nsw i64 %22, 168
  %198 = add i32 %30, 168
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds float, float* %7, i64 %199
  %201 = bitcast float* %200 to <8 x float>*
  %202 = load <8 x float>, <8 x float>* %201, align 32, !tbaa !4604
  %203 = getelementptr inbounds float, float* %4, i64 %197
  %204 = bitcast float* %203 to <8 x float>*
  store <8 x float> %202, <8 x float>* %204, align 32, !tbaa !4601
  %205 = add nsw i64 %22, 176
  %206 = add i32 %30, 176
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds float, float* %7, i64 %207
  %209 = bitcast float* %208 to <8 x float>*
  %210 = load <8 x float>, <8 x float>* %209, align 32, !tbaa !4604
  %211 = getelementptr inbounds float, float* %4, i64 %205
  %212 = bitcast float* %211 to <8 x float>*
  store <8 x float> %210, <8 x float>* %212, align 32, !tbaa !4601
  %213 = add nsw i64 %22, 184
  %214 = add i32 %30, 184
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds float, float* %7, i64 %215
  %217 = bitcast float* %216 to <8 x float>*
  %218 = load <8 x float>, <8 x float>* %217, align 32, !tbaa !4604
  %219 = getelementptr inbounds float, float* %4, i64 %213
  %220 = bitcast float* %219 to <8 x float>*
  store <8 x float> %218, <8 x float>* %220, align 32, !tbaa !4601
  %221 = add nsw i64 %22, 192
  %222 = add i32 %30, 192
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds float, float* %7, i64 %223
  %225 = bitcast float* %224 to <8 x float>*
  %226 = load <8 x float>, <8 x float>* %225, align 32, !tbaa !4604
  %227 = getelementptr inbounds float, float* %4, i64 %221
  %228 = bitcast float* %227 to <8 x float>*
  store <8 x float> %226, <8 x float>* %228, align 32, !tbaa !4601
  %229 = add nsw i64 %22, 200
  %230 = add i32 %30, 200
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds float, float* %7, i64 %231
  %233 = bitcast float* %232 to <8 x float>*
  %234 = load <8 x float>, <8 x float>* %233, align 32, !tbaa !4604
  %235 = getelementptr inbounds float, float* %4, i64 %229
  %236 = bitcast float* %235 to <8 x float>*
  store <8 x float> %234, <8 x float>* %236, align 32, !tbaa !4601
  %237 = add nsw i64 %22, 208
  %238 = add i32 %30, 208
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds float, float* %7, i64 %239
  %241 = bitcast float* %240 to <8 x float>*
  %242 = load <8 x float>, <8 x float>* %241, align 32, !tbaa !4604
  %243 = getelementptr inbounds float, float* %4, i64 %237
  %244 = bitcast float* %243 to <8 x float>*
  store <8 x float> %242, <8 x float>* %244, align 32, !tbaa !4601
  %245 = add nsw i64 %22, 216
  %246 = add i32 %30, 216
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds float, float* %7, i64 %247
  %249 = bitcast float* %248 to <8 x float>*
  %250 = load <8 x float>, <8 x float>* %249, align 32, !tbaa !4604
  %251 = getelementptr inbounds float, float* %4, i64 %245
  %252 = bitcast float* %251 to <8 x float>*
  store <8 x float> %250, <8 x float>* %252, align 32, !tbaa !4601
  %253 = add nsw i64 %22, 224
  %254 = add i32 %30, 224
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds float, float* %7, i64 %255
  %257 = bitcast float* %256 to <8 x float>*
  %258 = load <8 x float>, <8 x float>* %257, align 32, !tbaa !4604
  %259 = getelementptr inbounds float, float* %4, i64 %253
  %260 = bitcast float* %259 to <8 x float>*
  store <8 x float> %258, <8 x float>* %260, align 32, !tbaa !4601
  br label %for_end3
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.333(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 447
  %17 = sdiv i32 %16, %15
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %17, %18
  %20 = icmp slt i32 %19, 448
  %21 = select i1 %20, i32 %19, i32 448
  %22 = mul nsw i32 %17, %0
  %23 = icmp slt i32 %22, 448
  %24 = select i1 %23, i32 %22, i32 448
  %25 = icmp slt i32 %24, %21
  br i1 %25, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %26 = sext i32 %24 to i64
  %27 = sext i32 %21 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_begin13.preheader
  %indvars.iv148 = phi i64 [ %26, %for_body.lr.ph ], [ %indvars.iv.next149, %for_begin13.preheader ]
  %28 = trunc i64 %indvars.iv148 to i32
  %29 = sdiv i32 %28, 14
  %30 = mul i32 %29, 14
  %.decomposed = sub i32 %28, %30
  %31 = mul nsw i32 %.decomposed, 464
  %32 = mul nsw i32 %29, 18432
  %33 = sext i32 %32 to i64
  %34 = sext i32 %31 to i64
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_begin13.preheader, %entry
  ret i32 0

for_begin13.preheader:                            ; preds = %for_end6
  %35 = mul nsw i64 %indvars.iv148, 112
  %36 = shl nsw i32 %29, 3
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds float, float* %13, i64 %37
  %39 = bitcast float* %38 to <8 x float>*
  %40 = load <8 x float>, <8 x float>* %39, align 32, !tbaa !4607
  %41 = fadd <8 x float> %40, %367
  %42 = fcmp ogt <8 x float> %41, zeroinitializer
  %43 = select <8 x i1> %42, <8 x float> %41, <8 x float> zeroinitializer
  %44 = getelementptr inbounds float, float* %10, i64 %35
  %45 = bitcast float* %44 to <8 x float>*
  store <8 x float> %43, <8 x float>* %45, align 32, !tbaa !4610
  %46 = or i64 %35, 8
  %47 = fadd <8 x float> %40, %373
  %48 = fcmp ogt <8 x float> %47, zeroinitializer
  %49 = select <8 x i1> %48, <8 x float> %47, <8 x float> zeroinitializer
  %50 = getelementptr inbounds float, float* %10, i64 %46
  %51 = bitcast float* %50 to <8 x float>*
  store <8 x float> %49, <8 x float>* %51, align 32, !tbaa !4610
  %52 = add nsw i64 %35, 16
  %53 = fadd <8 x float> %40, %379
  %54 = fcmp ogt <8 x float> %53, zeroinitializer
  %55 = select <8 x i1> %54, <8 x float> %53, <8 x float> zeroinitializer
  %56 = getelementptr inbounds float, float* %10, i64 %52
  %57 = bitcast float* %56 to <8 x float>*
  store <8 x float> %55, <8 x float>* %57, align 32, !tbaa !4610
  %58 = add nsw i64 %35, 24
  %59 = fadd <8 x float> %40, %385
  %60 = fcmp ogt <8 x float> %59, zeroinitializer
  %61 = select <8 x i1> %60, <8 x float> %59, <8 x float> zeroinitializer
  %62 = getelementptr inbounds float, float* %10, i64 %58
  %63 = bitcast float* %62 to <8 x float>*
  store <8 x float> %61, <8 x float>* %63, align 32, !tbaa !4610
  %64 = add nsw i64 %35, 32
  %65 = fadd <8 x float> %40, %391
  %66 = fcmp ogt <8 x float> %65, zeroinitializer
  %67 = select <8 x i1> %66, <8 x float> %65, <8 x float> zeroinitializer
  %68 = getelementptr inbounds float, float* %10, i64 %64
  %69 = bitcast float* %68 to <8 x float>*
  store <8 x float> %67, <8 x float>* %69, align 32, !tbaa !4610
  %70 = add nsw i64 %35, 40
  %71 = fadd <8 x float> %40, %397
  %72 = fcmp ogt <8 x float> %71, zeroinitializer
  %73 = select <8 x i1> %72, <8 x float> %71, <8 x float> zeroinitializer
  %74 = getelementptr inbounds float, float* %10, i64 %70
  %75 = bitcast float* %74 to <8 x float>*
  store <8 x float> %73, <8 x float>* %75, align 32, !tbaa !4610
  %76 = add nsw i64 %35, 48
  %77 = fadd <8 x float> %40, %403
  %78 = fcmp ogt <8 x float> %77, zeroinitializer
  %79 = select <8 x i1> %78, <8 x float> %77, <8 x float> zeroinitializer
  %80 = getelementptr inbounds float, float* %10, i64 %76
  %81 = bitcast float* %80 to <8 x float>*
  store <8 x float> %79, <8 x float>* %81, align 32, !tbaa !4610
  %82 = add nsw i64 %35, 56
  %83 = fadd <8 x float> %40, %409
  %84 = fcmp ogt <8 x float> %83, zeroinitializer
  %85 = select <8 x i1> %84, <8 x float> %83, <8 x float> zeroinitializer
  %86 = getelementptr inbounds float, float* %10, i64 %82
  %87 = bitcast float* %86 to <8 x float>*
  store <8 x float> %85, <8 x float>* %87, align 32, !tbaa !4610
  %88 = add nsw i64 %35, 64
  %89 = fadd <8 x float> %40, %415
  %90 = fcmp ogt <8 x float> %89, zeroinitializer
  %91 = select <8 x i1> %90, <8 x float> %89, <8 x float> zeroinitializer
  %92 = getelementptr inbounds float, float* %10, i64 %88
  %93 = bitcast float* %92 to <8 x float>*
  store <8 x float> %91, <8 x float>* %93, align 32, !tbaa !4610
  %94 = add nsw i64 %35, 72
  %95 = fadd <8 x float> %40, %421
  %96 = fcmp ogt <8 x float> %95, zeroinitializer
  %97 = select <8 x i1> %96, <8 x float> %95, <8 x float> zeroinitializer
  %98 = getelementptr inbounds float, float* %10, i64 %94
  %99 = bitcast float* %98 to <8 x float>*
  store <8 x float> %97, <8 x float>* %99, align 32, !tbaa !4610
  %100 = add nsw i64 %35, 80
  %101 = fadd <8 x float> %40, %427
  %102 = fcmp ogt <8 x float> %101, zeroinitializer
  %103 = select <8 x i1> %102, <8 x float> %101, <8 x float> zeroinitializer
  %104 = getelementptr inbounds float, float* %10, i64 %100
  %105 = bitcast float* %104 to <8 x float>*
  store <8 x float> %103, <8 x float>* %105, align 32, !tbaa !4610
  %106 = add nsw i64 %35, 88
  %107 = fadd <8 x float> %40, %433
  %108 = fcmp ogt <8 x float> %107, zeroinitializer
  %109 = select <8 x i1> %108, <8 x float> %107, <8 x float> zeroinitializer
  %110 = getelementptr inbounds float, float* %10, i64 %106
  %111 = bitcast float* %110 to <8 x float>*
  store <8 x float> %109, <8 x float>* %111, align 32, !tbaa !4610
  %112 = add nsw i64 %35, 96
  %113 = fadd <8 x float> %40, %439
  %114 = fcmp ogt <8 x float> %113, zeroinitializer
  %115 = select <8 x i1> %114, <8 x float> %113, <8 x float> zeroinitializer
  %116 = getelementptr inbounds float, float* %10, i64 %112
  %117 = bitcast float* %116 to <8 x float>*
  store <8 x float> %115, <8 x float>* %117, align 32, !tbaa !4610
  %118 = add nsw i64 %35, 104
  %119 = fadd <8 x float> %40, %445
  %120 = fcmp ogt <8 x float> %119, zeroinitializer
  %121 = select <8 x i1> %120, <8 x float> %119, <8 x float> zeroinitializer
  %122 = getelementptr inbounds float, float* %10, i64 %118
  %123 = bitcast float* %122 to <8 x float>*
  store <8 x float> %121, <8 x float>* %123, align 32, !tbaa !4610
  %indvars.iv.next149 = add nsw i64 %indvars.iv148, 1
  %124 = icmp slt i64 %indvars.iv.next149, %27
  br i1 %124, label %for_body, label %for_end, !prof !5

for_begin4.preheader:                             ; preds = %for_end6, %for_body
  %indvars.iv142 = phi i64 [ 0, %for_body ], [ %indvars.iv.next143, %for_end6 ]
  %.lcssa42.lcssa.lcssa122 = phi <8 x float> [ zeroinitializer, %for_body ], [ %445, %for_end6 ]
  %.lcssa40.lcssa.lcssa120 = phi <8 x float> [ zeroinitializer, %for_body ], [ %439, %for_end6 ]
  %.lcssa38.lcssa.lcssa118 = phi <8 x float> [ zeroinitializer, %for_body ], [ %433, %for_end6 ]
  %.lcssa36.lcssa.lcssa116 = phi <8 x float> [ zeroinitializer, %for_body ], [ %427, %for_end6 ]
  %.lcssa34.lcssa.lcssa114 = phi <8 x float> [ zeroinitializer, %for_body ], [ %421, %for_end6 ]
  %.lcssa32.lcssa.lcssa112 = phi <8 x float> [ zeroinitializer, %for_body ], [ %415, %for_end6 ]
  %.lcssa30.lcssa.lcssa110 = phi <8 x float> [ zeroinitializer, %for_body ], [ %409, %for_end6 ]
  %.lcssa28.lcssa.lcssa108 = phi <8 x float> [ zeroinitializer, %for_body ], [ %403, %for_end6 ]
  %.lcssa26.lcssa.lcssa106 = phi <8 x float> [ zeroinitializer, %for_body ], [ %397, %for_end6 ]
  %.lcssa24.lcssa.lcssa104 = phi <8 x float> [ zeroinitializer, %for_body ], [ %391, %for_end6 ]
  %.lcssa22.lcssa.lcssa103 = phi <8 x float> [ zeroinitializer, %for_body ], [ %385, %for_end6 ]
  %.lcssa20.lcssa.lcssa101 = phi <8 x float> [ zeroinitializer, %for_body ], [ %379, %for_end6 ]
  %.lcssa18.lcssa.lcssa99 = phi <8 x float> [ zeroinitializer, %for_body ], [ %373, %for_end6 ]
  %.lcssa.lcssa.lcssa97 = phi <8 x float> [ zeroinitializer, %for_body ], [ %367, %for_end6 ]
  %125 = mul nuw nsw i64 %indvars.iv142, 6728
  %126 = add nsw i64 %125, %34
  %127 = mul nuw nsw i64 %indvars.iv142, 576
  %128 = add nsw i64 %127, %33
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_end12.2, %for_begin4.preheader
  %indvars.iv139 = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next140, %for_end12.2 ]
  %.lcssa42.lcssa95 = phi <8 x float> [ %.lcssa42.lcssa.lcssa122, %for_begin4.preheader ], [ %445, %for_end12.2 ]
  %.lcssa40.lcssa93 = phi <8 x float> [ %.lcssa40.lcssa.lcssa120, %for_begin4.preheader ], [ %439, %for_end12.2 ]
  %.lcssa38.lcssa91 = phi <8 x float> [ %.lcssa38.lcssa.lcssa118, %for_begin4.preheader ], [ %433, %for_end12.2 ]
  %.lcssa36.lcssa89 = phi <8 x float> [ %.lcssa36.lcssa.lcssa116, %for_begin4.preheader ], [ %427, %for_end12.2 ]
  %.lcssa34.lcssa87 = phi <8 x float> [ %.lcssa34.lcssa.lcssa114, %for_begin4.preheader ], [ %421, %for_end12.2 ]
  %.lcssa32.lcssa85 = phi <8 x float> [ %.lcssa32.lcssa.lcssa112, %for_begin4.preheader ], [ %415, %for_end12.2 ]
  %.lcssa30.lcssa83 = phi <8 x float> [ %.lcssa30.lcssa.lcssa110, %for_begin4.preheader ], [ %409, %for_end12.2 ]
  %.lcssa28.lcssa81 = phi <8 x float> [ %.lcssa28.lcssa.lcssa108, %for_begin4.preheader ], [ %403, %for_end12.2 ]
  %.lcssa26.lcssa79 = phi <8 x float> [ %.lcssa26.lcssa.lcssa106, %for_begin4.preheader ], [ %397, %for_end12.2 ]
  %.lcssa24.lcssa77 = phi <8 x float> [ %.lcssa24.lcssa.lcssa104, %for_begin4.preheader ], [ %391, %for_end12.2 ]
  %.lcssa22.lcssa75 = phi <8 x float> [ %.lcssa22.lcssa.lcssa103, %for_begin4.preheader ], [ %385, %for_end12.2 ]
  %.lcssa20.lcssa74 = phi <8 x float> [ %.lcssa20.lcssa.lcssa101, %for_begin4.preheader ], [ %379, %for_end12.2 ]
  %.lcssa18.lcssa72 = phi <8 x float> [ %.lcssa18.lcssa.lcssa99, %for_begin4.preheader ], [ %373, %for_end12.2 ]
  %.lcssa.lcssa70 = phi <8 x float> [ %.lcssa.lcssa.lcssa97, %for_begin4.preheader ], [ %367, %for_end12.2 ]
  %129 = mul nuw nsw i64 %indvars.iv139, 232
  %130 = add nsw i64 %126, %129
  %131 = mul nuw nsw i64 %indvars.iv139, 192
  %132 = add nsw i64 %128, %131
  br label %for_body11

for_end6:                                         ; preds = %for_end12.2
  %indvars.iv.next143 = add nuw nsw i64 %indvars.iv142, 1
  %exitcond144 = icmp eq i64 %indvars.iv.next143, 32
  br i1 %exitcond144, label %for_begin13.preheader, label %for_begin4.preheader, !prof !50

for_body11:                                       ; preds = %for_body11, %for_begin7.preheader
  %indvars.iv = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next, %for_body11 ]
  %133 = phi <8 x float> [ %.lcssa42.lcssa95, %for_begin7.preheader ], [ %235, %for_body11 ]
  %134 = phi <8 x float> [ %.lcssa40.lcssa93, %for_begin7.preheader ], [ %229, %for_body11 ]
  %135 = phi <8 x float> [ %.lcssa38.lcssa91, %for_begin7.preheader ], [ %223, %for_body11 ]
  %136 = phi <8 x float> [ %.lcssa36.lcssa89, %for_begin7.preheader ], [ %217, %for_body11 ]
  %137 = phi <8 x float> [ %.lcssa34.lcssa87, %for_begin7.preheader ], [ %211, %for_body11 ]
  %138 = phi <8 x float> [ %.lcssa32.lcssa85, %for_begin7.preheader ], [ %205, %for_body11 ]
  %139 = phi <8 x float> [ %.lcssa30.lcssa83, %for_begin7.preheader ], [ %199, %for_body11 ]
  %140 = phi <8 x float> [ %.lcssa28.lcssa81, %for_begin7.preheader ], [ %193, %for_body11 ]
  %141 = phi <8 x float> [ %.lcssa26.lcssa79, %for_begin7.preheader ], [ %187, %for_body11 ]
  %142 = phi <8 x float> [ %.lcssa24.lcssa77, %for_begin7.preheader ], [ %181, %for_body11 ]
  %143 = phi <8 x float> [ %.lcssa22.lcssa75, %for_begin7.preheader ], [ %175, %for_body11 ]
  %144 = phi <8 x float> [ %.lcssa20.lcssa74, %for_begin7.preheader ], [ %169, %for_body11 ]
  %145 = phi <8 x float> [ %.lcssa18.lcssa72, %for_begin7.preheader ], [ %163, %for_body11 ]
  %146 = phi <8 x float> [ %.lcssa.lcssa70, %for_begin7.preheader ], [ %157, %for_body11 ]
  %147 = add nsw i64 %130, %indvars.iv
  %148 = getelementptr inbounds float, float* %4, i64 %147
  %149 = load float, float* %148, align 4, !tbaa !4601
  %150 = insertelement <8 x float> undef, float %149, i32 0
  %151 = shufflevector <8 x float> %150, <8 x float> undef, <8 x i32> zeroinitializer
  %152 = shl i64 %indvars.iv, 3
  %153 = add nsw i64 %132, %152
  %154 = getelementptr inbounds float, float* %7, i64 %153
  %155 = bitcast float* %154 to <8 x float>*
  %156 = load <8 x float>, <8 x float>* %155, align 32, !tbaa !4613
  %157 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %151, <8 x float> %156, <8 x float> %146)
  %158 = add nsw i64 %147, 16
  %159 = getelementptr inbounds float, float* %4, i64 %158
  %160 = load float, float* %159, align 4, !tbaa !4601
  %161 = insertelement <8 x float> undef, float %160, i32 0
  %162 = shufflevector <8 x float> %161, <8 x float> undef, <8 x i32> zeroinitializer
  %163 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %162, <8 x float> %156, <8 x float> %145)
  %164 = add nsw i64 %147, 32
  %165 = getelementptr inbounds float, float* %4, i64 %164
  %166 = load float, float* %165, align 4, !tbaa !4601
  %167 = insertelement <8 x float> undef, float %166, i32 0
  %168 = shufflevector <8 x float> %167, <8 x float> undef, <8 x i32> zeroinitializer
  %169 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %168, <8 x float> %156, <8 x float> %144)
  %170 = add nsw i64 %147, 48
  %171 = getelementptr inbounds float, float* %4, i64 %170
  %172 = load float, float* %171, align 4, !tbaa !4601
  %173 = insertelement <8 x float> undef, float %172, i32 0
  %174 = shufflevector <8 x float> %173, <8 x float> undef, <8 x i32> zeroinitializer
  %175 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %174, <8 x float> %156, <8 x float> %143)
  %176 = add nsw i64 %147, 64
  %177 = getelementptr inbounds float, float* %4, i64 %176
  %178 = load float, float* %177, align 4, !tbaa !4601
  %179 = insertelement <8 x float> undef, float %178, i32 0
  %180 = shufflevector <8 x float> %179, <8 x float> undef, <8 x i32> zeroinitializer
  %181 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %180, <8 x float> %156, <8 x float> %142)
  %182 = add nsw i64 %147, 80
  %183 = getelementptr inbounds float, float* %4, i64 %182
  %184 = load float, float* %183, align 4, !tbaa !4601
  %185 = insertelement <8 x float> undef, float %184, i32 0
  %186 = shufflevector <8 x float> %185, <8 x float> undef, <8 x i32> zeroinitializer
  %187 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %186, <8 x float> %156, <8 x float> %141)
  %188 = add nsw i64 %147, 96
  %189 = getelementptr inbounds float, float* %4, i64 %188
  %190 = load float, float* %189, align 4, !tbaa !4601
  %191 = insertelement <8 x float> undef, float %190, i32 0
  %192 = shufflevector <8 x float> %191, <8 x float> undef, <8 x i32> zeroinitializer
  %193 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %192, <8 x float> %156, <8 x float> %140)
  %194 = add nsw i64 %147, 112
  %195 = getelementptr inbounds float, float* %4, i64 %194
  %196 = load float, float* %195, align 4, !tbaa !4601
  %197 = insertelement <8 x float> undef, float %196, i32 0
  %198 = shufflevector <8 x float> %197, <8 x float> undef, <8 x i32> zeroinitializer
  %199 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %198, <8 x float> %156, <8 x float> %139)
  %200 = add nsw i64 %147, 128
  %201 = getelementptr inbounds float, float* %4, i64 %200
  %202 = load float, float* %201, align 4, !tbaa !4601
  %203 = insertelement <8 x float> undef, float %202, i32 0
  %204 = shufflevector <8 x float> %203, <8 x float> undef, <8 x i32> zeroinitializer
  %205 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %204, <8 x float> %156, <8 x float> %138)
  %206 = add nsw i64 %147, 144
  %207 = getelementptr inbounds float, float* %4, i64 %206
  %208 = load float, float* %207, align 4, !tbaa !4601
  %209 = insertelement <8 x float> undef, float %208, i32 0
  %210 = shufflevector <8 x float> %209, <8 x float> undef, <8 x i32> zeroinitializer
  %211 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %210, <8 x float> %156, <8 x float> %137)
  %212 = add nsw i64 %147, 160
  %213 = getelementptr inbounds float, float* %4, i64 %212
  %214 = load float, float* %213, align 4, !tbaa !4601
  %215 = insertelement <8 x float> undef, float %214, i32 0
  %216 = shufflevector <8 x float> %215, <8 x float> undef, <8 x i32> zeroinitializer
  %217 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %216, <8 x float> %156, <8 x float> %136)
  %218 = add nsw i64 %147, 176
  %219 = getelementptr inbounds float, float* %4, i64 %218
  %220 = load float, float* %219, align 4, !tbaa !4601
  %221 = insertelement <8 x float> undef, float %220, i32 0
  %222 = shufflevector <8 x float> %221, <8 x float> undef, <8 x i32> zeroinitializer
  %223 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %222, <8 x float> %156, <8 x float> %135)
  %224 = add nsw i64 %147, 192
  %225 = getelementptr inbounds float, float* %4, i64 %224
  %226 = load float, float* %225, align 4, !tbaa !4601
  %227 = insertelement <8 x float> undef, float %226, i32 0
  %228 = shufflevector <8 x float> %227, <8 x float> undef, <8 x i32> zeroinitializer
  %229 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %228, <8 x float> %156, <8 x float> %134)
  %230 = add nsw i64 %147, 208
  %231 = getelementptr inbounds float, float* %4, i64 %230
  %232 = load float, float* %231, align 4, !tbaa !4601
  %233 = insertelement <8 x float> undef, float %232, i32 0
  %234 = shufflevector <8 x float> %233, <8 x float> undef, <8 x i32> zeroinitializer
  %235 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %234, <8 x float> %156, <8 x float> %133)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 8
  br i1 %exitcond, label %for_end12, label %for_body11, !prof !50

for_end12:                                        ; preds = %for_body11
  %236 = add nsw i64 %130, 8
  %237 = add nsw i64 %132, 64
  br label %for_body11.1

for_body11.1:                                     ; preds = %for_body11.1, %for_end12
  %indvars.iv.1 = phi i64 [ 0, %for_end12 ], [ %indvars.iv.next.1, %for_body11.1 ]
  %238 = phi <8 x float> [ %235, %for_end12 ], [ %340, %for_body11.1 ]
  %239 = phi <8 x float> [ %229, %for_end12 ], [ %334, %for_body11.1 ]
  %240 = phi <8 x float> [ %223, %for_end12 ], [ %328, %for_body11.1 ]
  %241 = phi <8 x float> [ %217, %for_end12 ], [ %322, %for_body11.1 ]
  %242 = phi <8 x float> [ %211, %for_end12 ], [ %316, %for_body11.1 ]
  %243 = phi <8 x float> [ %205, %for_end12 ], [ %310, %for_body11.1 ]
  %244 = phi <8 x float> [ %199, %for_end12 ], [ %304, %for_body11.1 ]
  %245 = phi <8 x float> [ %193, %for_end12 ], [ %298, %for_body11.1 ]
  %246 = phi <8 x float> [ %187, %for_end12 ], [ %292, %for_body11.1 ]
  %247 = phi <8 x float> [ %181, %for_end12 ], [ %286, %for_body11.1 ]
  %248 = phi <8 x float> [ %175, %for_end12 ], [ %280, %for_body11.1 ]
  %249 = phi <8 x float> [ %169, %for_end12 ], [ %274, %for_body11.1 ]
  %250 = phi <8 x float> [ %163, %for_end12 ], [ %268, %for_body11.1 ]
  %251 = phi <8 x float> [ %157, %for_end12 ], [ %262, %for_body11.1 ]
  %252 = add nsw i64 %236, %indvars.iv.1
  %253 = getelementptr inbounds float, float* %4, i64 %252
  %254 = load float, float* %253, align 4, !tbaa !4601
  %255 = insertelement <8 x float> undef, float %254, i32 0
  %256 = shufflevector <8 x float> %255, <8 x float> undef, <8 x i32> zeroinitializer
  %257 = shl i64 %indvars.iv.1, 3
  %258 = add nsw i64 %237, %257
  %259 = getelementptr inbounds float, float* %7, i64 %258
  %260 = bitcast float* %259 to <8 x float>*
  %261 = load <8 x float>, <8 x float>* %260, align 32, !tbaa !4613
  %262 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %256, <8 x float> %261, <8 x float> %251)
  %263 = add nsw i64 %252, 16
  %264 = getelementptr inbounds float, float* %4, i64 %263
  %265 = load float, float* %264, align 4, !tbaa !4601
  %266 = insertelement <8 x float> undef, float %265, i32 0
  %267 = shufflevector <8 x float> %266, <8 x float> undef, <8 x i32> zeroinitializer
  %268 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %267, <8 x float> %261, <8 x float> %250)
  %269 = add nsw i64 %252, 32
  %270 = getelementptr inbounds float, float* %4, i64 %269
  %271 = load float, float* %270, align 4, !tbaa !4601
  %272 = insertelement <8 x float> undef, float %271, i32 0
  %273 = shufflevector <8 x float> %272, <8 x float> undef, <8 x i32> zeroinitializer
  %274 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %273, <8 x float> %261, <8 x float> %249)
  %275 = add nsw i64 %252, 48
  %276 = getelementptr inbounds float, float* %4, i64 %275
  %277 = load float, float* %276, align 4, !tbaa !4601
  %278 = insertelement <8 x float> undef, float %277, i32 0
  %279 = shufflevector <8 x float> %278, <8 x float> undef, <8 x i32> zeroinitializer
  %280 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %279, <8 x float> %261, <8 x float> %248)
  %281 = add nsw i64 %252, 64
  %282 = getelementptr inbounds float, float* %4, i64 %281
  %283 = load float, float* %282, align 4, !tbaa !4601
  %284 = insertelement <8 x float> undef, float %283, i32 0
  %285 = shufflevector <8 x float> %284, <8 x float> undef, <8 x i32> zeroinitializer
  %286 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %285, <8 x float> %261, <8 x float> %247)
  %287 = add nsw i64 %252, 80
  %288 = getelementptr inbounds float, float* %4, i64 %287
  %289 = load float, float* %288, align 4, !tbaa !4601
  %290 = insertelement <8 x float> undef, float %289, i32 0
  %291 = shufflevector <8 x float> %290, <8 x float> undef, <8 x i32> zeroinitializer
  %292 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %291, <8 x float> %261, <8 x float> %246)
  %293 = add nsw i64 %252, 96
  %294 = getelementptr inbounds float, float* %4, i64 %293
  %295 = load float, float* %294, align 4, !tbaa !4601
  %296 = insertelement <8 x float> undef, float %295, i32 0
  %297 = shufflevector <8 x float> %296, <8 x float> undef, <8 x i32> zeroinitializer
  %298 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %297, <8 x float> %261, <8 x float> %245)
  %299 = add nsw i64 %252, 112
  %300 = getelementptr inbounds float, float* %4, i64 %299
  %301 = load float, float* %300, align 4, !tbaa !4601
  %302 = insertelement <8 x float> undef, float %301, i32 0
  %303 = shufflevector <8 x float> %302, <8 x float> undef, <8 x i32> zeroinitializer
  %304 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %303, <8 x float> %261, <8 x float> %244)
  %305 = add nsw i64 %252, 128
  %306 = getelementptr inbounds float, float* %4, i64 %305
  %307 = load float, float* %306, align 4, !tbaa !4601
  %308 = insertelement <8 x float> undef, float %307, i32 0
  %309 = shufflevector <8 x float> %308, <8 x float> undef, <8 x i32> zeroinitializer
  %310 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %309, <8 x float> %261, <8 x float> %243)
  %311 = add nsw i64 %252, 144
  %312 = getelementptr inbounds float, float* %4, i64 %311
  %313 = load float, float* %312, align 4, !tbaa !4601
  %314 = insertelement <8 x float> undef, float %313, i32 0
  %315 = shufflevector <8 x float> %314, <8 x float> undef, <8 x i32> zeroinitializer
  %316 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %315, <8 x float> %261, <8 x float> %242)
  %317 = add nsw i64 %252, 160
  %318 = getelementptr inbounds float, float* %4, i64 %317
  %319 = load float, float* %318, align 4, !tbaa !4601
  %320 = insertelement <8 x float> undef, float %319, i32 0
  %321 = shufflevector <8 x float> %320, <8 x float> undef, <8 x i32> zeroinitializer
  %322 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %321, <8 x float> %261, <8 x float> %241)
  %323 = add nsw i64 %252, 176
  %324 = getelementptr inbounds float, float* %4, i64 %323
  %325 = load float, float* %324, align 4, !tbaa !4601
  %326 = insertelement <8 x float> undef, float %325, i32 0
  %327 = shufflevector <8 x float> %326, <8 x float> undef, <8 x i32> zeroinitializer
  %328 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %327, <8 x float> %261, <8 x float> %240)
  %329 = add nsw i64 %252, 192
  %330 = getelementptr inbounds float, float* %4, i64 %329
  %331 = load float, float* %330, align 4, !tbaa !4601
  %332 = insertelement <8 x float> undef, float %331, i32 0
  %333 = shufflevector <8 x float> %332, <8 x float> undef, <8 x i32> zeroinitializer
  %334 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %333, <8 x float> %261, <8 x float> %239)
  %335 = add nsw i64 %252, 208
  %336 = getelementptr inbounds float, float* %4, i64 %335
  %337 = load float, float* %336, align 4, !tbaa !4601
  %338 = insertelement <8 x float> undef, float %337, i32 0
  %339 = shufflevector <8 x float> %338, <8 x float> undef, <8 x i32> zeroinitializer
  %340 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %339, <8 x float> %261, <8 x float> %238)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 8
  br i1 %exitcond.1, label %for_end12.1, label %for_body11.1, !prof !50

for_end12.1:                                      ; preds = %for_body11.1
  %341 = add nsw i64 %130, 16
  %342 = add nsw i64 %132, 128
  br label %for_body11.2

for_body11.2:                                     ; preds = %for_body11.2, %for_end12.1
  %indvars.iv.2 = phi i64 [ 0, %for_end12.1 ], [ %indvars.iv.next.2, %for_body11.2 ]
  %343 = phi <8 x float> [ %340, %for_end12.1 ], [ %445, %for_body11.2 ]
  %344 = phi <8 x float> [ %334, %for_end12.1 ], [ %439, %for_body11.2 ]
  %345 = phi <8 x float> [ %328, %for_end12.1 ], [ %433, %for_body11.2 ]
  %346 = phi <8 x float> [ %322, %for_end12.1 ], [ %427, %for_body11.2 ]
  %347 = phi <8 x float> [ %316, %for_end12.1 ], [ %421, %for_body11.2 ]
  %348 = phi <8 x float> [ %310, %for_end12.1 ], [ %415, %for_body11.2 ]
  %349 = phi <8 x float> [ %304, %for_end12.1 ], [ %409, %for_body11.2 ]
  %350 = phi <8 x float> [ %298, %for_end12.1 ], [ %403, %for_body11.2 ]
  %351 = phi <8 x float> [ %292, %for_end12.1 ], [ %397, %for_body11.2 ]
  %352 = phi <8 x float> [ %286, %for_end12.1 ], [ %391, %for_body11.2 ]
  %353 = phi <8 x float> [ %280, %for_end12.1 ], [ %385, %for_body11.2 ]
  %354 = phi <8 x float> [ %274, %for_end12.1 ], [ %379, %for_body11.2 ]
  %355 = phi <8 x float> [ %268, %for_end12.1 ], [ %373, %for_body11.2 ]
  %356 = phi <8 x float> [ %262, %for_end12.1 ], [ %367, %for_body11.2 ]
  %357 = add nsw i64 %341, %indvars.iv.2
  %358 = getelementptr inbounds float, float* %4, i64 %357
  %359 = load float, float* %358, align 4, !tbaa !4601
  %360 = insertelement <8 x float> undef, float %359, i32 0
  %361 = shufflevector <8 x float> %360, <8 x float> undef, <8 x i32> zeroinitializer
  %362 = shl i64 %indvars.iv.2, 3
  %363 = add nsw i64 %342, %362
  %364 = getelementptr inbounds float, float* %7, i64 %363
  %365 = bitcast float* %364 to <8 x float>*
  %366 = load <8 x float>, <8 x float>* %365, align 32, !tbaa !4613
  %367 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %361, <8 x float> %366, <8 x float> %356)
  %368 = add nsw i64 %357, 16
  %369 = getelementptr inbounds float, float* %4, i64 %368
  %370 = load float, float* %369, align 4, !tbaa !4601
  %371 = insertelement <8 x float> undef, float %370, i32 0
  %372 = shufflevector <8 x float> %371, <8 x float> undef, <8 x i32> zeroinitializer
  %373 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %372, <8 x float> %366, <8 x float> %355)
  %374 = add nsw i64 %357, 32
  %375 = getelementptr inbounds float, float* %4, i64 %374
  %376 = load float, float* %375, align 4, !tbaa !4601
  %377 = insertelement <8 x float> undef, float %376, i32 0
  %378 = shufflevector <8 x float> %377, <8 x float> undef, <8 x i32> zeroinitializer
  %379 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %378, <8 x float> %366, <8 x float> %354)
  %380 = add nsw i64 %357, 48
  %381 = getelementptr inbounds float, float* %4, i64 %380
  %382 = load float, float* %381, align 4, !tbaa !4601
  %383 = insertelement <8 x float> undef, float %382, i32 0
  %384 = shufflevector <8 x float> %383, <8 x float> undef, <8 x i32> zeroinitializer
  %385 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %384, <8 x float> %366, <8 x float> %353)
  %386 = add nsw i64 %357, 64
  %387 = getelementptr inbounds float, float* %4, i64 %386
  %388 = load float, float* %387, align 4, !tbaa !4601
  %389 = insertelement <8 x float> undef, float %388, i32 0
  %390 = shufflevector <8 x float> %389, <8 x float> undef, <8 x i32> zeroinitializer
  %391 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %390, <8 x float> %366, <8 x float> %352)
  %392 = add nsw i64 %357, 80
  %393 = getelementptr inbounds float, float* %4, i64 %392
  %394 = load float, float* %393, align 4, !tbaa !4601
  %395 = insertelement <8 x float> undef, float %394, i32 0
  %396 = shufflevector <8 x float> %395, <8 x float> undef, <8 x i32> zeroinitializer
  %397 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %396, <8 x float> %366, <8 x float> %351)
  %398 = add nsw i64 %357, 96
  %399 = getelementptr inbounds float, float* %4, i64 %398
  %400 = load float, float* %399, align 4, !tbaa !4601
  %401 = insertelement <8 x float> undef, float %400, i32 0
  %402 = shufflevector <8 x float> %401, <8 x float> undef, <8 x i32> zeroinitializer
  %403 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %402, <8 x float> %366, <8 x float> %350)
  %404 = add nsw i64 %357, 112
  %405 = getelementptr inbounds float, float* %4, i64 %404
  %406 = load float, float* %405, align 4, !tbaa !4601
  %407 = insertelement <8 x float> undef, float %406, i32 0
  %408 = shufflevector <8 x float> %407, <8 x float> undef, <8 x i32> zeroinitializer
  %409 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %408, <8 x float> %366, <8 x float> %349)
  %410 = add nsw i64 %357, 128
  %411 = getelementptr inbounds float, float* %4, i64 %410
  %412 = load float, float* %411, align 4, !tbaa !4601
  %413 = insertelement <8 x float> undef, float %412, i32 0
  %414 = shufflevector <8 x float> %413, <8 x float> undef, <8 x i32> zeroinitializer
  %415 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %414, <8 x float> %366, <8 x float> %348)
  %416 = add nsw i64 %357, 144
  %417 = getelementptr inbounds float, float* %4, i64 %416
  %418 = load float, float* %417, align 4, !tbaa !4601
  %419 = insertelement <8 x float> undef, float %418, i32 0
  %420 = shufflevector <8 x float> %419, <8 x float> undef, <8 x i32> zeroinitializer
  %421 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %420, <8 x float> %366, <8 x float> %347)
  %422 = add nsw i64 %357, 160
  %423 = getelementptr inbounds float, float* %4, i64 %422
  %424 = load float, float* %423, align 4, !tbaa !4601
  %425 = insertelement <8 x float> undef, float %424, i32 0
  %426 = shufflevector <8 x float> %425, <8 x float> undef, <8 x i32> zeroinitializer
  %427 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %426, <8 x float> %366, <8 x float> %346)
  %428 = add nsw i64 %357, 176
  %429 = getelementptr inbounds float, float* %4, i64 %428
  %430 = load float, float* %429, align 4, !tbaa !4601
  %431 = insertelement <8 x float> undef, float %430, i32 0
  %432 = shufflevector <8 x float> %431, <8 x float> undef, <8 x i32> zeroinitializer
  %433 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %432, <8 x float> %366, <8 x float> %345)
  %434 = add nsw i64 %357, 192
  %435 = getelementptr inbounds float, float* %4, i64 %434
  %436 = load float, float* %435, align 4, !tbaa !4601
  %437 = insertelement <8 x float> undef, float %436, i32 0
  %438 = shufflevector <8 x float> %437, <8 x float> undef, <8 x i32> zeroinitializer
  %439 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %438, <8 x float> %366, <8 x float> %344)
  %440 = add nsw i64 %357, 208
  %441 = getelementptr inbounds float, float* %4, i64 %440
  %442 = load float, float* %441, align 4, !tbaa !4601
  %443 = insertelement <8 x float> undef, float %442, i32 0
  %444 = shufflevector <8 x float> %443, <8 x float> undef, <8 x i32> zeroinitializer
  %445 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %444, <8 x float> %366, <8 x float> %343)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 8
  br i1 %exitcond.2, label %for_end12.2, label %for_body11.2, !prof !50

for_end12.2:                                      ; preds = %for_body11.2
  %indvars.iv.next140 = add nuw nsw i64 %indvars.iv139, 1
  %exitcond141 = icmp eq i64 %indvars.iv.next140, 3
  br i1 %exitcond141, label %for_end6, label %for_begin7.preheader, !prof !50
}

define dllexport i32 @fused_layout_transform_42(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.334, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !4616
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.335, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !4630
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.336, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !4632
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !4646
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 8
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !4648
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 56
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !4651
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 56
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !4653
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 8
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !4657
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 200704
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !4671
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 25088
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !4673
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 448
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !4676
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 8
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !4678
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.337, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !4682
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !4696
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 4
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !4698
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 56
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !4701
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 56
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !4703
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 16
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !4707
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 200704
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !4721
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 50176
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !4723
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 896
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !4726
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 16
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !4728
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.260, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_42_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_42_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %30, align 8
  %3 = getelementptr inbounds %30, %30* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %30, %30* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %30* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.338, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.338(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 223
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 224
  %15 = select i1 %14, i32 %13, i32 224
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 224
  %18 = select i1 %17, i32 %16, i32 224
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv4 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next5, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv4, 896
  %23 = trunc i64 %indvars.iv4 to i32
  %24 = sdiv i32 %23, 56
  %25 = mul i32 %24, 56
  %.decomposed = sub i32 %23, %25
  %26 = mul nsw i32 %.decomposed, 448
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  %28 = shufflevector <16 x i32> %27, <16 x i32> undef, <16 x i32> zeroinitializer
  %29 = mul nsw i32 %24, 50176
  %30 = insertelement <16 x i32> undef, i32 %29, i32 0
  %31 = shufflevector <16 x i32> %30, <16 x i32> undef, <16 x i32> zeroinitializer
  %32 = add <16 x i32> %31, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25088, i32 25089, i32 25090, i32 25091, i32 25092, i32 25093, i32 25094, i32 25095>
  %33 = add <16 x i32> %32, %28
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %34 = shl i64 %indvars.iv, 4
  %35 = add nsw i64 %34, %22
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %36 = shl i32 %indvars.iv.tr, 3
  %37 = insertelement <16 x i32> undef, i32 %36, i32 0
  %38 = shufflevector <16 x i32> %37, <16 x i32> undef, <16 x i32> zeroinitializer
  %39 = add <16 x i32> %33, %38
  %40 = extractelement <16 x i32> %39, i64 0
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %7, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !4732
  %44 = insertelement <16 x float> undef, float %43, i32 0
  %45 = extractelement <16 x i32> %39, i64 1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %7, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !4732
  %49 = insertelement <16 x float> %44, float %48, i32 1
  %50 = extractelement <16 x i32> %39, i64 2
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %7, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !4732
  %54 = insertelement <16 x float> %49, float %53, i32 2
  %55 = extractelement <16 x i32> %39, i64 3
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %7, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !4732
  %59 = insertelement <16 x float> %54, float %58, i32 3
  %60 = extractelement <16 x i32> %39, i64 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %7, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !4732
  %64 = insertelement <16 x float> %59, float %63, i32 4
  %65 = extractelement <16 x i32> %39, i64 5
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %7, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !4732
  %69 = insertelement <16 x float> %64, float %68, i32 5
  %70 = extractelement <16 x i32> %39, i64 6
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %7, i64 %71
  %73 = load float, float* %72, align 4, !tbaa !4732
  %74 = insertelement <16 x float> %69, float %73, i32 6
  %75 = extractelement <16 x i32> %39, i64 7
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds float, float* %7, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !4732
  %79 = insertelement <16 x float> %74, float %78, i32 7
  %80 = extractelement <16 x i32> %39, i64 8
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float* %7, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !4732
  %84 = insertelement <16 x float> %79, float %83, i32 8
  %85 = extractelement <16 x i32> %39, i64 9
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds float, float* %7, i64 %86
  %88 = load float, float* %87, align 4, !tbaa !4732
  %89 = insertelement <16 x float> %84, float %88, i32 9
  %90 = extractelement <16 x i32> %39, i64 10
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds float, float* %7, i64 %91
  %93 = load float, float* %92, align 4, !tbaa !4732
  %94 = insertelement <16 x float> %89, float %93, i32 10
  %95 = extractelement <16 x i32> %39, i64 11
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %7, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !4732
  %99 = insertelement <16 x float> %94, float %98, i32 11
  %100 = extractelement <16 x i32> %39, i64 12
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !4732
  %104 = insertelement <16 x float> %99, float %103, i32 12
  %105 = extractelement <16 x i32> %39, i64 13
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !4732
  %109 = insertelement <16 x float> %104, float %108, i32 13
  %110 = extractelement <16 x i32> %39, i64 14
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !4732
  %114 = insertelement <16 x float> %109, float %113, i32 14
  %115 = extractelement <16 x i32> %39, i64 15
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !4732
  %119 = insertelement <16 x float> %114, float %118, i32 15
  %120 = getelementptr inbounds float, float* %4, i64 %35
  %121 = bitcast float* %120 to <16 x float>*
  store <16 x float> %119, <16 x float>* %121, align 64, !tbaa !4735
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 56
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, 1
  %122 = icmp slt i64 %indvars.iv.next5, %21
  br i1 %122, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.339, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !4738
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !4752
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !4755
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.340, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !4757
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.341, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.342, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.343, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !4759
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !4773
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 4
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.90, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !4775
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 14
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.125, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !4778
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 14
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.126, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !4780
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 64
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.267, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !4784
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 50176
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !4798
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 12544
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !4800
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 896
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !4803
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 64
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !4805
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.344, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !4809
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 32
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.326, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !4823
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 4
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !4825
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 3
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !4828
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 3
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.105, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !4830
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 64
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.92, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !4834
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !4836
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 18432
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !4850
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 4608
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !4852
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 1536
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !4855
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 512
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !4857
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 8
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !4861
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([274 x i8], [274 x i8]* @.str.345, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !4863
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !4877
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 32
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.328, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !4879
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !4882
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !4884
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 8
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !4888
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 256
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !4902
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 8
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !4904
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 8
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !4907
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 8
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !4909
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.329, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !4913
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !4927
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 32
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.330, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !4929
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 14
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !4932
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 14
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.135, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !4934
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 8
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !4938
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 50176
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !4952
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 1568
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !4954
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 112
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !4957
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 8
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !4959
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([236 x i8], [236 x i8]* @.str.331, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %6 = tail call i8* %5(i32 1, i32 %4, i64 262144, i32 2, i32 32)
  %7 = alloca %31, align 8
  %8 = getelementptr inbounds %31, %31* %7, i64 0, i32 0
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds %31, %31* %7, i64 0, i32 1
  store i8* %0, i8** %9, align 8
  %10 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %11 = bitcast %31* %7 to i8*
  %12 = call i32 %10(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.346, i8* nonnull %11, i32 0)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %12, %entry ], [ 0, %call_end2 ], [ %21, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %14 = alloca %32, align 8
  %15 = getelementptr inbounds %32, %32* %14, i64 0, i32 0
  store i8* %6, i8** %15, align 8
  %16 = getelementptr inbounds %32, %32* %14, i64 0, i32 1
  store i8* %1, i8** %16, align 8
  %17 = getelementptr inbounds %32, %32* %14, i64 0, i32 2
  store i8* %2, i8** %17, align 8
  %18 = getelementptr inbounds %32, %32* %14, i64 0, i32 3
  store i8* %3, i8** %18, align 8
  %19 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %20 = bitcast %32* %14 to i8*
  %21 = call i32 %19(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.347, i8* nonnull %20, i32 0)
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %23 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %24 = call i32 %23(i32 1, i32 %4, i8* %6)
  br label %call_fail
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.346(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 63
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 64
  %15 = select i1 %14, i32 %13, i32 64
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 64
  %18 = select i1 %17, i32 %16, i32 64
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %22 = trunc i64 %indvars.iv to i32
  %23 = and i32 %22, 15
  %24 = mul nuw nsw i32 %23, 896
  %25 = ashr i32 %22, 4
  %26 = mul nsw i32 %25, 12544
  %27 = add nsw i32 %24, -960
  %28 = add i32 %27, %26
  switch i32 %23, label %if_end.us.15 [
    i32 15, label %for_begin1.preheader.split
    i32 0, label %for_begin1.preheader.split
  ]

for_begin1.preheader.split:                       ; preds = %for_begin1.preheader, %for_begin1.preheader
  %29 = add i32 %18, %indvar
  %30 = shl i32 %29, 10
  %31 = sext i32 %30 to i64
  %scevgep = getelementptr float, float* %4, i64 %31
  %scevgep5 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 128 %scevgep5, i8 0, i64 4096, i1 false)
  br label %for_end3

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %for_begin1.preheader.split, %if_end.us.15
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %32 = icmp slt i64 %indvars.iv.next, %21
  %indvar.next = add i32 %indvar, 1
  br i1 %32, label %for_begin1.preheader, label %for_end, !prof !5

if_end.us.15:                                     ; preds = %for_begin1.preheader
  %33 = shl i32 %22, 10
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = bitcast float* %35 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %36, align 128, !tbaa !4963
  %37 = or i64 %34, 64
  %38 = add i32 %28, 64
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds float, float* %7, i64 %39
  %41 = bitcast float* %40 to <64 x float>*
  %42 = load <64 x float>, <64 x float>* %41, align 128, !tbaa !4966
  %43 = getelementptr inbounds float, float* %4, i64 %37
  %44 = bitcast float* %43 to <64 x float>*
  store <64 x float> %42, <64 x float>* %44, align 128, !tbaa !4963
  %45 = or i64 %34, 128
  %46 = add i32 %28, 128
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds float, float* %7, i64 %47
  %49 = bitcast float* %48 to <64 x float>*
  %50 = load <64 x float>, <64 x float>* %49, align 128, !tbaa !4966
  %51 = getelementptr inbounds float, float* %4, i64 %45
  %52 = bitcast float* %51 to <64 x float>*
  store <64 x float> %50, <64 x float>* %52, align 128, !tbaa !4963
  %53 = or i64 %34, 192
  %54 = add i32 %28, 192
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds float, float* %7, i64 %55
  %57 = bitcast float* %56 to <64 x float>*
  %58 = load <64 x float>, <64 x float>* %57, align 128, !tbaa !4966
  %59 = getelementptr inbounds float, float* %4, i64 %53
  %60 = bitcast float* %59 to <64 x float>*
  store <64 x float> %58, <64 x float>* %60, align 128, !tbaa !4963
  %61 = or i64 %34, 256
  %62 = add i32 %28, 256
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %7, i64 %63
  %65 = bitcast float* %64 to <64 x float>*
  %66 = load <64 x float>, <64 x float>* %65, align 128, !tbaa !4966
  %67 = getelementptr inbounds float, float* %4, i64 %61
  %68 = bitcast float* %67 to <64 x float>*
  store <64 x float> %66, <64 x float>* %68, align 128, !tbaa !4963
  %69 = or i64 %34, 320
  %70 = add i32 %28, 320
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %7, i64 %71
  %73 = bitcast float* %72 to <64 x float>*
  %74 = load <64 x float>, <64 x float>* %73, align 128, !tbaa !4966
  %75 = getelementptr inbounds float, float* %4, i64 %69
  %76 = bitcast float* %75 to <64 x float>*
  store <64 x float> %74, <64 x float>* %76, align 128, !tbaa !4963
  %77 = or i64 %34, 384
  %78 = add i32 %28, 384
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %7, i64 %79
  %81 = bitcast float* %80 to <64 x float>*
  %82 = load <64 x float>, <64 x float>* %81, align 128, !tbaa !4966
  %83 = getelementptr inbounds float, float* %4, i64 %77
  %84 = bitcast float* %83 to <64 x float>*
  store <64 x float> %82, <64 x float>* %84, align 128, !tbaa !4963
  %85 = or i64 %34, 448
  %86 = add i32 %28, 448
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %7, i64 %87
  %89 = bitcast float* %88 to <64 x float>*
  %90 = load <64 x float>, <64 x float>* %89, align 128, !tbaa !4966
  %91 = getelementptr inbounds float, float* %4, i64 %85
  %92 = bitcast float* %91 to <64 x float>*
  store <64 x float> %90, <64 x float>* %92, align 128, !tbaa !4963
  %93 = or i64 %34, 512
  %94 = add i32 %28, 512
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds float, float* %7, i64 %95
  %97 = bitcast float* %96 to <64 x float>*
  %98 = load <64 x float>, <64 x float>* %97, align 128, !tbaa !4966
  %99 = getelementptr inbounds float, float* %4, i64 %93
  %100 = bitcast float* %99 to <64 x float>*
  store <64 x float> %98, <64 x float>* %100, align 128, !tbaa !4963
  %101 = or i64 %34, 576
  %102 = add i32 %28, 576
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = bitcast float* %104 to <64 x float>*
  %106 = load <64 x float>, <64 x float>* %105, align 128, !tbaa !4966
  %107 = getelementptr inbounds float, float* %4, i64 %101
  %108 = bitcast float* %107 to <64 x float>*
  store <64 x float> %106, <64 x float>* %108, align 128, !tbaa !4963
  %109 = or i64 %34, 640
  %110 = add i32 %28, 640
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = bitcast float* %112 to <64 x float>*
  %114 = load <64 x float>, <64 x float>* %113, align 128, !tbaa !4966
  %115 = getelementptr inbounds float, float* %4, i64 %109
  %116 = bitcast float* %115 to <64 x float>*
  store <64 x float> %114, <64 x float>* %116, align 128, !tbaa !4963
  %117 = or i64 %34, 704
  %118 = add i32 %28, 704
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds float, float* %7, i64 %119
  %121 = bitcast float* %120 to <64 x float>*
  %122 = load <64 x float>, <64 x float>* %121, align 128, !tbaa !4966
  %123 = getelementptr inbounds float, float* %4, i64 %117
  %124 = bitcast float* %123 to <64 x float>*
  store <64 x float> %122, <64 x float>* %124, align 128, !tbaa !4963
  %125 = or i64 %34, 768
  %126 = add i32 %28, 768
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds float, float* %7, i64 %127
  %129 = bitcast float* %128 to <64 x float>*
  %130 = load <64 x float>, <64 x float>* %129, align 128, !tbaa !4966
  %131 = getelementptr inbounds float, float* %4, i64 %125
  %132 = bitcast float* %131 to <64 x float>*
  store <64 x float> %130, <64 x float>* %132, align 128, !tbaa !4963
  %133 = or i64 %34, 832
  %134 = add i32 %28, 832
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds float, float* %7, i64 %135
  %137 = bitcast float* %136 to <64 x float>*
  %138 = load <64 x float>, <64 x float>* %137, align 128, !tbaa !4966
  %139 = getelementptr inbounds float, float* %4, i64 %133
  %140 = bitcast float* %139 to <64 x float>*
  store <64 x float> %138, <64 x float>* %140, align 128, !tbaa !4963
  %141 = or i64 %34, 896
  %142 = add i32 %28, 896
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = bitcast float* %144 to <64 x float>*
  %146 = load <64 x float>, <64 x float>* %145, align 128, !tbaa !4966
  %147 = getelementptr inbounds float, float* %4, i64 %141
  %148 = bitcast float* %147 to <64 x float>*
  store <64 x float> %146, <64 x float>* %148, align 128, !tbaa !4963
  %149 = or i64 %34, 960
  %150 = getelementptr inbounds float, float* %4, i64 %149
  %151 = bitcast float* %150 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %151, align 128, !tbaa !4963
  br label %for_end3
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.347(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 447
  %17 = sdiv i32 %16, %15
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %17, %18
  %20 = icmp slt i32 %19, 448
  %21 = select i1 %20, i32 %19, i32 448
  %22 = mul nsw i32 %17, %0
  %23 = icmp slt i32 %22, 448
  %24 = select i1 %23, i32 %22, i32 448
  %25 = icmp slt i32 %24, %21
  br i1 %25, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %26 = sext i32 %24 to i64
  %27 = sext i32 %21 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_begin13.preheader
  %indvars.iv150 = phi i64 [ %26, %for_body.lr.ph ], [ %indvars.iv.next151, %for_begin13.preheader ]
  %28 = trunc i64 %indvars.iv150 to i32
  %29 = sdiv i32 %28, 14
  %30 = mul i32 %29, 14
  %.decomposed = sub i32 %28, %30
  %31 = mul nsw i32 %29, 18432
  %32 = sext i32 %31 to i64
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_begin13.preheader, %entry
  ret i32 0

for_begin13.preheader:                            ; preds = %for_end6
  %33 = mul nsw i64 %indvars.iv150, 112
  %34 = shl nsw i32 %29, 3
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds float, float* %13, i64 %35
  %37 = bitcast float* %36 to <8 x float>*
  %38 = load <8 x float>, <8 x float>* %37, align 32, !tbaa !4969
  %39 = fadd <8 x float> %38, %365
  %40 = fcmp ogt <8 x float> %39, zeroinitializer
  %41 = select <8 x i1> %40, <8 x float> %39, <8 x float> zeroinitializer
  %42 = getelementptr inbounds float, float* %10, i64 %33
  %43 = bitcast float* %42 to <8 x float>*
  store <8 x float> %41, <8 x float>* %43, align 32, !tbaa !4972
  %44 = or i64 %33, 8
  %45 = fadd <8 x float> %38, %371
  %46 = fcmp ogt <8 x float> %45, zeroinitializer
  %47 = select <8 x i1> %46, <8 x float> %45, <8 x float> zeroinitializer
  %48 = getelementptr inbounds float, float* %10, i64 %44
  %49 = bitcast float* %48 to <8 x float>*
  store <8 x float> %47, <8 x float>* %49, align 32, !tbaa !4972
  %50 = add nsw i64 %33, 16
  %51 = fadd <8 x float> %38, %377
  %52 = fcmp ogt <8 x float> %51, zeroinitializer
  %53 = select <8 x i1> %52, <8 x float> %51, <8 x float> zeroinitializer
  %54 = getelementptr inbounds float, float* %10, i64 %50
  %55 = bitcast float* %54 to <8 x float>*
  store <8 x float> %53, <8 x float>* %55, align 32, !tbaa !4972
  %56 = add nsw i64 %33, 24
  %57 = fadd <8 x float> %38, %383
  %58 = fcmp ogt <8 x float> %57, zeroinitializer
  %59 = select <8 x i1> %58, <8 x float> %57, <8 x float> zeroinitializer
  %60 = getelementptr inbounds float, float* %10, i64 %56
  %61 = bitcast float* %60 to <8 x float>*
  store <8 x float> %59, <8 x float>* %61, align 32, !tbaa !4972
  %62 = add nsw i64 %33, 32
  %63 = fadd <8 x float> %38, %389
  %64 = fcmp ogt <8 x float> %63, zeroinitializer
  %65 = select <8 x i1> %64, <8 x float> %63, <8 x float> zeroinitializer
  %66 = getelementptr inbounds float, float* %10, i64 %62
  %67 = bitcast float* %66 to <8 x float>*
  store <8 x float> %65, <8 x float>* %67, align 32, !tbaa !4972
  %68 = add nsw i64 %33, 40
  %69 = fadd <8 x float> %38, %395
  %70 = fcmp ogt <8 x float> %69, zeroinitializer
  %71 = select <8 x i1> %70, <8 x float> %69, <8 x float> zeroinitializer
  %72 = getelementptr inbounds float, float* %10, i64 %68
  %73 = bitcast float* %72 to <8 x float>*
  store <8 x float> %71, <8 x float>* %73, align 32, !tbaa !4972
  %74 = add nsw i64 %33, 48
  %75 = fadd <8 x float> %38, %401
  %76 = fcmp ogt <8 x float> %75, zeroinitializer
  %77 = select <8 x i1> %76, <8 x float> %75, <8 x float> zeroinitializer
  %78 = getelementptr inbounds float, float* %10, i64 %74
  %79 = bitcast float* %78 to <8 x float>*
  store <8 x float> %77, <8 x float>* %79, align 32, !tbaa !4972
  %80 = add nsw i64 %33, 56
  %81 = fadd <8 x float> %38, %407
  %82 = fcmp ogt <8 x float> %81, zeroinitializer
  %83 = select <8 x i1> %82, <8 x float> %81, <8 x float> zeroinitializer
  %84 = getelementptr inbounds float, float* %10, i64 %80
  %85 = bitcast float* %84 to <8 x float>*
  store <8 x float> %83, <8 x float>* %85, align 32, !tbaa !4972
  %86 = add nsw i64 %33, 64
  %87 = fadd <8 x float> %38, %413
  %88 = fcmp ogt <8 x float> %87, zeroinitializer
  %89 = select <8 x i1> %88, <8 x float> %87, <8 x float> zeroinitializer
  %90 = getelementptr inbounds float, float* %10, i64 %86
  %91 = bitcast float* %90 to <8 x float>*
  store <8 x float> %89, <8 x float>* %91, align 32, !tbaa !4972
  %92 = add nsw i64 %33, 72
  %93 = fadd <8 x float> %38, %419
  %94 = fcmp ogt <8 x float> %93, zeroinitializer
  %95 = select <8 x i1> %94, <8 x float> %93, <8 x float> zeroinitializer
  %96 = getelementptr inbounds float, float* %10, i64 %92
  %97 = bitcast float* %96 to <8 x float>*
  store <8 x float> %95, <8 x float>* %97, align 32, !tbaa !4972
  %98 = add nsw i64 %33, 80
  %99 = fadd <8 x float> %38, %425
  %100 = fcmp ogt <8 x float> %99, zeroinitializer
  %101 = select <8 x i1> %100, <8 x float> %99, <8 x float> zeroinitializer
  %102 = getelementptr inbounds float, float* %10, i64 %98
  %103 = bitcast float* %102 to <8 x float>*
  store <8 x float> %101, <8 x float>* %103, align 32, !tbaa !4972
  %104 = add nsw i64 %33, 88
  %105 = fadd <8 x float> %38, %431
  %106 = fcmp ogt <8 x float> %105, zeroinitializer
  %107 = select <8 x i1> %106, <8 x float> %105, <8 x float> zeroinitializer
  %108 = getelementptr inbounds float, float* %10, i64 %104
  %109 = bitcast float* %108 to <8 x float>*
  store <8 x float> %107, <8 x float>* %109, align 32, !tbaa !4972
  %110 = add nsw i64 %33, 96
  %111 = fadd <8 x float> %38, %437
  %112 = fcmp ogt <8 x float> %111, zeroinitializer
  %113 = select <8 x i1> %112, <8 x float> %111, <8 x float> zeroinitializer
  %114 = getelementptr inbounds float, float* %10, i64 %110
  %115 = bitcast float* %114 to <8 x float>*
  store <8 x float> %113, <8 x float>* %115, align 32, !tbaa !4972
  %116 = add nsw i64 %33, 104
  %117 = fadd <8 x float> %38, %443
  %118 = fcmp ogt <8 x float> %117, zeroinitializer
  %119 = select <8 x i1> %118, <8 x float> %117, <8 x float> zeroinitializer
  %120 = getelementptr inbounds float, float* %10, i64 %116
  %121 = bitcast float* %120 to <8 x float>*
  store <8 x float> %119, <8 x float>* %121, align 32, !tbaa !4972
  %indvars.iv.next151 = add nsw i64 %indvars.iv150, 1
  %122 = icmp slt i64 %indvars.iv.next151, %27
  br i1 %122, label %for_body, label %for_end, !prof !5

for_begin4.preheader:                             ; preds = %for_end6, %for_body
  %indvars.iv144 = phi i64 [ 0, %for_body ], [ %indvars.iv.next145, %for_end6 ]
  %.lcssa42.lcssa.lcssa122 = phi <8 x float> [ zeroinitializer, %for_body ], [ %443, %for_end6 ]
  %.lcssa40.lcssa.lcssa120 = phi <8 x float> [ zeroinitializer, %for_body ], [ %437, %for_end6 ]
  %.lcssa38.lcssa.lcssa118 = phi <8 x float> [ zeroinitializer, %for_body ], [ %431, %for_end6 ]
  %.lcssa36.lcssa.lcssa116 = phi <8 x float> [ zeroinitializer, %for_body ], [ %425, %for_end6 ]
  %.lcssa34.lcssa.lcssa114 = phi <8 x float> [ zeroinitializer, %for_body ], [ %419, %for_end6 ]
  %.lcssa32.lcssa.lcssa112 = phi <8 x float> [ zeroinitializer, %for_body ], [ %413, %for_end6 ]
  %.lcssa30.lcssa.lcssa110 = phi <8 x float> [ zeroinitializer, %for_body ], [ %407, %for_end6 ]
  %.lcssa28.lcssa.lcssa108 = phi <8 x float> [ zeroinitializer, %for_body ], [ %401, %for_end6 ]
  %.lcssa26.lcssa.lcssa106 = phi <8 x float> [ zeroinitializer, %for_body ], [ %395, %for_end6 ]
  %.lcssa24.lcssa.lcssa104 = phi <8 x float> [ zeroinitializer, %for_body ], [ %389, %for_end6 ]
  %.lcssa22.lcssa.lcssa103 = phi <8 x float> [ zeroinitializer, %for_body ], [ %383, %for_end6 ]
  %.lcssa20.lcssa.lcssa101 = phi <8 x float> [ zeroinitializer, %for_body ], [ %377, %for_end6 ]
  %.lcssa18.lcssa.lcssa99 = phi <8 x float> [ zeroinitializer, %for_body ], [ %371, %for_end6 ]
  %.lcssa.lcssa.lcssa97 = phi <8 x float> [ zeroinitializer, %for_body ], [ %365, %for_end6 ]
  %123 = mul nuw nsw i64 %indvars.iv144, 4608
  %124 = add nsw i64 %123, %32
  %indvars.iv144.tr = trunc i64 %indvars.iv144 to i32
  %125 = shl i32 %indvars.iv144.tr, 14
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_end12.2, %for_begin4.preheader
  %indvars.iv139 = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next140, %for_end12.2 ]
  %.lcssa42.lcssa95 = phi <8 x float> [ %.lcssa42.lcssa.lcssa122, %for_begin4.preheader ], [ %443, %for_end12.2 ]
  %.lcssa40.lcssa93 = phi <8 x float> [ %.lcssa40.lcssa.lcssa120, %for_begin4.preheader ], [ %437, %for_end12.2 ]
  %.lcssa38.lcssa91 = phi <8 x float> [ %.lcssa38.lcssa.lcssa118, %for_begin4.preheader ], [ %431, %for_end12.2 ]
  %.lcssa36.lcssa89 = phi <8 x float> [ %.lcssa36.lcssa.lcssa116, %for_begin4.preheader ], [ %425, %for_end12.2 ]
  %.lcssa34.lcssa87 = phi <8 x float> [ %.lcssa34.lcssa.lcssa114, %for_begin4.preheader ], [ %419, %for_end12.2 ]
  %.lcssa32.lcssa85 = phi <8 x float> [ %.lcssa32.lcssa.lcssa112, %for_begin4.preheader ], [ %413, %for_end12.2 ]
  %.lcssa30.lcssa83 = phi <8 x float> [ %.lcssa30.lcssa.lcssa110, %for_begin4.preheader ], [ %407, %for_end12.2 ]
  %.lcssa28.lcssa81 = phi <8 x float> [ %.lcssa28.lcssa.lcssa108, %for_begin4.preheader ], [ %401, %for_end12.2 ]
  %.lcssa26.lcssa79 = phi <8 x float> [ %.lcssa26.lcssa.lcssa106, %for_begin4.preheader ], [ %395, %for_end12.2 ]
  %.lcssa24.lcssa77 = phi <8 x float> [ %.lcssa24.lcssa.lcssa104, %for_begin4.preheader ], [ %389, %for_end12.2 ]
  %.lcssa22.lcssa75 = phi <8 x float> [ %.lcssa22.lcssa.lcssa103, %for_begin4.preheader ], [ %383, %for_end12.2 ]
  %.lcssa20.lcssa74 = phi <8 x float> [ %.lcssa20.lcssa.lcssa101, %for_begin4.preheader ], [ %377, %for_end12.2 ]
  %.lcssa18.lcssa72 = phi <8 x float> [ %.lcssa18.lcssa.lcssa99, %for_begin4.preheader ], [ %371, %for_end12.2 ]
  %.lcssa.lcssa70 = phi <8 x float> [ %.lcssa.lcssa.lcssa97, %for_begin4.preheader ], [ %365, %for_end12.2 ]
  %126 = phi i32 [ 0, %for_begin4.preheader ], [ %444, %for_end12.2 ]
  %reass.add = add nsw i32 %126, %.decomposed
  %reass.mul = shl i32 %reass.add, 10
  %127 = add nsw i32 %reass.mul, %125
  %128 = mul nuw nsw i64 %indvars.iv139, 1536
  %129 = add nsw i64 %124, %128
  %130 = sext i32 %127 to i64
  br label %for_body11

for_end6:                                         ; preds = %for_end12.2
  %indvars.iv.next145 = add nuw nsw i64 %indvars.iv144, 1
  %exitcond146 = icmp eq i64 %indvars.iv.next145, 4
  br i1 %exitcond146, label %for_begin13.preheader, label %for_begin4.preheader, !prof !50

for_body11:                                       ; preds = %for_body11, %for_begin7.preheader
  %indvars.iv = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next, %for_body11 ]
  %131 = phi <8 x float> [ %.lcssa42.lcssa95, %for_begin7.preheader ], [ %233, %for_body11 ]
  %132 = phi <8 x float> [ %.lcssa40.lcssa93, %for_begin7.preheader ], [ %227, %for_body11 ]
  %133 = phi <8 x float> [ %.lcssa38.lcssa91, %for_begin7.preheader ], [ %221, %for_body11 ]
  %134 = phi <8 x float> [ %.lcssa36.lcssa89, %for_begin7.preheader ], [ %215, %for_body11 ]
  %135 = phi <8 x float> [ %.lcssa34.lcssa87, %for_begin7.preheader ], [ %209, %for_body11 ]
  %136 = phi <8 x float> [ %.lcssa32.lcssa85, %for_begin7.preheader ], [ %203, %for_body11 ]
  %137 = phi <8 x float> [ %.lcssa30.lcssa83, %for_begin7.preheader ], [ %197, %for_body11 ]
  %138 = phi <8 x float> [ %.lcssa28.lcssa81, %for_begin7.preheader ], [ %191, %for_body11 ]
  %139 = phi <8 x float> [ %.lcssa26.lcssa79, %for_begin7.preheader ], [ %185, %for_body11 ]
  %140 = phi <8 x float> [ %.lcssa24.lcssa77, %for_begin7.preheader ], [ %179, %for_body11 ]
  %141 = phi <8 x float> [ %.lcssa22.lcssa75, %for_begin7.preheader ], [ %173, %for_body11 ]
  %142 = phi <8 x float> [ %.lcssa20.lcssa74, %for_begin7.preheader ], [ %167, %for_body11 ]
  %143 = phi <8 x float> [ %.lcssa18.lcssa72, %for_begin7.preheader ], [ %161, %for_body11 ]
  %144 = phi <8 x float> [ %.lcssa.lcssa70, %for_begin7.preheader ], [ %155, %for_body11 ]
  %145 = add nsw i64 %indvars.iv, %130
  %146 = getelementptr inbounds float, float* %4, i64 %145
  %147 = load float, float* %146, align 4, !tbaa !4963
  %148 = insertelement <8 x float> undef, float %147, i32 0
  %149 = shufflevector <8 x float> %148, <8 x float> undef, <8 x i32> zeroinitializer
  %150 = shl i64 %indvars.iv, 3
  %151 = add nsw i64 %129, %150
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = bitcast float* %152 to <8 x float>*
  %154 = load <8 x float>, <8 x float>* %153, align 32, !tbaa !4975
  %155 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %149, <8 x float> %154, <8 x float> %144)
  %156 = add nsw i64 %145, 64
  %157 = getelementptr inbounds float, float* %4, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !4963
  %159 = insertelement <8 x float> undef, float %158, i32 0
  %160 = shufflevector <8 x float> %159, <8 x float> undef, <8 x i32> zeroinitializer
  %161 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %160, <8 x float> %154, <8 x float> %143)
  %162 = add nsw i64 %145, 128
  %163 = getelementptr inbounds float, float* %4, i64 %162
  %164 = load float, float* %163, align 4, !tbaa !4963
  %165 = insertelement <8 x float> undef, float %164, i32 0
  %166 = shufflevector <8 x float> %165, <8 x float> undef, <8 x i32> zeroinitializer
  %167 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %166, <8 x float> %154, <8 x float> %142)
  %168 = add nsw i64 %145, 192
  %169 = getelementptr inbounds float, float* %4, i64 %168
  %170 = load float, float* %169, align 4, !tbaa !4963
  %171 = insertelement <8 x float> undef, float %170, i32 0
  %172 = shufflevector <8 x float> %171, <8 x float> undef, <8 x i32> zeroinitializer
  %173 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %172, <8 x float> %154, <8 x float> %141)
  %174 = add nsw i64 %145, 256
  %175 = getelementptr inbounds float, float* %4, i64 %174
  %176 = load float, float* %175, align 4, !tbaa !4963
  %177 = insertelement <8 x float> undef, float %176, i32 0
  %178 = shufflevector <8 x float> %177, <8 x float> undef, <8 x i32> zeroinitializer
  %179 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %178, <8 x float> %154, <8 x float> %140)
  %180 = add nsw i64 %145, 320
  %181 = getelementptr inbounds float, float* %4, i64 %180
  %182 = load float, float* %181, align 4, !tbaa !4963
  %183 = insertelement <8 x float> undef, float %182, i32 0
  %184 = shufflevector <8 x float> %183, <8 x float> undef, <8 x i32> zeroinitializer
  %185 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %184, <8 x float> %154, <8 x float> %139)
  %186 = add nsw i64 %145, 384
  %187 = getelementptr inbounds float, float* %4, i64 %186
  %188 = load float, float* %187, align 4, !tbaa !4963
  %189 = insertelement <8 x float> undef, float %188, i32 0
  %190 = shufflevector <8 x float> %189, <8 x float> undef, <8 x i32> zeroinitializer
  %191 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %190, <8 x float> %154, <8 x float> %138)
  %192 = add nsw i64 %145, 448
  %193 = getelementptr inbounds float, float* %4, i64 %192
  %194 = load float, float* %193, align 4, !tbaa !4963
  %195 = insertelement <8 x float> undef, float %194, i32 0
  %196 = shufflevector <8 x float> %195, <8 x float> undef, <8 x i32> zeroinitializer
  %197 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %196, <8 x float> %154, <8 x float> %137)
  %198 = add nsw i64 %145, 512
  %199 = getelementptr inbounds float, float* %4, i64 %198
  %200 = load float, float* %199, align 4, !tbaa !4963
  %201 = insertelement <8 x float> undef, float %200, i32 0
  %202 = shufflevector <8 x float> %201, <8 x float> undef, <8 x i32> zeroinitializer
  %203 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %202, <8 x float> %154, <8 x float> %136)
  %204 = add nsw i64 %145, 576
  %205 = getelementptr inbounds float, float* %4, i64 %204
  %206 = load float, float* %205, align 4, !tbaa !4963
  %207 = insertelement <8 x float> undef, float %206, i32 0
  %208 = shufflevector <8 x float> %207, <8 x float> undef, <8 x i32> zeroinitializer
  %209 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %208, <8 x float> %154, <8 x float> %135)
  %210 = add nsw i64 %145, 640
  %211 = getelementptr inbounds float, float* %4, i64 %210
  %212 = load float, float* %211, align 4, !tbaa !4963
  %213 = insertelement <8 x float> undef, float %212, i32 0
  %214 = shufflevector <8 x float> %213, <8 x float> undef, <8 x i32> zeroinitializer
  %215 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %214, <8 x float> %154, <8 x float> %134)
  %216 = add nsw i64 %145, 704
  %217 = getelementptr inbounds float, float* %4, i64 %216
  %218 = load float, float* %217, align 4, !tbaa !4963
  %219 = insertelement <8 x float> undef, float %218, i32 0
  %220 = shufflevector <8 x float> %219, <8 x float> undef, <8 x i32> zeroinitializer
  %221 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %220, <8 x float> %154, <8 x float> %133)
  %222 = add nsw i64 %145, 768
  %223 = getelementptr inbounds float, float* %4, i64 %222
  %224 = load float, float* %223, align 4, !tbaa !4963
  %225 = insertelement <8 x float> undef, float %224, i32 0
  %226 = shufflevector <8 x float> %225, <8 x float> undef, <8 x i32> zeroinitializer
  %227 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %226, <8 x float> %154, <8 x float> %132)
  %228 = add nsw i64 %145, 832
  %229 = getelementptr inbounds float, float* %4, i64 %228
  %230 = load float, float* %229, align 4, !tbaa !4963
  %231 = insertelement <8 x float> undef, float %230, i32 0
  %232 = shufflevector <8 x float> %231, <8 x float> undef, <8 x i32> zeroinitializer
  %233 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %232, <8 x float> %154, <8 x float> %131)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 64
  br i1 %exitcond, label %for_end12, label %for_body11, !prof !50

for_end12:                                        ; preds = %for_body11
  %234 = or i64 %130, 64
  %235 = add nsw i64 %129, 512
  br label %for_body11.1

for_body11.1:                                     ; preds = %for_body11.1, %for_end12
  %indvars.iv.1 = phi i64 [ 0, %for_end12 ], [ %indvars.iv.next.1, %for_body11.1 ]
  %236 = phi <8 x float> [ %233, %for_end12 ], [ %338, %for_body11.1 ]
  %237 = phi <8 x float> [ %227, %for_end12 ], [ %332, %for_body11.1 ]
  %238 = phi <8 x float> [ %221, %for_end12 ], [ %326, %for_body11.1 ]
  %239 = phi <8 x float> [ %215, %for_end12 ], [ %320, %for_body11.1 ]
  %240 = phi <8 x float> [ %209, %for_end12 ], [ %314, %for_body11.1 ]
  %241 = phi <8 x float> [ %203, %for_end12 ], [ %308, %for_body11.1 ]
  %242 = phi <8 x float> [ %197, %for_end12 ], [ %302, %for_body11.1 ]
  %243 = phi <8 x float> [ %191, %for_end12 ], [ %296, %for_body11.1 ]
  %244 = phi <8 x float> [ %185, %for_end12 ], [ %290, %for_body11.1 ]
  %245 = phi <8 x float> [ %179, %for_end12 ], [ %284, %for_body11.1 ]
  %246 = phi <8 x float> [ %173, %for_end12 ], [ %278, %for_body11.1 ]
  %247 = phi <8 x float> [ %167, %for_end12 ], [ %272, %for_body11.1 ]
  %248 = phi <8 x float> [ %161, %for_end12 ], [ %266, %for_body11.1 ]
  %249 = phi <8 x float> [ %155, %for_end12 ], [ %260, %for_body11.1 ]
  %250 = add nsw i64 %234, %indvars.iv.1
  %251 = getelementptr inbounds float, float* %4, i64 %250
  %252 = load float, float* %251, align 4, !tbaa !4963
  %253 = insertelement <8 x float> undef, float %252, i32 0
  %254 = shufflevector <8 x float> %253, <8 x float> undef, <8 x i32> zeroinitializer
  %255 = shl i64 %indvars.iv.1, 3
  %256 = add nsw i64 %235, %255
  %257 = getelementptr inbounds float, float* %7, i64 %256
  %258 = bitcast float* %257 to <8 x float>*
  %259 = load <8 x float>, <8 x float>* %258, align 32, !tbaa !4975
  %260 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %254, <8 x float> %259, <8 x float> %249)
  %261 = add nsw i64 %250, 64
  %262 = getelementptr inbounds float, float* %4, i64 %261
  %263 = load float, float* %262, align 4, !tbaa !4963
  %264 = insertelement <8 x float> undef, float %263, i32 0
  %265 = shufflevector <8 x float> %264, <8 x float> undef, <8 x i32> zeroinitializer
  %266 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %265, <8 x float> %259, <8 x float> %248)
  %267 = add nsw i64 %250, 128
  %268 = getelementptr inbounds float, float* %4, i64 %267
  %269 = load float, float* %268, align 4, !tbaa !4963
  %270 = insertelement <8 x float> undef, float %269, i32 0
  %271 = shufflevector <8 x float> %270, <8 x float> undef, <8 x i32> zeroinitializer
  %272 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %271, <8 x float> %259, <8 x float> %247)
  %273 = add nsw i64 %250, 192
  %274 = getelementptr inbounds float, float* %4, i64 %273
  %275 = load float, float* %274, align 4, !tbaa !4963
  %276 = insertelement <8 x float> undef, float %275, i32 0
  %277 = shufflevector <8 x float> %276, <8 x float> undef, <8 x i32> zeroinitializer
  %278 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %277, <8 x float> %259, <8 x float> %246)
  %279 = add nsw i64 %250, 256
  %280 = getelementptr inbounds float, float* %4, i64 %279
  %281 = load float, float* %280, align 4, !tbaa !4963
  %282 = insertelement <8 x float> undef, float %281, i32 0
  %283 = shufflevector <8 x float> %282, <8 x float> undef, <8 x i32> zeroinitializer
  %284 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %283, <8 x float> %259, <8 x float> %245)
  %285 = add nsw i64 %250, 320
  %286 = getelementptr inbounds float, float* %4, i64 %285
  %287 = load float, float* %286, align 4, !tbaa !4963
  %288 = insertelement <8 x float> undef, float %287, i32 0
  %289 = shufflevector <8 x float> %288, <8 x float> undef, <8 x i32> zeroinitializer
  %290 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %289, <8 x float> %259, <8 x float> %244)
  %291 = add nsw i64 %250, 384
  %292 = getelementptr inbounds float, float* %4, i64 %291
  %293 = load float, float* %292, align 4, !tbaa !4963
  %294 = insertelement <8 x float> undef, float %293, i32 0
  %295 = shufflevector <8 x float> %294, <8 x float> undef, <8 x i32> zeroinitializer
  %296 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %295, <8 x float> %259, <8 x float> %243)
  %297 = add nsw i64 %250, 448
  %298 = getelementptr inbounds float, float* %4, i64 %297
  %299 = load float, float* %298, align 4, !tbaa !4963
  %300 = insertelement <8 x float> undef, float %299, i32 0
  %301 = shufflevector <8 x float> %300, <8 x float> undef, <8 x i32> zeroinitializer
  %302 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %301, <8 x float> %259, <8 x float> %242)
  %303 = add nsw i64 %250, 512
  %304 = getelementptr inbounds float, float* %4, i64 %303
  %305 = load float, float* %304, align 4, !tbaa !4963
  %306 = insertelement <8 x float> undef, float %305, i32 0
  %307 = shufflevector <8 x float> %306, <8 x float> undef, <8 x i32> zeroinitializer
  %308 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %307, <8 x float> %259, <8 x float> %241)
  %309 = add nsw i64 %250, 576
  %310 = getelementptr inbounds float, float* %4, i64 %309
  %311 = load float, float* %310, align 4, !tbaa !4963
  %312 = insertelement <8 x float> undef, float %311, i32 0
  %313 = shufflevector <8 x float> %312, <8 x float> undef, <8 x i32> zeroinitializer
  %314 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %313, <8 x float> %259, <8 x float> %240)
  %315 = add nsw i64 %250, 640
  %316 = getelementptr inbounds float, float* %4, i64 %315
  %317 = load float, float* %316, align 4, !tbaa !4963
  %318 = insertelement <8 x float> undef, float %317, i32 0
  %319 = shufflevector <8 x float> %318, <8 x float> undef, <8 x i32> zeroinitializer
  %320 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %319, <8 x float> %259, <8 x float> %239)
  %321 = add nsw i64 %250, 704
  %322 = getelementptr inbounds float, float* %4, i64 %321
  %323 = load float, float* %322, align 4, !tbaa !4963
  %324 = insertelement <8 x float> undef, float %323, i32 0
  %325 = shufflevector <8 x float> %324, <8 x float> undef, <8 x i32> zeroinitializer
  %326 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %325, <8 x float> %259, <8 x float> %238)
  %327 = add nsw i64 %250, 768
  %328 = getelementptr inbounds float, float* %4, i64 %327
  %329 = load float, float* %328, align 4, !tbaa !4963
  %330 = insertelement <8 x float> undef, float %329, i32 0
  %331 = shufflevector <8 x float> %330, <8 x float> undef, <8 x i32> zeroinitializer
  %332 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %331, <8 x float> %259, <8 x float> %237)
  %333 = add nsw i64 %250, 832
  %334 = getelementptr inbounds float, float* %4, i64 %333
  %335 = load float, float* %334, align 4, !tbaa !4963
  %336 = insertelement <8 x float> undef, float %335, i32 0
  %337 = shufflevector <8 x float> %336, <8 x float> undef, <8 x i32> zeroinitializer
  %338 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %337, <8 x float> %259, <8 x float> %236)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 64
  br i1 %exitcond.1, label %for_end12.1, label %for_body11.1, !prof !50

for_end12.1:                                      ; preds = %for_body11.1
  %339 = or i64 %130, 128
  %340 = add nsw i64 %129, 1024
  br label %for_body11.2

for_body11.2:                                     ; preds = %for_body11.2, %for_end12.1
  %indvars.iv.2 = phi i64 [ 0, %for_end12.1 ], [ %indvars.iv.next.2, %for_body11.2 ]
  %341 = phi <8 x float> [ %338, %for_end12.1 ], [ %443, %for_body11.2 ]
  %342 = phi <8 x float> [ %332, %for_end12.1 ], [ %437, %for_body11.2 ]
  %343 = phi <8 x float> [ %326, %for_end12.1 ], [ %431, %for_body11.2 ]
  %344 = phi <8 x float> [ %320, %for_end12.1 ], [ %425, %for_body11.2 ]
  %345 = phi <8 x float> [ %314, %for_end12.1 ], [ %419, %for_body11.2 ]
  %346 = phi <8 x float> [ %308, %for_end12.1 ], [ %413, %for_body11.2 ]
  %347 = phi <8 x float> [ %302, %for_end12.1 ], [ %407, %for_body11.2 ]
  %348 = phi <8 x float> [ %296, %for_end12.1 ], [ %401, %for_body11.2 ]
  %349 = phi <8 x float> [ %290, %for_end12.1 ], [ %395, %for_body11.2 ]
  %350 = phi <8 x float> [ %284, %for_end12.1 ], [ %389, %for_body11.2 ]
  %351 = phi <8 x float> [ %278, %for_end12.1 ], [ %383, %for_body11.2 ]
  %352 = phi <8 x float> [ %272, %for_end12.1 ], [ %377, %for_body11.2 ]
  %353 = phi <8 x float> [ %266, %for_end12.1 ], [ %371, %for_body11.2 ]
  %354 = phi <8 x float> [ %260, %for_end12.1 ], [ %365, %for_body11.2 ]
  %355 = add nsw i64 %339, %indvars.iv.2
  %356 = getelementptr inbounds float, float* %4, i64 %355
  %357 = load float, float* %356, align 4, !tbaa !4963
  %358 = insertelement <8 x float> undef, float %357, i32 0
  %359 = shufflevector <8 x float> %358, <8 x float> undef, <8 x i32> zeroinitializer
  %360 = shl i64 %indvars.iv.2, 3
  %361 = add nsw i64 %340, %360
  %362 = getelementptr inbounds float, float* %7, i64 %361
  %363 = bitcast float* %362 to <8 x float>*
  %364 = load <8 x float>, <8 x float>* %363, align 32, !tbaa !4975
  %365 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %359, <8 x float> %364, <8 x float> %354)
  %366 = add nsw i64 %355, 64
  %367 = getelementptr inbounds float, float* %4, i64 %366
  %368 = load float, float* %367, align 4, !tbaa !4963
  %369 = insertelement <8 x float> undef, float %368, i32 0
  %370 = shufflevector <8 x float> %369, <8 x float> undef, <8 x i32> zeroinitializer
  %371 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %370, <8 x float> %364, <8 x float> %353)
  %372 = add nsw i64 %355, 128
  %373 = getelementptr inbounds float, float* %4, i64 %372
  %374 = load float, float* %373, align 4, !tbaa !4963
  %375 = insertelement <8 x float> undef, float %374, i32 0
  %376 = shufflevector <8 x float> %375, <8 x float> undef, <8 x i32> zeroinitializer
  %377 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %376, <8 x float> %364, <8 x float> %352)
  %378 = add nsw i64 %355, 192
  %379 = getelementptr inbounds float, float* %4, i64 %378
  %380 = load float, float* %379, align 4, !tbaa !4963
  %381 = insertelement <8 x float> undef, float %380, i32 0
  %382 = shufflevector <8 x float> %381, <8 x float> undef, <8 x i32> zeroinitializer
  %383 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %382, <8 x float> %364, <8 x float> %351)
  %384 = add nsw i64 %355, 256
  %385 = getelementptr inbounds float, float* %4, i64 %384
  %386 = load float, float* %385, align 4, !tbaa !4963
  %387 = insertelement <8 x float> undef, float %386, i32 0
  %388 = shufflevector <8 x float> %387, <8 x float> undef, <8 x i32> zeroinitializer
  %389 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %388, <8 x float> %364, <8 x float> %350)
  %390 = add nsw i64 %355, 320
  %391 = getelementptr inbounds float, float* %4, i64 %390
  %392 = load float, float* %391, align 4, !tbaa !4963
  %393 = insertelement <8 x float> undef, float %392, i32 0
  %394 = shufflevector <8 x float> %393, <8 x float> undef, <8 x i32> zeroinitializer
  %395 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %394, <8 x float> %364, <8 x float> %349)
  %396 = add nsw i64 %355, 384
  %397 = getelementptr inbounds float, float* %4, i64 %396
  %398 = load float, float* %397, align 4, !tbaa !4963
  %399 = insertelement <8 x float> undef, float %398, i32 0
  %400 = shufflevector <8 x float> %399, <8 x float> undef, <8 x i32> zeroinitializer
  %401 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %400, <8 x float> %364, <8 x float> %348)
  %402 = add nsw i64 %355, 448
  %403 = getelementptr inbounds float, float* %4, i64 %402
  %404 = load float, float* %403, align 4, !tbaa !4963
  %405 = insertelement <8 x float> undef, float %404, i32 0
  %406 = shufflevector <8 x float> %405, <8 x float> undef, <8 x i32> zeroinitializer
  %407 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %406, <8 x float> %364, <8 x float> %347)
  %408 = add nsw i64 %355, 512
  %409 = getelementptr inbounds float, float* %4, i64 %408
  %410 = load float, float* %409, align 4, !tbaa !4963
  %411 = insertelement <8 x float> undef, float %410, i32 0
  %412 = shufflevector <8 x float> %411, <8 x float> undef, <8 x i32> zeroinitializer
  %413 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %412, <8 x float> %364, <8 x float> %346)
  %414 = add nsw i64 %355, 576
  %415 = getelementptr inbounds float, float* %4, i64 %414
  %416 = load float, float* %415, align 4, !tbaa !4963
  %417 = insertelement <8 x float> undef, float %416, i32 0
  %418 = shufflevector <8 x float> %417, <8 x float> undef, <8 x i32> zeroinitializer
  %419 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %418, <8 x float> %364, <8 x float> %345)
  %420 = add nsw i64 %355, 640
  %421 = getelementptr inbounds float, float* %4, i64 %420
  %422 = load float, float* %421, align 4, !tbaa !4963
  %423 = insertelement <8 x float> undef, float %422, i32 0
  %424 = shufflevector <8 x float> %423, <8 x float> undef, <8 x i32> zeroinitializer
  %425 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %424, <8 x float> %364, <8 x float> %344)
  %426 = add nsw i64 %355, 704
  %427 = getelementptr inbounds float, float* %4, i64 %426
  %428 = load float, float* %427, align 4, !tbaa !4963
  %429 = insertelement <8 x float> undef, float %428, i32 0
  %430 = shufflevector <8 x float> %429, <8 x float> undef, <8 x i32> zeroinitializer
  %431 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %430, <8 x float> %364, <8 x float> %343)
  %432 = add nsw i64 %355, 768
  %433 = getelementptr inbounds float, float* %4, i64 %432
  %434 = load float, float* %433, align 4, !tbaa !4963
  %435 = insertelement <8 x float> undef, float %434, i32 0
  %436 = shufflevector <8 x float> %435, <8 x float> undef, <8 x i32> zeroinitializer
  %437 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %436, <8 x float> %364, <8 x float> %342)
  %438 = add nsw i64 %355, 832
  %439 = getelementptr inbounds float, float* %4, i64 %438
  %440 = load float, float* %439, align 4, !tbaa !4963
  %441 = insertelement <8 x float> undef, float %440, i32 0
  %442 = shufflevector <8 x float> %441, <8 x float> undef, <8 x i32> zeroinitializer
  %443 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %442, <8 x float> %364, <8 x float> %341)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 64
  br i1 %exitcond.2, label %for_end12.2, label %for_body11.2, !prof !50

for_end12.2:                                      ; preds = %for_body11.2
  %indvars.iv.next140 = add nuw nsw i64 %indvars.iv139, 1
  %444 = add nuw nsw i32 %126, 1
  %exitcond143 = icmp eq i64 %indvars.iv.next140, 3
  br i1 %exitcond143, label %for_end6, label %for_begin7.preheader, !prof !50
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.348, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !4978
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !4992
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !4995
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.349, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !4997
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.350, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.351, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.352, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !4999
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !5013
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 64
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.162, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !5015
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 14
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.125, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !5018
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 14
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.126, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !5020
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 16
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !5024
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 200704
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !5038
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 3136
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !5040
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 224
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !5043
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 16
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !5045
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.163, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !5049
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 32
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.326, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !5063
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 64
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.205, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !5065
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !5068
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !5070
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 16
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !5074
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !5076
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 8192
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !5090
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 128
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !5092
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 128
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !5095
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 128
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !5097
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 8
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !5101
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([271 x i8], [271 x i8]* @.str.353, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !5103
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !5117
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 32
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.328, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !5119
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !5122
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !5124
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 8
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !5128
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 256
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !5142
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 8
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !5144
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 8
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !5147
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 8
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !5149
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.329, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !5153
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !5167
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 32
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.330, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !5169
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 14
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !5172
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 14
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.135, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !5174
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 8
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !5178
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 50176
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !5192
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 1568
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !5194
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 112
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !5197
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 8
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !5199
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([236 x i8], [236 x i8]* @.str.331, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5_compute_(i8* %27, i8* %35, i8* %47, i8* %41)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %4 = alloca %33, align 8
  %5 = getelementptr inbounds %33, %33* %4, i64 0, i32 0
  store i8* %0, i8** %5, align 8
  %6 = getelementptr inbounds %33, %33* %4, i64 0, i32 1
  store i8* %1, i8** %6, align 8
  %7 = getelementptr inbounds %33, %33* %4, i64 0, i32 2
  store i8* %2, i8** %7, align 8
  %8 = getelementptr inbounds %33, %33* %4, i64 0, i32 3
  store i8* %3, i8** %8, align 8
  %9 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %10 = bitcast %33* %4 to i8*
  %11 = call i32 %9(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.354, i8* nonnull %10, i32 0)
  ret i32 %11
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.354(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = alloca [28 x <8 x float>], align 16
  %4 = bitcast i8* %2 to float**
  %5 = load float*, float** %4, align 8
  %6 = getelementptr inbounds i8, i8* %2, i64 8
  %7 = bitcast i8* %6 to float**
  %8 = load float*, float** %7, align 8
  %9 = getelementptr inbounds i8, i8* %2, i64 16
  %10 = bitcast i8* %9 to float**
  %11 = load float*, float** %10, align 8
  %12 = getelementptr inbounds i8, i8* %2, i64 24
  %13 = bitcast i8* %12 to float**
  %14 = load float*, float** %13, align 8
  %15 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = add nsw i32 %16, 223
  %18 = sdiv i32 %17, %16
  %19 = add nsw i32 %0, 1
  %20 = mul nsw i32 %18, %19
  %21 = icmp slt i32 %20, 224
  %22 = select i1 %21, i32 %20, i32 224
  %23 = mul nsw i32 %18, %0
  %24 = icmp slt i32 %23, 224
  %25 = select i1 %24, i32 %23, i32 224
  %26 = icmp slt i32 %25, %22
  br i1 %26, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %27 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 168
  %28 = bitcast float* %27 to <8 x float>*
  %29 = sext i32 %25 to i64
  %30 = sext i32 %22 to i64
  %31 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0
  %32 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 8
  %33 = bitcast float* %32 to <8 x float>*
  %34 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 16
  %35 = bitcast float* %34 to <8 x float>*
  %36 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 24
  %37 = bitcast float* %36 to <8 x float>*
  %38 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 32
  %39 = bitcast float* %38 to <8 x float>*
  %40 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 40
  %41 = bitcast float* %40 to <8 x float>*
  %42 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 48
  %43 = bitcast float* %42 to <8 x float>*
  %44 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 112
  %45 = bitcast float* %44 to <8 x float>*
  %46 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 120
  %47 = bitcast float* %46 to <8 x float>*
  %48 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 128
  %49 = bitcast float* %48 to <8 x float>*
  %50 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 136
  %51 = bitcast float* %50 to <8 x float>*
  %52 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 144
  %53 = bitcast float* %52 to <8 x float>*
  %54 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 152
  %55 = bitcast float* %54 to <8 x float>*
  %56 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 160
  %57 = bitcast float* %56 to <8 x float>*
  %58 = bitcast [28 x <8 x float>]* %3 to i8*
  %59 = bitcast float* %44 to i8*
  %60 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 56
  %61 = bitcast float* %60 to <8 x float>*
  %62 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 64
  %63 = bitcast float* %62 to <8 x float>*
  %64 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 72
  %65 = bitcast float* %64 to <8 x float>*
  %66 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 80
  %67 = bitcast float* %66 to <8 x float>*
  %68 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 88
  %69 = bitcast float* %68 to <8 x float>*
  %70 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 96
  %71 = bitcast float* %70 to <8 x float>*
  %72 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 104
  %73 = bitcast float* %72 to <8 x float>*
  %74 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 176
  %75 = bitcast float* %74 to <8 x float>*
  %76 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 184
  %77 = bitcast float* %76 to <8 x float>*
  %78 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 192
  %79 = bitcast float* %78 to <8 x float>*
  %80 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 200
  %81 = bitcast float* %80 to <8 x float>*
  %82 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 208
  %83 = bitcast float* %82 to <8 x float>*
  %84 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 216
  %85 = bitcast float* %84 to <8 x float>*
  %86 = bitcast float* %60 to i8*
  %87 = bitcast float* %27 to i8*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end6.1
  %indvars.iv104 = phi i64 [ %29, %for_begin1.preheader.preheader ], [ %indvars.iv.next105, %for_end6.1 ]
  %88 = trunc i64 %indvars.iv104 to i32
  %89 = sdiv i32 %88, 7
  %90 = mul i32 %89, 7
  %.decomposed = sub i32 %88, %90
  %91 = mul nsw i32 %.decomposed, 448
  %92 = shl i32 %89, 13
  %93 = sext i32 %92 to i64
  %94 = sext i32 %91 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %58, i8 0, i64 224, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %59, i8 0, i64 224, i1 false)
  br label %for_begin7.preheader

for_end:                                          ; preds = %for_end6.1, %entry
  ret i32 0

for_begin7.preheader:                             ; preds = %for_end9, %for_begin1.preheader
  %indvars.iv87 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next88, %for_end9 ]
  %.lcssa4673 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %202, %for_end9 ]
  %.lcssa4471 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %196, %for_end9 ]
  %.lcssa4269 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %190, %for_end9 ]
  %.lcssa4067 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %184, %for_end9 ]
  %.lcssa3865 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %178, %for_end9 ]
  %.lcssa3663 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %172, %for_end9 ]
  %.lcssa3461 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %166, %for_end9 ]
  %.lcssa3259 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %160, %for_end9 ]
  %.lcssa3057 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %154, %for_end9 ]
  %.lcssa2855 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %148, %for_end9 ]
  %.lcssa2653 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %142, %for_end9 ]
  %.lcssa2451 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %136, %for_end9 ]
  %.lcssa2249 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %130, %for_end9 ]
  %.lcssa48 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %124, %for_end9 ]
  %95 = mul nuw nsw i64 %indvars.iv87, 3136
  %96 = add nsw i64 %95, %94
  %97 = shl i64 %indvars.iv87, 7
  %98 = add nuw nsw i64 %97, %93
  br label %for_body8

for_end6:                                         ; preds = %for_end9
  store <8 x float> %124, <8 x float>* %31, align 16, !tbaa !5203
  store <8 x float> %130, <8 x float>* %33, align 16, !tbaa !5203
  store <8 x float> %136, <8 x float>* %35, align 16, !tbaa !5203
  store <8 x float> %142, <8 x float>* %37, align 16, !tbaa !5203
  store <8 x float> %148, <8 x float>* %39, align 16, !tbaa !5203
  store <8 x float> %154, <8 x float>* %41, align 16, !tbaa !5203
  store <8 x float> %160, <8 x float>* %43, align 16, !tbaa !5203
  store <8 x float> %166, <8 x float>* %45, align 16, !tbaa !5203
  store <8 x float> %172, <8 x float>* %47, align 16, !tbaa !5203
  store <8 x float> %178, <8 x float>* %49, align 16, !tbaa !5203
  store <8 x float> %184, <8 x float>* %51, align 16, !tbaa !5203
  store <8 x float> %190, <8 x float>* %53, align 16, !tbaa !5203
  store <8 x float> %196, <8 x float>* %55, align 16, !tbaa !5203
  store <8 x float> %202, <8 x float>* %57, align 16, !tbaa !5203
  %99 = add nsw i64 %94, 112
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %86, i8 0, i64 224, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %87, i8 0, i64 224, i1 false)
  br label %for_begin7.preheader.1

for_body8:                                        ; preds = %for_body8, %for_begin7.preheader
  %indvars.iv = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next, %for_body8 ]
  %100 = phi <8 x float> [ %.lcssa4673, %for_begin7.preheader ], [ %202, %for_body8 ]
  %101 = phi <8 x float> [ %.lcssa4471, %for_begin7.preheader ], [ %196, %for_body8 ]
  %102 = phi <8 x float> [ %.lcssa4269, %for_begin7.preheader ], [ %190, %for_body8 ]
  %103 = phi <8 x float> [ %.lcssa4067, %for_begin7.preheader ], [ %184, %for_body8 ]
  %104 = phi <8 x float> [ %.lcssa3865, %for_begin7.preheader ], [ %178, %for_body8 ]
  %105 = phi <8 x float> [ %.lcssa3663, %for_begin7.preheader ], [ %172, %for_body8 ]
  %106 = phi <8 x float> [ %.lcssa3461, %for_begin7.preheader ], [ %166, %for_body8 ]
  %107 = phi <8 x float> [ %.lcssa3259, %for_begin7.preheader ], [ %160, %for_body8 ]
  %108 = phi <8 x float> [ %.lcssa3057, %for_begin7.preheader ], [ %154, %for_body8 ]
  %109 = phi <8 x float> [ %.lcssa2855, %for_begin7.preheader ], [ %148, %for_body8 ]
  %110 = phi <8 x float> [ %.lcssa2653, %for_begin7.preheader ], [ %142, %for_body8 ]
  %111 = phi <8 x float> [ %.lcssa2451, %for_begin7.preheader ], [ %136, %for_body8 ]
  %112 = phi <8 x float> [ %.lcssa2249, %for_begin7.preheader ], [ %130, %for_body8 ]
  %113 = phi <8 x float> [ %.lcssa48, %for_begin7.preheader ], [ %124, %for_body8 ]
  %114 = add nsw i64 %96, %indvars.iv
  %115 = getelementptr inbounds float, float* %5, i64 %114
  %116 = load float, float* %115, align 4, !tbaa !5206
  %117 = insertelement <8 x float> undef, float %116, i32 0
  %118 = shufflevector <8 x float> %117, <8 x float> undef, <8 x i32> zeroinitializer
  %119 = shl i64 %indvars.iv, 3
  %120 = add nuw nsw i64 %98, %119
  %121 = getelementptr inbounds float, float* %8, i64 %120
  %122 = bitcast float* %121 to <8 x float>*
  %123 = load <8 x float>, <8 x float>* %122, align 32, !tbaa !5209
  %124 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %118, <8 x float> %123, <8 x float> %113)
  %125 = add nsw i64 %114, 16
  %126 = getelementptr inbounds float, float* %5, i64 %125
  %127 = load float, float* %126, align 4, !tbaa !5206
  %128 = insertelement <8 x float> undef, float %127, i32 0
  %129 = shufflevector <8 x float> %128, <8 x float> undef, <8 x i32> zeroinitializer
  %130 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %129, <8 x float> %123, <8 x float> %112)
  %131 = add nsw i64 %114, 32
  %132 = getelementptr inbounds float, float* %5, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !5206
  %134 = insertelement <8 x float> undef, float %133, i32 0
  %135 = shufflevector <8 x float> %134, <8 x float> undef, <8 x i32> zeroinitializer
  %136 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %135, <8 x float> %123, <8 x float> %111)
  %137 = add nsw i64 %114, 48
  %138 = getelementptr inbounds float, float* %5, i64 %137
  %139 = load float, float* %138, align 4, !tbaa !5206
  %140 = insertelement <8 x float> undef, float %139, i32 0
  %141 = shufflevector <8 x float> %140, <8 x float> undef, <8 x i32> zeroinitializer
  %142 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %141, <8 x float> %123, <8 x float> %110)
  %143 = add nsw i64 %114, 64
  %144 = getelementptr inbounds float, float* %5, i64 %143
  %145 = load float, float* %144, align 4, !tbaa !5206
  %146 = insertelement <8 x float> undef, float %145, i32 0
  %147 = shufflevector <8 x float> %146, <8 x float> undef, <8 x i32> zeroinitializer
  %148 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %147, <8 x float> %123, <8 x float> %109)
  %149 = add nsw i64 %114, 80
  %150 = getelementptr inbounds float, float* %5, i64 %149
  %151 = load float, float* %150, align 4, !tbaa !5206
  %152 = insertelement <8 x float> undef, float %151, i32 0
  %153 = shufflevector <8 x float> %152, <8 x float> undef, <8 x i32> zeroinitializer
  %154 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %153, <8 x float> %123, <8 x float> %108)
  %155 = add nsw i64 %114, 96
  %156 = getelementptr inbounds float, float* %5, i64 %155
  %157 = load float, float* %156, align 4, !tbaa !5206
  %158 = insertelement <8 x float> undef, float %157, i32 0
  %159 = shufflevector <8 x float> %158, <8 x float> undef, <8 x i32> zeroinitializer
  %160 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %159, <8 x float> %123, <8 x float> %107)
  %161 = add nsw i64 %114, 224
  %162 = getelementptr inbounds float, float* %5, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !5206
  %164 = insertelement <8 x float> undef, float %163, i32 0
  %165 = shufflevector <8 x float> %164, <8 x float> undef, <8 x i32> zeroinitializer
  %166 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %165, <8 x float> %123, <8 x float> %106)
  %167 = add nsw i64 %114, 240
  %168 = getelementptr inbounds float, float* %5, i64 %167
  %169 = load float, float* %168, align 4, !tbaa !5206
  %170 = insertelement <8 x float> undef, float %169, i32 0
  %171 = shufflevector <8 x float> %170, <8 x float> undef, <8 x i32> zeroinitializer
  %172 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %171, <8 x float> %123, <8 x float> %105)
  %173 = add nsw i64 %114, 256
  %174 = getelementptr inbounds float, float* %5, i64 %173
  %175 = load float, float* %174, align 4, !tbaa !5206
  %176 = insertelement <8 x float> undef, float %175, i32 0
  %177 = shufflevector <8 x float> %176, <8 x float> undef, <8 x i32> zeroinitializer
  %178 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %177, <8 x float> %123, <8 x float> %104)
  %179 = add nsw i64 %114, 272
  %180 = getelementptr inbounds float, float* %5, i64 %179
  %181 = load float, float* %180, align 4, !tbaa !5206
  %182 = insertelement <8 x float> undef, float %181, i32 0
  %183 = shufflevector <8 x float> %182, <8 x float> undef, <8 x i32> zeroinitializer
  %184 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %183, <8 x float> %123, <8 x float> %103)
  %185 = add nsw i64 %114, 288
  %186 = getelementptr inbounds float, float* %5, i64 %185
  %187 = load float, float* %186, align 4, !tbaa !5206
  %188 = insertelement <8 x float> undef, float %187, i32 0
  %189 = shufflevector <8 x float> %188, <8 x float> undef, <8 x i32> zeroinitializer
  %190 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %189, <8 x float> %123, <8 x float> %102)
  %191 = add nsw i64 %114, 304
  %192 = getelementptr inbounds float, float* %5, i64 %191
  %193 = load float, float* %192, align 4, !tbaa !5206
  %194 = insertelement <8 x float> undef, float %193, i32 0
  %195 = shufflevector <8 x float> %194, <8 x float> undef, <8 x i32> zeroinitializer
  %196 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %195, <8 x float> %123, <8 x float> %101)
  %197 = add nsw i64 %114, 320
  %198 = getelementptr inbounds float, float* %5, i64 %197
  %199 = load float, float* %198, align 4, !tbaa !5206
  %200 = insertelement <8 x float> undef, float %199, i32 0
  %201 = shufflevector <8 x float> %200, <8 x float> undef, <8 x i32> zeroinitializer
  %202 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %201, <8 x float> %123, <8 x float> %100)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end9, label %for_body8, !prof !50

for_end9:                                         ; preds = %for_body8
  %indvars.iv.next88 = add nuw nsw i64 %indvars.iv87, 1
  %exitcond89 = icmp eq i64 %indvars.iv.next88, 64
  br i1 %exitcond89, label %for_end6, label %for_begin7.preheader, !prof !50

for_begin7.preheader.1:                           ; preds = %for_end9.1, %for_end6
  %indvars.iv87.1 = phi i64 [ 0, %for_end6 ], [ %indvars.iv.next88.1, %for_end9.1 ]
  %.lcssa4673.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %309, %for_end9.1 ]
  %.lcssa4471.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %303, %for_end9.1 ]
  %.lcssa4269.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %297, %for_end9.1 ]
  %.lcssa4067.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %291, %for_end9.1 ]
  %.lcssa3865.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %285, %for_end9.1 ]
  %.lcssa3663.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %279, %for_end9.1 ]
  %.lcssa3461.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %273, %for_end9.1 ]
  %.lcssa3259.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %267, %for_end9.1 ]
  %.lcssa3057.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %261, %for_end9.1 ]
  %.lcssa2855.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %255, %for_end9.1 ]
  %.lcssa2653.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %249, %for_end9.1 ]
  %.lcssa2451.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %243, %for_end9.1 ]
  %.lcssa2249.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %237, %for_end9.1 ]
  %.lcssa48.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %231, %for_end9.1 ]
  %203 = mul nuw nsw i64 %indvars.iv87.1, 3136
  %204 = add nsw i64 %99, %203
  %205 = shl i64 %indvars.iv87.1, 7
  %206 = add nuw nsw i64 %205, %93
  br label %for_body8.1

for_body8.1:                                      ; preds = %for_body8.1, %for_begin7.preheader.1
  %indvars.iv.1 = phi i64 [ 0, %for_begin7.preheader.1 ], [ %indvars.iv.next.1, %for_body8.1 ]
  %207 = phi <8 x float> [ %.lcssa4673.1, %for_begin7.preheader.1 ], [ %309, %for_body8.1 ]
  %208 = phi <8 x float> [ %.lcssa4471.1, %for_begin7.preheader.1 ], [ %303, %for_body8.1 ]
  %209 = phi <8 x float> [ %.lcssa4269.1, %for_begin7.preheader.1 ], [ %297, %for_body8.1 ]
  %210 = phi <8 x float> [ %.lcssa4067.1, %for_begin7.preheader.1 ], [ %291, %for_body8.1 ]
  %211 = phi <8 x float> [ %.lcssa3865.1, %for_begin7.preheader.1 ], [ %285, %for_body8.1 ]
  %212 = phi <8 x float> [ %.lcssa3663.1, %for_begin7.preheader.1 ], [ %279, %for_body8.1 ]
  %213 = phi <8 x float> [ %.lcssa3461.1, %for_begin7.preheader.1 ], [ %273, %for_body8.1 ]
  %214 = phi <8 x float> [ %.lcssa3259.1, %for_begin7.preheader.1 ], [ %267, %for_body8.1 ]
  %215 = phi <8 x float> [ %.lcssa3057.1, %for_begin7.preheader.1 ], [ %261, %for_body8.1 ]
  %216 = phi <8 x float> [ %.lcssa2855.1, %for_begin7.preheader.1 ], [ %255, %for_body8.1 ]
  %217 = phi <8 x float> [ %.lcssa2653.1, %for_begin7.preheader.1 ], [ %249, %for_body8.1 ]
  %218 = phi <8 x float> [ %.lcssa2451.1, %for_begin7.preheader.1 ], [ %243, %for_body8.1 ]
  %219 = phi <8 x float> [ %.lcssa2249.1, %for_begin7.preheader.1 ], [ %237, %for_body8.1 ]
  %220 = phi <8 x float> [ %.lcssa48.1, %for_begin7.preheader.1 ], [ %231, %for_body8.1 ]
  %221 = add nsw i64 %204, %indvars.iv.1
  %222 = getelementptr inbounds float, float* %5, i64 %221
  %223 = load float, float* %222, align 4, !tbaa !5206
  %224 = insertelement <8 x float> undef, float %223, i32 0
  %225 = shufflevector <8 x float> %224, <8 x float> undef, <8 x i32> zeroinitializer
  %226 = shl i64 %indvars.iv.1, 3
  %227 = add nuw nsw i64 %206, %226
  %228 = getelementptr inbounds float, float* %8, i64 %227
  %229 = bitcast float* %228 to <8 x float>*
  %230 = load <8 x float>, <8 x float>* %229, align 32, !tbaa !5209
  %231 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %225, <8 x float> %230, <8 x float> %220)
  %232 = add nsw i64 %221, 16
  %233 = getelementptr inbounds float, float* %5, i64 %232
  %234 = load float, float* %233, align 4, !tbaa !5206
  %235 = insertelement <8 x float> undef, float %234, i32 0
  %236 = shufflevector <8 x float> %235, <8 x float> undef, <8 x i32> zeroinitializer
  %237 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %236, <8 x float> %230, <8 x float> %219)
  %238 = add nsw i64 %221, 32
  %239 = getelementptr inbounds float, float* %5, i64 %238
  %240 = load float, float* %239, align 4, !tbaa !5206
  %241 = insertelement <8 x float> undef, float %240, i32 0
  %242 = shufflevector <8 x float> %241, <8 x float> undef, <8 x i32> zeroinitializer
  %243 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %242, <8 x float> %230, <8 x float> %218)
  %244 = add nsw i64 %221, 48
  %245 = getelementptr inbounds float, float* %5, i64 %244
  %246 = load float, float* %245, align 4, !tbaa !5206
  %247 = insertelement <8 x float> undef, float %246, i32 0
  %248 = shufflevector <8 x float> %247, <8 x float> undef, <8 x i32> zeroinitializer
  %249 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %248, <8 x float> %230, <8 x float> %217)
  %250 = add nsw i64 %221, 64
  %251 = getelementptr inbounds float, float* %5, i64 %250
  %252 = load float, float* %251, align 4, !tbaa !5206
  %253 = insertelement <8 x float> undef, float %252, i32 0
  %254 = shufflevector <8 x float> %253, <8 x float> undef, <8 x i32> zeroinitializer
  %255 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %254, <8 x float> %230, <8 x float> %216)
  %256 = add nsw i64 %221, 80
  %257 = getelementptr inbounds float, float* %5, i64 %256
  %258 = load float, float* %257, align 4, !tbaa !5206
  %259 = insertelement <8 x float> undef, float %258, i32 0
  %260 = shufflevector <8 x float> %259, <8 x float> undef, <8 x i32> zeroinitializer
  %261 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %260, <8 x float> %230, <8 x float> %215)
  %262 = add nsw i64 %221, 96
  %263 = getelementptr inbounds float, float* %5, i64 %262
  %264 = load float, float* %263, align 4, !tbaa !5206
  %265 = insertelement <8 x float> undef, float %264, i32 0
  %266 = shufflevector <8 x float> %265, <8 x float> undef, <8 x i32> zeroinitializer
  %267 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %266, <8 x float> %230, <8 x float> %214)
  %268 = add nsw i64 %221, 224
  %269 = getelementptr inbounds float, float* %5, i64 %268
  %270 = load float, float* %269, align 4, !tbaa !5206
  %271 = insertelement <8 x float> undef, float %270, i32 0
  %272 = shufflevector <8 x float> %271, <8 x float> undef, <8 x i32> zeroinitializer
  %273 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %272, <8 x float> %230, <8 x float> %213)
  %274 = add nsw i64 %221, 240
  %275 = getelementptr inbounds float, float* %5, i64 %274
  %276 = load float, float* %275, align 4, !tbaa !5206
  %277 = insertelement <8 x float> undef, float %276, i32 0
  %278 = shufflevector <8 x float> %277, <8 x float> undef, <8 x i32> zeroinitializer
  %279 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %278, <8 x float> %230, <8 x float> %212)
  %280 = add nsw i64 %221, 256
  %281 = getelementptr inbounds float, float* %5, i64 %280
  %282 = load float, float* %281, align 4, !tbaa !5206
  %283 = insertelement <8 x float> undef, float %282, i32 0
  %284 = shufflevector <8 x float> %283, <8 x float> undef, <8 x i32> zeroinitializer
  %285 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %284, <8 x float> %230, <8 x float> %211)
  %286 = add nsw i64 %221, 272
  %287 = getelementptr inbounds float, float* %5, i64 %286
  %288 = load float, float* %287, align 4, !tbaa !5206
  %289 = insertelement <8 x float> undef, float %288, i32 0
  %290 = shufflevector <8 x float> %289, <8 x float> undef, <8 x i32> zeroinitializer
  %291 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %290, <8 x float> %230, <8 x float> %210)
  %292 = add nsw i64 %221, 288
  %293 = getelementptr inbounds float, float* %5, i64 %292
  %294 = load float, float* %293, align 4, !tbaa !5206
  %295 = insertelement <8 x float> undef, float %294, i32 0
  %296 = shufflevector <8 x float> %295, <8 x float> undef, <8 x i32> zeroinitializer
  %297 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %296, <8 x float> %230, <8 x float> %209)
  %298 = add nsw i64 %221, 304
  %299 = getelementptr inbounds float, float* %5, i64 %298
  %300 = load float, float* %299, align 4, !tbaa !5206
  %301 = insertelement <8 x float> undef, float %300, i32 0
  %302 = shufflevector <8 x float> %301, <8 x float> undef, <8 x i32> zeroinitializer
  %303 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %302, <8 x float> %230, <8 x float> %208)
  %304 = add nsw i64 %221, 320
  %305 = getelementptr inbounds float, float* %5, i64 %304
  %306 = load float, float* %305, align 4, !tbaa !5206
  %307 = insertelement <8 x float> undef, float %306, i32 0
  %308 = shufflevector <8 x float> %307, <8 x float> undef, <8 x i32> zeroinitializer
  %309 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %308, <8 x float> %230, <8 x float> %207)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 16
  br i1 %exitcond.1, label %for_end9.1, label %for_body8.1, !prof !50

for_end9.1:                                       ; preds = %for_body8.1
  %indvars.iv.next88.1 = add nuw nsw i64 %indvars.iv87.1, 1
  %exitcond89.1 = icmp eq i64 %indvars.iv.next88.1, 64
  br i1 %exitcond89.1, label %for_end6.1, label %for_begin7.preheader.1, !prof !50

for_end6.1:                                       ; preds = %for_end9.1
  store <8 x float> %231, <8 x float>* %61, align 16, !tbaa !5203
  store <8 x float> %237, <8 x float>* %63, align 16, !tbaa !5203
  store <8 x float> %243, <8 x float>* %65, align 16, !tbaa !5203
  store <8 x float> %249, <8 x float>* %67, align 16, !tbaa !5203
  store <8 x float> %255, <8 x float>* %69, align 16, !tbaa !5203
  store <8 x float> %261, <8 x float>* %71, align 16, !tbaa !5203
  store <8 x float> %267, <8 x float>* %73, align 16, !tbaa !5203
  store <8 x float> %273, <8 x float>* %28, align 16, !tbaa !5203
  store <8 x float> %279, <8 x float>* %75, align 16, !tbaa !5203
  store <8 x float> %285, <8 x float>* %77, align 16, !tbaa !5203
  store <8 x float> %291, <8 x float>* %79, align 16, !tbaa !5203
  store <8 x float> %297, <8 x float>* %81, align 16, !tbaa !5203
  store <8 x float> %303, <8 x float>* %83, align 16, !tbaa !5203
  store <8 x float> %309, <8 x float>* %85, align 16, !tbaa !5203
  %310 = mul nsw i64 %indvars.iv104, 224
  %311 = shl nsw i32 %89, 3
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds float, float* %14, i64 %312
  %314 = bitcast float* %313 to <8 x float>*
  %315 = load <8 x float>, <8 x float>* %314, align 32, !tbaa !5212
  %316 = load <8 x float>, <8 x float>* %31, align 16, !tbaa !5203
  %317 = fadd <8 x float> %315, %316
  %318 = fcmp ogt <8 x float> %317, zeroinitializer
  %319 = select <8 x i1> %318, <8 x float> %317, <8 x float> zeroinitializer
  %320 = getelementptr inbounds float, float* %11, i64 %310
  %321 = bitcast float* %320 to <8 x float>*
  store <8 x float> %319, <8 x float>* %321, align 32, !tbaa !5215
  %322 = load <8 x float>, <8 x float>* %33, align 16, !tbaa !5203
  %323 = fadd <8 x float> %315, %322
  %324 = fcmp ogt <8 x float> %323, zeroinitializer
  %325 = select <8 x i1> %324, <8 x float> %323, <8 x float> zeroinitializer
  %326 = mul i64 %indvars.iv104, 962072674304
  %sext = ashr exact i64 %326, 32
  %327 = or i64 %sext, 8
  %328 = getelementptr inbounds float, float* %11, i64 %327
  %329 = bitcast float* %328 to <8 x float>*
  store <8 x float> %325, <8 x float>* %329, align 32, !tbaa !5215
  %330 = load <8 x float>, <8 x float>* %35, align 16, !tbaa !5203
  %331 = fadd <8 x float> %315, %330
  %332 = fcmp ogt <8 x float> %331, zeroinitializer
  %333 = select <8 x i1> %332, <8 x float> %331, <8 x float> zeroinitializer
  %334 = mul i64 %indvars.iv104, 962072674304
  %sext106 = ashr exact i64 %334, 32
  %335 = or i64 %sext106, 16
  %336 = getelementptr inbounds float, float* %11, i64 %335
  %337 = bitcast float* %336 to <8 x float>*
  store <8 x float> %333, <8 x float>* %337, align 32, !tbaa !5215
  %338 = load <8 x float>, <8 x float>* %37, align 16, !tbaa !5203
  %339 = fadd <8 x float> %315, %338
  %340 = fcmp ogt <8 x float> %339, zeroinitializer
  %341 = select <8 x i1> %340, <8 x float> %339, <8 x float> zeroinitializer
  %342 = mul i64 %indvars.iv104, 962072674304
  %sext107 = ashr exact i64 %342, 32
  %343 = or i64 %sext107, 24
  %344 = getelementptr inbounds float, float* %11, i64 %343
  %345 = bitcast float* %344 to <8 x float>*
  store <8 x float> %341, <8 x float>* %345, align 32, !tbaa !5215
  %346 = load <8 x float>, <8 x float>* %39, align 16, !tbaa !5203
  %347 = fadd <8 x float> %315, %346
  %348 = fcmp ogt <8 x float> %347, zeroinitializer
  %349 = select <8 x i1> %348, <8 x float> %347, <8 x float> zeroinitializer
  %350 = mul i64 %indvars.iv104, 962072674304
  %sext108 = add i64 %350, 137438953472
  %351 = ashr exact i64 %sext108, 32
  %352 = getelementptr inbounds float, float* %11, i64 %351
  %353 = bitcast float* %352 to <8 x float>*
  store <8 x float> %349, <8 x float>* %353, align 32, !tbaa !5215
  %354 = load <8 x float>, <8 x float>* %41, align 16, !tbaa !5203
  %355 = fadd <8 x float> %315, %354
  %356 = fcmp ogt <8 x float> %355, zeroinitializer
  %357 = select <8 x i1> %356, <8 x float> %355, <8 x float> zeroinitializer
  %358 = mul i64 %indvars.iv104, 962072674304
  %sext109 = add i64 %358, 171798691840
  %359 = ashr exact i64 %sext109, 32
  %360 = getelementptr inbounds float, float* %11, i64 %359
  %361 = bitcast float* %360 to <8 x float>*
  store <8 x float> %357, <8 x float>* %361, align 32, !tbaa !5215
  %362 = load <8 x float>, <8 x float>* %43, align 16, !tbaa !5203
  %363 = fadd <8 x float> %315, %362
  %364 = fcmp ogt <8 x float> %363, zeroinitializer
  %365 = select <8 x i1> %364, <8 x float> %363, <8 x float> zeroinitializer
  %366 = mul i64 %indvars.iv104, 962072674304
  %sext110 = add i64 %366, 206158430208
  %367 = ashr exact i64 %sext110, 32
  %368 = getelementptr inbounds float, float* %11, i64 %367
  %369 = bitcast float* %368 to <8 x float>*
  store <8 x float> %365, <8 x float>* %369, align 32, !tbaa !5215
  %370 = load <8 x float>, <8 x float>* %45, align 16, !tbaa !5203
  %371 = fadd <8 x float> %315, %370
  %372 = fcmp ogt <8 x float> %371, zeroinitializer
  %373 = select <8 x i1> %372, <8 x float> %371, <8 x float> zeroinitializer
  %374 = mul i64 %indvars.iv104, 962072674304
  %sext129 = add i64 %374, 481036337152
  %375 = ashr exact i64 %sext129, 32
  %376 = getelementptr inbounds float, float* %11, i64 %375
  %377 = bitcast float* %376 to <8 x float>*
  store <8 x float> %373, <8 x float>* %377, align 32, !tbaa !5215
  %378 = load <8 x float>, <8 x float>* %47, align 16, !tbaa !5203
  %379 = fadd <8 x float> %315, %378
  %380 = fcmp ogt <8 x float> %379, zeroinitializer
  %381 = select <8 x i1> %380, <8 x float> %379, <8 x float> zeroinitializer
  %382 = mul i64 %indvars.iv104, 962072674304
  %sext111 = add i64 %382, 515396075520
  %383 = ashr exact i64 %sext111, 32
  %384 = getelementptr inbounds float, float* %11, i64 %383
  %385 = bitcast float* %384 to <8 x float>*
  store <8 x float> %381, <8 x float>* %385, align 32, !tbaa !5215
  %386 = load <8 x float>, <8 x float>* %49, align 16, !tbaa !5203
  %387 = fadd <8 x float> %315, %386
  %388 = fcmp ogt <8 x float> %387, zeroinitializer
  %389 = select <8 x i1> %388, <8 x float> %387, <8 x float> zeroinitializer
  %390 = mul i64 %indvars.iv104, 962072674304
  %sext112 = add i64 %390, 549755813888
  %391 = ashr exact i64 %sext112, 32
  %392 = getelementptr inbounds float, float* %11, i64 %391
  %393 = bitcast float* %392 to <8 x float>*
  store <8 x float> %389, <8 x float>* %393, align 32, !tbaa !5215
  %394 = load <8 x float>, <8 x float>* %51, align 16, !tbaa !5203
  %395 = fadd <8 x float> %315, %394
  %396 = fcmp ogt <8 x float> %395, zeroinitializer
  %397 = select <8 x i1> %396, <8 x float> %395, <8 x float> zeroinitializer
  %398 = mul i64 %indvars.iv104, 962072674304
  %sext113 = add i64 %398, 584115552256
  %399 = ashr exact i64 %sext113, 32
  %400 = getelementptr inbounds float, float* %11, i64 %399
  %401 = bitcast float* %400 to <8 x float>*
  store <8 x float> %397, <8 x float>* %401, align 32, !tbaa !5215
  %402 = load <8 x float>, <8 x float>* %53, align 16, !tbaa !5203
  %403 = fadd <8 x float> %315, %402
  %404 = fcmp ogt <8 x float> %403, zeroinitializer
  %405 = select <8 x i1> %404, <8 x float> %403, <8 x float> zeroinitializer
  %406 = mul i64 %indvars.iv104, 962072674304
  %sext114 = add i64 %406, 618475290624
  %407 = ashr exact i64 %sext114, 32
  %408 = getelementptr inbounds float, float* %11, i64 %407
  %409 = bitcast float* %408 to <8 x float>*
  store <8 x float> %405, <8 x float>* %409, align 32, !tbaa !5215
  %410 = load <8 x float>, <8 x float>* %55, align 16, !tbaa !5203
  %411 = fadd <8 x float> %315, %410
  %412 = fcmp ogt <8 x float> %411, zeroinitializer
  %413 = select <8 x i1> %412, <8 x float> %411, <8 x float> zeroinitializer
  %414 = mul i64 %indvars.iv104, 962072674304
  %sext115 = add i64 %414, 652835028992
  %415 = ashr exact i64 %sext115, 32
  %416 = getelementptr inbounds float, float* %11, i64 %415
  %417 = bitcast float* %416 to <8 x float>*
  store <8 x float> %413, <8 x float>* %417, align 32, !tbaa !5215
  %418 = load <8 x float>, <8 x float>* %57, align 16, !tbaa !5203
  %419 = fadd <8 x float> %315, %418
  %420 = fcmp ogt <8 x float> %419, zeroinitializer
  %421 = select <8 x i1> %420, <8 x float> %419, <8 x float> zeroinitializer
  %422 = mul i64 %indvars.iv104, 962072674304
  %sext116 = add i64 %422, 687194767360
  %423 = ashr exact i64 %sext116, 32
  %424 = getelementptr inbounds float, float* %11, i64 %423
  %425 = bitcast float* %424 to <8 x float>*
  store <8 x float> %421, <8 x float>* %425, align 32, !tbaa !5215
  %426 = load <8 x float>, <8 x float>* %61, align 16, !tbaa !5203
  %427 = fadd <8 x float> %315, %426
  %428 = fcmp ogt <8 x float> %427, zeroinitializer
  %429 = select <8 x i1> %428, <8 x float> %427, <8 x float> zeroinitializer
  %430 = mul i64 %indvars.iv104, 962072674304
  %sext130 = add i64 %430, 240518168576
  %431 = ashr exact i64 %sext130, 32
  %432 = getelementptr inbounds float, float* %11, i64 %431
  %433 = bitcast float* %432 to <8 x float>*
  store <8 x float> %429, <8 x float>* %433, align 32, !tbaa !5215
  %434 = load <8 x float>, <8 x float>* %63, align 16, !tbaa !5203
  %435 = fadd <8 x float> %315, %434
  %436 = fcmp ogt <8 x float> %435, zeroinitializer
  %437 = select <8 x i1> %436, <8 x float> %435, <8 x float> zeroinitializer
  %438 = mul i64 %indvars.iv104, 962072674304
  %sext117 = add i64 %438, 274877906944
  %439 = ashr exact i64 %sext117, 32
  %440 = getelementptr inbounds float, float* %11, i64 %439
  %441 = bitcast float* %440 to <8 x float>*
  store <8 x float> %437, <8 x float>* %441, align 32, !tbaa !5215
  %442 = load <8 x float>, <8 x float>* %65, align 16, !tbaa !5203
  %443 = fadd <8 x float> %315, %442
  %444 = fcmp ogt <8 x float> %443, zeroinitializer
  %445 = select <8 x i1> %444, <8 x float> %443, <8 x float> zeroinitializer
  %446 = mul i64 %indvars.iv104, 962072674304
  %sext118 = add i64 %446, 309237645312
  %447 = ashr exact i64 %sext118, 32
  %448 = getelementptr inbounds float, float* %11, i64 %447
  %449 = bitcast float* %448 to <8 x float>*
  store <8 x float> %445, <8 x float>* %449, align 32, !tbaa !5215
  %450 = load <8 x float>, <8 x float>* %67, align 16, !tbaa !5203
  %451 = fadd <8 x float> %315, %450
  %452 = fcmp ogt <8 x float> %451, zeroinitializer
  %453 = select <8 x i1> %452, <8 x float> %451, <8 x float> zeroinitializer
  %454 = mul i64 %indvars.iv104, 962072674304
  %sext119 = add i64 %454, 343597383680
  %455 = ashr exact i64 %sext119, 32
  %456 = getelementptr inbounds float, float* %11, i64 %455
  %457 = bitcast float* %456 to <8 x float>*
  store <8 x float> %453, <8 x float>* %457, align 32, !tbaa !5215
  %458 = load <8 x float>, <8 x float>* %69, align 16, !tbaa !5203
  %459 = fadd <8 x float> %315, %458
  %460 = fcmp ogt <8 x float> %459, zeroinitializer
  %461 = select <8 x i1> %460, <8 x float> %459, <8 x float> zeroinitializer
  %462 = mul i64 %indvars.iv104, 962072674304
  %sext120 = add i64 %462, 377957122048
  %463 = ashr exact i64 %sext120, 32
  %464 = getelementptr inbounds float, float* %11, i64 %463
  %465 = bitcast float* %464 to <8 x float>*
  store <8 x float> %461, <8 x float>* %465, align 32, !tbaa !5215
  %466 = load <8 x float>, <8 x float>* %71, align 16, !tbaa !5203
  %467 = fadd <8 x float> %315, %466
  %468 = fcmp ogt <8 x float> %467, zeroinitializer
  %469 = select <8 x i1> %468, <8 x float> %467, <8 x float> zeroinitializer
  %470 = mul i64 %indvars.iv104, 962072674304
  %sext121 = add i64 %470, 412316860416
  %471 = ashr exact i64 %sext121, 32
  %472 = getelementptr inbounds float, float* %11, i64 %471
  %473 = bitcast float* %472 to <8 x float>*
  store <8 x float> %469, <8 x float>* %473, align 32, !tbaa !5215
  %474 = load <8 x float>, <8 x float>* %73, align 16, !tbaa !5203
  %475 = fadd <8 x float> %315, %474
  %476 = fcmp ogt <8 x float> %475, zeroinitializer
  %477 = select <8 x i1> %476, <8 x float> %475, <8 x float> zeroinitializer
  %478 = mul i64 %indvars.iv104, 962072674304
  %sext122 = add i64 %478, 446676598784
  %479 = ashr exact i64 %sext122, 32
  %480 = getelementptr inbounds float, float* %11, i64 %479
  %481 = bitcast float* %480 to <8 x float>*
  store <8 x float> %477, <8 x float>* %481, align 32, !tbaa !5215
  %482 = load <8 x float>, <8 x float>* %28, align 16, !tbaa !5203
  %483 = fadd <8 x float> %315, %482
  %484 = fcmp ogt <8 x float> %483, zeroinitializer
  %485 = select <8 x i1> %484, <8 x float> %483, <8 x float> zeroinitializer
  %486 = mul i64 %indvars.iv104, 962072674304
  %sext131 = add i64 %486, 721554505728
  %487 = ashr exact i64 %sext131, 32
  %488 = getelementptr inbounds float, float* %11, i64 %487
  %489 = bitcast float* %488 to <8 x float>*
  store <8 x float> %485, <8 x float>* %489, align 32, !tbaa !5215
  %490 = load <8 x float>, <8 x float>* %75, align 16, !tbaa !5203
  %491 = fadd <8 x float> %315, %490
  %492 = fcmp ogt <8 x float> %491, zeroinitializer
  %493 = select <8 x i1> %492, <8 x float> %491, <8 x float> zeroinitializer
  %494 = mul i64 %indvars.iv104, 962072674304
  %sext123 = add i64 %494, 755914244096
  %495 = ashr exact i64 %sext123, 32
  %496 = getelementptr inbounds float, float* %11, i64 %495
  %497 = bitcast float* %496 to <8 x float>*
  store <8 x float> %493, <8 x float>* %497, align 32, !tbaa !5215
  %498 = load <8 x float>, <8 x float>* %77, align 16, !tbaa !5203
  %499 = fadd <8 x float> %315, %498
  %500 = fcmp ogt <8 x float> %499, zeroinitializer
  %501 = select <8 x i1> %500, <8 x float> %499, <8 x float> zeroinitializer
  %502 = mul i64 %indvars.iv104, 962072674304
  %sext124 = add i64 %502, 790273982464
  %503 = ashr exact i64 %sext124, 32
  %504 = getelementptr inbounds float, float* %11, i64 %503
  %505 = bitcast float* %504 to <8 x float>*
  store <8 x float> %501, <8 x float>* %505, align 32, !tbaa !5215
  %506 = load <8 x float>, <8 x float>* %79, align 16, !tbaa !5203
  %507 = fadd <8 x float> %315, %506
  %508 = fcmp ogt <8 x float> %507, zeroinitializer
  %509 = select <8 x i1> %508, <8 x float> %507, <8 x float> zeroinitializer
  %510 = mul i64 %indvars.iv104, 962072674304
  %sext125 = add i64 %510, 824633720832
  %511 = ashr exact i64 %sext125, 32
  %512 = getelementptr inbounds float, float* %11, i64 %511
  %513 = bitcast float* %512 to <8 x float>*
  store <8 x float> %509, <8 x float>* %513, align 32, !tbaa !5215
  %514 = load <8 x float>, <8 x float>* %81, align 16, !tbaa !5203
  %515 = fadd <8 x float> %315, %514
  %516 = fcmp ogt <8 x float> %515, zeroinitializer
  %517 = select <8 x i1> %516, <8 x float> %515, <8 x float> zeroinitializer
  %518 = mul i64 %indvars.iv104, 962072674304
  %sext126 = add i64 %518, 858993459200
  %519 = ashr exact i64 %sext126, 32
  %520 = getelementptr inbounds float, float* %11, i64 %519
  %521 = bitcast float* %520 to <8 x float>*
  store <8 x float> %517, <8 x float>* %521, align 32, !tbaa !5215
  %522 = load <8 x float>, <8 x float>* %83, align 16, !tbaa !5203
  %523 = fadd <8 x float> %315, %522
  %524 = fcmp ogt <8 x float> %523, zeroinitializer
  %525 = select <8 x i1> %524, <8 x float> %523, <8 x float> zeroinitializer
  %526 = mul i64 %indvars.iv104, 962072674304
  %sext127 = add i64 %526, 893353197568
  %527 = ashr exact i64 %sext127, 32
  %528 = getelementptr inbounds float, float* %11, i64 %527
  %529 = bitcast float* %528 to <8 x float>*
  store <8 x float> %525, <8 x float>* %529, align 32, !tbaa !5215
  %530 = load <8 x float>, <8 x float>* %85, align 16, !tbaa !5203
  %531 = fadd <8 x float> %315, %530
  %532 = fcmp ogt <8 x float> %531, zeroinitializer
  %533 = select <8 x i1> %532, <8 x float> %531, <8 x float> zeroinitializer
  %534 = mul i64 %indvars.iv104, 962072674304
  %sext128 = add i64 %534, 927712935936
  %535 = ashr exact i64 %sext128, 32
  %536 = getelementptr inbounds float, float* %11, i64 %535
  %537 = bitcast float* %536 to <8 x float>*
  store <8 x float> %533, <8 x float>* %537, align 32, !tbaa !5215
  %indvars.iv.next105 = add nsw i64 %indvars.iv104, 1
  %538 = icmp slt i64 %indvars.iv.next105, %30
  br i1 %538, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_3(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.355, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !5218
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !5232
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !5235
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.356, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !5237
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.357, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.358, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.359, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !5239
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !5253
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 16
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.100, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !5255
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 14
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.125, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !5258
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 14
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.126, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !5260
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 64
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.267, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !5264
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 200704
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !5278
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 12544
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !5280
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 896
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !5283
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 64
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !5285
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.360, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !5289
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 256
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.204, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !5303
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 16
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !5305
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !5308
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !5310
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 64
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.92, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !5314
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !5316
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 8192
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !5330
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 512
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !5332
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 512
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !5335
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 512
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !5337
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 8
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !5341
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([271 x i8], [271 x i8]* @.str.361, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !5343
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !5357
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 256
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.207, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !5359
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !5362
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !5364
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 8
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !5368
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 2048
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !5382
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 8
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !5384
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 8
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !5387
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 8
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !5389
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([230 x i8], [230 x i8]* @.str.208, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !5393
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !5407
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 256
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.209, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !5409
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 7
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !5412
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 7
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.181, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !5414
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 8
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !5418
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 100352
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !5432
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 392
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !5434
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 56
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !5437
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 8
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !5439
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.210, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_3_compute_(i8* %27, i8* %35, i8* %47, i8* %41)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_3_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %4 = alloca %34, align 8
  %5 = getelementptr inbounds %34, %34* %4, i64 0, i32 0
  store i8* %0, i8** %5, align 8
  %6 = getelementptr inbounds %34, %34* %4, i64 0, i32 1
  store i8* %1, i8** %6, align 8
  %7 = getelementptr inbounds %34, %34* %4, i64 0, i32 2
  store i8* %2, i8** %7, align 8
  %8 = getelementptr inbounds %34, %34* %4, i64 0, i32 3
  store i8* %3, i8** %8, align 8
  %9 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %10 = bitcast %34* %4 to i8*
  %11 = call i32 %9(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.362, i8* nonnull %10, i32 0)
  ret i32 %11
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.362(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 1023
  %17 = sdiv i32 %16, %15
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %17, %18
  %20 = icmp slt i32 %19, 1024
  %21 = select i1 %20, i32 %19, i32 1024
  %22 = mul nsw i32 %17, %0
  %23 = icmp slt i32 %22, 1024
  %24 = select i1 %23, i32 %22, i32 1024
  %25 = icmp slt i32 %24, %21
  br i1 %25, label %for_body, label %for_end, !prof !5

for_body:                                         ; preds = %entry, %for_end24.1
  %26 = phi i32 [ %303, %for_end24.1 ], [ %24, %entry ]
  %27 = and i32 %26, 3
  %28 = mul nuw nsw i32 %27, 3584
  %29 = lshr i32 %26, 2
  %30 = shl i32 %29, 13
  %31 = icmp eq i32 %27, 3
  %32 = zext i32 %28 to i64
  %33 = sext i32 %30 to i64
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end24.1, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_body
  %indvars.iv122 = phi i64 [ 0, %for_body ], [ %indvars.iv.next123, %for_end6 ]
  %.lcssa6895 = phi <8 x float> [ zeroinitializer, %for_body ], [ %195, %for_end6 ]
  %.lcssa6693 = phi <8 x float> [ zeroinitializer, %for_body ], [ %196, %for_end6 ]
  %.lcssa6491 = phi <8 x float> [ zeroinitializer, %for_body ], [ %197, %for_end6 ]
  %.lcssa6289 = phi <8 x float> [ zeroinitializer, %for_body ], [ %198, %for_end6 ]
  %.lcssa6087 = phi <8 x float> [ zeroinitializer, %for_body ], [ %199, %for_end6 ]
  %.lcssa5885 = phi <8 x float> [ zeroinitializer, %for_body ], [ %200, %for_end6 ]
  %.lcssa5683 = phi <8 x float> [ zeroinitializer, %for_body ], [ %201, %for_end6 ]
  %.lcssa5481 = phi <8 x float> [ zeroinitializer, %for_body ], [ %202, %for_end6 ]
  %.lcssa5279 = phi <8 x float> [ zeroinitializer, %for_body ], [ %203, %for_end6 ]
  %.lcssa5077 = phi <8 x float> [ zeroinitializer, %for_body ], [ %204, %for_end6 ]
  %.lcssa4875 = phi <8 x float> [ zeroinitializer, %for_body ], [ %205, %for_end6 ]
  %.lcssa4673 = phi <8 x float> [ zeroinitializer, %for_body ], [ %206, %for_end6 ]
  %.lcssa4472 = phi <8 x float> [ zeroinitializer, %for_body ], [ %207, %for_end6 ]
  %.lcssa70 = phi <8 x float> [ zeroinitializer, %for_body ], [ %208, %for_end6 ]
  %34 = mul nuw nsw i64 %indvars.iv122, 12544
  %35 = add nuw nsw i64 %34, %32
  %36 = shl i64 %indvars.iv122, 9
  %37 = add nuw nsw i64 %36, %33
  br i1 %31, label %for_body5.us, label %for_body5, !prof !50

for_body5.us:                                     ; preds = %for_begin4.preheader, %for_body5.us
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for_body5.us ], [ 0, %for_begin4.preheader ]
  %38 = phi <8 x float> [ %91, %for_body5.us ], [ %.lcssa5481, %for_begin4.preheader ]
  %39 = phi <8 x float> [ %85, %for_body5.us ], [ %.lcssa5279, %for_begin4.preheader ]
  %40 = phi <8 x float> [ %79, %for_body5.us ], [ %.lcssa5077, %for_begin4.preheader ]
  %41 = phi <8 x float> [ %73, %for_body5.us ], [ %.lcssa4875, %for_begin4.preheader ]
  %42 = phi <8 x float> [ %67, %for_body5.us ], [ %.lcssa4673, %for_begin4.preheader ]
  %43 = phi <8 x float> [ %61, %for_body5.us ], [ %.lcssa4472, %for_begin4.preheader ]
  %44 = phi <8 x float> [ %55, %for_body5.us ], [ %.lcssa70, %for_begin4.preheader ]
  %45 = add nuw nsw i64 %35, %indvars.iv119
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = load float, float* %46, align 4, !tbaa !5443
  %48 = insertelement <8 x float> undef, float %47, i32 0
  %49 = shufflevector <8 x float> %48, <8 x float> undef, <8 x i32> zeroinitializer
  %50 = shl i64 %indvars.iv119, 3
  %51 = add nuw nsw i64 %37, %50
  %52 = getelementptr inbounds float, float* %7, i64 %51
  %53 = bitcast float* %52 to <8 x float>*
  %54 = load <8 x float>, <8 x float>* %53, align 32, !tbaa !5446
  %55 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %49, <8 x float> %54, <8 x float> %44)
  %56 = add nuw nsw i64 %45, 128
  %57 = getelementptr inbounds float, float* %4, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !5443
  %59 = insertelement <8 x float> undef, float %58, i32 0
  %60 = shufflevector <8 x float> %59, <8 x float> undef, <8 x i32> zeroinitializer
  %61 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %60, <8 x float> %54, <8 x float> %43)
  %62 = add nuw nsw i64 %45, 256
  %63 = getelementptr inbounds float, float* %4, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !5443
  %65 = insertelement <8 x float> undef, float %64, i32 0
  %66 = shufflevector <8 x float> %65, <8 x float> undef, <8 x i32> zeroinitializer
  %67 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %66, <8 x float> %54, <8 x float> %42)
  %68 = add nuw nsw i64 %45, 384
  %69 = getelementptr inbounds float, float* %4, i64 %68
  %70 = load float, float* %69, align 4, !tbaa !5443
  %71 = insertelement <8 x float> undef, float %70, i32 0
  %72 = shufflevector <8 x float> %71, <8 x float> undef, <8 x i32> zeroinitializer
  %73 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %72, <8 x float> %54, <8 x float> %41)
  %74 = add nuw nsw i64 %45, 512
  %75 = getelementptr inbounds float, float* %4, i64 %74
  %76 = load float, float* %75, align 4, !tbaa !5443
  %77 = insertelement <8 x float> undef, float %76, i32 0
  %78 = shufflevector <8 x float> %77, <8 x float> undef, <8 x i32> zeroinitializer
  %79 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %78, <8 x float> %54, <8 x float> %40)
  %80 = add nuw nsw i64 %45, 640
  %81 = getelementptr inbounds float, float* %4, i64 %80
  %82 = load float, float* %81, align 4, !tbaa !5443
  %83 = insertelement <8 x float> undef, float %82, i32 0
  %84 = shufflevector <8 x float> %83, <8 x float> undef, <8 x i32> zeroinitializer
  %85 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %84, <8 x float> %54, <8 x float> %39)
  %86 = add nuw nsw i64 %45, 768
  %87 = getelementptr inbounds float, float* %4, i64 %86
  %88 = load float, float* %87, align 4, !tbaa !5443
  %89 = insertelement <8 x float> undef, float %88, i32 0
  %90 = shufflevector <8 x float> %89, <8 x float> undef, <8 x i32> zeroinitializer
  %91 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %90, <8 x float> %54, <8 x float> %38)
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %exitcond121 = icmp eq i64 %indvars.iv.next120, 64
  br i1 %exitcond121, label %for_end6, label %for_body5.us, !prof !50

for_body5:                                        ; preds = %for_begin4.preheader, %for_body5
  %indvars.iv = phi i64 [ %indvars.iv.next, %for_body5 ], [ 0, %for_begin4.preheader ]
  %92 = phi <8 x float> [ %194, %for_body5 ], [ %.lcssa6895, %for_begin4.preheader ]
  %93 = phi <8 x float> [ %188, %for_body5 ], [ %.lcssa6693, %for_begin4.preheader ]
  %94 = phi <8 x float> [ %182, %for_body5 ], [ %.lcssa6491, %for_begin4.preheader ]
  %95 = phi <8 x float> [ %176, %for_body5 ], [ %.lcssa6289, %for_begin4.preheader ]
  %96 = phi <8 x float> [ %170, %for_body5 ], [ %.lcssa6087, %for_begin4.preheader ]
  %97 = phi <8 x float> [ %164, %for_body5 ], [ %.lcssa5885, %for_begin4.preheader ]
  %98 = phi <8 x float> [ %158, %for_body5 ], [ %.lcssa5683, %for_begin4.preheader ]
  %99 = phi <8 x float> [ %152, %for_body5 ], [ %.lcssa5481, %for_begin4.preheader ]
  %100 = phi <8 x float> [ %146, %for_body5 ], [ %.lcssa5279, %for_begin4.preheader ]
  %101 = phi <8 x float> [ %140, %for_body5 ], [ %.lcssa5077, %for_begin4.preheader ]
  %102 = phi <8 x float> [ %134, %for_body5 ], [ %.lcssa4875, %for_begin4.preheader ]
  %103 = phi <8 x float> [ %128, %for_body5 ], [ %.lcssa4673, %for_begin4.preheader ]
  %104 = phi <8 x float> [ %122, %for_body5 ], [ %.lcssa4472, %for_begin4.preheader ]
  %105 = phi <8 x float> [ %116, %for_body5 ], [ %.lcssa70, %for_begin4.preheader ]
  %106 = add nuw nsw i64 %35, %indvars.iv
  %107 = getelementptr inbounds float, float* %4, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !5443
  %109 = insertelement <8 x float> undef, float %108, i32 0
  %110 = shufflevector <8 x float> %109, <8 x float> undef, <8 x i32> zeroinitializer
  %111 = shl i64 %indvars.iv, 3
  %112 = add nuw nsw i64 %37, %111
  %113 = getelementptr inbounds float, float* %7, i64 %112
  %114 = bitcast float* %113 to <8 x float>*
  %115 = load <8 x float>, <8 x float>* %114, align 32, !tbaa !5446
  %116 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %110, <8 x float> %115, <8 x float> %105)
  %117 = add nuw nsw i64 %106, 128
  %118 = getelementptr inbounds float, float* %4, i64 %117
  %119 = load float, float* %118, align 4, !tbaa !5443
  %120 = insertelement <8 x float> undef, float %119, i32 0
  %121 = shufflevector <8 x float> %120, <8 x float> undef, <8 x i32> zeroinitializer
  %122 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %121, <8 x float> %115, <8 x float> %104)
  %123 = add nuw nsw i64 %106, 256
  %124 = getelementptr inbounds float, float* %4, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !5443
  %126 = insertelement <8 x float> undef, float %125, i32 0
  %127 = shufflevector <8 x float> %126, <8 x float> undef, <8 x i32> zeroinitializer
  %128 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %127, <8 x float> %115, <8 x float> %103)
  %129 = add nuw nsw i64 %106, 384
  %130 = getelementptr inbounds float, float* %4, i64 %129
  %131 = load float, float* %130, align 4, !tbaa !5443
  %132 = insertelement <8 x float> undef, float %131, i32 0
  %133 = shufflevector <8 x float> %132, <8 x float> undef, <8 x i32> zeroinitializer
  %134 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %133, <8 x float> %115, <8 x float> %102)
  %135 = add nuw nsw i64 %106, 512
  %136 = getelementptr inbounds float, float* %4, i64 %135
  %137 = load float, float* %136, align 4, !tbaa !5443
  %138 = insertelement <8 x float> undef, float %137, i32 0
  %139 = shufflevector <8 x float> %138, <8 x float> undef, <8 x i32> zeroinitializer
  %140 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %139, <8 x float> %115, <8 x float> %101)
  %141 = add nuw nsw i64 %106, 640
  %142 = getelementptr inbounds float, float* %4, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !5443
  %144 = insertelement <8 x float> undef, float %143, i32 0
  %145 = shufflevector <8 x float> %144, <8 x float> undef, <8 x i32> zeroinitializer
  %146 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %145, <8 x float> %115, <8 x float> %100)
  %147 = add nuw nsw i64 %106, 768
  %148 = getelementptr inbounds float, float* %4, i64 %147
  %149 = load float, float* %148, align 4, !tbaa !5443
  %150 = insertelement <8 x float> undef, float %149, i32 0
  %151 = shufflevector <8 x float> %150, <8 x float> undef, <8 x i32> zeroinitializer
  %152 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %151, <8 x float> %115, <8 x float> %99)
  %153 = add nuw nsw i64 %106, 1792
  %154 = getelementptr inbounds float, float* %4, i64 %153
  %155 = load float, float* %154, align 4, !tbaa !5443
  %156 = insertelement <8 x float> undef, float %155, i32 0
  %157 = shufflevector <8 x float> %156, <8 x float> undef, <8 x i32> zeroinitializer
  %158 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %157, <8 x float> %115, <8 x float> %98)
  %159 = add nuw nsw i64 %106, 1920
  %160 = getelementptr inbounds float, float* %4, i64 %159
  %161 = load float, float* %160, align 4, !tbaa !5443
  %162 = insertelement <8 x float> undef, float %161, i32 0
  %163 = shufflevector <8 x float> %162, <8 x float> undef, <8 x i32> zeroinitializer
  %164 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %163, <8 x float> %115, <8 x float> %97)
  %165 = add nuw nsw i64 %106, 2048
  %166 = getelementptr inbounds float, float* %4, i64 %165
  %167 = load float, float* %166, align 4, !tbaa !5443
  %168 = insertelement <8 x float> undef, float %167, i32 0
  %169 = shufflevector <8 x float> %168, <8 x float> undef, <8 x i32> zeroinitializer
  %170 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %169, <8 x float> %115, <8 x float> %96)
  %171 = add nuw nsw i64 %106, 2176
  %172 = getelementptr inbounds float, float* %4, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !5443
  %174 = insertelement <8 x float> undef, float %173, i32 0
  %175 = shufflevector <8 x float> %174, <8 x float> undef, <8 x i32> zeroinitializer
  %176 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %175, <8 x float> %115, <8 x float> %95)
  %177 = add nuw nsw i64 %106, 2304
  %178 = getelementptr inbounds float, float* %4, i64 %177
  %179 = load float, float* %178, align 4, !tbaa !5443
  %180 = insertelement <8 x float> undef, float %179, i32 0
  %181 = shufflevector <8 x float> %180, <8 x float> undef, <8 x i32> zeroinitializer
  %182 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %181, <8 x float> %115, <8 x float> %94)
  %183 = add nuw nsw i64 %106, 2432
  %184 = getelementptr inbounds float, float* %4, i64 %183
  %185 = load float, float* %184, align 4, !tbaa !5443
  %186 = insertelement <8 x float> undef, float %185, i32 0
  %187 = shufflevector <8 x float> %186, <8 x float> undef, <8 x i32> zeroinitializer
  %188 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %187, <8 x float> %115, <8 x float> %93)
  %189 = add nuw nsw i64 %106, 2560
  %190 = getelementptr inbounds float, float* %4, i64 %189
  %191 = load float, float* %190, align 4, !tbaa !5443
  %192 = insertelement <8 x float> undef, float %191, i32 0
  %193 = shufflevector <8 x float> %192, <8 x float> undef, <8 x i32> zeroinitializer
  %194 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %193, <8 x float> %115, <8 x float> %92)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 64
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5, %for_body5.us
  %195 = phi <8 x float> [ %.lcssa6895, %for_body5.us ], [ %194, %for_body5 ]
  %196 = phi <8 x float> [ %.lcssa6693, %for_body5.us ], [ %188, %for_body5 ]
  %197 = phi <8 x float> [ %.lcssa6491, %for_body5.us ], [ %182, %for_body5 ]
  %198 = phi <8 x float> [ %.lcssa6289, %for_body5.us ], [ %176, %for_body5 ]
  %199 = phi <8 x float> [ %.lcssa6087, %for_body5.us ], [ %170, %for_body5 ]
  %200 = phi <8 x float> [ %.lcssa5885, %for_body5.us ], [ %164, %for_body5 ]
  %201 = phi <8 x float> [ %.lcssa5683, %for_body5.us ], [ %158, %for_body5 ]
  %202 = phi <8 x float> [ %91, %for_body5.us ], [ %152, %for_body5 ]
  %203 = phi <8 x float> [ %85, %for_body5.us ], [ %146, %for_body5 ]
  %204 = phi <8 x float> [ %79, %for_body5.us ], [ %140, %for_body5 ]
  %205 = phi <8 x float> [ %73, %for_body5.us ], [ %134, %for_body5 ]
  %206 = phi <8 x float> [ %67, %for_body5.us ], [ %128, %for_body5 ]
  %207 = phi <8 x float> [ %61, %for_body5.us ], [ %122, %for_body5 ]
  %208 = phi <8 x float> [ %55, %for_body5.us ], [ %116, %for_body5 ]
  %indvars.iv.next123 = add nuw nsw i64 %indvars.iv122, 1
  %exitcond124 = icmp eq i64 %indvars.iv.next123, 16
  br i1 %exitcond124, label %for_end24, label %for_begin4.preheader, !prof !50

for_end24:                                        ; preds = %for_end6
  %209 = shl nuw nsw i32 %27, 1
  %210 = mul nuw nsw i32 %27, 112
  %211 = ashr i32 %26, 2
  %212 = mul nsw i32 %211, 392
  %213 = shl nsw i32 %211, 3
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds float, float* %13, i64 %214
  %216 = bitcast float* %215 to <8 x float>*
  %217 = add i32 %210, %212
  %218 = load <8 x float>, <8 x float>* %216, align 32, !tbaa !5449
  %219 = fadd <8 x float> %218, %208
  %220 = sext i32 %217 to i64
  %221 = getelementptr inbounds float, float* %10, i64 %220
  %222 = bitcast float* %221 to <8 x float>*
  store <8 x float> %219, <8 x float>* %222, align 32, !tbaa !5452
  %223 = or i32 %210, 8
  %224 = add i32 %223, %212
  %225 = fadd <8 x float> %218, %207
  %226 = sext i32 %224 to i64
  %227 = getelementptr inbounds float, float* %10, i64 %226
  %228 = bitcast float* %227 to <8 x float>*
  store <8 x float> %225, <8 x float>* %228, align 32, !tbaa !5452
  %229 = add nuw nsw i32 %210, 16
  %230 = add i32 %229, %212
  %231 = fadd <8 x float> %218, %206
  %232 = sext i32 %230 to i64
  %233 = getelementptr inbounds float, float* %10, i64 %232
  %234 = bitcast float* %233 to <8 x float>*
  store <8 x float> %231, <8 x float>* %234, align 32, !tbaa !5452
  %235 = add nuw nsw i32 %210, 24
  %236 = add i32 %235, %212
  %237 = fadd <8 x float> %218, %205
  %238 = sext i32 %236 to i64
  %239 = getelementptr inbounds float, float* %10, i64 %238
  %240 = bitcast float* %239 to <8 x float>*
  store <8 x float> %237, <8 x float>* %240, align 32, !tbaa !5452
  %241 = add nuw nsw i32 %210, 32
  %242 = add i32 %241, %212
  %243 = fadd <8 x float> %218, %204
  %244 = sext i32 %242 to i64
  %245 = getelementptr inbounds float, float* %10, i64 %244
  %246 = bitcast float* %245 to <8 x float>*
  store <8 x float> %243, <8 x float>* %246, align 32, !tbaa !5452
  %247 = add nuw nsw i32 %210, 40
  %248 = add i32 %247, %212
  %249 = fadd <8 x float> %218, %203
  %250 = sext i32 %248 to i64
  %251 = getelementptr inbounds float, float* %10, i64 %250
  %252 = bitcast float* %251 to <8 x float>*
  store <8 x float> %249, <8 x float>* %252, align 32, !tbaa !5452
  %narrow = add nuw nsw i32 %210, 48
  %253 = add i32 %narrow, %212
  %254 = fadd <8 x float> %218, %202
  %255 = sext i32 %253 to i64
  %256 = getelementptr inbounds float, float* %10, i64 %255
  %257 = bitcast float* %256 to <8 x float>*
  store <8 x float> %254, <8 x float>* %257, align 32, !tbaa !5452
  %258 = or i32 %209, 1
  %259 = icmp eq i32 %258, 7
  br i1 %259, label %for_end24.1, label %for_body23.us.preheader.1, !prof !50

for_body23.us.preheader.1:                        ; preds = %for_end24
  %260 = add nuw nsw i32 %210, 56
  %261 = add i32 %260, %212
  %262 = load <8 x float>, <8 x float>* %216, align 32, !tbaa !5449
  %263 = fadd <8 x float> %262, %201
  %264 = sext i32 %261 to i64
  %265 = getelementptr inbounds float, float* %10, i64 %264
  %266 = bitcast float* %265 to <8 x float>*
  store <8 x float> %263, <8 x float>* %266, align 32, !tbaa !5452
  %267 = add nuw nsw i32 %210, 64
  %268 = add i32 %267, %212
  %269 = fadd <8 x float> %262, %200
  %270 = sext i32 %268 to i64
  %271 = getelementptr inbounds float, float* %10, i64 %270
  %272 = bitcast float* %271 to <8 x float>*
  store <8 x float> %269, <8 x float>* %272, align 32, !tbaa !5452
  %273 = add nuw nsw i32 %210, 72
  %274 = add i32 %273, %212
  %275 = fadd <8 x float> %262, %199
  %276 = sext i32 %274 to i64
  %277 = getelementptr inbounds float, float* %10, i64 %276
  %278 = bitcast float* %277 to <8 x float>*
  store <8 x float> %275, <8 x float>* %278, align 32, !tbaa !5452
  %279 = add nuw nsw i32 %210, 80
  %280 = add i32 %279, %212
  %281 = fadd <8 x float> %262, %198
  %282 = sext i32 %280 to i64
  %283 = getelementptr inbounds float, float* %10, i64 %282
  %284 = bitcast float* %283 to <8 x float>*
  store <8 x float> %281, <8 x float>* %284, align 32, !tbaa !5452
  %285 = add nuw nsw i32 %210, 88
  %286 = add i32 %285, %212
  %287 = fadd <8 x float> %262, %197
  %288 = sext i32 %286 to i64
  %289 = getelementptr inbounds float, float* %10, i64 %288
  %290 = bitcast float* %289 to <8 x float>*
  store <8 x float> %287, <8 x float>* %290, align 32, !tbaa !5452
  %291 = add nuw nsw i32 %210, 96
  %292 = add i32 %291, %212
  %293 = fadd <8 x float> %262, %196
  %294 = sext i32 %292 to i64
  %295 = getelementptr inbounds float, float* %10, i64 %294
  %296 = bitcast float* %295 to <8 x float>*
  store <8 x float> %293, <8 x float>* %296, align 32, !tbaa !5452
  %297 = add nuw nsw i32 %210, 104
  %298 = add i32 %297, %212
  %299 = fadd <8 x float> %262, %195
  %300 = sext i32 %298 to i64
  %301 = getelementptr inbounds float, float* %10, i64 %300
  %302 = bitcast float* %301 to <8 x float>*
  store <8 x float> %299, <8 x float>* %302, align 32, !tbaa !5452
  br label %for_end24.1

for_end24.1:                                      ; preds = %for_end24, %for_body23.us.preheader.1
  %303 = add nsw i32 %26, 1
  %304 = icmp slt i32 %303, %21
  br i1 %304, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_33(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.363, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !5455
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.364, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !5469
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.365, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !5471
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !5485
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 256
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.152, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !5487
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 7
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.174, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !5490
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 7
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.175, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !5492
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 8
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !5496
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 100352
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !5510
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 392
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !5512
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 56
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !5515
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 8
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !5517
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.366, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !5521
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !5535
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 128
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.177, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !5537
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 7
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.367, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !5540
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 7
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.368, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !5542
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 16
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !5546
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 100352
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !5560
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 784
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !5562
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 112
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !5565
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 16
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !5567
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.369, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_33_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_33_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %35, align 8
  %3 = getelementptr inbounds %35, %35* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %35, %35* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %35* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.370, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.370(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 895
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 896
  %15 = select i1 %14, i32 %13, i32 896
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 896
  %18 = select i1 %17, i32 %16, i32 896
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv4 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next5, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv4, 112
  %23 = trunc i64 %indvars.iv4 to i32
  %24 = sdiv i32 %23, 7
  %25 = mul i32 %24, 7
  %.decomposed = sub i32 %23, %25
  %26 = mul nsw i32 %.decomposed, 56
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  %28 = shufflevector <16 x i32> %27, <16 x i32> undef, <16 x i32> zeroinitializer
  %29 = mul nsw i32 %24, 784
  %30 = insertelement <16 x i32> undef, i32 %29, i32 0
  %31 = shufflevector <16 x i32> %30, <16 x i32> undef, <16 x i32> zeroinitializer
  %32 = add <16 x i32> %31, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 398, i32 399>
  %33 = add <16 x i32> %32, %28
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %34 = shl i64 %indvars.iv, 4
  %35 = add nsw i64 %34, %22
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %36 = shl i32 %indvars.iv.tr, 3
  %37 = insertelement <16 x i32> undef, i32 %36, i32 0
  %38 = shufflevector <16 x i32> %37, <16 x i32> undef, <16 x i32> zeroinitializer
  %39 = add <16 x i32> %33, %38
  %40 = extractelement <16 x i32> %39, i64 0
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %7, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !5571
  %44 = insertelement <16 x float> undef, float %43, i32 0
  %45 = extractelement <16 x i32> %39, i64 1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %7, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !5571
  %49 = insertelement <16 x float> %44, float %48, i32 1
  %50 = extractelement <16 x i32> %39, i64 2
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %7, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !5571
  %54 = insertelement <16 x float> %49, float %53, i32 2
  %55 = extractelement <16 x i32> %39, i64 3
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %7, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !5571
  %59 = insertelement <16 x float> %54, float %58, i32 3
  %60 = extractelement <16 x i32> %39, i64 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %7, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !5571
  %64 = insertelement <16 x float> %59, float %63, i32 4
  %65 = extractelement <16 x i32> %39, i64 5
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %7, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !5571
  %69 = insertelement <16 x float> %64, float %68, i32 5
  %70 = extractelement <16 x i32> %39, i64 6
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %7, i64 %71
  %73 = load float, float* %72, align 4, !tbaa !5571
  %74 = insertelement <16 x float> %69, float %73, i32 6
  %75 = extractelement <16 x i32> %39, i64 7
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds float, float* %7, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !5571
  %79 = insertelement <16 x float> %74, float %78, i32 7
  %80 = extractelement <16 x i32> %39, i64 8
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float* %7, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !5571
  %84 = insertelement <16 x float> %79, float %83, i32 8
  %85 = extractelement <16 x i32> %39, i64 9
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds float, float* %7, i64 %86
  %88 = load float, float* %87, align 4, !tbaa !5571
  %89 = insertelement <16 x float> %84, float %88, i32 9
  %90 = extractelement <16 x i32> %39, i64 10
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds float, float* %7, i64 %91
  %93 = load float, float* %92, align 4, !tbaa !5571
  %94 = insertelement <16 x float> %89, float %93, i32 10
  %95 = extractelement <16 x i32> %39, i64 11
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %7, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !5571
  %99 = insertelement <16 x float> %94, float %98, i32 11
  %100 = extractelement <16 x i32> %39, i64 12
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !5571
  %104 = insertelement <16 x float> %99, float %103, i32 12
  %105 = extractelement <16 x i32> %39, i64 13
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !5571
  %109 = insertelement <16 x float> %104, float %108, i32 13
  %110 = extractelement <16 x i32> %39, i64 14
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !5571
  %114 = insertelement <16 x float> %109, float %113, i32 14
  %115 = extractelement <16 x i32> %39, i64 15
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !5571
  %119 = insertelement <16 x float> %114, float %118, i32 15
  %120 = getelementptr inbounds float, float* %4, i64 %35
  %121 = bitcast float* %120 to <16 x float>*
  store <16 x float> %119, <16 x float>* %121, align 64, !tbaa !5574
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 7
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, 1
  %122 = icmp slt i64 %indvars.iv.next5, %21
  br i1 %122, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_2(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.371, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !5577
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !5591
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !5594
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.372, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !5596
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.373, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.374, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.375, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !5598
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !5612
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 2
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.376, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !5614
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 28
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !5617
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 28
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !5619
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 256
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.30, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !5623
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 401408
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !5637
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 200704
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !5639
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 7168
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !5642
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 256
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !5644
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([242 x i8], [242 x i8]* @.str.377, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !5648
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 64
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.128, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !5662
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 2
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.378, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !5664
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !5667
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !5669
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 256
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !5673
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 16
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !5675
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 8192
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !5689
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 4096
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !5691
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 4096
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !5694
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 4096
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !5696
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 16
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !5700
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([275 x i8], [275 x i8]* @.str.379, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !5702
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !5716
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 64
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.131, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !5718
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !5721
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !5723
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 16
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !5727
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 1024
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !5741
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 16
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !5743
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 16
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !5746
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 16
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !5748
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.132, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !5752
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !5766
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 64
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.133, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !5768
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 14
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !5771
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 14
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.135, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !5773
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 16
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !5777
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 200704
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !5791
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 3136
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !5793
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 224
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !5796
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 16
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !5798
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.136, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_2_compute_(i8* %27, i8* %35, i8* %47, i8* %41)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_2_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %4 = alloca %36, align 8
  %5 = getelementptr inbounds %36, %36* %4, i64 0, i32 0
  store i8* %0, i8** %5, align 8
  %6 = getelementptr inbounds %36, %36* %4, i64 0, i32 1
  store i8* %1, i8** %6, align 8
  %7 = getelementptr inbounds %36, %36* %4, i64 0, i32 2
  store i8* %2, i8** %7, align 8
  %8 = getelementptr inbounds %36, %36* %4, i64 0, i32 3
  store i8* %3, i8** %8, align 8
  %9 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %10 = bitcast %36* %4 to i8*
  %11 = call i32 %9(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.380, i8* nonnull %10, i32 0)
  ret i32 %11
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.380(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 895
  %17 = sdiv i32 %16, %15
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %17, %18
  %20 = icmp slt i32 %19, 896
  %21 = select i1 %20, i32 %19, i32 896
  %22 = mul nsw i32 %17, %0
  %23 = icmp slt i32 %22, 896
  %24 = select i1 %23, i32 %22, i32 896
  %25 = icmp slt i32 %24, %21
  br i1 %25, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %26 = sext i32 %24 to i64
  %27 = sext i32 %21 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end9.1.1
  %indvars.iv73 = phi i64 [ %26, %for_begin1.preheader.preheader ], [ %indvars.iv.next74, %for_end9.1.1 ]
  %28 = trunc i64 %indvars.iv73 to i32
  %29 = sdiv i32 %28, 14
  %30 = mul i32 %29, 14
  %.decomposed = sub i32 %28, %30
  %31 = mul nsw i32 %.decomposed, 14336
  %32 = shl i32 %29, 13
  %33 = sext i32 %32 to i64
  %34 = sext i32 %31 to i64
  br label %for_body8

for_end:                                          ; preds = %for_end9.1.1, %entry
  ret i32 0

for_body8:                                        ; preds = %for_body8, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body8 ]
  %35 = phi <16 x float> [ zeroinitializer, %for_begin1.preheader ], [ %88, %for_body8 ]
  %36 = phi <16 x float> [ zeroinitializer, %for_begin1.preheader ], [ %82, %for_body8 ]
  %37 = phi <16 x float> [ zeroinitializer, %for_begin1.preheader ], [ %76, %for_body8 ]
  %38 = phi <16 x float> [ zeroinitializer, %for_begin1.preheader ], [ %70, %for_body8 ]
  %39 = phi <16 x float> [ zeroinitializer, %for_begin1.preheader ], [ %64, %for_body8 ]
  %40 = phi <16 x float> [ zeroinitializer, %for_begin1.preheader ], [ %58, %for_body8 ]
  %41 = phi <16 x float> [ zeroinitializer, %for_begin1.preheader ], [ %52, %for_body8 ]
  %42 = add nsw i64 %indvars.iv, %34
  %43 = getelementptr inbounds float, float* %4, i64 %42
  %44 = load float, float* %43, align 4, !tbaa !5802
  %45 = insertelement <16 x float> undef, float %44, i32 0
  %46 = shufflevector <16 x float> %45, <16 x float> undef, <16 x i32> zeroinitializer
  %47 = shl i64 %indvars.iv, 4
  %48 = add nuw nsw i64 %47, %33
  %49 = getelementptr inbounds float, float* %7, i64 %48
  %50 = bitcast float* %49 to <16 x float>*
  %51 = load <16 x float>, <16 x float>* %50, align 64, !tbaa !5805
  %52 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %46, <16 x float> %51, <16 x float> %41)
  %53 = add nsw i64 %42, 512
  %54 = getelementptr inbounds float, float* %4, i64 %53
  %55 = load float, float* %54, align 4, !tbaa !5802
  %56 = insertelement <16 x float> undef, float %55, i32 0
  %57 = shufflevector <16 x float> %56, <16 x float> undef, <16 x i32> zeroinitializer
  %58 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %57, <16 x float> %51, <16 x float> %40)
  %59 = add nsw i64 %42, 1024
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = load float, float* %60, align 4, !tbaa !5802
  %62 = insertelement <16 x float> undef, float %61, i32 0
  %63 = shufflevector <16 x float> %62, <16 x float> undef, <16 x i32> zeroinitializer
  %64 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %63, <16 x float> %51, <16 x float> %39)
  %65 = add nsw i64 %42, 1536
  %66 = getelementptr inbounds float, float* %4, i64 %65
  %67 = load float, float* %66, align 4, !tbaa !5802
  %68 = insertelement <16 x float> undef, float %67, i32 0
  %69 = shufflevector <16 x float> %68, <16 x float> undef, <16 x i32> zeroinitializer
  %70 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %69, <16 x float> %51, <16 x float> %38)
  %71 = add nsw i64 %42, 2048
  %72 = getelementptr inbounds float, float* %4, i64 %71
  %73 = load float, float* %72, align 4, !tbaa !5802
  %74 = insertelement <16 x float> undef, float %73, i32 0
  %75 = shufflevector <16 x float> %74, <16 x float> undef, <16 x i32> zeroinitializer
  %76 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %75, <16 x float> %51, <16 x float> %37)
  %77 = add nsw i64 %42, 2560
  %78 = getelementptr inbounds float, float* %4, i64 %77
  %79 = load float, float* %78, align 4, !tbaa !5802
  %80 = insertelement <16 x float> undef, float %79, i32 0
  %81 = shufflevector <16 x float> %80, <16 x float> undef, <16 x i32> zeroinitializer
  %82 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %81, <16 x float> %51, <16 x float> %36)
  %83 = add nsw i64 %42, 3072
  %84 = getelementptr inbounds float, float* %4, i64 %83
  %85 = load float, float* %84, align 4, !tbaa !5802
  %86 = insertelement <16 x float> undef, float %85, i32 0
  %87 = shufflevector <16 x float> %86, <16 x float> undef, <16 x i32> zeroinitializer
  %88 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %87, <16 x float> %51, <16 x float> %35)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %for_end9, label %for_body8, !prof !50

for_end9:                                         ; preds = %for_body8
  %89 = add nsw i64 %34, 200704
  %90 = or i64 %33, 4096
  br label %for_body8.1

for_body8.1:                                      ; preds = %for_body8.1, %for_end9
  %indvars.iv.1 = phi i64 [ 0, %for_end9 ], [ %indvars.iv.next.1, %for_body8.1 ]
  %91 = phi <16 x float> [ %88, %for_end9 ], [ %144, %for_body8.1 ]
  %92 = phi <16 x float> [ %82, %for_end9 ], [ %138, %for_body8.1 ]
  %93 = phi <16 x float> [ %76, %for_end9 ], [ %132, %for_body8.1 ]
  %94 = phi <16 x float> [ %70, %for_end9 ], [ %126, %for_body8.1 ]
  %95 = phi <16 x float> [ %64, %for_end9 ], [ %120, %for_body8.1 ]
  %96 = phi <16 x float> [ %58, %for_end9 ], [ %114, %for_body8.1 ]
  %97 = phi <16 x float> [ %52, %for_end9 ], [ %108, %for_body8.1 ]
  %98 = add nsw i64 %89, %indvars.iv.1
  %99 = getelementptr inbounds float, float* %4, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !5802
  %101 = insertelement <16 x float> undef, float %100, i32 0
  %102 = shufflevector <16 x float> %101, <16 x float> undef, <16 x i32> zeroinitializer
  %103 = shl i64 %indvars.iv.1, 4
  %104 = add nuw nsw i64 %90, %103
  %105 = getelementptr inbounds float, float* %7, i64 %104
  %106 = bitcast float* %105 to <16 x float>*
  %107 = load <16 x float>, <16 x float>* %106, align 64, !tbaa !5805
  %108 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %102, <16 x float> %107, <16 x float> %97)
  %109 = add nsw i64 %98, 512
  %110 = getelementptr inbounds float, float* %4, i64 %109
  %111 = load float, float* %110, align 4, !tbaa !5802
  %112 = insertelement <16 x float> undef, float %111, i32 0
  %113 = shufflevector <16 x float> %112, <16 x float> undef, <16 x i32> zeroinitializer
  %114 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %113, <16 x float> %107, <16 x float> %96)
  %115 = add nsw i64 %98, 1024
  %116 = getelementptr inbounds float, float* %4, i64 %115
  %117 = load float, float* %116, align 4, !tbaa !5802
  %118 = insertelement <16 x float> undef, float %117, i32 0
  %119 = shufflevector <16 x float> %118, <16 x float> undef, <16 x i32> zeroinitializer
  %120 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %119, <16 x float> %107, <16 x float> %95)
  %121 = add nsw i64 %98, 1536
  %122 = getelementptr inbounds float, float* %4, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !5802
  %124 = insertelement <16 x float> undef, float %123, i32 0
  %125 = shufflevector <16 x float> %124, <16 x float> undef, <16 x i32> zeroinitializer
  %126 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %125, <16 x float> %107, <16 x float> %94)
  %127 = add nsw i64 %98, 2048
  %128 = getelementptr inbounds float, float* %4, i64 %127
  %129 = load float, float* %128, align 4, !tbaa !5802
  %130 = insertelement <16 x float> undef, float %129, i32 0
  %131 = shufflevector <16 x float> %130, <16 x float> undef, <16 x i32> zeroinitializer
  %132 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %131, <16 x float> %107, <16 x float> %93)
  %133 = add nsw i64 %98, 2560
  %134 = getelementptr inbounds float, float* %4, i64 %133
  %135 = load float, float* %134, align 4, !tbaa !5802
  %136 = insertelement <16 x float> undef, float %135, i32 0
  %137 = shufflevector <16 x float> %136, <16 x float> undef, <16 x i32> zeroinitializer
  %138 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %137, <16 x float> %107, <16 x float> %92)
  %139 = add nsw i64 %98, 3072
  %140 = getelementptr inbounds float, float* %4, i64 %139
  %141 = load float, float* %140, align 4, !tbaa !5802
  %142 = insertelement <16 x float> undef, float %141, i32 0
  %143 = shufflevector <16 x float> %142, <16 x float> undef, <16 x i32> zeroinitializer
  %144 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %143, <16 x float> %107, <16 x float> %91)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 256
  br i1 %exitcond.1, label %for_end9.1, label %for_body8.1, !prof !50

for_end9.1:                                       ; preds = %for_body8.1
  %145 = add nsw i64 %34, 3584
  br label %for_body8.158

for_body8.158:                                    ; preds = %for_body8.158, %for_end9.1
  %indvars.iv.155 = phi i64 [ 0, %for_end9.1 ], [ %indvars.iv.next.156, %for_body8.158 ]
  %146 = phi <16 x float> [ zeroinitializer, %for_end9.1 ], [ %199, %for_body8.158 ]
  %147 = phi <16 x float> [ zeroinitializer, %for_end9.1 ], [ %193, %for_body8.158 ]
  %148 = phi <16 x float> [ zeroinitializer, %for_end9.1 ], [ %187, %for_body8.158 ]
  %149 = phi <16 x float> [ zeroinitializer, %for_end9.1 ], [ %181, %for_body8.158 ]
  %150 = phi <16 x float> [ zeroinitializer, %for_end9.1 ], [ %175, %for_body8.158 ]
  %151 = phi <16 x float> [ zeroinitializer, %for_end9.1 ], [ %169, %for_body8.158 ]
  %152 = phi <16 x float> [ zeroinitializer, %for_end9.1 ], [ %163, %for_body8.158 ]
  %153 = add nsw i64 %145, %indvars.iv.155
  %154 = getelementptr inbounds float, float* %4, i64 %153
  %155 = load float, float* %154, align 4, !tbaa !5802
  %156 = insertelement <16 x float> undef, float %155, i32 0
  %157 = shufflevector <16 x float> %156, <16 x float> undef, <16 x i32> zeroinitializer
  %158 = shl i64 %indvars.iv.155, 4
  %159 = add nuw nsw i64 %158, %33
  %160 = getelementptr inbounds float, float* %7, i64 %159
  %161 = bitcast float* %160 to <16 x float>*
  %162 = load <16 x float>, <16 x float>* %161, align 64, !tbaa !5805
  %163 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %157, <16 x float> %162, <16 x float> %152)
  %164 = add nsw i64 %153, 512
  %165 = getelementptr inbounds float, float* %4, i64 %164
  %166 = load float, float* %165, align 4, !tbaa !5802
  %167 = insertelement <16 x float> undef, float %166, i32 0
  %168 = shufflevector <16 x float> %167, <16 x float> undef, <16 x i32> zeroinitializer
  %169 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %168, <16 x float> %162, <16 x float> %151)
  %170 = add nsw i64 %153, 1024
  %171 = getelementptr inbounds float, float* %4, i64 %170
  %172 = load float, float* %171, align 4, !tbaa !5802
  %173 = insertelement <16 x float> undef, float %172, i32 0
  %174 = shufflevector <16 x float> %173, <16 x float> undef, <16 x i32> zeroinitializer
  %175 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %174, <16 x float> %162, <16 x float> %150)
  %176 = add nsw i64 %153, 1536
  %177 = getelementptr inbounds float, float* %4, i64 %176
  %178 = load float, float* %177, align 4, !tbaa !5802
  %179 = insertelement <16 x float> undef, float %178, i32 0
  %180 = shufflevector <16 x float> %179, <16 x float> undef, <16 x i32> zeroinitializer
  %181 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %180, <16 x float> %162, <16 x float> %149)
  %182 = add nsw i64 %153, 2048
  %183 = getelementptr inbounds float, float* %4, i64 %182
  %184 = load float, float* %183, align 4, !tbaa !5802
  %185 = insertelement <16 x float> undef, float %184, i32 0
  %186 = shufflevector <16 x float> %185, <16 x float> undef, <16 x i32> zeroinitializer
  %187 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %186, <16 x float> %162, <16 x float> %148)
  %188 = add nsw i64 %153, 2560
  %189 = getelementptr inbounds float, float* %4, i64 %188
  %190 = load float, float* %189, align 4, !tbaa !5802
  %191 = insertelement <16 x float> undef, float %190, i32 0
  %192 = shufflevector <16 x float> %191, <16 x float> undef, <16 x i32> zeroinitializer
  %193 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %192, <16 x float> %162, <16 x float> %147)
  %194 = add nsw i64 %153, 3072
  %195 = getelementptr inbounds float, float* %4, i64 %194
  %196 = load float, float* %195, align 4, !tbaa !5802
  %197 = insertelement <16 x float> undef, float %196, i32 0
  %198 = shufflevector <16 x float> %197, <16 x float> undef, <16 x i32> zeroinitializer
  %199 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %198, <16 x float> %162, <16 x float> %146)
  %indvars.iv.next.156 = add nuw nsw i64 %indvars.iv.155, 1
  %exitcond.157 = icmp eq i64 %indvars.iv.next.156, 256
  br i1 %exitcond.157, label %for_end9.166, label %for_body8.158, !prof !50

for_end9.166:                                     ; preds = %for_body8.158
  %200 = add nsw i64 %34, 204288
  br label %for_body8.1.1

for_body8.1.1:                                    ; preds = %for_body8.1.1, %for_end9.166
  %indvars.iv.1.1 = phi i64 [ 0, %for_end9.166 ], [ %indvars.iv.next.1.1, %for_body8.1.1 ]
  %201 = phi <16 x float> [ %199, %for_end9.166 ], [ %254, %for_body8.1.1 ]
  %202 = phi <16 x float> [ %193, %for_end9.166 ], [ %248, %for_body8.1.1 ]
  %203 = phi <16 x float> [ %187, %for_end9.166 ], [ %242, %for_body8.1.1 ]
  %204 = phi <16 x float> [ %181, %for_end9.166 ], [ %236, %for_body8.1.1 ]
  %205 = phi <16 x float> [ %175, %for_end9.166 ], [ %230, %for_body8.1.1 ]
  %206 = phi <16 x float> [ %169, %for_end9.166 ], [ %224, %for_body8.1.1 ]
  %207 = phi <16 x float> [ %163, %for_end9.166 ], [ %218, %for_body8.1.1 ]
  %208 = add nsw i64 %200, %indvars.iv.1.1
  %209 = getelementptr inbounds float, float* %4, i64 %208
  %210 = load float, float* %209, align 4, !tbaa !5802
  %211 = insertelement <16 x float> undef, float %210, i32 0
  %212 = shufflevector <16 x float> %211, <16 x float> undef, <16 x i32> zeroinitializer
  %213 = shl i64 %indvars.iv.1.1, 4
  %214 = add nuw nsw i64 %90, %213
  %215 = getelementptr inbounds float, float* %7, i64 %214
  %216 = bitcast float* %215 to <16 x float>*
  %217 = load <16 x float>, <16 x float>* %216, align 64, !tbaa !5805
  %218 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %212, <16 x float> %217, <16 x float> %207)
  %219 = add nsw i64 %208, 512
  %220 = getelementptr inbounds float, float* %4, i64 %219
  %221 = load float, float* %220, align 4, !tbaa !5802
  %222 = insertelement <16 x float> undef, float %221, i32 0
  %223 = shufflevector <16 x float> %222, <16 x float> undef, <16 x i32> zeroinitializer
  %224 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %223, <16 x float> %217, <16 x float> %206)
  %225 = add nsw i64 %208, 1024
  %226 = getelementptr inbounds float, float* %4, i64 %225
  %227 = load float, float* %226, align 4, !tbaa !5802
  %228 = insertelement <16 x float> undef, float %227, i32 0
  %229 = shufflevector <16 x float> %228, <16 x float> undef, <16 x i32> zeroinitializer
  %230 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %229, <16 x float> %217, <16 x float> %205)
  %231 = add nsw i64 %208, 1536
  %232 = getelementptr inbounds float, float* %4, i64 %231
  %233 = load float, float* %232, align 4, !tbaa !5802
  %234 = insertelement <16 x float> undef, float %233, i32 0
  %235 = shufflevector <16 x float> %234, <16 x float> undef, <16 x i32> zeroinitializer
  %236 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %235, <16 x float> %217, <16 x float> %204)
  %237 = add nsw i64 %208, 2048
  %238 = getelementptr inbounds float, float* %4, i64 %237
  %239 = load float, float* %238, align 4, !tbaa !5802
  %240 = insertelement <16 x float> undef, float %239, i32 0
  %241 = shufflevector <16 x float> %240, <16 x float> undef, <16 x i32> zeroinitializer
  %242 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %241, <16 x float> %217, <16 x float> %203)
  %243 = add nsw i64 %208, 2560
  %244 = getelementptr inbounds float, float* %4, i64 %243
  %245 = load float, float* %244, align 4, !tbaa !5802
  %246 = insertelement <16 x float> undef, float %245, i32 0
  %247 = shufflevector <16 x float> %246, <16 x float> undef, <16 x i32> zeroinitializer
  %248 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %247, <16 x float> %217, <16 x float> %202)
  %249 = add nsw i64 %208, 3072
  %250 = getelementptr inbounds float, float* %4, i64 %249
  %251 = load float, float* %250, align 4, !tbaa !5802
  %252 = insertelement <16 x float> undef, float %251, i32 0
  %253 = shufflevector <16 x float> %252, <16 x float> undef, <16 x i32> zeroinitializer
  %254 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %253, <16 x float> %217, <16 x float> %201)
  %indvars.iv.next.1.1 = add nuw nsw i64 %indvars.iv.1.1, 1
  %exitcond.1.1 = icmp eq i64 %indvars.iv.next.1.1, 256
  br i1 %exitcond.1.1, label %for_end9.1.1, label %for_body8.1.1, !prof !50

for_end9.1.1:                                     ; preds = %for_body8.1.1
  %255 = mul nsw i64 %indvars.iv73, 224
  %256 = shl nsw i32 %29, 4
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds float, float* %13, i64 %257
  %259 = bitcast float* %258 to <16 x float>*
  %260 = load <16 x float>, <16 x float>* %259, align 64, !tbaa !5808
  %261 = fadd <16 x float> %260, %108
  %262 = getelementptr inbounds float, float* %10, i64 %255
  %263 = bitcast float* %262 to <16 x float>*
  store <16 x float> %261, <16 x float>* %263, align 64, !tbaa !5811
  %264 = fadd <16 x float> %260, %114
  %265 = mul i64 %indvars.iv73, 962072674304
  %sext = ashr exact i64 %265, 32
  %266 = or i64 %sext, 16
  %267 = getelementptr inbounds float, float* %10, i64 %266
  %268 = bitcast float* %267 to <16 x float>*
  store <16 x float> %264, <16 x float>* %268, align 64, !tbaa !5811
  %269 = fadd <16 x float> %260, %120
  %270 = mul i64 %indvars.iv73, 962072674304
  %sext75 = add i64 %270, 137438953472
  %271 = ashr exact i64 %sext75, 32
  %272 = getelementptr inbounds float, float* %10, i64 %271
  %273 = bitcast float* %272 to <16 x float>*
  store <16 x float> %269, <16 x float>* %273, align 64, !tbaa !5811
  %274 = fadd <16 x float> %260, %126
  %275 = mul i64 %indvars.iv73, 962072674304
  %sext76 = add i64 %275, 206158430208
  %276 = ashr exact i64 %sext76, 32
  %277 = getelementptr inbounds float, float* %10, i64 %276
  %278 = bitcast float* %277 to <16 x float>*
  store <16 x float> %274, <16 x float>* %278, align 64, !tbaa !5811
  %279 = fadd <16 x float> %260, %132
  %280 = mul i64 %indvars.iv73, 962072674304
  %sext77 = add i64 %280, 274877906944
  %281 = ashr exact i64 %sext77, 32
  %282 = getelementptr inbounds float, float* %10, i64 %281
  %283 = bitcast float* %282 to <16 x float>*
  store <16 x float> %279, <16 x float>* %283, align 64, !tbaa !5811
  %284 = fadd <16 x float> %260, %138
  %285 = mul i64 %indvars.iv73, 962072674304
  %sext78 = add i64 %285, 343597383680
  %286 = ashr exact i64 %sext78, 32
  %287 = getelementptr inbounds float, float* %10, i64 %286
  %288 = bitcast float* %287 to <16 x float>*
  store <16 x float> %284, <16 x float>* %288, align 64, !tbaa !5811
  %289 = fadd <16 x float> %260, %144
  %290 = mul i64 %indvars.iv73, 962072674304
  %sext79 = add i64 %290, 412316860416
  %291 = ashr exact i64 %sext79, 32
  %292 = getelementptr inbounds float, float* %10, i64 %291
  %293 = bitcast float* %292 to <16 x float>*
  store <16 x float> %289, <16 x float>* %293, align 64, !tbaa !5811
  %294 = fadd <16 x float> %260, %218
  %295 = mul i64 %indvars.iv73, 962072674304
  %sext80 = add i64 %295, 481036337152
  %296 = ashr exact i64 %sext80, 32
  %297 = getelementptr inbounds float, float* %10, i64 %296
  %298 = bitcast float* %297 to <16 x float>*
  store <16 x float> %294, <16 x float>* %298, align 64, !tbaa !5811
  %299 = fadd <16 x float> %260, %224
  %300 = mul i64 %indvars.iv73, 962072674304
  %sext81 = add i64 %300, 549755813888
  %301 = ashr exact i64 %sext81, 32
  %302 = getelementptr inbounds float, float* %10, i64 %301
  %303 = bitcast float* %302 to <16 x float>*
  store <16 x float> %299, <16 x float>* %303, align 64, !tbaa !5811
  %304 = fadd <16 x float> %260, %230
  %305 = mul i64 %indvars.iv73, 962072674304
  %sext82 = add i64 %305, 618475290624
  %306 = ashr exact i64 %sext82, 32
  %307 = getelementptr inbounds float, float* %10, i64 %306
  %308 = bitcast float* %307 to <16 x float>*
  store <16 x float> %304, <16 x float>* %308, align 64, !tbaa !5811
  %309 = fadd <16 x float> %260, %236
  %310 = mul i64 %indvars.iv73, 962072674304
  %sext83 = add i64 %310, 687194767360
  %311 = ashr exact i64 %sext83, 32
  %312 = getelementptr inbounds float, float* %10, i64 %311
  %313 = bitcast float* %312 to <16 x float>*
  store <16 x float> %309, <16 x float>* %313, align 64, !tbaa !5811
  %314 = fadd <16 x float> %260, %242
  %315 = mul i64 %indvars.iv73, 962072674304
  %sext84 = add i64 %315, 755914244096
  %316 = ashr exact i64 %sext84, 32
  %317 = getelementptr inbounds float, float* %10, i64 %316
  %318 = bitcast float* %317 to <16 x float>*
  store <16 x float> %314, <16 x float>* %318, align 64, !tbaa !5811
  %319 = fadd <16 x float> %260, %248
  %320 = mul i64 %indvars.iv73, 962072674304
  %sext85 = add i64 %320, 824633720832
  %321 = ashr exact i64 %sext85, 32
  %322 = getelementptr inbounds float, float* %10, i64 %321
  %323 = bitcast float* %322 to <16 x float>*
  store <16 x float> %319, <16 x float>* %323, align 64, !tbaa !5811
  %324 = fadd <16 x float> %260, %254
  %325 = mul i64 %indvars.iv73, 962072674304
  %sext86 = add i64 %325, 893353197568
  %326 = ashr exact i64 %sext86, 32
  %327 = getelementptr inbounds float, float* %10, i64 %326
  %328 = bitcast float* %327 to <16 x float>*
  store <16 x float> %324, <16 x float>* %328, align 64, !tbaa !5811
  %indvars.iv.next74 = add nsw i64 %indvars.iv73, 1
  %329 = icmp slt i64 %indvars.iv.next74, %27
  br i1 %329, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_46(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.381, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !5814
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.382, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !5828
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.383, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !5830
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !5844
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 16
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.100, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !5846
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 28
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !5849
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 28
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !5851
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 32
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !5855
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 401408
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !5869
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 25088
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !5871
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 896
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !5874
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 32
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !5876
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.293, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !5880
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !5894
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 2
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.378, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !5896
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 28
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.278, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !5899
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 28
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.279, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !5901
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 256
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !5905
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 401408
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !5919
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 200704
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !5921
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 7168
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !5924
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 256
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !5926
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([242 x i8], [242 x i8]* @.str.384, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_46_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_46_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %37, align 8
  %3 = getelementptr inbounds %37, %37* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %37, %37* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %37* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.385, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.385(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 55
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 56
  %15 = select i1 %14, i32 %13, i32 56
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 56
  %18 = select i1 %17, i32 %16, i32 56
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv10, 7168
  %23 = trunc i64 %indvars.iv10 to i32
  %24 = sdiv i32 %23, 28
  %25 = mul i32 %24, 28
  %.decomposed = sub i32 %23, %25
  %26 = mul nsw i32 %.decomposed, 896
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  %28 = mul nsw i32 %24, 200704
  %29 = insertelement <16 x i32> undef, i32 %28, i32 0
  %30 = add <16 x i32> %27, %29
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %31 = shl i64 %indvars.iv7, 8
  %32 = add nsw i64 %31, %22
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %33 = shl i32 %indvars.iv7.tr, 5
  %34 = insertelement <16 x i32> undef, i32 %33, i32 0
  %35 = add <16 x i32> %30, %34
  %36 = shufflevector <16 x i32> %35, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %37 = icmp slt i64 %indvars.iv.next11, %21
  br i1 %37, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %38 = shl nsw i64 %indvars.iv, 4
  %39 = add nsw i64 %32, %38
  %40 = trunc i64 %38 to i32
  %41 = insertelement <16 x i32> undef, i32 %40, i32 0
  %42 = trunc i64 %38 to i32
  %43 = or i32 %42, 1
  %44 = insertelement <16 x i32> %41, i32 %43, i32 1
  %45 = trunc i64 %38 to i32
  %46 = or i32 %45, 2
  %47 = insertelement <16 x i32> %44, i32 %46, i32 2
  %48 = trunc i64 %38 to i32
  %49 = or i32 %48, 3
  %50 = insertelement <16 x i32> %47, i32 %49, i32 3
  %51 = trunc i64 %38 to i32
  %52 = or i32 %51, 4
  %53 = insertelement <16 x i32> %50, i32 %52, i32 4
  %54 = trunc i64 %38 to i32
  %55 = or i32 %54, 5
  %56 = insertelement <16 x i32> %53, i32 %55, i32 5
  %57 = trunc i64 %38 to i32
  %58 = or i32 %57, 6
  %59 = insertelement <16 x i32> %56, i32 %58, i32 6
  %60 = trunc i64 %38 to i32
  %61 = or i32 %60, 7
  %62 = insertelement <16 x i32> %59, i32 %61, i32 7
  %63 = trunc i64 %38 to i32
  %64 = or i32 %63, 8
  %65 = insertelement <16 x i32> %62, i32 %64, i32 8
  %66 = trunc i64 %38 to i32
  %67 = or i32 %66, 9
  %68 = insertelement <16 x i32> %65, i32 %67, i32 9
  %69 = trunc i64 %38 to i32
  %70 = or i32 %69, 10
  %71 = insertelement <16 x i32> %68, i32 %70, i32 10
  %72 = trunc i64 %38 to i32
  %73 = or i32 %72, 11
  %74 = insertelement <16 x i32> %71, i32 %73, i32 11
  %75 = trunc i64 %38 to i32
  %76 = or i32 %75, 12
  %77 = insertelement <16 x i32> %74, i32 %76, i32 12
  %78 = trunc i64 %38 to i32
  %79 = or i32 %78, 13
  %80 = insertelement <16 x i32> %77, i32 %79, i32 13
  %81 = trunc i64 %38 to i32
  %82 = or i32 %81, 14
  %83 = insertelement <16 x i32> %80, i32 %82, i32 14
  %84 = trunc i64 %38 to i32
  %85 = or i32 %84, 15
  %86 = insertelement <16 x i32> %83, i32 %85, i32 15
  %87 = sdiv <16 x i32> %86, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %88 = mul <16 x i32> %87, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %.decomposed12 = sub <16 x i32> %86, %88
  %89 = add nsw <16 x i32> %.decomposed12, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %90 = icmp sgt <16 x i32> %.decomposed12, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %91 = select <16 x i1> %90, <16 x i32> %.decomposed12, <16 x i32> %89
  %not. = xor <16 x i1> %90, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %92 = zext <16 x i1> %not. to <16 x i32>
  %93 = sub nsw <16 x i32> %87, %92
  %94 = mul nsw <16 x i32> %93, <i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088>
  %95 = add <16 x i32> %36, %91
  %96 = add <16 x i32> %95, %94
  %97 = extractelement <16 x i32> %96, i64 0
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds float, float* %7, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !5930
  %101 = insertelement <16 x float> undef, float %100, i32 0
  %102 = extractelement <16 x i32> %96, i64 1
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !5930
  %106 = insertelement <16 x float> %101, float %105, i32 1
  %107 = extractelement <16 x i32> %96, i64 2
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float* %7, i64 %108
  %110 = load float, float* %109, align 4, !tbaa !5930
  %111 = insertelement <16 x float> %106, float %110, i32 2
  %112 = extractelement <16 x i32> %96, i64 3
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds float, float* %7, i64 %113
  %115 = load float, float* %114, align 4, !tbaa !5930
  %116 = insertelement <16 x float> %111, float %115, i32 3
  %117 = extractelement <16 x i32> %96, i64 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds float, float* %7, i64 %118
  %120 = load float, float* %119, align 4, !tbaa !5930
  %121 = insertelement <16 x float> %116, float %120, i32 4
  %122 = extractelement <16 x i32> %96, i64 5
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds float, float* %7, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !5930
  %126 = insertelement <16 x float> %121, float %125, i32 5
  %127 = extractelement <16 x i32> %96, i64 6
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds float, float* %7, i64 %128
  %130 = load float, float* %129, align 4, !tbaa !5930
  %131 = insertelement <16 x float> %126, float %130, i32 6
  %132 = extractelement <16 x i32> %96, i64 7
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds float, float* %7, i64 %133
  %135 = load float, float* %134, align 4, !tbaa !5930
  %136 = insertelement <16 x float> %131, float %135, i32 7
  %137 = extractelement <16 x i32> %96, i64 8
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds float, float* %7, i64 %138
  %140 = load float, float* %139, align 4, !tbaa !5930
  %141 = insertelement <16 x float> %136, float %140, i32 8
  %142 = extractelement <16 x i32> %96, i64 9
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = load float, float* %144, align 4, !tbaa !5930
  %146 = insertelement <16 x float> %141, float %145, i32 9
  %147 = extractelement <16 x i32> %96, i64 10
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds float, float* %7, i64 %148
  %150 = load float, float* %149, align 4, !tbaa !5930
  %151 = insertelement <16 x float> %146, float %150, i32 10
  %152 = extractelement <16 x i32> %96, i64 11
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds float, float* %7, i64 %153
  %155 = load float, float* %154, align 4, !tbaa !5930
  %156 = insertelement <16 x float> %151, float %155, i32 11
  %157 = extractelement <16 x i32> %96, i64 12
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds float, float* %7, i64 %158
  %160 = load float, float* %159, align 4, !tbaa !5930
  %161 = insertelement <16 x float> %156, float %160, i32 12
  %162 = extractelement <16 x i32> %96, i64 13
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds float, float* %7, i64 %163
  %165 = load float, float* %164, align 4, !tbaa !5930
  %166 = insertelement <16 x float> %161, float %165, i32 13
  %167 = extractelement <16 x i32> %96, i64 14
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds float, float* %7, i64 %168
  %170 = load float, float* %169, align 4, !tbaa !5930
  %171 = insertelement <16 x float> %166, float %170, i32 14
  %172 = extractelement <16 x i32> %96, i64 15
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds float, float* %7, i64 %173
  %175 = load float, float* %174, align 4, !tbaa !5930
  %176 = insertelement <16 x float> %171, float %175, i32 15
  %177 = getelementptr inbounds float, float* %4, i64 %39
  %178 = bitcast float* %177 to <16 x float>*
  store <16 x float> %176, <16 x float>* %178, align 64, !tbaa !5933
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 28
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_1(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.386, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !5936
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !5950
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !5953
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.387, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !5955
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.388, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.389, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.390, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !5957
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !5971
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 16
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.100, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !5973
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 56
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !5976
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 56
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !5978
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 16
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !5982
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 802816
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !5996
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 50176
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !5998
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 896
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !6001
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 16
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !6003
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.391, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !6007
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 16
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !6021
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 16
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !6023
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !6026
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !6028
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 16
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !6032
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 32
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.227, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !6034
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 8192
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !6048
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 512
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !6050
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 512
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !6053
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 512
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !6055
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 32
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !6059
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.392, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !6061
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !6075
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 16
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !6077
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !6080
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !6082
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 32
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.229, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !6086
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 512
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !6100
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 32
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !6102
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 32
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !6105
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 32
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !6107
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.230, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !6111
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !6125
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 16
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !6127
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 28
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !6130
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 28
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.113, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !6132
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 32
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.231, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !6136
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 401408
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !6150
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 25088
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !6152
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 896
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !6155
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 32
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !6157
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.232, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_1_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_1_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = alloca %38, align 8
  %6 = getelementptr inbounds %38, %38* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %38, %38* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %38, %38* %5, i64 0, i32 2
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %38, %38* %5, i64 0, i32 3
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %38, %38* %5, i64 0, i32 4
  store i32 %4, i32* %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %38* %5 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.393, i8* nonnull %12, i32 0)
  ret i32 %13
}

define private i32 @__tvm_parallel_lambda.393(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 447
  %20 = sdiv i32 %19, %18
  %21 = add nsw i32 %0, 1
  %22 = mul nsw i32 %20, %21
  %23 = icmp slt i32 %22, 448
  %24 = select i1 %23, i32 %22, i32 448
  %25 = mul nsw i32 %20, %0
  %26 = icmp slt i32 %25, 448
  %27 = select i1 %26, i32 %25, i32 448
  %28 = icmp slt i32 %27, %24
  br i1 %28, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %29 = sext i32 %27 to i64
  %30 = sext i32 %24 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_begin10.preheader
  %indvars.iv36 = phi i64 [ %29, %for_body.preheader ], [ %indvars.iv.next37, %for_begin10.preheader ]
  %31 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %32 = tail call i8* %31(i32 1, i32 %16, i64 3584, i32 2, i32 32)
  %33 = bitcast i8* %32 to float*
  %34 = trunc i64 %indvars.iv36 to i32
  %35 = sdiv i32 %34, 28
  %36 = mul i32 %35, 28
  %.decomposed = sub i32 %34, %36
  %37 = mul nsw i32 %.decomposed, 1792
  %38 = shl i32 %35, 13
  %39 = sext i32 %38 to i64
  %40 = sext i32 %37 to i64
  br label %for_body2

for_end:                                          ; preds = %for_begin10.preheader, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end6
  %41 = mul nsw i64 %indvars.iv36, 896
  %42 = shl nsw i32 %35, 5
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds float, float* %13, i64 %43
  %45 = bitcast float* %44 to <32 x float>*
  %46 = load <32 x float>, <32 x float>* %45, align 128, !tbaa !6161
  %47 = bitcast i8* %32 to <32 x float>*
  %48 = load <32 x float>, <32 x float>* %47, align 128, !tbaa !6164
  %49 = fadd <32 x float> %46, %48
  %50 = getelementptr inbounds float, float* %10, i64 %41
  %51 = bitcast float* %50 to <32 x float>*
  store <32 x float> %49, <32 x float>* %51, align 128, !tbaa !6167
  %52 = getelementptr inbounds i8, i8* %32, i64 128
  %53 = bitcast i8* %52 to <32 x float>*
  %54 = load <32 x float>, <32 x float>* %53, align 128, !tbaa !6164
  %55 = fadd <32 x float> %46, %54
  %56 = mul i64 %indvars.iv36, 3848290697216
  %sext = ashr exact i64 %56, 32
  %57 = or i64 %sext, 32
  %58 = getelementptr inbounds float, float* %10, i64 %57
  %59 = bitcast float* %58 to <32 x float>*
  store <32 x float> %55, <32 x float>* %59, align 128, !tbaa !6167
  %60 = getelementptr inbounds i8, i8* %32, i64 256
  %61 = bitcast i8* %60 to <32 x float>*
  %62 = load <32 x float>, <32 x float>* %61, align 128, !tbaa !6164
  %63 = fadd <32 x float> %46, %62
  %64 = mul i64 %indvars.iv36, 3848290697216
  %sext38 = ashr exact i64 %64, 32
  %65 = or i64 %sext38, 64
  %66 = getelementptr inbounds float, float* %10, i64 %65
  %67 = bitcast float* %66 to <32 x float>*
  store <32 x float> %63, <32 x float>* %67, align 128, !tbaa !6167
  %68 = getelementptr inbounds i8, i8* %32, i64 384
  %69 = bitcast i8* %68 to <32 x float>*
  %70 = load <32 x float>, <32 x float>* %69, align 128, !tbaa !6164
  %71 = fadd <32 x float> %46, %70
  %72 = mul i64 %indvars.iv36, 3848290697216
  %sext39 = ashr exact i64 %72, 32
  %73 = or i64 %sext39, 96
  %74 = getelementptr inbounds float, float* %10, i64 %73
  %75 = bitcast float* %74 to <32 x float>*
  store <32 x float> %71, <32 x float>* %75, align 128, !tbaa !6167
  %76 = getelementptr inbounds i8, i8* %32, i64 512
  %77 = bitcast i8* %76 to <32 x float>*
  %78 = load <32 x float>, <32 x float>* %77, align 128, !tbaa !6164
  %79 = fadd <32 x float> %46, %78
  %80 = mul i64 %indvars.iv36, 3848290697216
  %sext40 = add i64 %80, 549755813888
  %81 = ashr exact i64 %sext40, 32
  %82 = getelementptr inbounds float, float* %10, i64 %81
  %83 = bitcast float* %82 to <32 x float>*
  store <32 x float> %79, <32 x float>* %83, align 128, !tbaa !6167
  %84 = getelementptr inbounds i8, i8* %32, i64 640
  %85 = bitcast i8* %84 to <32 x float>*
  %86 = load <32 x float>, <32 x float>* %85, align 128, !tbaa !6164
  %87 = fadd <32 x float> %46, %86
  %88 = mul i64 %indvars.iv36, 3848290697216
  %sext41 = add i64 %88, 687194767360
  %89 = ashr exact i64 %sext41, 32
  %90 = getelementptr inbounds float, float* %10, i64 %89
  %91 = bitcast float* %90 to <32 x float>*
  store <32 x float> %87, <32 x float>* %91, align 128, !tbaa !6167
  %92 = getelementptr inbounds i8, i8* %32, i64 768
  %93 = bitcast i8* %92 to <32 x float>*
  %94 = load <32 x float>, <32 x float>* %93, align 128, !tbaa !6164
  %95 = fadd <32 x float> %46, %94
  %96 = mul i64 %indvars.iv36, 3848290697216
  %sext42 = add i64 %96, 824633720832
  %97 = ashr exact i64 %sext42, 32
  %98 = getelementptr inbounds float, float* %10, i64 %97
  %99 = bitcast float* %98 to <32 x float>*
  store <32 x float> %95, <32 x float>* %99, align 128, !tbaa !6167
  %100 = getelementptr inbounds i8, i8* %32, i64 896
  %101 = bitcast i8* %100 to <32 x float>*
  %102 = load <32 x float>, <32 x float>* %101, align 128, !tbaa !6164
  %103 = fadd <32 x float> %46, %102
  %104 = mul i64 %indvars.iv36, 3848290697216
  %sext43 = add i64 %104, 962072674304
  %105 = ashr exact i64 %sext43, 32
  %106 = getelementptr inbounds float, float* %10, i64 %105
  %107 = bitcast float* %106 to <32 x float>*
  store <32 x float> %103, <32 x float>* %107, align 128, !tbaa !6167
  %108 = getelementptr inbounds i8, i8* %32, i64 1024
  %109 = bitcast i8* %108 to <32 x float>*
  %110 = load <32 x float>, <32 x float>* %109, align 128, !tbaa !6164
  %111 = fadd <32 x float> %46, %110
  %112 = mul i64 %indvars.iv36, 3848290697216
  %sext44 = add i64 %112, 1099511627776
  %113 = ashr exact i64 %sext44, 32
  %114 = getelementptr inbounds float, float* %10, i64 %113
  %115 = bitcast float* %114 to <32 x float>*
  store <32 x float> %111, <32 x float>* %115, align 128, !tbaa !6167
  %116 = getelementptr inbounds i8, i8* %32, i64 1152
  %117 = bitcast i8* %116 to <32 x float>*
  %118 = load <32 x float>, <32 x float>* %117, align 128, !tbaa !6164
  %119 = fadd <32 x float> %46, %118
  %120 = mul i64 %indvars.iv36, 3848290697216
  %sext45 = add i64 %120, 1236950581248
  %121 = ashr exact i64 %sext45, 32
  %122 = getelementptr inbounds float, float* %10, i64 %121
  %123 = bitcast float* %122 to <32 x float>*
  store <32 x float> %119, <32 x float>* %123, align 128, !tbaa !6167
  %124 = getelementptr inbounds i8, i8* %32, i64 1280
  %125 = bitcast i8* %124 to <32 x float>*
  %126 = load <32 x float>, <32 x float>* %125, align 128, !tbaa !6164
  %127 = fadd <32 x float> %46, %126
  %128 = mul i64 %indvars.iv36, 3848290697216
  %sext46 = add i64 %128, 1374389534720
  %129 = ashr exact i64 %sext46, 32
  %130 = getelementptr inbounds float, float* %10, i64 %129
  %131 = bitcast float* %130 to <32 x float>*
  store <32 x float> %127, <32 x float>* %131, align 128, !tbaa !6167
  %132 = getelementptr inbounds i8, i8* %32, i64 1408
  %133 = bitcast i8* %132 to <32 x float>*
  %134 = load <32 x float>, <32 x float>* %133, align 128, !tbaa !6164
  %135 = fadd <32 x float> %46, %134
  %136 = mul i64 %indvars.iv36, 3848290697216
  %sext47 = add i64 %136, 1511828488192
  %137 = ashr exact i64 %sext47, 32
  %138 = getelementptr inbounds float, float* %10, i64 %137
  %139 = bitcast float* %138 to <32 x float>*
  store <32 x float> %135, <32 x float>* %139, align 128, !tbaa !6167
  %140 = getelementptr inbounds i8, i8* %32, i64 1536
  %141 = bitcast i8* %140 to <32 x float>*
  %142 = load <32 x float>, <32 x float>* %141, align 128, !tbaa !6164
  %143 = fadd <32 x float> %46, %142
  %144 = mul i64 %indvars.iv36, 3848290697216
  %sext48 = add i64 %144, 1649267441664
  %145 = ashr exact i64 %sext48, 32
  %146 = getelementptr inbounds float, float* %10, i64 %145
  %147 = bitcast float* %146 to <32 x float>*
  store <32 x float> %143, <32 x float>* %147, align 128, !tbaa !6167
  %148 = getelementptr inbounds i8, i8* %32, i64 1664
  %149 = bitcast i8* %148 to <32 x float>*
  %150 = load <32 x float>, <32 x float>* %149, align 128, !tbaa !6164
  %151 = fadd <32 x float> %46, %150
  %152 = mul i64 %indvars.iv36, 3848290697216
  %sext49 = add i64 %152, 1786706395136
  %153 = ashr exact i64 %sext49, 32
  %154 = getelementptr inbounds float, float* %10, i64 %153
  %155 = bitcast float* %154 to <32 x float>*
  store <32 x float> %151, <32 x float>* %155, align 128, !tbaa !6167
  %156 = getelementptr inbounds i8, i8* %32, i64 1792
  %157 = bitcast i8* %156 to <32 x float>*
  %158 = load <32 x float>, <32 x float>* %157, align 128, !tbaa !6164
  %159 = fadd <32 x float> %46, %158
  %160 = mul i64 %indvars.iv36, 3848290697216
  %sext50 = add i64 %160, 1924145348608
  %161 = ashr exact i64 %sext50, 32
  %162 = getelementptr inbounds float, float* %10, i64 %161
  %163 = bitcast float* %162 to <32 x float>*
  store <32 x float> %159, <32 x float>* %163, align 128, !tbaa !6167
  %164 = getelementptr inbounds i8, i8* %32, i64 1920
  %165 = bitcast i8* %164 to <32 x float>*
  %166 = load <32 x float>, <32 x float>* %165, align 128, !tbaa !6164
  %167 = fadd <32 x float> %46, %166
  %168 = mul i64 %indvars.iv36, 3848290697216
  %sext51 = add i64 %168, 2061584302080
  %169 = ashr exact i64 %sext51, 32
  %170 = getelementptr inbounds float, float* %10, i64 %169
  %171 = bitcast float* %170 to <32 x float>*
  store <32 x float> %167, <32 x float>* %171, align 128, !tbaa !6167
  %172 = getelementptr inbounds i8, i8* %32, i64 2048
  %173 = bitcast i8* %172 to <32 x float>*
  %174 = load <32 x float>, <32 x float>* %173, align 128, !tbaa !6164
  %175 = fadd <32 x float> %46, %174
  %176 = mul i64 %indvars.iv36, 3848290697216
  %sext52 = add i64 %176, 2199023255552
  %177 = ashr exact i64 %sext52, 32
  %178 = getelementptr inbounds float, float* %10, i64 %177
  %179 = bitcast float* %178 to <32 x float>*
  store <32 x float> %175, <32 x float>* %179, align 128, !tbaa !6167
  %180 = getelementptr inbounds i8, i8* %32, i64 2176
  %181 = bitcast i8* %180 to <32 x float>*
  %182 = load <32 x float>, <32 x float>* %181, align 128, !tbaa !6164
  %183 = fadd <32 x float> %46, %182
  %184 = mul i64 %indvars.iv36, 3848290697216
  %sext53 = add i64 %184, 2336462209024
  %185 = ashr exact i64 %sext53, 32
  %186 = getelementptr inbounds float, float* %10, i64 %185
  %187 = bitcast float* %186 to <32 x float>*
  store <32 x float> %183, <32 x float>* %187, align 128, !tbaa !6167
  %188 = getelementptr inbounds i8, i8* %32, i64 2304
  %189 = bitcast i8* %188 to <32 x float>*
  %190 = load <32 x float>, <32 x float>* %189, align 128, !tbaa !6164
  %191 = fadd <32 x float> %46, %190
  %192 = mul i64 %indvars.iv36, 3848290697216
  %sext54 = add i64 %192, 2473901162496
  %193 = ashr exact i64 %sext54, 32
  %194 = getelementptr inbounds float, float* %10, i64 %193
  %195 = bitcast float* %194 to <32 x float>*
  store <32 x float> %191, <32 x float>* %195, align 128, !tbaa !6167
  %196 = getelementptr inbounds i8, i8* %32, i64 2432
  %197 = bitcast i8* %196 to <32 x float>*
  %198 = load <32 x float>, <32 x float>* %197, align 128, !tbaa !6164
  %199 = fadd <32 x float> %46, %198
  %200 = mul i64 %indvars.iv36, 3848290697216
  %sext55 = add i64 %200, 2611340115968
  %201 = ashr exact i64 %sext55, 32
  %202 = getelementptr inbounds float, float* %10, i64 %201
  %203 = bitcast float* %202 to <32 x float>*
  store <32 x float> %199, <32 x float>* %203, align 128, !tbaa !6167
  %204 = getelementptr inbounds i8, i8* %32, i64 2560
  %205 = bitcast i8* %204 to <32 x float>*
  %206 = load <32 x float>, <32 x float>* %205, align 128, !tbaa !6164
  %207 = fadd <32 x float> %46, %206
  %208 = mul i64 %indvars.iv36, 3848290697216
  %sext56 = add i64 %208, 2748779069440
  %209 = ashr exact i64 %sext56, 32
  %210 = getelementptr inbounds float, float* %10, i64 %209
  %211 = bitcast float* %210 to <32 x float>*
  store <32 x float> %207, <32 x float>* %211, align 128, !tbaa !6167
  %212 = getelementptr inbounds i8, i8* %32, i64 2688
  %213 = bitcast i8* %212 to <32 x float>*
  %214 = load <32 x float>, <32 x float>* %213, align 128, !tbaa !6164
  %215 = fadd <32 x float> %46, %214
  %216 = mul i64 %indvars.iv36, 3848290697216
  %sext57 = add i64 %216, 2886218022912
  %217 = ashr exact i64 %sext57, 32
  %218 = getelementptr inbounds float, float* %10, i64 %217
  %219 = bitcast float* %218 to <32 x float>*
  store <32 x float> %215, <32 x float>* %219, align 128, !tbaa !6167
  %220 = getelementptr inbounds i8, i8* %32, i64 2816
  %221 = bitcast i8* %220 to <32 x float>*
  %222 = load <32 x float>, <32 x float>* %221, align 128, !tbaa !6164
  %223 = fadd <32 x float> %46, %222
  %224 = mul i64 %indvars.iv36, 3848290697216
  %sext58 = add i64 %224, 3023656976384
  %225 = ashr exact i64 %sext58, 32
  %226 = getelementptr inbounds float, float* %10, i64 %225
  %227 = bitcast float* %226 to <32 x float>*
  store <32 x float> %223, <32 x float>* %227, align 128, !tbaa !6167
  %228 = getelementptr inbounds i8, i8* %32, i64 2944
  %229 = bitcast i8* %228 to <32 x float>*
  %230 = load <32 x float>, <32 x float>* %229, align 128, !tbaa !6164
  %231 = fadd <32 x float> %46, %230
  %232 = mul i64 %indvars.iv36, 3848290697216
  %sext59 = add i64 %232, 3161095929856
  %233 = ashr exact i64 %sext59, 32
  %234 = getelementptr inbounds float, float* %10, i64 %233
  %235 = bitcast float* %234 to <32 x float>*
  store <32 x float> %231, <32 x float>* %235, align 128, !tbaa !6167
  %236 = getelementptr inbounds i8, i8* %32, i64 3072
  %237 = bitcast i8* %236 to <32 x float>*
  %238 = load <32 x float>, <32 x float>* %237, align 128, !tbaa !6164
  %239 = fadd <32 x float> %46, %238
  %240 = mul i64 %indvars.iv36, 3848290697216
  %sext60 = add i64 %240, 3298534883328
  %241 = ashr exact i64 %sext60, 32
  %242 = getelementptr inbounds float, float* %10, i64 %241
  %243 = bitcast float* %242 to <32 x float>*
  store <32 x float> %239, <32 x float>* %243, align 128, !tbaa !6167
  %244 = getelementptr inbounds i8, i8* %32, i64 3200
  %245 = bitcast i8* %244 to <32 x float>*
  %246 = load <32 x float>, <32 x float>* %245, align 128, !tbaa !6164
  %247 = fadd <32 x float> %46, %246
  %248 = mul i64 %indvars.iv36, 3848290697216
  %sext61 = add i64 %248, 3435973836800
  %249 = ashr exact i64 %sext61, 32
  %250 = getelementptr inbounds float, float* %10, i64 %249
  %251 = bitcast float* %250 to <32 x float>*
  store <32 x float> %247, <32 x float>* %251, align 128, !tbaa !6167
  %252 = getelementptr inbounds i8, i8* %32, i64 3328
  %253 = bitcast i8* %252 to <32 x float>*
  %254 = load <32 x float>, <32 x float>* %253, align 128, !tbaa !6164
  %255 = fadd <32 x float> %46, %254
  %256 = mul i64 %indvars.iv36, 3848290697216
  %sext62 = add i64 %256, 3573412790272
  %257 = ashr exact i64 %sext62, 32
  %258 = getelementptr inbounds float, float* %10, i64 %257
  %259 = bitcast float* %258 to <32 x float>*
  store <32 x float> %255, <32 x float>* %259, align 128, !tbaa !6167
  %260 = getelementptr inbounds i8, i8* %32, i64 3456
  %261 = bitcast i8* %260 to <32 x float>*
  %262 = load <32 x float>, <32 x float>* %261, align 128, !tbaa !6164
  %263 = fadd <32 x float> %46, %262
  %264 = mul i64 %indvars.iv36, 3848290697216
  %sext63 = add i64 %264, 3710851743744
  %265 = ashr exact i64 %sext63, 32
  %266 = getelementptr inbounds float, float* %10, i64 %265
  %267 = bitcast float* %266 to <32 x float>*
  store <32 x float> %263, <32 x float>* %267, align 128, !tbaa !6167
  %268 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %269 = tail call i32 %268(i32 1, i32 %16, i8* nonnull %32)
  %indvars.iv.next37 = add nsw i64 %indvars.iv36, 1
  %270 = icmp slt i64 %indvars.iv.next37, %30
  br i1 %270, label %for_body, label %for_end, !prof !5

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv27 = phi i64 [ 0, %for_body ], [ %indvars.iv.next28, %for_end6 ]
  %271 = shl nsw i64 %indvars.iv27, 6
  %272 = getelementptr inbounds float, float* %33, i64 %271
  %273 = bitcast float* %272 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %273, align 128, !tbaa !6164
  %274 = or i64 %271, 32
  %275 = getelementptr inbounds float, float* %33, i64 %274
  %276 = bitcast float* %275 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %276, align 128, !tbaa !6164
  %277 = add nsw i64 %271, %40
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_begin7.preheader, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_begin7.preheader ]
  %.lcssa2225 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %535, %for_begin7.preheader ]
  %.lcssa24 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %529, %for_begin7.preheader ]
  %278 = mul nuw nsw i64 %indvars.iv, 50176
  %279 = add nsw i64 %277, %278
  %280 = shl i64 %indvars.iv, 9
  %281 = add nuw nsw i64 %280, %39
  %282 = getelementptr inbounds float, float* %4, i64 %279
  %283 = load float, float* %282, align 4, !tbaa !6170
  %284 = insertelement <32 x float> undef, float %283, i32 0
  %285 = shufflevector <32 x float> %284, <32 x float> undef, <32 x i32> zeroinitializer
  %286 = getelementptr inbounds float, float* %7, i64 %281
  %287 = bitcast float* %286 to <32 x float>*
  %288 = load <32 x float>, <32 x float>* %287, align 128, !tbaa !6173
  %289 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %285, <32 x float> %288, <32 x float> %.lcssa24)
  %290 = or i64 %279, 32
  %291 = getelementptr inbounds float, float* %4, i64 %290
  %292 = load float, float* %291, align 4, !tbaa !6170
  %293 = insertelement <32 x float> undef, float %292, i32 0
  %294 = shufflevector <32 x float> %293, <32 x float> undef, <32 x i32> zeroinitializer
  %295 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %294, <32 x float> %288, <32 x float> %.lcssa2225)
  %296 = or i64 %279, 1
  %297 = getelementptr inbounds float, float* %4, i64 %296
  %298 = load float, float* %297, align 4, !tbaa !6170
  %299 = insertelement <32 x float> undef, float %298, i32 0
  %300 = shufflevector <32 x float> %299, <32 x float> undef, <32 x i32> zeroinitializer
  %301 = or i64 %281, 32
  %302 = getelementptr inbounds float, float* %7, i64 %301
  %303 = bitcast float* %302 to <32 x float>*
  %304 = load <32 x float>, <32 x float>* %303, align 128, !tbaa !6173
  %305 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %300, <32 x float> %304, <32 x float> %289)
  %306 = or i64 %279, 33
  %307 = getelementptr inbounds float, float* %4, i64 %306
  %308 = load float, float* %307, align 4, !tbaa !6170
  %309 = insertelement <32 x float> undef, float %308, i32 0
  %310 = shufflevector <32 x float> %309, <32 x float> undef, <32 x i32> zeroinitializer
  %311 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %310, <32 x float> %304, <32 x float> %295)
  %312 = or i64 %279, 2
  %313 = getelementptr inbounds float, float* %4, i64 %312
  %314 = load float, float* %313, align 4, !tbaa !6170
  %315 = insertelement <32 x float> undef, float %314, i32 0
  %316 = shufflevector <32 x float> %315, <32 x float> undef, <32 x i32> zeroinitializer
  %317 = or i64 %281, 64
  %318 = getelementptr inbounds float, float* %7, i64 %317
  %319 = bitcast float* %318 to <32 x float>*
  %320 = load <32 x float>, <32 x float>* %319, align 128, !tbaa !6173
  %321 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %316, <32 x float> %320, <32 x float> %305)
  %322 = or i64 %279, 34
  %323 = getelementptr inbounds float, float* %4, i64 %322
  %324 = load float, float* %323, align 4, !tbaa !6170
  %325 = insertelement <32 x float> undef, float %324, i32 0
  %326 = shufflevector <32 x float> %325, <32 x float> undef, <32 x i32> zeroinitializer
  %327 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %326, <32 x float> %320, <32 x float> %311)
  %328 = or i64 %279, 3
  %329 = getelementptr inbounds float, float* %4, i64 %328
  %330 = load float, float* %329, align 4, !tbaa !6170
  %331 = insertelement <32 x float> undef, float %330, i32 0
  %332 = shufflevector <32 x float> %331, <32 x float> undef, <32 x i32> zeroinitializer
  %333 = or i64 %281, 96
  %334 = getelementptr inbounds float, float* %7, i64 %333
  %335 = bitcast float* %334 to <32 x float>*
  %336 = load <32 x float>, <32 x float>* %335, align 128, !tbaa !6173
  %337 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %332, <32 x float> %336, <32 x float> %321)
  %338 = or i64 %279, 35
  %339 = getelementptr inbounds float, float* %4, i64 %338
  %340 = load float, float* %339, align 4, !tbaa !6170
  %341 = insertelement <32 x float> undef, float %340, i32 0
  %342 = shufflevector <32 x float> %341, <32 x float> undef, <32 x i32> zeroinitializer
  %343 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %342, <32 x float> %336, <32 x float> %327)
  %344 = or i64 %279, 4
  %345 = getelementptr inbounds float, float* %4, i64 %344
  %346 = load float, float* %345, align 4, !tbaa !6170
  %347 = insertelement <32 x float> undef, float %346, i32 0
  %348 = shufflevector <32 x float> %347, <32 x float> undef, <32 x i32> zeroinitializer
  %349 = or i64 %281, 128
  %350 = getelementptr inbounds float, float* %7, i64 %349
  %351 = bitcast float* %350 to <32 x float>*
  %352 = load <32 x float>, <32 x float>* %351, align 128, !tbaa !6173
  %353 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %348, <32 x float> %352, <32 x float> %337)
  %354 = or i64 %279, 36
  %355 = getelementptr inbounds float, float* %4, i64 %354
  %356 = load float, float* %355, align 4, !tbaa !6170
  %357 = insertelement <32 x float> undef, float %356, i32 0
  %358 = shufflevector <32 x float> %357, <32 x float> undef, <32 x i32> zeroinitializer
  %359 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %358, <32 x float> %352, <32 x float> %343)
  %360 = or i64 %279, 5
  %361 = getelementptr inbounds float, float* %4, i64 %360
  %362 = load float, float* %361, align 4, !tbaa !6170
  %363 = insertelement <32 x float> undef, float %362, i32 0
  %364 = shufflevector <32 x float> %363, <32 x float> undef, <32 x i32> zeroinitializer
  %365 = or i64 %281, 160
  %366 = getelementptr inbounds float, float* %7, i64 %365
  %367 = bitcast float* %366 to <32 x float>*
  %368 = load <32 x float>, <32 x float>* %367, align 128, !tbaa !6173
  %369 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %364, <32 x float> %368, <32 x float> %353)
  %370 = or i64 %279, 37
  %371 = getelementptr inbounds float, float* %4, i64 %370
  %372 = load float, float* %371, align 4, !tbaa !6170
  %373 = insertelement <32 x float> undef, float %372, i32 0
  %374 = shufflevector <32 x float> %373, <32 x float> undef, <32 x i32> zeroinitializer
  %375 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %374, <32 x float> %368, <32 x float> %359)
  %376 = or i64 %279, 6
  %377 = getelementptr inbounds float, float* %4, i64 %376
  %378 = load float, float* %377, align 4, !tbaa !6170
  %379 = insertelement <32 x float> undef, float %378, i32 0
  %380 = shufflevector <32 x float> %379, <32 x float> undef, <32 x i32> zeroinitializer
  %381 = or i64 %281, 192
  %382 = getelementptr inbounds float, float* %7, i64 %381
  %383 = bitcast float* %382 to <32 x float>*
  %384 = load <32 x float>, <32 x float>* %383, align 128, !tbaa !6173
  %385 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %380, <32 x float> %384, <32 x float> %369)
  %386 = or i64 %279, 38
  %387 = getelementptr inbounds float, float* %4, i64 %386
  %388 = load float, float* %387, align 4, !tbaa !6170
  %389 = insertelement <32 x float> undef, float %388, i32 0
  %390 = shufflevector <32 x float> %389, <32 x float> undef, <32 x i32> zeroinitializer
  %391 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %390, <32 x float> %384, <32 x float> %375)
  %392 = or i64 %279, 7
  %393 = getelementptr inbounds float, float* %4, i64 %392
  %394 = load float, float* %393, align 4, !tbaa !6170
  %395 = insertelement <32 x float> undef, float %394, i32 0
  %396 = shufflevector <32 x float> %395, <32 x float> undef, <32 x i32> zeroinitializer
  %397 = or i64 %281, 224
  %398 = getelementptr inbounds float, float* %7, i64 %397
  %399 = bitcast float* %398 to <32 x float>*
  %400 = load <32 x float>, <32 x float>* %399, align 128, !tbaa !6173
  %401 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %396, <32 x float> %400, <32 x float> %385)
  %402 = or i64 %279, 39
  %403 = getelementptr inbounds float, float* %4, i64 %402
  %404 = load float, float* %403, align 4, !tbaa !6170
  %405 = insertelement <32 x float> undef, float %404, i32 0
  %406 = shufflevector <32 x float> %405, <32 x float> undef, <32 x i32> zeroinitializer
  %407 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %406, <32 x float> %400, <32 x float> %391)
  %408 = or i64 %279, 8
  %409 = getelementptr inbounds float, float* %4, i64 %408
  %410 = load float, float* %409, align 4, !tbaa !6170
  %411 = insertelement <32 x float> undef, float %410, i32 0
  %412 = shufflevector <32 x float> %411, <32 x float> undef, <32 x i32> zeroinitializer
  %413 = or i64 %281, 256
  %414 = getelementptr inbounds float, float* %7, i64 %413
  %415 = bitcast float* %414 to <32 x float>*
  %416 = load <32 x float>, <32 x float>* %415, align 128, !tbaa !6173
  %417 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %412, <32 x float> %416, <32 x float> %401)
  %418 = or i64 %279, 40
  %419 = getelementptr inbounds float, float* %4, i64 %418
  %420 = load float, float* %419, align 4, !tbaa !6170
  %421 = insertelement <32 x float> undef, float %420, i32 0
  %422 = shufflevector <32 x float> %421, <32 x float> undef, <32 x i32> zeroinitializer
  %423 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %422, <32 x float> %416, <32 x float> %407)
  %424 = or i64 %279, 9
  %425 = getelementptr inbounds float, float* %4, i64 %424
  %426 = load float, float* %425, align 4, !tbaa !6170
  %427 = insertelement <32 x float> undef, float %426, i32 0
  %428 = shufflevector <32 x float> %427, <32 x float> undef, <32 x i32> zeroinitializer
  %429 = or i64 %281, 288
  %430 = getelementptr inbounds float, float* %7, i64 %429
  %431 = bitcast float* %430 to <32 x float>*
  %432 = load <32 x float>, <32 x float>* %431, align 128, !tbaa !6173
  %433 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %428, <32 x float> %432, <32 x float> %417)
  %434 = or i64 %279, 41
  %435 = getelementptr inbounds float, float* %4, i64 %434
  %436 = load float, float* %435, align 4, !tbaa !6170
  %437 = insertelement <32 x float> undef, float %436, i32 0
  %438 = shufflevector <32 x float> %437, <32 x float> undef, <32 x i32> zeroinitializer
  %439 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %438, <32 x float> %432, <32 x float> %423)
  %440 = or i64 %279, 10
  %441 = getelementptr inbounds float, float* %4, i64 %440
  %442 = load float, float* %441, align 4, !tbaa !6170
  %443 = insertelement <32 x float> undef, float %442, i32 0
  %444 = shufflevector <32 x float> %443, <32 x float> undef, <32 x i32> zeroinitializer
  %445 = or i64 %281, 320
  %446 = getelementptr inbounds float, float* %7, i64 %445
  %447 = bitcast float* %446 to <32 x float>*
  %448 = load <32 x float>, <32 x float>* %447, align 128, !tbaa !6173
  %449 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %444, <32 x float> %448, <32 x float> %433)
  %450 = or i64 %279, 42
  %451 = getelementptr inbounds float, float* %4, i64 %450
  %452 = load float, float* %451, align 4, !tbaa !6170
  %453 = insertelement <32 x float> undef, float %452, i32 0
  %454 = shufflevector <32 x float> %453, <32 x float> undef, <32 x i32> zeroinitializer
  %455 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %454, <32 x float> %448, <32 x float> %439)
  %456 = or i64 %279, 11
  %457 = getelementptr inbounds float, float* %4, i64 %456
  %458 = load float, float* %457, align 4, !tbaa !6170
  %459 = insertelement <32 x float> undef, float %458, i32 0
  %460 = shufflevector <32 x float> %459, <32 x float> undef, <32 x i32> zeroinitializer
  %461 = or i64 %281, 352
  %462 = getelementptr inbounds float, float* %7, i64 %461
  %463 = bitcast float* %462 to <32 x float>*
  %464 = load <32 x float>, <32 x float>* %463, align 128, !tbaa !6173
  %465 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %460, <32 x float> %464, <32 x float> %449)
  %466 = or i64 %279, 43
  %467 = getelementptr inbounds float, float* %4, i64 %466
  %468 = load float, float* %467, align 4, !tbaa !6170
  %469 = insertelement <32 x float> undef, float %468, i32 0
  %470 = shufflevector <32 x float> %469, <32 x float> undef, <32 x i32> zeroinitializer
  %471 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %470, <32 x float> %464, <32 x float> %455)
  %472 = or i64 %279, 12
  %473 = getelementptr inbounds float, float* %4, i64 %472
  %474 = load float, float* %473, align 4, !tbaa !6170
  %475 = insertelement <32 x float> undef, float %474, i32 0
  %476 = shufflevector <32 x float> %475, <32 x float> undef, <32 x i32> zeroinitializer
  %477 = or i64 %281, 384
  %478 = getelementptr inbounds float, float* %7, i64 %477
  %479 = bitcast float* %478 to <32 x float>*
  %480 = load <32 x float>, <32 x float>* %479, align 128, !tbaa !6173
  %481 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %476, <32 x float> %480, <32 x float> %465)
  %482 = or i64 %279, 44
  %483 = getelementptr inbounds float, float* %4, i64 %482
  %484 = load float, float* %483, align 4, !tbaa !6170
  %485 = insertelement <32 x float> undef, float %484, i32 0
  %486 = shufflevector <32 x float> %485, <32 x float> undef, <32 x i32> zeroinitializer
  %487 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %486, <32 x float> %480, <32 x float> %471)
  %488 = or i64 %279, 13
  %489 = getelementptr inbounds float, float* %4, i64 %488
  %490 = load float, float* %489, align 4, !tbaa !6170
  %491 = insertelement <32 x float> undef, float %490, i32 0
  %492 = shufflevector <32 x float> %491, <32 x float> undef, <32 x i32> zeroinitializer
  %493 = or i64 %281, 416
  %494 = getelementptr inbounds float, float* %7, i64 %493
  %495 = bitcast float* %494 to <32 x float>*
  %496 = load <32 x float>, <32 x float>* %495, align 128, !tbaa !6173
  %497 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %492, <32 x float> %496, <32 x float> %481)
  %498 = or i64 %279, 45
  %499 = getelementptr inbounds float, float* %4, i64 %498
  %500 = load float, float* %499, align 4, !tbaa !6170
  %501 = insertelement <32 x float> undef, float %500, i32 0
  %502 = shufflevector <32 x float> %501, <32 x float> undef, <32 x i32> zeroinitializer
  %503 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %502, <32 x float> %496, <32 x float> %487)
  %504 = or i64 %279, 14
  %505 = getelementptr inbounds float, float* %4, i64 %504
  %506 = load float, float* %505, align 4, !tbaa !6170
  %507 = insertelement <32 x float> undef, float %506, i32 0
  %508 = shufflevector <32 x float> %507, <32 x float> undef, <32 x i32> zeroinitializer
  %509 = or i64 %281, 448
  %510 = getelementptr inbounds float, float* %7, i64 %509
  %511 = bitcast float* %510 to <32 x float>*
  %512 = load <32 x float>, <32 x float>* %511, align 128, !tbaa !6173
  %513 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %508, <32 x float> %512, <32 x float> %497)
  %514 = or i64 %279, 46
  %515 = getelementptr inbounds float, float* %4, i64 %514
  %516 = load float, float* %515, align 4, !tbaa !6170
  %517 = insertelement <32 x float> undef, float %516, i32 0
  %518 = shufflevector <32 x float> %517, <32 x float> undef, <32 x i32> zeroinitializer
  %519 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %518, <32 x float> %512, <32 x float> %503)
  %520 = or i64 %279, 15
  %521 = getelementptr inbounds float, float* %4, i64 %520
  %522 = load float, float* %521, align 4, !tbaa !6170
  %523 = insertelement <32 x float> undef, float %522, i32 0
  %524 = shufflevector <32 x float> %523, <32 x float> undef, <32 x i32> zeroinitializer
  %525 = or i64 %281, 480
  %526 = getelementptr inbounds float, float* %7, i64 %525
  %527 = bitcast float* %526 to <32 x float>*
  %528 = load <32 x float>, <32 x float>* %527, align 128, !tbaa !6173
  %529 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %524, <32 x float> %528, <32 x float> %513)
  %530 = or i64 %279, 47
  %531 = getelementptr inbounds float, float* %4, i64 %530
  %532 = load float, float* %531, align 4, !tbaa !6170
  %533 = insertelement <32 x float> undef, float %532, i32 0
  %534 = shufflevector <32 x float> %533, <32 x float> undef, <32 x i32> zeroinitializer
  %535 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %534, <32 x float> %528, <32 x float> %519)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end6, label %for_begin7.preheader, !prof !50

for_end6:                                         ; preds = %for_begin7.preheader
  store <32 x float> %529, <32 x float>* %273, align 128, !tbaa !6164
  store <32 x float> %535, <32 x float>* %276, align 128, !tbaa !6164
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %exitcond29 = icmp eq i64 %indvars.iv.next28, 14
  br i1 %exitcond29, label %for_begin10.preheader, label %for_body2, !prof !50
}

define dllexport i32 @fused_layout_transform_34(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.394, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !6176
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.395, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !6190
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.396, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !6192
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !6206
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 32
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.124, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !6208
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 14
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.125, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !6211
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 14
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.126, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !6213
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 8
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !6217
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 50176
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !6231
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 1568
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !6233
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 112
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !6236
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 8
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !6238
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([236 x i8], [236 x i8]* @.str.127, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !6242
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !6256
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 4
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !6258
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 14
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.164, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !6261
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 14
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.165, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !6263
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 64
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.92, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !6267
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 50176
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !6281
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 12544
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !6283
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 896
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !6286
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 64
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !6288
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.397, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_34_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_34_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %39, align 8
  %3 = getelementptr inbounds %39, %39* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %39, %39* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %39* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.398, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.398(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 55
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 56
  %15 = select i1 %14, i32 %13, i32 56
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 56
  %18 = select i1 %17, i32 %16, i32 56
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv7, 896
  %23 = trunc i64 %indvars.iv7 to i32
  %24 = sdiv i32 %23, 14
  %25 = mul i32 %24, 14
  %.decomposed = sub i32 %23, %25
  %26 = mul nsw i32 %.decomposed, 112
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  %28 = shufflevector <16 x i32> %27, <16 x i32> undef, <16 x i32> zeroinitializer
  %29 = mul nsw i32 %24, 12544
  %30 = add <16 x i32> %28, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 1568, i32 1569, i32 1570, i32 1571, i32 1572, i32 1573, i32 1574, i32 1575>
  %31 = insertelement <16 x i32> undef, i32 %29, i32 0
  %32 = shufflevector <16 x i32> %31, <16 x i32> undef, <16 x i32> zeroinitializer
  %33 = add i32 %29, 3136
  %34 = insertelement <16 x i32> undef, i32 %33, i32 0
  %35 = shufflevector <16 x i32> %34, <16 x i32> undef, <16 x i32> zeroinitializer
  %36 = add i32 %29, 6272
  %37 = insertelement <16 x i32> undef, i32 %36, i32 0
  %38 = shufflevector <16 x i32> %37, <16 x i32> undef, <16 x i32> zeroinitializer
  %39 = add i32 %29, 9408
  %40 = insertelement <16 x i32> undef, i32 %39, i32 0
  %41 = shufflevector <16 x i32> %40, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %42 = shl i64 %indvars.iv, 6
  %43 = add nsw i64 %42, %22
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %44 = shl i32 %indvars.iv.tr, 3
  %45 = insertelement <16 x i32> undef, i32 %44, i32 0
  %46 = shufflevector <16 x i32> %45, <16 x i32> undef, <16 x i32> zeroinitializer
  %47 = add <16 x i32> %30, %46
  %48 = add <16 x i32> %47, %32
  %49 = extractelement <16 x i32> %48, i64 0
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds float, float* %7, i64 %50
  %52 = load float, float* %51, align 4, !tbaa !6292
  %53 = insertelement <16 x float> undef, float %52, i32 0
  %54 = extractelement <16 x i32> %48, i64 1
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds float, float* %7, i64 %55
  %57 = load float, float* %56, align 4, !tbaa !6292
  %58 = insertelement <16 x float> %53, float %57, i32 1
  %59 = extractelement <16 x i32> %48, i64 2
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds float, float* %7, i64 %60
  %62 = load float, float* %61, align 4, !tbaa !6292
  %63 = insertelement <16 x float> %58, float %62, i32 2
  %64 = extractelement <16 x i32> %48, i64 3
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds float, float* %7, i64 %65
  %67 = load float, float* %66, align 4, !tbaa !6292
  %68 = insertelement <16 x float> %63, float %67, i32 3
  %69 = extractelement <16 x i32> %48, i64 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds float, float* %7, i64 %70
  %72 = load float, float* %71, align 4, !tbaa !6292
  %73 = insertelement <16 x float> %68, float %72, i32 4
  %74 = extractelement <16 x i32> %48, i64 5
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds float, float* %7, i64 %75
  %77 = load float, float* %76, align 4, !tbaa !6292
  %78 = insertelement <16 x float> %73, float %77, i32 5
  %79 = extractelement <16 x i32> %48, i64 6
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds float, float* %7, i64 %80
  %82 = load float, float* %81, align 4, !tbaa !6292
  %83 = insertelement <16 x float> %78, float %82, i32 6
  %84 = extractelement <16 x i32> %48, i64 7
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds float, float* %7, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !6292
  %88 = insertelement <16 x float> %83, float %87, i32 7
  %89 = extractelement <16 x i32> %48, i64 8
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float* %7, i64 %90
  %92 = load float, float* %91, align 4, !tbaa !6292
  %93 = insertelement <16 x float> %88, float %92, i32 8
  %94 = extractelement <16 x i32> %48, i64 9
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds float, float* %7, i64 %95
  %97 = load float, float* %96, align 4, !tbaa !6292
  %98 = insertelement <16 x float> %93, float %97, i32 9
  %99 = extractelement <16 x i32> %48, i64 10
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds float, float* %7, i64 %100
  %102 = load float, float* %101, align 4, !tbaa !6292
  %103 = insertelement <16 x float> %98, float %102, i32 10
  %104 = extractelement <16 x i32> %48, i64 11
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds float, float* %7, i64 %105
  %107 = load float, float* %106, align 4, !tbaa !6292
  %108 = insertelement <16 x float> %103, float %107, i32 11
  %109 = extractelement <16 x i32> %48, i64 12
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds float, float* %7, i64 %110
  %112 = load float, float* %111, align 4, !tbaa !6292
  %113 = insertelement <16 x float> %108, float %112, i32 12
  %114 = extractelement <16 x i32> %48, i64 13
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds float, float* %7, i64 %115
  %117 = load float, float* %116, align 4, !tbaa !6292
  %118 = insertelement <16 x float> %113, float %117, i32 13
  %119 = extractelement <16 x i32> %48, i64 14
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds float, float* %7, i64 %120
  %122 = load float, float* %121, align 4, !tbaa !6292
  %123 = insertelement <16 x float> %118, float %122, i32 14
  %124 = extractelement <16 x i32> %48, i64 15
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds float, float* %7, i64 %125
  %127 = load float, float* %126, align 4, !tbaa !6292
  %128 = insertelement <16 x float> %123, float %127, i32 15
  %129 = getelementptr inbounds float, float* %4, i64 %43
  %130 = bitcast float* %129 to <16 x float>*
  store <16 x float> %128, <16 x float>* %130, align 64, !tbaa !6295
  %131 = or i64 %43, 16
  %132 = add <16 x i32> %47, %35
  %133 = extractelement <16 x i32> %132, i64 0
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds float, float* %7, i64 %134
  %136 = load float, float* %135, align 4, !tbaa !6292
  %137 = insertelement <16 x float> undef, float %136, i32 0
  %138 = extractelement <16 x i32> %132, i64 1
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds float, float* %7, i64 %139
  %141 = load float, float* %140, align 4, !tbaa !6292
  %142 = insertelement <16 x float> %137, float %141, i32 1
  %143 = extractelement <16 x i32> %132, i64 2
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds float, float* %7, i64 %144
  %146 = load float, float* %145, align 4, !tbaa !6292
  %147 = insertelement <16 x float> %142, float %146, i32 2
  %148 = extractelement <16 x i32> %132, i64 3
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds float, float* %7, i64 %149
  %151 = load float, float* %150, align 4, !tbaa !6292
  %152 = insertelement <16 x float> %147, float %151, i32 3
  %153 = extractelement <16 x i32> %132, i64 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds float, float* %7, i64 %154
  %156 = load float, float* %155, align 4, !tbaa !6292
  %157 = insertelement <16 x float> %152, float %156, i32 4
  %158 = extractelement <16 x i32> %132, i64 5
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds float, float* %7, i64 %159
  %161 = load float, float* %160, align 4, !tbaa !6292
  %162 = insertelement <16 x float> %157, float %161, i32 5
  %163 = extractelement <16 x i32> %132, i64 6
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds float, float* %7, i64 %164
  %166 = load float, float* %165, align 4, !tbaa !6292
  %167 = insertelement <16 x float> %162, float %166, i32 6
  %168 = extractelement <16 x i32> %132, i64 7
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds float, float* %7, i64 %169
  %171 = load float, float* %170, align 4, !tbaa !6292
  %172 = insertelement <16 x float> %167, float %171, i32 7
  %173 = extractelement <16 x i32> %132, i64 8
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds float, float* %7, i64 %174
  %176 = load float, float* %175, align 4, !tbaa !6292
  %177 = insertelement <16 x float> %172, float %176, i32 8
  %178 = extractelement <16 x i32> %132, i64 9
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds float, float* %7, i64 %179
  %181 = load float, float* %180, align 4, !tbaa !6292
  %182 = insertelement <16 x float> %177, float %181, i32 9
  %183 = extractelement <16 x i32> %132, i64 10
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds float, float* %7, i64 %184
  %186 = load float, float* %185, align 4, !tbaa !6292
  %187 = insertelement <16 x float> %182, float %186, i32 10
  %188 = extractelement <16 x i32> %132, i64 11
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds float, float* %7, i64 %189
  %191 = load float, float* %190, align 4, !tbaa !6292
  %192 = insertelement <16 x float> %187, float %191, i32 11
  %193 = extractelement <16 x i32> %132, i64 12
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds float, float* %7, i64 %194
  %196 = load float, float* %195, align 4, !tbaa !6292
  %197 = insertelement <16 x float> %192, float %196, i32 12
  %198 = extractelement <16 x i32> %132, i64 13
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds float, float* %7, i64 %199
  %201 = load float, float* %200, align 4, !tbaa !6292
  %202 = insertelement <16 x float> %197, float %201, i32 13
  %203 = extractelement <16 x i32> %132, i64 14
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds float, float* %7, i64 %204
  %206 = load float, float* %205, align 4, !tbaa !6292
  %207 = insertelement <16 x float> %202, float %206, i32 14
  %208 = extractelement <16 x i32> %132, i64 15
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds float, float* %7, i64 %209
  %211 = load float, float* %210, align 4, !tbaa !6292
  %212 = insertelement <16 x float> %207, float %211, i32 15
  %213 = getelementptr inbounds float, float* %4, i64 %131
  %214 = bitcast float* %213 to <16 x float>*
  store <16 x float> %212, <16 x float>* %214, align 64, !tbaa !6295
  %215 = or i64 %43, 32
  %216 = add <16 x i32> %47, %38
  %217 = extractelement <16 x i32> %216, i64 0
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds float, float* %7, i64 %218
  %220 = load float, float* %219, align 4, !tbaa !6292
  %221 = insertelement <16 x float> undef, float %220, i32 0
  %222 = extractelement <16 x i32> %216, i64 1
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds float, float* %7, i64 %223
  %225 = load float, float* %224, align 4, !tbaa !6292
  %226 = insertelement <16 x float> %221, float %225, i32 1
  %227 = extractelement <16 x i32> %216, i64 2
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds float, float* %7, i64 %228
  %230 = load float, float* %229, align 4, !tbaa !6292
  %231 = insertelement <16 x float> %226, float %230, i32 2
  %232 = extractelement <16 x i32> %216, i64 3
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds float, float* %7, i64 %233
  %235 = load float, float* %234, align 4, !tbaa !6292
  %236 = insertelement <16 x float> %231, float %235, i32 3
  %237 = extractelement <16 x i32> %216, i64 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds float, float* %7, i64 %238
  %240 = load float, float* %239, align 4, !tbaa !6292
  %241 = insertelement <16 x float> %236, float %240, i32 4
  %242 = extractelement <16 x i32> %216, i64 5
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds float, float* %7, i64 %243
  %245 = load float, float* %244, align 4, !tbaa !6292
  %246 = insertelement <16 x float> %241, float %245, i32 5
  %247 = extractelement <16 x i32> %216, i64 6
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds float, float* %7, i64 %248
  %250 = load float, float* %249, align 4, !tbaa !6292
  %251 = insertelement <16 x float> %246, float %250, i32 6
  %252 = extractelement <16 x i32> %216, i64 7
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds float, float* %7, i64 %253
  %255 = load float, float* %254, align 4, !tbaa !6292
  %256 = insertelement <16 x float> %251, float %255, i32 7
  %257 = extractelement <16 x i32> %216, i64 8
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds float, float* %7, i64 %258
  %260 = load float, float* %259, align 4, !tbaa !6292
  %261 = insertelement <16 x float> %256, float %260, i32 8
  %262 = extractelement <16 x i32> %216, i64 9
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds float, float* %7, i64 %263
  %265 = load float, float* %264, align 4, !tbaa !6292
  %266 = insertelement <16 x float> %261, float %265, i32 9
  %267 = extractelement <16 x i32> %216, i64 10
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds float, float* %7, i64 %268
  %270 = load float, float* %269, align 4, !tbaa !6292
  %271 = insertelement <16 x float> %266, float %270, i32 10
  %272 = extractelement <16 x i32> %216, i64 11
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds float, float* %7, i64 %273
  %275 = load float, float* %274, align 4, !tbaa !6292
  %276 = insertelement <16 x float> %271, float %275, i32 11
  %277 = extractelement <16 x i32> %216, i64 12
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds float, float* %7, i64 %278
  %280 = load float, float* %279, align 4, !tbaa !6292
  %281 = insertelement <16 x float> %276, float %280, i32 12
  %282 = extractelement <16 x i32> %216, i64 13
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds float, float* %7, i64 %283
  %285 = load float, float* %284, align 4, !tbaa !6292
  %286 = insertelement <16 x float> %281, float %285, i32 13
  %287 = extractelement <16 x i32> %216, i64 14
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds float, float* %7, i64 %288
  %290 = load float, float* %289, align 4, !tbaa !6292
  %291 = insertelement <16 x float> %286, float %290, i32 14
  %292 = extractelement <16 x i32> %216, i64 15
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds float, float* %7, i64 %293
  %295 = load float, float* %294, align 4, !tbaa !6292
  %296 = insertelement <16 x float> %291, float %295, i32 15
  %297 = getelementptr inbounds float, float* %4, i64 %215
  %298 = bitcast float* %297 to <16 x float>*
  store <16 x float> %296, <16 x float>* %298, align 64, !tbaa !6295
  %299 = or i64 %43, 48
  %300 = add <16 x i32> %47, %41
  %301 = extractelement <16 x i32> %300, i64 0
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds float, float* %7, i64 %302
  %304 = load float, float* %303, align 4, !tbaa !6292
  %305 = insertelement <16 x float> undef, float %304, i32 0
  %306 = extractelement <16 x i32> %300, i64 1
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds float, float* %7, i64 %307
  %309 = load float, float* %308, align 4, !tbaa !6292
  %310 = insertelement <16 x float> %305, float %309, i32 1
  %311 = extractelement <16 x i32> %300, i64 2
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds float, float* %7, i64 %312
  %314 = load float, float* %313, align 4, !tbaa !6292
  %315 = insertelement <16 x float> %310, float %314, i32 2
  %316 = extractelement <16 x i32> %300, i64 3
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds float, float* %7, i64 %317
  %319 = load float, float* %318, align 4, !tbaa !6292
  %320 = insertelement <16 x float> %315, float %319, i32 3
  %321 = extractelement <16 x i32> %300, i64 4
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds float, float* %7, i64 %322
  %324 = load float, float* %323, align 4, !tbaa !6292
  %325 = insertelement <16 x float> %320, float %324, i32 4
  %326 = extractelement <16 x i32> %300, i64 5
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds float, float* %7, i64 %327
  %329 = load float, float* %328, align 4, !tbaa !6292
  %330 = insertelement <16 x float> %325, float %329, i32 5
  %331 = extractelement <16 x i32> %300, i64 6
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds float, float* %7, i64 %332
  %334 = load float, float* %333, align 4, !tbaa !6292
  %335 = insertelement <16 x float> %330, float %334, i32 6
  %336 = extractelement <16 x i32> %300, i64 7
  %337 = sext i32 %336 to i64
  %338 = getelementptr inbounds float, float* %7, i64 %337
  %339 = load float, float* %338, align 4, !tbaa !6292
  %340 = insertelement <16 x float> %335, float %339, i32 7
  %341 = extractelement <16 x i32> %300, i64 8
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds float, float* %7, i64 %342
  %344 = load float, float* %343, align 4, !tbaa !6292
  %345 = insertelement <16 x float> %340, float %344, i32 8
  %346 = extractelement <16 x i32> %300, i64 9
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds float, float* %7, i64 %347
  %349 = load float, float* %348, align 4, !tbaa !6292
  %350 = insertelement <16 x float> %345, float %349, i32 9
  %351 = extractelement <16 x i32> %300, i64 10
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds float, float* %7, i64 %352
  %354 = load float, float* %353, align 4, !tbaa !6292
  %355 = insertelement <16 x float> %350, float %354, i32 10
  %356 = extractelement <16 x i32> %300, i64 11
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds float, float* %7, i64 %357
  %359 = load float, float* %358, align 4, !tbaa !6292
  %360 = insertelement <16 x float> %355, float %359, i32 11
  %361 = extractelement <16 x i32> %300, i64 12
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds float, float* %7, i64 %362
  %364 = load float, float* %363, align 4, !tbaa !6292
  %365 = insertelement <16 x float> %360, float %364, i32 12
  %366 = extractelement <16 x i32> %300, i64 13
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds float, float* %7, i64 %367
  %369 = load float, float* %368, align 4, !tbaa !6292
  %370 = insertelement <16 x float> %365, float %369, i32 13
  %371 = extractelement <16 x i32> %300, i64 14
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds float, float* %7, i64 %372
  %374 = load float, float* %373, align 4, !tbaa !6292
  %375 = insertelement <16 x float> %370, float %374, i32 14
  %376 = extractelement <16 x i32> %300, i64 15
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds float, float* %7, i64 %377
  %379 = load float, float* %378, align 4, !tbaa !6292
  %380 = insertelement <16 x float> %375, float %379, i32 15
  %381 = getelementptr inbounds float, float* %4, i64 %299
  %382 = bitcast float* %381 to <16 x float>*
  store <16 x float> %380, <16 x float>* %382, align 64, !tbaa !6295
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 14
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !50

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %383 = icmp slt i64 %indvars.iv.next8, %21
  br i1 %383, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_7(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.399, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !6298
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !6312
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !6315
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.400, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !6317
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.401, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.402, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.403, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !6319
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !6333
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 1
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.29, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !6335
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 28
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !6338
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 28
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !6340
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 512
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.404, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !6344
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 401408
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !6358
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 401408
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !6360
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 14336
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !6363
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 512
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !6365
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.405, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !6369
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 16
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !6383
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !6385
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !6388
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !6390
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 512
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.406, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !6394
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 16
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !6396
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 8192
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !6410
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 8192
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !6412
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 8192
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !6415
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 8192
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !6417
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 16
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !6421
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([275 x i8], [275 x i8]* @.str.407, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !6423
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !6437
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 16
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !6439
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !6442
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !6444
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 16
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !6448
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 256
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !6462
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 16
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !6464
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 16
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !6467
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 16
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !6469
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.408, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !6473
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !6487
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 16
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !6489
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 28
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !6492
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 28
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.113, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !6494
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 16
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !6498
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 200704
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !6512
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 12544
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !6514
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 448
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !6517
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 16
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !6519
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.409, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_7_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_7_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = alloca %40, align 8
  %6 = getelementptr inbounds %40, %40* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %40, %40* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %40, %40* %5, i64 0, i32 2
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %40, %40* %5, i64 0, i32 3
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %40, %40* %5, i64 0, i32 4
  store i32 %4, i32* %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %40* %5 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.410, i8* nonnull %12, i32 0)
  ret i32 %13
}

define private i32 @__tvm_parallel_lambda.410(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 223
  %20 = sdiv i32 %19, %18
  %21 = add nsw i32 %0, 1
  %22 = mul nsw i32 %20, %21
  %23 = icmp slt i32 %22, 224
  %24 = select i1 %23, i32 %22, i32 224
  %25 = mul nsw i32 %20, %0
  %26 = icmp slt i32 %25, 224
  %27 = select i1 %26, i32 %25, i32 224
  %28 = icmp slt i32 %27, %24
  br i1 %28, label %for_body, label %for_end, !prof !5

for_body:                                         ; preds = %entry, %for_end9
  %29 = phi i32 [ %98, %for_end9 ], [ %27, %entry ]
  %30 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %31 = tail call i8* %30(i32 1, i32 %16, i64 3584, i32 2, i32 32)
  %32 = bitcast i8* %31 to float*
  %33 = sdiv i32 %29, 14
  %34 = mul i32 %33, 14
  %.decomposed = sub i32 %29, %34
  %35 = mul nsw i32 %.decomposed, 28672
  %36 = shl i32 %33, 13
  %37 = sext i32 %36 to i64
  %38 = sext i32 %35 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end9, %entry
  ret i32 0

for_begin7.preheader:                             ; preds = %for_end6
  %39 = mul nsw i32 %29, 896
  %40 = shl nsw i32 %33, 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %13, i64 %41
  %43 = bitcast float* %42 to <16 x float>*
  %44 = load <16 x float>, <16 x float>* %43, align 64, !tbaa !6523
  br label %for_begin10.preheader

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv21 = phi i64 [ 0, %for_body ], [ %indvars.iv.next22, %for_end6 ]
  %45 = shl nsw i64 %indvars.iv21, 4
  %46 = getelementptr inbounds float, float* %32, i64 %45
  %47 = bitcast float* %46 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %47, align 64, !tbaa !6526
  %48 = add nuw nsw i64 %45, 448
  %49 = getelementptr inbounds float, float* %32, i64 %48
  %50 = bitcast float* %49 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %50, align 64, !tbaa !6526
  %51 = shl i64 %indvars.iv21, 9
  %52 = add nsw i64 %51, %38
  br label %for_body5

for_body5:                                        ; preds = %for_body5, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_body5 ]
  %53 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %71, %for_body5 ]
  %54 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %65, %for_body5 ]
  %55 = add nsw i64 %52, %indvars.iv
  %56 = getelementptr inbounds float, float* %4, i64 %55
  %57 = load float, float* %56, align 4, !tbaa !6529
  %58 = insertelement <16 x float> undef, float %57, i32 0
  %59 = shufflevector <16 x float> %58, <16 x float> undef, <16 x i32> zeroinitializer
  %60 = shl i64 %indvars.iv, 4
  %61 = add nuw nsw i64 %60, %37
  %62 = getelementptr inbounds float, float* %7, i64 %61
  %63 = bitcast float* %62 to <16 x float>*
  %64 = load <16 x float>, <16 x float>* %63, align 64, !tbaa !6532
  %65 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %59, <16 x float> %64, <16 x float> %54)
  %66 = add nsw i64 %55, 14336
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !6529
  %69 = insertelement <16 x float> undef, float %68, i32 0
  %70 = shufflevector <16 x float> %69, <16 x float> undef, <16 x i32> zeroinitializer
  %71 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %70, <16 x float> %64, <16 x float> %53)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  store <16 x float> %65, <16 x float>* %47, align 64, !tbaa !6526
  store <16 x float> %71, <16 x float>* %50, align 64, !tbaa !6526
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
  %exitcond23 = icmp eq i64 %indvars.iv.next22, 28
  br i1 %exitcond23, label %for_begin7.preheader, label %for_body2, !prof !50

for_begin10.preheader:                            ; preds = %for_begin10.preheader, %for_begin7.preheader
  %indvars.iv27 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next28, %for_begin10.preheader ]
  %72 = shl nsw i64 %indvars.iv27, 4
  %73 = trunc i64 %72 to i32
  %74 = add i32 %39, %73
  %75 = getelementptr inbounds float, float* %32, i64 %72
  %76 = bitcast float* %75 to <16 x float>*
  %77 = load <16 x float>, <16 x float>* %76, align 64, !tbaa !6526
  %78 = fadd <16 x float> %44, %77
  %79 = fcmp ogt <16 x float> %78, zeroinitializer
  %80 = select <16 x i1> %79, <16 x float> %78, <16 x float> zeroinitializer
  %81 = sext i32 %74 to i64
  %82 = getelementptr inbounds float, float* %10, i64 %81
  %83 = bitcast float* %82 to <16 x float>*
  store <16 x float> %80, <16 x float>* %83, align 64, !tbaa !6535
  %84 = add nuw nsw i64 %72, 448
  %85 = trunc i64 %84 to i32
  %86 = add i32 %39, %85
  %87 = getelementptr inbounds float, float* %32, i64 %84
  %88 = bitcast float* %87 to <16 x float>*
  %89 = load <16 x float>, <16 x float>* %88, align 64, !tbaa !6526
  %90 = fadd <16 x float> %44, %89
  %91 = fcmp ogt <16 x float> %90, zeroinitializer
  %92 = select <16 x i1> %91, <16 x float> %90, <16 x float> zeroinitializer
  %93 = sext i32 %86 to i64
  %94 = getelementptr inbounds float, float* %10, i64 %93
  %95 = bitcast float* %94 to <16 x float>*
  store <16 x float> %92, <16 x float>* %95, align 64, !tbaa !6535
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %exitcond29 = icmp eq i64 %indvars.iv.next28, 28
  br i1 %exitcond29, label %for_end9, label %for_begin10.preheader, !prof !50

for_end9:                                         ; preds = %for_begin10.preheader
  %96 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %97 = tail call i32 %96(i32 1, i32 %16, i8* nonnull %31)
  %98 = add nsw i32 %29, 1
  %99 = icmp slt i32 %98, %24
  br i1 %99, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.411, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !6538
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !6552
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !6555
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.412, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !6557
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.413, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.414, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([172 x i8], [172 x i8]* @.str.415, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !6559
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !6573
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 1
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.29, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !6575
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 224
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.189, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !6578
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 224
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.190, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !6580
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 3
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.416, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !6584
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 150528
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !6598
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 150528
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !6600
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 672
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !6603
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 3
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !6605
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.417, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !6609
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 4
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.33, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !6623
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !6625
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 7
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.367, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !6628
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 7
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.368, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !6630
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 3
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.194, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !6634
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 16
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !6636
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 2352
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !6650
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 2352
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !6652
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 336
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !6655
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 48
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !6657
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 16
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !6661
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.418, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !6663
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !6677
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 4
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.41, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !6679
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !6682
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !6684
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 16
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !6688
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 64
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !6702
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 16
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !6704
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 16
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !6707
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 16
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !6709
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([231 x i8], [231 x i8]* @.str.45, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !6713
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !6727
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 4
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.52, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !6729
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 112
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.419, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !6732
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 112
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.420, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !6734
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 16
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !6738
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 802816
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !6752
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 200704
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !6754
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 1792
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !6757
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 16
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !6759
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.421, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %6 = tail call i8* %5(i32 1, i32 %4, i64 629292, i32 2, i32 32)
  %7 = alloca %41, align 8
  %8 = getelementptr inbounds %41, %41* %7, i64 0, i32 0
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds %41, %41* %7, i64 0, i32 1
  store i8* %0, i8** %9, align 8
  %10 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %11 = bitcast %41* %7 to i8*
  %12 = call i32 %10(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.422, i8* nonnull %11, i32 0)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %12, %entry ], [ 0, %call_end2 ], [ %22, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %14 = alloca %42, align 8
  %15 = getelementptr inbounds %42, %42* %14, i64 0, i32 0
  store i8* %6, i8** %15, align 8
  %16 = getelementptr inbounds %42, %42* %14, i64 0, i32 1
  store i8* %1, i8** %16, align 8
  %17 = getelementptr inbounds %42, %42* %14, i64 0, i32 2
  store i8* %2, i8** %17, align 8
  %18 = getelementptr inbounds %42, %42* %14, i64 0, i32 3
  store i8* %3, i8** %18, align 8
  %19 = getelementptr inbounds %42, %42* %14, i64 0, i32 4
  store i32 %4, i32* %19, align 8
  %20 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %21 = bitcast %42* %14 to i8*
  %22 = call i32 %20(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.423, i8* nonnull %21, i32 0)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %24 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %25 = call i32 %24(i32 1, i32 %4, i8* %6)
  br label %call_fail
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.422(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 228
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 229
  %15 = select i1 %14, i32 %13, i32 229
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 229
  %18 = select i1 %17, i32 %16, i32 229
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv8 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next9, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv8, 687
  %23 = trunc i64 %indvars.iv8 to i32
  %.off = add i32 %23, -3
  %24 = icmp ult i32 %.off, 224
  %25 = mul i64 %indvars.iv8, 672
  %26 = add i64 %25, 4294965271
  br i1 %24, label %for_body2.us, label %for_body2.preheader

for_body2.preheader:                              ; preds = %for_begin1.preheader
  %27 = add i32 %18, %indvar
  %28 = mul i32 %27, 687
  %29 = sext i32 %28 to i64
  %scevgep = getelementptr float, float* %4, i64 %29
  %scevgep6 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %scevgep6, i8 0, i64 2748, i1 false)
  br label %for_end3

for_body2.us:                                     ; preds = %for_begin1.preheader, %if_end.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %if_end.us ], [ 0, %for_begin1.preheader ]
  %30 = mul nuw nsw i64 %indvars.iv, 3
  %31 = add nsw i64 %30, %22
  %32 = trunc i64 %indvars.iv to i32
  %33 = add i32 %32, -3
  %34 = icmp ult i32 %33, 224
  br i1 %34, label %if_then.us, label %if_end.us

if_then.us:                                       ; preds = %for_body2.us
  %35 = add i64 %26, %30
  %sext = shl i64 %35, 32
  %36 = ashr exact i64 %sext, 32
  %37 = getelementptr inbounds float, float* %7, i64 %36
  %38 = bitcast float* %37 to <3 x float>*
  %39 = load <3 x float>, <3 x float>* %38, align 4, !tbaa !6763
  br label %if_end.us

if_end.us:                                        ; preds = %if_then.us, %for_body2.us
  %40 = phi <3 x float> [ %39, %if_then.us ], [ zeroinitializer, %for_body2.us ]
  %41 = getelementptr inbounds float, float* %4, i64 %31
  %42 = bitcast float* %41 to <3 x float>*
  store <3 x float> %40, <3 x float>* %42, align 4, !tbaa !6766
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 229
  br i1 %exitcond, label %for_end3, label %for_body2.us, !prof !50

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %if_end.us, %for_body2.preheader
  %indvars.iv.next9 = add nsw i64 %indvars.iv8, 1
  %43 = icmp slt i64 %indvars.iv.next9, %21
  %indvar.next = add i32 %indvar, 1
  br i1 %43, label %for_begin1.preheader, label %for_end, !prof !5
}

define private i32 @__tvm_parallel_lambda.423(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = alloca [4 x <16 x float>], align 16
  %4 = bitcast [4 x <16 x float>]* %3 to i8*
  %.sub = getelementptr inbounds [4 x <16 x float>], [4 x <16 x float>]* %3, i64 0, i64 0
  %5 = bitcast i8* %2 to float**
  %6 = load float*, float** %5, align 8
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to float**
  %9 = load float*, float** %8, align 8
  %10 = getelementptr inbounds i8, i8* %2, i64 16
  %11 = bitcast i8* %10 to float**
  %12 = load float*, float** %11, align 8
  %13 = getelementptr inbounds i8, i8* %2, i64 24
  %14 = bitcast i8* %13 to float**
  %15 = load float*, float** %14, align 8
  %16 = getelementptr inbounds i8, i8* %2, i64 32
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 447
  %22 = sdiv i32 %21, %20
  %23 = add nsw i32 %0, 1
  %24 = mul nsw i32 %22, %23
  %25 = icmp slt i32 %24, 448
  %26 = select i1 %25, i32 %24, i32 448
  %27 = mul nsw i32 %22, %0
  %28 = icmp slt i32 %27, 448
  %29 = select i1 %28, i32 %27, i32 448
  %30 = icmp slt i32 %29, %26
  br i1 %30, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %31 = getelementptr inbounds [4 x <16 x float>], [4 x <16 x float>]* %3, i64 0, i64 0, i64 16
  %32 = bitcast float* %31 to <16 x float>*
  %33 = getelementptr inbounds [4 x <16 x float>], [4 x <16 x float>]* %3, i64 0, i64 0, i64 32
  %34 = bitcast float* %33 to <16 x float>*
  %35 = getelementptr inbounds [4 x <16 x float>], [4 x <16 x float>]* %3, i64 0, i64 0, i64 48
  %36 = bitcast float* %35 to <16 x float>*
  %37 = bitcast [4 x <16 x float>]* %3 to i8*
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_end15
  %38 = phi i32 [ %29, %for_body.lr.ph ], [ %472, %for_end15 ]
  %39 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %40 = tail call i8* %39(i32 1, i32 %18, i64 7168, i32 2, i32 32)
  %41 = sdiv i32 %38, 112
  %42 = mul i32 %41, 112
  %.decomposed = sub i32 %38, %42
  %43 = mul nsw i32 %.decomposed, 1374
  %44 = mul nsw i32 %41, 2352
  %45 = sext i32 %44 to i64
  %46 = sext i32 %43 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end15, %entry
  ret i32 0

for_begin13.preheader:                            ; preds = %for_begin10.preheader
  %47 = mul nsw i32 %38, 1792
  %48 = shl nsw i32 %41, 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds float, float* %15, i64 %49
  %51 = bitcast float* %50 to <16 x float>*
  %52 = load <16 x float>, <16 x float>* %51, align 64, !tbaa !6769
  %53 = bitcast i8* %40 to float*
  br label %for_begin16.preheader

for_body2:                                        ; preds = %for_begin10.preheader, %for_body
  %indvar = phi i64 [ 0, %for_body ], [ %indvar.next, %for_begin10.preheader ]
  %54 = shl nuw nsw i64 %indvar, 8
  %scevgep = getelementptr i8, i8* %40, i64 %54
  %55 = mul nuw nsw i64 %indvar, 24
  %56 = add nsw i64 %55, %46
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 256, i1 false)
  br label %for_begin7.preheader

for_begin10.preheader:                            ; preds = %for_begin7.preheader
  store <16 x float> %413, <16 x float>* %.sub, align 16, !tbaa !6772
  store <16 x float> %414, <16 x float>* %32, align 16, !tbaa !6782
  store <16 x float> %415, <16 x float>* %34, align 16, !tbaa !6784
  store <16 x float> %421, <16 x float>* %36, align 16, !tbaa !6787
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %scevgep, i8* nonnull align 16 %4, i64 256, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond43 = icmp eq i64 %indvar.next, 28
  br i1 %exitcond43, label %for_begin13.preheader, label %for_body2, !prof !50

for_begin7.preheader:                             ; preds = %for_begin7.preheader, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_begin7.preheader ]
  %.lcssa2936 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %421, %for_begin7.preheader ]
  %.lcssa2734 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %415, %for_begin7.preheader ]
  %.lcssa2533 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %414, %for_begin7.preheader ]
  %.lcssa31 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %413, %for_begin7.preheader ]
  %57 = mul nuw nsw i64 %indvars.iv, 687
  %58 = add nsw i64 %56, %57
  %59 = mul nuw nsw i64 %indvars.iv, 336
  %60 = add nsw i64 %59, %45
  %61 = getelementptr inbounds float, float* %6, i64 %58
  %62 = load float, float* %61, align 4, !tbaa !6766
  %63 = insertelement <16 x float> undef, float %62, i32 0
  %64 = shufflevector <16 x float> %63, <16 x float> undef, <16 x i32> zeroinitializer
  %65 = getelementptr inbounds float, float* %9, i64 %60
  %66 = bitcast float* %65 to <16 x float>*
  %67 = load <16 x float>, <16 x float>* %66, align 64, !tbaa !6789
  %68 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %64, <16 x float> %67, <16 x float> %.lcssa31)
  %69 = add nsw i64 %58, 6
  %70 = getelementptr inbounds float, float* %6, i64 %69
  %71 = load float, float* %70, align 4, !tbaa !6766
  %72 = insertelement <16 x float> undef, float %71, i32 0
  %73 = shufflevector <16 x float> %72, <16 x float> undef, <16 x i32> zeroinitializer
  %74 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %73, <16 x float> %67, <16 x float> %.lcssa2533)
  %75 = add nsw i64 %58, 12
  %76 = getelementptr inbounds float, float* %6, i64 %75
  %77 = load float, float* %76, align 4, !tbaa !6766
  %78 = insertelement <16 x float> undef, float %77, i32 0
  %79 = shufflevector <16 x float> %78, <16 x float> undef, <16 x i32> zeroinitializer
  %80 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %79, <16 x float> %67, <16 x float> %.lcssa2734)
  %81 = add nsw i64 %58, 18
  %82 = getelementptr inbounds float, float* %6, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !6766
  %84 = insertelement <16 x float> undef, float %83, i32 0
  %85 = shufflevector <16 x float> %84, <16 x float> undef, <16 x i32> zeroinitializer
  %86 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %85, <16 x float> %67, <16 x float> %.lcssa2936)
  %87 = add nsw i64 %58, 3
  %88 = getelementptr inbounds float, float* %6, i64 %87
  %89 = load float, float* %88, align 4, !tbaa !6766
  %90 = insertelement <16 x float> undef, float %89, i32 0
  %91 = shufflevector <16 x float> %90, <16 x float> undef, <16 x i32> zeroinitializer
  %92 = add nsw i64 %60, 48
  %93 = getelementptr inbounds float, float* %9, i64 %92
  %94 = bitcast float* %93 to <16 x float>*
  %95 = load <16 x float>, <16 x float>* %94, align 64, !tbaa !6789
  %96 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %91, <16 x float> %95, <16 x float> %68)
  %97 = add nsw i64 %58, 9
  %98 = getelementptr inbounds float, float* %6, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !6766
  %100 = insertelement <16 x float> undef, float %99, i32 0
  %101 = shufflevector <16 x float> %100, <16 x float> undef, <16 x i32> zeroinitializer
  %102 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %101, <16 x float> %95, <16 x float> %74)
  %103 = add nsw i64 %58, 15
  %104 = getelementptr inbounds float, float* %6, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !6766
  %106 = insertelement <16 x float> undef, float %105, i32 0
  %107 = shufflevector <16 x float> %106, <16 x float> undef, <16 x i32> zeroinitializer
  %108 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %107, <16 x float> %95, <16 x float> %80)
  %109 = add nsw i64 %58, 21
  %110 = getelementptr inbounds float, float* %6, i64 %109
  %111 = load float, float* %110, align 4, !tbaa !6766
  %112 = insertelement <16 x float> undef, float %111, i32 0
  %113 = shufflevector <16 x float> %112, <16 x float> undef, <16 x i32> zeroinitializer
  %114 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %113, <16 x float> %95, <16 x float> %86)
  %115 = add nsw i64 %60, 96
  %116 = getelementptr inbounds float, float* %9, i64 %115
  %117 = bitcast float* %116 to <16 x float>*
  %118 = load <16 x float>, <16 x float>* %117, align 64, !tbaa !6789
  %119 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %73, <16 x float> %118, <16 x float> %96)
  %120 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %79, <16 x float> %118, <16 x float> %102)
  %121 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %85, <16 x float> %118, <16 x float> %108)
  %122 = add nsw i64 %58, 24
  %123 = getelementptr inbounds float, float* %6, i64 %122
  %124 = load float, float* %123, align 4, !tbaa !6766
  %125 = insertelement <16 x float> undef, float %124, i32 0
  %126 = shufflevector <16 x float> %125, <16 x float> undef, <16 x i32> zeroinitializer
  %127 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %126, <16 x float> %118, <16 x float> %114)
  %128 = add nsw i64 %60, 144
  %129 = getelementptr inbounds float, float* %9, i64 %128
  %130 = bitcast float* %129 to <16 x float>*
  %131 = load <16 x float>, <16 x float>* %130, align 64, !tbaa !6789
  %132 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %101, <16 x float> %131, <16 x float> %119)
  %133 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %107, <16 x float> %131, <16 x float> %120)
  %134 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %113, <16 x float> %131, <16 x float> %121)
  %135 = add nsw i64 %58, 27
  %136 = getelementptr inbounds float, float* %6, i64 %135
  %137 = load float, float* %136, align 4, !tbaa !6766
  %138 = insertelement <16 x float> undef, float %137, i32 0
  %139 = shufflevector <16 x float> %138, <16 x float> undef, <16 x i32> zeroinitializer
  %140 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %139, <16 x float> %131, <16 x float> %127)
  %141 = add nsw i64 %60, 192
  %142 = getelementptr inbounds float, float* %9, i64 %141
  %143 = bitcast float* %142 to <16 x float>*
  %144 = load <16 x float>, <16 x float>* %143, align 64, !tbaa !6789
  %145 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %79, <16 x float> %144, <16 x float> %132)
  %146 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %85, <16 x float> %144, <16 x float> %133)
  %147 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %126, <16 x float> %144, <16 x float> %134)
  %148 = add nsw i64 %58, 30
  %149 = getelementptr inbounds float, float* %6, i64 %148
  %150 = load float, float* %149, align 4, !tbaa !6766
  %151 = insertelement <16 x float> undef, float %150, i32 0
  %152 = shufflevector <16 x float> %151, <16 x float> undef, <16 x i32> zeroinitializer
  %153 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %152, <16 x float> %144, <16 x float> %140)
  %154 = add nsw i64 %60, 240
  %155 = getelementptr inbounds float, float* %9, i64 %154
  %156 = bitcast float* %155 to <16 x float>*
  %157 = load <16 x float>, <16 x float>* %156, align 64, !tbaa !6789
  %158 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %107, <16 x float> %157, <16 x float> %145)
  %159 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %113, <16 x float> %157, <16 x float> %146)
  %160 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %139, <16 x float> %157, <16 x float> %147)
  %161 = add nsw i64 %58, 33
  %162 = getelementptr inbounds float, float* %6, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !6766
  %164 = insertelement <16 x float> undef, float %163, i32 0
  %165 = shufflevector <16 x float> %164, <16 x float> undef, <16 x i32> zeroinitializer
  %166 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %165, <16 x float> %157, <16 x float> %153)
  %167 = add nsw i64 %60, 288
  %168 = getelementptr inbounds float, float* %9, i64 %167
  %169 = bitcast float* %168 to <16 x float>*
  %170 = load <16 x float>, <16 x float>* %169, align 64, !tbaa !6789
  %171 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %85, <16 x float> %170, <16 x float> %158)
  %172 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %126, <16 x float> %170, <16 x float> %159)
  %173 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %152, <16 x float> %170, <16 x float> %160)
  %174 = add nsw i64 %58, 36
  %175 = getelementptr inbounds float, float* %6, i64 %174
  %176 = load float, float* %175, align 4, !tbaa !6766
  %177 = insertelement <16 x float> undef, float %176, i32 0
  %178 = shufflevector <16 x float> %177, <16 x float> undef, <16 x i32> zeroinitializer
  %179 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %178, <16 x float> %170, <16 x float> %166)
  %180 = add nsw i64 %58, 1
  %181 = getelementptr inbounds float, float* %6, i64 %180
  %182 = load float, float* %181, align 4, !tbaa !6766
  %183 = insertelement <16 x float> undef, float %182, i32 0
  %184 = shufflevector <16 x float> %183, <16 x float> undef, <16 x i32> zeroinitializer
  %185 = add nsw i64 %60, 16
  %186 = getelementptr inbounds float, float* %9, i64 %185
  %187 = bitcast float* %186 to <16 x float>*
  %188 = load <16 x float>, <16 x float>* %187, align 64, !tbaa !6789
  %189 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %184, <16 x float> %188, <16 x float> %171)
  %190 = add nsw i64 %58, 7
  %191 = getelementptr inbounds float, float* %6, i64 %190
  %192 = load float, float* %191, align 4, !tbaa !6766
  %193 = insertelement <16 x float> undef, float %192, i32 0
  %194 = shufflevector <16 x float> %193, <16 x float> undef, <16 x i32> zeroinitializer
  %195 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %194, <16 x float> %188, <16 x float> %172)
  %196 = add nsw i64 %58, 13
  %197 = getelementptr inbounds float, float* %6, i64 %196
  %198 = load float, float* %197, align 4, !tbaa !6766
  %199 = insertelement <16 x float> undef, float %198, i32 0
  %200 = shufflevector <16 x float> %199, <16 x float> undef, <16 x i32> zeroinitializer
  %201 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %200, <16 x float> %188, <16 x float> %173)
  %202 = add nsw i64 %58, 19
  %203 = getelementptr inbounds float, float* %6, i64 %202
  %204 = load float, float* %203, align 4, !tbaa !6766
  %205 = insertelement <16 x float> undef, float %204, i32 0
  %206 = shufflevector <16 x float> %205, <16 x float> undef, <16 x i32> zeroinitializer
  %207 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %206, <16 x float> %188, <16 x float> %179)
  %208 = add nsw i64 %58, 4
  %209 = getelementptr inbounds float, float* %6, i64 %208
  %210 = load float, float* %209, align 4, !tbaa !6766
  %211 = insertelement <16 x float> undef, float %210, i32 0
  %212 = shufflevector <16 x float> %211, <16 x float> undef, <16 x i32> zeroinitializer
  %213 = add nsw i64 %60, 64
  %214 = getelementptr inbounds float, float* %9, i64 %213
  %215 = bitcast float* %214 to <16 x float>*
  %216 = load <16 x float>, <16 x float>* %215, align 64, !tbaa !6789
  %217 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %212, <16 x float> %216, <16 x float> %189)
  %218 = add nsw i64 %58, 10
  %219 = getelementptr inbounds float, float* %6, i64 %218
  %220 = load float, float* %219, align 4, !tbaa !6766
  %221 = insertelement <16 x float> undef, float %220, i32 0
  %222 = shufflevector <16 x float> %221, <16 x float> undef, <16 x i32> zeroinitializer
  %223 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %222, <16 x float> %216, <16 x float> %195)
  %224 = add nsw i64 %58, 16
  %225 = getelementptr inbounds float, float* %6, i64 %224
  %226 = load float, float* %225, align 4, !tbaa !6766
  %227 = insertelement <16 x float> undef, float %226, i32 0
  %228 = shufflevector <16 x float> %227, <16 x float> undef, <16 x i32> zeroinitializer
  %229 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %228, <16 x float> %216, <16 x float> %201)
  %230 = add nsw i64 %58, 22
  %231 = getelementptr inbounds float, float* %6, i64 %230
  %232 = load float, float* %231, align 4, !tbaa !6766
  %233 = insertelement <16 x float> undef, float %232, i32 0
  %234 = shufflevector <16 x float> %233, <16 x float> undef, <16 x i32> zeroinitializer
  %235 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %234, <16 x float> %216, <16 x float> %207)
  %236 = add nsw i64 %60, 112
  %237 = getelementptr inbounds float, float* %9, i64 %236
  %238 = bitcast float* %237 to <16 x float>*
  %239 = load <16 x float>, <16 x float>* %238, align 64, !tbaa !6789
  %240 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %194, <16 x float> %239, <16 x float> %217)
  %241 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %200, <16 x float> %239, <16 x float> %223)
  %242 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %206, <16 x float> %239, <16 x float> %229)
  %243 = add nsw i64 %58, 25
  %244 = getelementptr inbounds float, float* %6, i64 %243
  %245 = load float, float* %244, align 4, !tbaa !6766
  %246 = insertelement <16 x float> undef, float %245, i32 0
  %247 = shufflevector <16 x float> %246, <16 x float> undef, <16 x i32> zeroinitializer
  %248 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %247, <16 x float> %239, <16 x float> %235)
  %249 = add nsw i64 %60, 160
  %250 = getelementptr inbounds float, float* %9, i64 %249
  %251 = bitcast float* %250 to <16 x float>*
  %252 = load <16 x float>, <16 x float>* %251, align 64, !tbaa !6789
  %253 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %222, <16 x float> %252, <16 x float> %240)
  %254 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %228, <16 x float> %252, <16 x float> %241)
  %255 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %234, <16 x float> %252, <16 x float> %242)
  %256 = add nsw i64 %58, 28
  %257 = getelementptr inbounds float, float* %6, i64 %256
  %258 = load float, float* %257, align 4, !tbaa !6766
  %259 = insertelement <16 x float> undef, float %258, i32 0
  %260 = shufflevector <16 x float> %259, <16 x float> undef, <16 x i32> zeroinitializer
  %261 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %260, <16 x float> %252, <16 x float> %248)
  %262 = add nsw i64 %60, 208
  %263 = getelementptr inbounds float, float* %9, i64 %262
  %264 = bitcast float* %263 to <16 x float>*
  %265 = load <16 x float>, <16 x float>* %264, align 64, !tbaa !6789
  %266 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %200, <16 x float> %265, <16 x float> %253)
  %267 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %206, <16 x float> %265, <16 x float> %254)
  %268 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %247, <16 x float> %265, <16 x float> %255)
  %269 = add nsw i64 %58, 31
  %270 = getelementptr inbounds float, float* %6, i64 %269
  %271 = load float, float* %270, align 4, !tbaa !6766
  %272 = insertelement <16 x float> undef, float %271, i32 0
  %273 = shufflevector <16 x float> %272, <16 x float> undef, <16 x i32> zeroinitializer
  %274 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %273, <16 x float> %265, <16 x float> %261)
  %275 = add nsw i64 %60, 256
  %276 = getelementptr inbounds float, float* %9, i64 %275
  %277 = bitcast float* %276 to <16 x float>*
  %278 = load <16 x float>, <16 x float>* %277, align 64, !tbaa !6789
  %279 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %228, <16 x float> %278, <16 x float> %266)
  %280 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %234, <16 x float> %278, <16 x float> %267)
  %281 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %260, <16 x float> %278, <16 x float> %268)
  %282 = add nsw i64 %58, 34
  %283 = getelementptr inbounds float, float* %6, i64 %282
  %284 = load float, float* %283, align 4, !tbaa !6766
  %285 = insertelement <16 x float> undef, float %284, i32 0
  %286 = shufflevector <16 x float> %285, <16 x float> undef, <16 x i32> zeroinitializer
  %287 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %286, <16 x float> %278, <16 x float> %274)
  %288 = add nsw i64 %60, 304
  %289 = getelementptr inbounds float, float* %9, i64 %288
  %290 = bitcast float* %289 to <16 x float>*
  %291 = load <16 x float>, <16 x float>* %290, align 64, !tbaa !6789
  %292 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %206, <16 x float> %291, <16 x float> %279)
  %293 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %247, <16 x float> %291, <16 x float> %280)
  %294 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %273, <16 x float> %291, <16 x float> %281)
  %295 = add nsw i64 %58, 37
  %296 = getelementptr inbounds float, float* %6, i64 %295
  %297 = load float, float* %296, align 4, !tbaa !6766
  %298 = insertelement <16 x float> undef, float %297, i32 0
  %299 = shufflevector <16 x float> %298, <16 x float> undef, <16 x i32> zeroinitializer
  %300 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %299, <16 x float> %291, <16 x float> %287)
  %301 = add nsw i64 %58, 2
  %302 = getelementptr inbounds float, float* %6, i64 %301
  %303 = load float, float* %302, align 4, !tbaa !6766
  %304 = insertelement <16 x float> undef, float %303, i32 0
  %305 = shufflevector <16 x float> %304, <16 x float> undef, <16 x i32> zeroinitializer
  %306 = add nsw i64 %60, 32
  %307 = getelementptr inbounds float, float* %9, i64 %306
  %308 = bitcast float* %307 to <16 x float>*
  %309 = load <16 x float>, <16 x float>* %308, align 64, !tbaa !6789
  %310 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %305, <16 x float> %309, <16 x float> %292)
  %311 = add nsw i64 %58, 8
  %312 = getelementptr inbounds float, float* %6, i64 %311
  %313 = load float, float* %312, align 4, !tbaa !6766
  %314 = insertelement <16 x float> undef, float %313, i32 0
  %315 = shufflevector <16 x float> %314, <16 x float> undef, <16 x i32> zeroinitializer
  %316 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %315, <16 x float> %309, <16 x float> %293)
  %317 = add nsw i64 %58, 14
  %318 = getelementptr inbounds float, float* %6, i64 %317
  %319 = load float, float* %318, align 4, !tbaa !6766
  %320 = insertelement <16 x float> undef, float %319, i32 0
  %321 = shufflevector <16 x float> %320, <16 x float> undef, <16 x i32> zeroinitializer
  %322 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %321, <16 x float> %309, <16 x float> %294)
  %323 = add nsw i64 %58, 20
  %324 = getelementptr inbounds float, float* %6, i64 %323
  %325 = load float, float* %324, align 4, !tbaa !6766
  %326 = insertelement <16 x float> undef, float %325, i32 0
  %327 = shufflevector <16 x float> %326, <16 x float> undef, <16 x i32> zeroinitializer
  %328 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %327, <16 x float> %309, <16 x float> %300)
  %329 = add nsw i64 %58, 5
  %330 = getelementptr inbounds float, float* %6, i64 %329
  %331 = load float, float* %330, align 4, !tbaa !6766
  %332 = insertelement <16 x float> undef, float %331, i32 0
  %333 = shufflevector <16 x float> %332, <16 x float> undef, <16 x i32> zeroinitializer
  %334 = add nsw i64 %60, 80
  %335 = getelementptr inbounds float, float* %9, i64 %334
  %336 = bitcast float* %335 to <16 x float>*
  %337 = load <16 x float>, <16 x float>* %336, align 64, !tbaa !6789
  %338 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %333, <16 x float> %337, <16 x float> %310)
  %339 = add nsw i64 %58, 11
  %340 = getelementptr inbounds float, float* %6, i64 %339
  %341 = load float, float* %340, align 4, !tbaa !6766
  %342 = insertelement <16 x float> undef, float %341, i32 0
  %343 = shufflevector <16 x float> %342, <16 x float> undef, <16 x i32> zeroinitializer
  %344 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %343, <16 x float> %337, <16 x float> %316)
  %345 = add nsw i64 %58, 17
  %346 = getelementptr inbounds float, float* %6, i64 %345
  %347 = load float, float* %346, align 4, !tbaa !6766
  %348 = insertelement <16 x float> undef, float %347, i32 0
  %349 = shufflevector <16 x float> %348, <16 x float> undef, <16 x i32> zeroinitializer
  %350 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %349, <16 x float> %337, <16 x float> %322)
  %351 = add nsw i64 %58, 23
  %352 = getelementptr inbounds float, float* %6, i64 %351
  %353 = load float, float* %352, align 4, !tbaa !6766
  %354 = insertelement <16 x float> undef, float %353, i32 0
  %355 = shufflevector <16 x float> %354, <16 x float> undef, <16 x i32> zeroinitializer
  %356 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %355, <16 x float> %337, <16 x float> %328)
  %357 = add nsw i64 %60, 128
  %358 = getelementptr inbounds float, float* %9, i64 %357
  %359 = bitcast float* %358 to <16 x float>*
  %360 = load <16 x float>, <16 x float>* %359, align 64, !tbaa !6789
  %361 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %315, <16 x float> %360, <16 x float> %338)
  %362 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %321, <16 x float> %360, <16 x float> %344)
  %363 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %327, <16 x float> %360, <16 x float> %350)
  %364 = add nsw i64 %58, 26
  %365 = getelementptr inbounds float, float* %6, i64 %364
  %366 = load float, float* %365, align 4, !tbaa !6766
  %367 = insertelement <16 x float> undef, float %366, i32 0
  %368 = shufflevector <16 x float> %367, <16 x float> undef, <16 x i32> zeroinitializer
  %369 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %368, <16 x float> %360, <16 x float> %356)
  %370 = add nsw i64 %60, 176
  %371 = getelementptr inbounds float, float* %9, i64 %370
  %372 = bitcast float* %371 to <16 x float>*
  %373 = load <16 x float>, <16 x float>* %372, align 64, !tbaa !6789
  %374 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %343, <16 x float> %373, <16 x float> %361)
  %375 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %349, <16 x float> %373, <16 x float> %362)
  %376 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %355, <16 x float> %373, <16 x float> %363)
  %377 = add nsw i64 %58, 29
  %378 = getelementptr inbounds float, float* %6, i64 %377
  %379 = load float, float* %378, align 4, !tbaa !6766
  %380 = insertelement <16 x float> undef, float %379, i32 0
  %381 = shufflevector <16 x float> %380, <16 x float> undef, <16 x i32> zeroinitializer
  %382 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %381, <16 x float> %373, <16 x float> %369)
  %383 = add nsw i64 %60, 224
  %384 = getelementptr inbounds float, float* %9, i64 %383
  %385 = bitcast float* %384 to <16 x float>*
  %386 = load <16 x float>, <16 x float>* %385, align 64, !tbaa !6789
  %387 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %321, <16 x float> %386, <16 x float> %374)
  %388 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %327, <16 x float> %386, <16 x float> %375)
  %389 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %368, <16 x float> %386, <16 x float> %376)
  %390 = add nsw i64 %58, 32
  %391 = getelementptr inbounds float, float* %6, i64 %390
  %392 = load float, float* %391, align 4, !tbaa !6766
  %393 = insertelement <16 x float> undef, float %392, i32 0
  %394 = shufflevector <16 x float> %393, <16 x float> undef, <16 x i32> zeroinitializer
  %395 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %394, <16 x float> %386, <16 x float> %382)
  %396 = add nsw i64 %60, 272
  %397 = getelementptr inbounds float, float* %9, i64 %396
  %398 = bitcast float* %397 to <16 x float>*
  %399 = load <16 x float>, <16 x float>* %398, align 64, !tbaa !6789
  %400 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %349, <16 x float> %399, <16 x float> %387)
  %401 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %355, <16 x float> %399, <16 x float> %388)
  %402 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %381, <16 x float> %399, <16 x float> %389)
  %403 = add nsw i64 %58, 35
  %404 = getelementptr inbounds float, float* %6, i64 %403
  %405 = load float, float* %404, align 4, !tbaa !6766
  %406 = insertelement <16 x float> undef, float %405, i32 0
  %407 = shufflevector <16 x float> %406, <16 x float> undef, <16 x i32> zeroinitializer
  %408 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %407, <16 x float> %399, <16 x float> %395)
  %409 = add nsw i64 %60, 320
  %410 = getelementptr inbounds float, float* %9, i64 %409
  %411 = bitcast float* %410 to <16 x float>*
  %412 = load <16 x float>, <16 x float>* %411, align 64, !tbaa !6789
  %413 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %327, <16 x float> %412, <16 x float> %400)
  %414 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %368, <16 x float> %412, <16 x float> %401)
  %415 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %394, <16 x float> %412, <16 x float> %402)
  %416 = add nsw i64 %58, 38
  %417 = getelementptr inbounds float, float* %6, i64 %416
  %418 = load float, float* %417, align 4, !tbaa !6766
  %419 = insertelement <16 x float> undef, float %418, i32 0
  %420 = shufflevector <16 x float> %419, <16 x float> undef, <16 x i32> zeroinitializer
  %421 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %420, <16 x float> %412, <16 x float> %408)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 7
  br i1 %exitcond, label %for_begin10.preheader, label %for_begin7.preheader, !prof !50

for_begin16.preheader:                            ; preds = %for_begin16.preheader, %for_begin13.preheader
  %indvars.iv47 = phi i64 [ 0, %for_begin13.preheader ], [ %indvars.iv.next48, %for_begin16.preheader ]
  %422 = shl nsw i64 %indvars.iv47, 6
  %423 = trunc i64 %422 to i32
  %424 = add i32 %47, %423
  %425 = getelementptr inbounds float, float* %53, i64 %422
  %426 = bitcast float* %425 to <16 x float>*
  %427 = load <16 x float>, <16 x float>* %426, align 64, !tbaa !6792
  %428 = fadd <16 x float> %52, %427
  %429 = fcmp ogt <16 x float> %428, zeroinitializer
  %430 = select <16 x i1> %429, <16 x float> %428, <16 x float> zeroinitializer
  %431 = sext i32 %424 to i64
  %432 = getelementptr inbounds float, float* %12, i64 %431
  %433 = bitcast float* %432 to <16 x float>*
  store <16 x float> %430, <16 x float>* %433, align 64, !tbaa !6795
  %434 = or i64 %422, 16
  %435 = trunc i64 %434 to i32
  %436 = add i32 %47, %435
  %437 = getelementptr inbounds float, float* %53, i64 %434
  %438 = bitcast float* %437 to <16 x float>*
  %439 = load <16 x float>, <16 x float>* %438, align 64, !tbaa !6792
  %440 = fadd <16 x float> %52, %439
  %441 = fcmp ogt <16 x float> %440, zeroinitializer
  %442 = select <16 x i1> %441, <16 x float> %440, <16 x float> zeroinitializer
  %443 = sext i32 %436 to i64
  %444 = getelementptr inbounds float, float* %12, i64 %443
  %445 = bitcast float* %444 to <16 x float>*
  store <16 x float> %442, <16 x float>* %445, align 64, !tbaa !6795
  %446 = or i64 %422, 32
  %447 = trunc i64 %446 to i32
  %448 = add i32 %47, %447
  %449 = getelementptr inbounds float, float* %53, i64 %446
  %450 = bitcast float* %449 to <16 x float>*
  %451 = load <16 x float>, <16 x float>* %450, align 64, !tbaa !6792
  %452 = fadd <16 x float> %52, %451
  %453 = fcmp ogt <16 x float> %452, zeroinitializer
  %454 = select <16 x i1> %453, <16 x float> %452, <16 x float> zeroinitializer
  %455 = sext i32 %448 to i64
  %456 = getelementptr inbounds float, float* %12, i64 %455
  %457 = bitcast float* %456 to <16 x float>*
  store <16 x float> %454, <16 x float>* %457, align 64, !tbaa !6795
  %458 = or i64 %422, 48
  %459 = trunc i64 %458 to i32
  %460 = add i32 %47, %459
  %461 = getelementptr inbounds float, float* %53, i64 %458
  %462 = bitcast float* %461 to <16 x float>*
  %463 = load <16 x float>, <16 x float>* %462, align 64, !tbaa !6792
  %464 = fadd <16 x float> %52, %463
  %465 = fcmp ogt <16 x float> %464, zeroinitializer
  %466 = select <16 x i1> %465, <16 x float> %464, <16 x float> zeroinitializer
  %467 = sext i32 %460 to i64
  %468 = getelementptr inbounds float, float* %12, i64 %467
  %469 = bitcast float* %468 to <16 x float>*
  store <16 x float> %466, <16 x float>* %469, align 64, !tbaa !6795
  %indvars.iv.next48 = add nuw nsw i64 %indvars.iv47, 1
  %exitcond49 = icmp eq i64 %indvars.iv.next48, 28
  br i1 %exitcond49, label %for_end15, label %for_begin16.preheader, !prof !50

for_end15:                                        ; preds = %for_begin16.preheader
  %470 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %471 = tail call i32 %470(i32 1, i32 %18, i8* nonnull %40)
  %472 = add nsw i32 %38, 1
  %473 = icmp slt i32 %472, %26
  br i1 %473, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.424, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !6798
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !6812
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !6815
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.425, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !6817
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.426, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.427, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.428, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !6819
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !6833
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 64
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.162, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !6835
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 14
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.125, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !6838
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 14
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.126, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !6840
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 16
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !6844
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 200704
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !6858
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 3136
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !6860
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 224
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !6863
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 16
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !6865
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.163, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !6869
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 64
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.128, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !6883
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 64
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.205, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !6885
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !6888
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !6890
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 16
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !6894
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !6896
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 8192
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !6910
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 128
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !6912
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 128
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !6915
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 128
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !6917
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 8
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !6921
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([271 x i8], [271 x i8]* @.str.353, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !6923
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !6937
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 64
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.131, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !6939
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !6942
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !6944
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 8
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !6948
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 512
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !6962
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 8
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !6964
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 8
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !6967
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 8
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !6969
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.179, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !6973
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !6987
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 64
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.133, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !6989
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 14
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !6992
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 14
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.135, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !6994
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 8
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !6998
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 100352
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !7012
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 1568
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !7014
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 112
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !7017
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 8
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !7019
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.429, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3_compute_(i8* %27, i8* %35, i8* %47, i8* %41)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %4 = alloca %43, align 8
  %5 = getelementptr inbounds %43, %43* %4, i64 0, i32 0
  store i8* %0, i8** %5, align 8
  %6 = getelementptr inbounds %43, %43* %4, i64 0, i32 1
  store i8* %1, i8** %6, align 8
  %7 = getelementptr inbounds %43, %43* %4, i64 0, i32 2
  store i8* %2, i8** %7, align 8
  %8 = getelementptr inbounds %43, %43* %4, i64 0, i32 3
  store i8* %3, i8** %8, align 8
  %9 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %10 = bitcast %43* %4 to i8*
  %11 = call i32 %9(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.430, i8* nonnull %10, i32 0)
  ret i32 %11
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.430(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = alloca [28 x <8 x float>], align 16
  %4 = bitcast i8* %2 to float**
  %5 = load float*, float** %4, align 8
  %6 = getelementptr inbounds i8, i8* %2, i64 8
  %7 = bitcast i8* %6 to float**
  %8 = load float*, float** %7, align 8
  %9 = getelementptr inbounds i8, i8* %2, i64 16
  %10 = bitcast i8* %9 to float**
  %11 = load float*, float** %10, align 8
  %12 = getelementptr inbounds i8, i8* %2, i64 24
  %13 = bitcast i8* %12 to float**
  %14 = load float*, float** %13, align 8
  %15 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = add nsw i32 %16, 447
  %18 = sdiv i32 %17, %16
  %19 = add nsw i32 %0, 1
  %20 = mul nsw i32 %18, %19
  %21 = icmp slt i32 %20, 448
  %22 = select i1 %21, i32 %20, i32 448
  %23 = mul nsw i32 %18, %0
  %24 = icmp slt i32 %23, 448
  %25 = select i1 %24, i32 %23, i32 448
  %26 = icmp slt i32 %25, %22
  br i1 %26, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %27 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 168
  %28 = bitcast float* %27 to <8 x float>*
  %29 = sext i32 %25 to i64
  %30 = sext i32 %22 to i64
  %31 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0
  %32 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 8
  %33 = bitcast float* %32 to <8 x float>*
  %34 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 16
  %35 = bitcast float* %34 to <8 x float>*
  %36 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 24
  %37 = bitcast float* %36 to <8 x float>*
  %38 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 32
  %39 = bitcast float* %38 to <8 x float>*
  %40 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 40
  %41 = bitcast float* %40 to <8 x float>*
  %42 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 48
  %43 = bitcast float* %42 to <8 x float>*
  %44 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 112
  %45 = bitcast float* %44 to <8 x float>*
  %46 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 120
  %47 = bitcast float* %46 to <8 x float>*
  %48 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 128
  %49 = bitcast float* %48 to <8 x float>*
  %50 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 136
  %51 = bitcast float* %50 to <8 x float>*
  %52 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 144
  %53 = bitcast float* %52 to <8 x float>*
  %54 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 152
  %55 = bitcast float* %54 to <8 x float>*
  %56 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 160
  %57 = bitcast float* %56 to <8 x float>*
  %58 = bitcast [28 x <8 x float>]* %3 to i8*
  %59 = bitcast float* %44 to i8*
  %60 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 56
  %61 = bitcast float* %60 to <8 x float>*
  %62 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 64
  %63 = bitcast float* %62 to <8 x float>*
  %64 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 72
  %65 = bitcast float* %64 to <8 x float>*
  %66 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 80
  %67 = bitcast float* %66 to <8 x float>*
  %68 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 88
  %69 = bitcast float* %68 to <8 x float>*
  %70 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 96
  %71 = bitcast float* %70 to <8 x float>*
  %72 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 104
  %73 = bitcast float* %72 to <8 x float>*
  %74 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 176
  %75 = bitcast float* %74 to <8 x float>*
  %76 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 184
  %77 = bitcast float* %76 to <8 x float>*
  %78 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 192
  %79 = bitcast float* %78 to <8 x float>*
  %80 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 200
  %81 = bitcast float* %80 to <8 x float>*
  %82 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 208
  %83 = bitcast float* %82 to <8 x float>*
  %84 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 216
  %85 = bitcast float* %84 to <8 x float>*
  %86 = bitcast float* %60 to i8*
  %87 = bitcast float* %27 to i8*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end6.1
  %indvars.iv104 = phi i64 [ %29, %for_begin1.preheader.preheader ], [ %indvars.iv.next105, %for_end6.1 ]
  %88 = trunc i64 %indvars.iv104 to i32
  %89 = sdiv i32 %88, 7
  %90 = mul i32 %89, 7
  %.decomposed = sub i32 %88, %90
  %91 = mul nsw i32 %.decomposed, 448
  %92 = shl i32 %89, 13
  %93 = sext i32 %92 to i64
  %94 = sext i32 %91 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %58, i8 0, i64 224, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %59, i8 0, i64 224, i1 false)
  br label %for_begin7.preheader

for_end:                                          ; preds = %for_end6.1, %entry
  ret i32 0

for_begin7.preheader:                             ; preds = %for_end9, %for_begin1.preheader
  %indvars.iv87 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next88, %for_end9 ]
  %.lcssa4673 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %202, %for_end9 ]
  %.lcssa4471 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %196, %for_end9 ]
  %.lcssa4269 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %190, %for_end9 ]
  %.lcssa4067 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %184, %for_end9 ]
  %.lcssa3865 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %178, %for_end9 ]
  %.lcssa3663 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %172, %for_end9 ]
  %.lcssa3461 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %166, %for_end9 ]
  %.lcssa3259 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %160, %for_end9 ]
  %.lcssa3057 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %154, %for_end9 ]
  %.lcssa2855 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %148, %for_end9 ]
  %.lcssa2653 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %142, %for_end9 ]
  %.lcssa2451 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %136, %for_end9 ]
  %.lcssa2249 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %130, %for_end9 ]
  %.lcssa48 = phi <8 x float> [ zeroinitializer, %for_begin1.preheader ], [ %124, %for_end9 ]
  %95 = mul nuw nsw i64 %indvars.iv87, 3136
  %96 = add nsw i64 %95, %94
  %97 = shl i64 %indvars.iv87, 7
  %98 = add nuw nsw i64 %97, %93
  br label %for_body8

for_end6:                                         ; preds = %for_end9
  store <8 x float> %124, <8 x float>* %31, align 16, !tbaa !7023
  store <8 x float> %130, <8 x float>* %33, align 16, !tbaa !7023
  store <8 x float> %136, <8 x float>* %35, align 16, !tbaa !7023
  store <8 x float> %142, <8 x float>* %37, align 16, !tbaa !7023
  store <8 x float> %148, <8 x float>* %39, align 16, !tbaa !7023
  store <8 x float> %154, <8 x float>* %41, align 16, !tbaa !7023
  store <8 x float> %160, <8 x float>* %43, align 16, !tbaa !7023
  store <8 x float> %166, <8 x float>* %45, align 16, !tbaa !7023
  store <8 x float> %172, <8 x float>* %47, align 16, !tbaa !7023
  store <8 x float> %178, <8 x float>* %49, align 16, !tbaa !7023
  store <8 x float> %184, <8 x float>* %51, align 16, !tbaa !7023
  store <8 x float> %190, <8 x float>* %53, align 16, !tbaa !7023
  store <8 x float> %196, <8 x float>* %55, align 16, !tbaa !7023
  store <8 x float> %202, <8 x float>* %57, align 16, !tbaa !7023
  %99 = add nsw i64 %94, 112
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %86, i8 0, i64 224, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %87, i8 0, i64 224, i1 false)
  br label %for_begin7.preheader.1

for_body8:                                        ; preds = %for_body8, %for_begin7.preheader
  %indvars.iv = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next, %for_body8 ]
  %100 = phi <8 x float> [ %.lcssa4673, %for_begin7.preheader ], [ %202, %for_body8 ]
  %101 = phi <8 x float> [ %.lcssa4471, %for_begin7.preheader ], [ %196, %for_body8 ]
  %102 = phi <8 x float> [ %.lcssa4269, %for_begin7.preheader ], [ %190, %for_body8 ]
  %103 = phi <8 x float> [ %.lcssa4067, %for_begin7.preheader ], [ %184, %for_body8 ]
  %104 = phi <8 x float> [ %.lcssa3865, %for_begin7.preheader ], [ %178, %for_body8 ]
  %105 = phi <8 x float> [ %.lcssa3663, %for_begin7.preheader ], [ %172, %for_body8 ]
  %106 = phi <8 x float> [ %.lcssa3461, %for_begin7.preheader ], [ %166, %for_body8 ]
  %107 = phi <8 x float> [ %.lcssa3259, %for_begin7.preheader ], [ %160, %for_body8 ]
  %108 = phi <8 x float> [ %.lcssa3057, %for_begin7.preheader ], [ %154, %for_body8 ]
  %109 = phi <8 x float> [ %.lcssa2855, %for_begin7.preheader ], [ %148, %for_body8 ]
  %110 = phi <8 x float> [ %.lcssa2653, %for_begin7.preheader ], [ %142, %for_body8 ]
  %111 = phi <8 x float> [ %.lcssa2451, %for_begin7.preheader ], [ %136, %for_body8 ]
  %112 = phi <8 x float> [ %.lcssa2249, %for_begin7.preheader ], [ %130, %for_body8 ]
  %113 = phi <8 x float> [ %.lcssa48, %for_begin7.preheader ], [ %124, %for_body8 ]
  %114 = add nsw i64 %96, %indvars.iv
  %115 = getelementptr inbounds float, float* %5, i64 %114
  %116 = load float, float* %115, align 4, !tbaa !7026
  %117 = insertelement <8 x float> undef, float %116, i32 0
  %118 = shufflevector <8 x float> %117, <8 x float> undef, <8 x i32> zeroinitializer
  %119 = shl i64 %indvars.iv, 3
  %120 = add nuw nsw i64 %98, %119
  %121 = getelementptr inbounds float, float* %8, i64 %120
  %122 = bitcast float* %121 to <8 x float>*
  %123 = load <8 x float>, <8 x float>* %122, align 32, !tbaa !7029
  %124 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %118, <8 x float> %123, <8 x float> %113)
  %125 = add nsw i64 %114, 16
  %126 = getelementptr inbounds float, float* %5, i64 %125
  %127 = load float, float* %126, align 4, !tbaa !7026
  %128 = insertelement <8 x float> undef, float %127, i32 0
  %129 = shufflevector <8 x float> %128, <8 x float> undef, <8 x i32> zeroinitializer
  %130 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %129, <8 x float> %123, <8 x float> %112)
  %131 = add nsw i64 %114, 32
  %132 = getelementptr inbounds float, float* %5, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !7026
  %134 = insertelement <8 x float> undef, float %133, i32 0
  %135 = shufflevector <8 x float> %134, <8 x float> undef, <8 x i32> zeroinitializer
  %136 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %135, <8 x float> %123, <8 x float> %111)
  %137 = add nsw i64 %114, 48
  %138 = getelementptr inbounds float, float* %5, i64 %137
  %139 = load float, float* %138, align 4, !tbaa !7026
  %140 = insertelement <8 x float> undef, float %139, i32 0
  %141 = shufflevector <8 x float> %140, <8 x float> undef, <8 x i32> zeroinitializer
  %142 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %141, <8 x float> %123, <8 x float> %110)
  %143 = add nsw i64 %114, 64
  %144 = getelementptr inbounds float, float* %5, i64 %143
  %145 = load float, float* %144, align 4, !tbaa !7026
  %146 = insertelement <8 x float> undef, float %145, i32 0
  %147 = shufflevector <8 x float> %146, <8 x float> undef, <8 x i32> zeroinitializer
  %148 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %147, <8 x float> %123, <8 x float> %109)
  %149 = add nsw i64 %114, 80
  %150 = getelementptr inbounds float, float* %5, i64 %149
  %151 = load float, float* %150, align 4, !tbaa !7026
  %152 = insertelement <8 x float> undef, float %151, i32 0
  %153 = shufflevector <8 x float> %152, <8 x float> undef, <8 x i32> zeroinitializer
  %154 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %153, <8 x float> %123, <8 x float> %108)
  %155 = add nsw i64 %114, 96
  %156 = getelementptr inbounds float, float* %5, i64 %155
  %157 = load float, float* %156, align 4, !tbaa !7026
  %158 = insertelement <8 x float> undef, float %157, i32 0
  %159 = shufflevector <8 x float> %158, <8 x float> undef, <8 x i32> zeroinitializer
  %160 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %159, <8 x float> %123, <8 x float> %107)
  %161 = add nsw i64 %114, 224
  %162 = getelementptr inbounds float, float* %5, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !7026
  %164 = insertelement <8 x float> undef, float %163, i32 0
  %165 = shufflevector <8 x float> %164, <8 x float> undef, <8 x i32> zeroinitializer
  %166 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %165, <8 x float> %123, <8 x float> %106)
  %167 = add nsw i64 %114, 240
  %168 = getelementptr inbounds float, float* %5, i64 %167
  %169 = load float, float* %168, align 4, !tbaa !7026
  %170 = insertelement <8 x float> undef, float %169, i32 0
  %171 = shufflevector <8 x float> %170, <8 x float> undef, <8 x i32> zeroinitializer
  %172 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %171, <8 x float> %123, <8 x float> %105)
  %173 = add nsw i64 %114, 256
  %174 = getelementptr inbounds float, float* %5, i64 %173
  %175 = load float, float* %174, align 4, !tbaa !7026
  %176 = insertelement <8 x float> undef, float %175, i32 0
  %177 = shufflevector <8 x float> %176, <8 x float> undef, <8 x i32> zeroinitializer
  %178 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %177, <8 x float> %123, <8 x float> %104)
  %179 = add nsw i64 %114, 272
  %180 = getelementptr inbounds float, float* %5, i64 %179
  %181 = load float, float* %180, align 4, !tbaa !7026
  %182 = insertelement <8 x float> undef, float %181, i32 0
  %183 = shufflevector <8 x float> %182, <8 x float> undef, <8 x i32> zeroinitializer
  %184 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %183, <8 x float> %123, <8 x float> %103)
  %185 = add nsw i64 %114, 288
  %186 = getelementptr inbounds float, float* %5, i64 %185
  %187 = load float, float* %186, align 4, !tbaa !7026
  %188 = insertelement <8 x float> undef, float %187, i32 0
  %189 = shufflevector <8 x float> %188, <8 x float> undef, <8 x i32> zeroinitializer
  %190 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %189, <8 x float> %123, <8 x float> %102)
  %191 = add nsw i64 %114, 304
  %192 = getelementptr inbounds float, float* %5, i64 %191
  %193 = load float, float* %192, align 4, !tbaa !7026
  %194 = insertelement <8 x float> undef, float %193, i32 0
  %195 = shufflevector <8 x float> %194, <8 x float> undef, <8 x i32> zeroinitializer
  %196 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %195, <8 x float> %123, <8 x float> %101)
  %197 = add nsw i64 %114, 320
  %198 = getelementptr inbounds float, float* %5, i64 %197
  %199 = load float, float* %198, align 4, !tbaa !7026
  %200 = insertelement <8 x float> undef, float %199, i32 0
  %201 = shufflevector <8 x float> %200, <8 x float> undef, <8 x i32> zeroinitializer
  %202 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %201, <8 x float> %123, <8 x float> %100)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end9, label %for_body8, !prof !50

for_end9:                                         ; preds = %for_body8
  %indvars.iv.next88 = add nuw nsw i64 %indvars.iv87, 1
  %exitcond89 = icmp eq i64 %indvars.iv.next88, 64
  br i1 %exitcond89, label %for_end6, label %for_begin7.preheader, !prof !50

for_begin7.preheader.1:                           ; preds = %for_end9.1, %for_end6
  %indvars.iv87.1 = phi i64 [ 0, %for_end6 ], [ %indvars.iv.next88.1, %for_end9.1 ]
  %.lcssa4673.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %309, %for_end9.1 ]
  %.lcssa4471.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %303, %for_end9.1 ]
  %.lcssa4269.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %297, %for_end9.1 ]
  %.lcssa4067.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %291, %for_end9.1 ]
  %.lcssa3865.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %285, %for_end9.1 ]
  %.lcssa3663.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %279, %for_end9.1 ]
  %.lcssa3461.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %273, %for_end9.1 ]
  %.lcssa3259.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %267, %for_end9.1 ]
  %.lcssa3057.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %261, %for_end9.1 ]
  %.lcssa2855.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %255, %for_end9.1 ]
  %.lcssa2653.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %249, %for_end9.1 ]
  %.lcssa2451.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %243, %for_end9.1 ]
  %.lcssa2249.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %237, %for_end9.1 ]
  %.lcssa48.1 = phi <8 x float> [ zeroinitializer, %for_end6 ], [ %231, %for_end9.1 ]
  %203 = mul nuw nsw i64 %indvars.iv87.1, 3136
  %204 = add nsw i64 %99, %203
  %205 = shl i64 %indvars.iv87.1, 7
  %206 = add nuw nsw i64 %205, %93
  br label %for_body8.1

for_body8.1:                                      ; preds = %for_body8.1, %for_begin7.preheader.1
  %indvars.iv.1 = phi i64 [ 0, %for_begin7.preheader.1 ], [ %indvars.iv.next.1, %for_body8.1 ]
  %207 = phi <8 x float> [ %.lcssa4673.1, %for_begin7.preheader.1 ], [ %309, %for_body8.1 ]
  %208 = phi <8 x float> [ %.lcssa4471.1, %for_begin7.preheader.1 ], [ %303, %for_body8.1 ]
  %209 = phi <8 x float> [ %.lcssa4269.1, %for_begin7.preheader.1 ], [ %297, %for_body8.1 ]
  %210 = phi <8 x float> [ %.lcssa4067.1, %for_begin7.preheader.1 ], [ %291, %for_body8.1 ]
  %211 = phi <8 x float> [ %.lcssa3865.1, %for_begin7.preheader.1 ], [ %285, %for_body8.1 ]
  %212 = phi <8 x float> [ %.lcssa3663.1, %for_begin7.preheader.1 ], [ %279, %for_body8.1 ]
  %213 = phi <8 x float> [ %.lcssa3461.1, %for_begin7.preheader.1 ], [ %273, %for_body8.1 ]
  %214 = phi <8 x float> [ %.lcssa3259.1, %for_begin7.preheader.1 ], [ %267, %for_body8.1 ]
  %215 = phi <8 x float> [ %.lcssa3057.1, %for_begin7.preheader.1 ], [ %261, %for_body8.1 ]
  %216 = phi <8 x float> [ %.lcssa2855.1, %for_begin7.preheader.1 ], [ %255, %for_body8.1 ]
  %217 = phi <8 x float> [ %.lcssa2653.1, %for_begin7.preheader.1 ], [ %249, %for_body8.1 ]
  %218 = phi <8 x float> [ %.lcssa2451.1, %for_begin7.preheader.1 ], [ %243, %for_body8.1 ]
  %219 = phi <8 x float> [ %.lcssa2249.1, %for_begin7.preheader.1 ], [ %237, %for_body8.1 ]
  %220 = phi <8 x float> [ %.lcssa48.1, %for_begin7.preheader.1 ], [ %231, %for_body8.1 ]
  %221 = add nsw i64 %204, %indvars.iv.1
  %222 = getelementptr inbounds float, float* %5, i64 %221
  %223 = load float, float* %222, align 4, !tbaa !7026
  %224 = insertelement <8 x float> undef, float %223, i32 0
  %225 = shufflevector <8 x float> %224, <8 x float> undef, <8 x i32> zeroinitializer
  %226 = shl i64 %indvars.iv.1, 3
  %227 = add nuw nsw i64 %206, %226
  %228 = getelementptr inbounds float, float* %8, i64 %227
  %229 = bitcast float* %228 to <8 x float>*
  %230 = load <8 x float>, <8 x float>* %229, align 32, !tbaa !7029
  %231 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %225, <8 x float> %230, <8 x float> %220)
  %232 = add nsw i64 %221, 16
  %233 = getelementptr inbounds float, float* %5, i64 %232
  %234 = load float, float* %233, align 4, !tbaa !7026
  %235 = insertelement <8 x float> undef, float %234, i32 0
  %236 = shufflevector <8 x float> %235, <8 x float> undef, <8 x i32> zeroinitializer
  %237 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %236, <8 x float> %230, <8 x float> %219)
  %238 = add nsw i64 %221, 32
  %239 = getelementptr inbounds float, float* %5, i64 %238
  %240 = load float, float* %239, align 4, !tbaa !7026
  %241 = insertelement <8 x float> undef, float %240, i32 0
  %242 = shufflevector <8 x float> %241, <8 x float> undef, <8 x i32> zeroinitializer
  %243 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %242, <8 x float> %230, <8 x float> %218)
  %244 = add nsw i64 %221, 48
  %245 = getelementptr inbounds float, float* %5, i64 %244
  %246 = load float, float* %245, align 4, !tbaa !7026
  %247 = insertelement <8 x float> undef, float %246, i32 0
  %248 = shufflevector <8 x float> %247, <8 x float> undef, <8 x i32> zeroinitializer
  %249 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %248, <8 x float> %230, <8 x float> %217)
  %250 = add nsw i64 %221, 64
  %251 = getelementptr inbounds float, float* %5, i64 %250
  %252 = load float, float* %251, align 4, !tbaa !7026
  %253 = insertelement <8 x float> undef, float %252, i32 0
  %254 = shufflevector <8 x float> %253, <8 x float> undef, <8 x i32> zeroinitializer
  %255 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %254, <8 x float> %230, <8 x float> %216)
  %256 = add nsw i64 %221, 80
  %257 = getelementptr inbounds float, float* %5, i64 %256
  %258 = load float, float* %257, align 4, !tbaa !7026
  %259 = insertelement <8 x float> undef, float %258, i32 0
  %260 = shufflevector <8 x float> %259, <8 x float> undef, <8 x i32> zeroinitializer
  %261 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %260, <8 x float> %230, <8 x float> %215)
  %262 = add nsw i64 %221, 96
  %263 = getelementptr inbounds float, float* %5, i64 %262
  %264 = load float, float* %263, align 4, !tbaa !7026
  %265 = insertelement <8 x float> undef, float %264, i32 0
  %266 = shufflevector <8 x float> %265, <8 x float> undef, <8 x i32> zeroinitializer
  %267 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %266, <8 x float> %230, <8 x float> %214)
  %268 = add nsw i64 %221, 224
  %269 = getelementptr inbounds float, float* %5, i64 %268
  %270 = load float, float* %269, align 4, !tbaa !7026
  %271 = insertelement <8 x float> undef, float %270, i32 0
  %272 = shufflevector <8 x float> %271, <8 x float> undef, <8 x i32> zeroinitializer
  %273 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %272, <8 x float> %230, <8 x float> %213)
  %274 = add nsw i64 %221, 240
  %275 = getelementptr inbounds float, float* %5, i64 %274
  %276 = load float, float* %275, align 4, !tbaa !7026
  %277 = insertelement <8 x float> undef, float %276, i32 0
  %278 = shufflevector <8 x float> %277, <8 x float> undef, <8 x i32> zeroinitializer
  %279 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %278, <8 x float> %230, <8 x float> %212)
  %280 = add nsw i64 %221, 256
  %281 = getelementptr inbounds float, float* %5, i64 %280
  %282 = load float, float* %281, align 4, !tbaa !7026
  %283 = insertelement <8 x float> undef, float %282, i32 0
  %284 = shufflevector <8 x float> %283, <8 x float> undef, <8 x i32> zeroinitializer
  %285 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %284, <8 x float> %230, <8 x float> %211)
  %286 = add nsw i64 %221, 272
  %287 = getelementptr inbounds float, float* %5, i64 %286
  %288 = load float, float* %287, align 4, !tbaa !7026
  %289 = insertelement <8 x float> undef, float %288, i32 0
  %290 = shufflevector <8 x float> %289, <8 x float> undef, <8 x i32> zeroinitializer
  %291 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %290, <8 x float> %230, <8 x float> %210)
  %292 = add nsw i64 %221, 288
  %293 = getelementptr inbounds float, float* %5, i64 %292
  %294 = load float, float* %293, align 4, !tbaa !7026
  %295 = insertelement <8 x float> undef, float %294, i32 0
  %296 = shufflevector <8 x float> %295, <8 x float> undef, <8 x i32> zeroinitializer
  %297 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %296, <8 x float> %230, <8 x float> %209)
  %298 = add nsw i64 %221, 304
  %299 = getelementptr inbounds float, float* %5, i64 %298
  %300 = load float, float* %299, align 4, !tbaa !7026
  %301 = insertelement <8 x float> undef, float %300, i32 0
  %302 = shufflevector <8 x float> %301, <8 x float> undef, <8 x i32> zeroinitializer
  %303 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %302, <8 x float> %230, <8 x float> %208)
  %304 = add nsw i64 %221, 320
  %305 = getelementptr inbounds float, float* %5, i64 %304
  %306 = load float, float* %305, align 4, !tbaa !7026
  %307 = insertelement <8 x float> undef, float %306, i32 0
  %308 = shufflevector <8 x float> %307, <8 x float> undef, <8 x i32> zeroinitializer
  %309 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %308, <8 x float> %230, <8 x float> %207)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 16
  br i1 %exitcond.1, label %for_end9.1, label %for_body8.1, !prof !50

for_end9.1:                                       ; preds = %for_body8.1
  %indvars.iv.next88.1 = add nuw nsw i64 %indvars.iv87.1, 1
  %exitcond89.1 = icmp eq i64 %indvars.iv.next88.1, 64
  br i1 %exitcond89.1, label %for_end6.1, label %for_begin7.preheader.1, !prof !50

for_end6.1:                                       ; preds = %for_end9.1
  store <8 x float> %231, <8 x float>* %61, align 16, !tbaa !7023
  store <8 x float> %237, <8 x float>* %63, align 16, !tbaa !7023
  store <8 x float> %243, <8 x float>* %65, align 16, !tbaa !7023
  store <8 x float> %249, <8 x float>* %67, align 16, !tbaa !7023
  store <8 x float> %255, <8 x float>* %69, align 16, !tbaa !7023
  store <8 x float> %261, <8 x float>* %71, align 16, !tbaa !7023
  store <8 x float> %267, <8 x float>* %73, align 16, !tbaa !7023
  store <8 x float> %273, <8 x float>* %28, align 16, !tbaa !7023
  store <8 x float> %279, <8 x float>* %75, align 16, !tbaa !7023
  store <8 x float> %285, <8 x float>* %77, align 16, !tbaa !7023
  store <8 x float> %291, <8 x float>* %79, align 16, !tbaa !7023
  store <8 x float> %297, <8 x float>* %81, align 16, !tbaa !7023
  store <8 x float> %303, <8 x float>* %83, align 16, !tbaa !7023
  store <8 x float> %309, <8 x float>* %85, align 16, !tbaa !7023
  %310 = mul nsw i64 %indvars.iv104, 224
  %311 = shl nsw i32 %89, 3
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds float, float* %14, i64 %312
  %314 = bitcast float* %313 to <8 x float>*
  %315 = load <8 x float>, <8 x float>* %314, align 32, !tbaa !7032
  %316 = load <8 x float>, <8 x float>* %31, align 16, !tbaa !7023
  %317 = fadd <8 x float> %315, %316
  %318 = fcmp ogt <8 x float> %317, zeroinitializer
  %319 = select <8 x i1> %318, <8 x float> %317, <8 x float> zeroinitializer
  %320 = getelementptr inbounds float, float* %11, i64 %310
  %321 = bitcast float* %320 to <8 x float>*
  store <8 x float> %319, <8 x float>* %321, align 32, !tbaa !7035
  %322 = load <8 x float>, <8 x float>* %33, align 16, !tbaa !7023
  %323 = fadd <8 x float> %315, %322
  %324 = fcmp ogt <8 x float> %323, zeroinitializer
  %325 = select <8 x i1> %324, <8 x float> %323, <8 x float> zeroinitializer
  %326 = mul i64 %indvars.iv104, 962072674304
  %sext = ashr exact i64 %326, 32
  %327 = or i64 %sext, 8
  %328 = getelementptr inbounds float, float* %11, i64 %327
  %329 = bitcast float* %328 to <8 x float>*
  store <8 x float> %325, <8 x float>* %329, align 32, !tbaa !7035
  %330 = load <8 x float>, <8 x float>* %35, align 16, !tbaa !7023
  %331 = fadd <8 x float> %315, %330
  %332 = fcmp ogt <8 x float> %331, zeroinitializer
  %333 = select <8 x i1> %332, <8 x float> %331, <8 x float> zeroinitializer
  %334 = mul i64 %indvars.iv104, 962072674304
  %sext106 = ashr exact i64 %334, 32
  %335 = or i64 %sext106, 16
  %336 = getelementptr inbounds float, float* %11, i64 %335
  %337 = bitcast float* %336 to <8 x float>*
  store <8 x float> %333, <8 x float>* %337, align 32, !tbaa !7035
  %338 = load <8 x float>, <8 x float>* %37, align 16, !tbaa !7023
  %339 = fadd <8 x float> %315, %338
  %340 = fcmp ogt <8 x float> %339, zeroinitializer
  %341 = select <8 x i1> %340, <8 x float> %339, <8 x float> zeroinitializer
  %342 = mul i64 %indvars.iv104, 962072674304
  %sext107 = ashr exact i64 %342, 32
  %343 = or i64 %sext107, 24
  %344 = getelementptr inbounds float, float* %11, i64 %343
  %345 = bitcast float* %344 to <8 x float>*
  store <8 x float> %341, <8 x float>* %345, align 32, !tbaa !7035
  %346 = load <8 x float>, <8 x float>* %39, align 16, !tbaa !7023
  %347 = fadd <8 x float> %315, %346
  %348 = fcmp ogt <8 x float> %347, zeroinitializer
  %349 = select <8 x i1> %348, <8 x float> %347, <8 x float> zeroinitializer
  %350 = mul i64 %indvars.iv104, 962072674304
  %sext108 = add i64 %350, 137438953472
  %351 = ashr exact i64 %sext108, 32
  %352 = getelementptr inbounds float, float* %11, i64 %351
  %353 = bitcast float* %352 to <8 x float>*
  store <8 x float> %349, <8 x float>* %353, align 32, !tbaa !7035
  %354 = load <8 x float>, <8 x float>* %41, align 16, !tbaa !7023
  %355 = fadd <8 x float> %315, %354
  %356 = fcmp ogt <8 x float> %355, zeroinitializer
  %357 = select <8 x i1> %356, <8 x float> %355, <8 x float> zeroinitializer
  %358 = mul i64 %indvars.iv104, 962072674304
  %sext109 = add i64 %358, 171798691840
  %359 = ashr exact i64 %sext109, 32
  %360 = getelementptr inbounds float, float* %11, i64 %359
  %361 = bitcast float* %360 to <8 x float>*
  store <8 x float> %357, <8 x float>* %361, align 32, !tbaa !7035
  %362 = load <8 x float>, <8 x float>* %43, align 16, !tbaa !7023
  %363 = fadd <8 x float> %315, %362
  %364 = fcmp ogt <8 x float> %363, zeroinitializer
  %365 = select <8 x i1> %364, <8 x float> %363, <8 x float> zeroinitializer
  %366 = mul i64 %indvars.iv104, 962072674304
  %sext110 = add i64 %366, 206158430208
  %367 = ashr exact i64 %sext110, 32
  %368 = getelementptr inbounds float, float* %11, i64 %367
  %369 = bitcast float* %368 to <8 x float>*
  store <8 x float> %365, <8 x float>* %369, align 32, !tbaa !7035
  %370 = load <8 x float>, <8 x float>* %45, align 16, !tbaa !7023
  %371 = fadd <8 x float> %315, %370
  %372 = fcmp ogt <8 x float> %371, zeroinitializer
  %373 = select <8 x i1> %372, <8 x float> %371, <8 x float> zeroinitializer
  %374 = mul i64 %indvars.iv104, 962072674304
  %sext129 = add i64 %374, 481036337152
  %375 = ashr exact i64 %sext129, 32
  %376 = getelementptr inbounds float, float* %11, i64 %375
  %377 = bitcast float* %376 to <8 x float>*
  store <8 x float> %373, <8 x float>* %377, align 32, !tbaa !7035
  %378 = load <8 x float>, <8 x float>* %47, align 16, !tbaa !7023
  %379 = fadd <8 x float> %315, %378
  %380 = fcmp ogt <8 x float> %379, zeroinitializer
  %381 = select <8 x i1> %380, <8 x float> %379, <8 x float> zeroinitializer
  %382 = mul i64 %indvars.iv104, 962072674304
  %sext111 = add i64 %382, 515396075520
  %383 = ashr exact i64 %sext111, 32
  %384 = getelementptr inbounds float, float* %11, i64 %383
  %385 = bitcast float* %384 to <8 x float>*
  store <8 x float> %381, <8 x float>* %385, align 32, !tbaa !7035
  %386 = load <8 x float>, <8 x float>* %49, align 16, !tbaa !7023
  %387 = fadd <8 x float> %315, %386
  %388 = fcmp ogt <8 x float> %387, zeroinitializer
  %389 = select <8 x i1> %388, <8 x float> %387, <8 x float> zeroinitializer
  %390 = mul i64 %indvars.iv104, 962072674304
  %sext112 = add i64 %390, 549755813888
  %391 = ashr exact i64 %sext112, 32
  %392 = getelementptr inbounds float, float* %11, i64 %391
  %393 = bitcast float* %392 to <8 x float>*
  store <8 x float> %389, <8 x float>* %393, align 32, !tbaa !7035
  %394 = load <8 x float>, <8 x float>* %51, align 16, !tbaa !7023
  %395 = fadd <8 x float> %315, %394
  %396 = fcmp ogt <8 x float> %395, zeroinitializer
  %397 = select <8 x i1> %396, <8 x float> %395, <8 x float> zeroinitializer
  %398 = mul i64 %indvars.iv104, 962072674304
  %sext113 = add i64 %398, 584115552256
  %399 = ashr exact i64 %sext113, 32
  %400 = getelementptr inbounds float, float* %11, i64 %399
  %401 = bitcast float* %400 to <8 x float>*
  store <8 x float> %397, <8 x float>* %401, align 32, !tbaa !7035
  %402 = load <8 x float>, <8 x float>* %53, align 16, !tbaa !7023
  %403 = fadd <8 x float> %315, %402
  %404 = fcmp ogt <8 x float> %403, zeroinitializer
  %405 = select <8 x i1> %404, <8 x float> %403, <8 x float> zeroinitializer
  %406 = mul i64 %indvars.iv104, 962072674304
  %sext114 = add i64 %406, 618475290624
  %407 = ashr exact i64 %sext114, 32
  %408 = getelementptr inbounds float, float* %11, i64 %407
  %409 = bitcast float* %408 to <8 x float>*
  store <8 x float> %405, <8 x float>* %409, align 32, !tbaa !7035
  %410 = load <8 x float>, <8 x float>* %55, align 16, !tbaa !7023
  %411 = fadd <8 x float> %315, %410
  %412 = fcmp ogt <8 x float> %411, zeroinitializer
  %413 = select <8 x i1> %412, <8 x float> %411, <8 x float> zeroinitializer
  %414 = mul i64 %indvars.iv104, 962072674304
  %sext115 = add i64 %414, 652835028992
  %415 = ashr exact i64 %sext115, 32
  %416 = getelementptr inbounds float, float* %11, i64 %415
  %417 = bitcast float* %416 to <8 x float>*
  store <8 x float> %413, <8 x float>* %417, align 32, !tbaa !7035
  %418 = load <8 x float>, <8 x float>* %57, align 16, !tbaa !7023
  %419 = fadd <8 x float> %315, %418
  %420 = fcmp ogt <8 x float> %419, zeroinitializer
  %421 = select <8 x i1> %420, <8 x float> %419, <8 x float> zeroinitializer
  %422 = mul i64 %indvars.iv104, 962072674304
  %sext116 = add i64 %422, 687194767360
  %423 = ashr exact i64 %sext116, 32
  %424 = getelementptr inbounds float, float* %11, i64 %423
  %425 = bitcast float* %424 to <8 x float>*
  store <8 x float> %421, <8 x float>* %425, align 32, !tbaa !7035
  %426 = load <8 x float>, <8 x float>* %61, align 16, !tbaa !7023
  %427 = fadd <8 x float> %315, %426
  %428 = fcmp ogt <8 x float> %427, zeroinitializer
  %429 = select <8 x i1> %428, <8 x float> %427, <8 x float> zeroinitializer
  %430 = mul i64 %indvars.iv104, 962072674304
  %sext130 = add i64 %430, 240518168576
  %431 = ashr exact i64 %sext130, 32
  %432 = getelementptr inbounds float, float* %11, i64 %431
  %433 = bitcast float* %432 to <8 x float>*
  store <8 x float> %429, <8 x float>* %433, align 32, !tbaa !7035
  %434 = load <8 x float>, <8 x float>* %63, align 16, !tbaa !7023
  %435 = fadd <8 x float> %315, %434
  %436 = fcmp ogt <8 x float> %435, zeroinitializer
  %437 = select <8 x i1> %436, <8 x float> %435, <8 x float> zeroinitializer
  %438 = mul i64 %indvars.iv104, 962072674304
  %sext117 = add i64 %438, 274877906944
  %439 = ashr exact i64 %sext117, 32
  %440 = getelementptr inbounds float, float* %11, i64 %439
  %441 = bitcast float* %440 to <8 x float>*
  store <8 x float> %437, <8 x float>* %441, align 32, !tbaa !7035
  %442 = load <8 x float>, <8 x float>* %65, align 16, !tbaa !7023
  %443 = fadd <8 x float> %315, %442
  %444 = fcmp ogt <8 x float> %443, zeroinitializer
  %445 = select <8 x i1> %444, <8 x float> %443, <8 x float> zeroinitializer
  %446 = mul i64 %indvars.iv104, 962072674304
  %sext118 = add i64 %446, 309237645312
  %447 = ashr exact i64 %sext118, 32
  %448 = getelementptr inbounds float, float* %11, i64 %447
  %449 = bitcast float* %448 to <8 x float>*
  store <8 x float> %445, <8 x float>* %449, align 32, !tbaa !7035
  %450 = load <8 x float>, <8 x float>* %67, align 16, !tbaa !7023
  %451 = fadd <8 x float> %315, %450
  %452 = fcmp ogt <8 x float> %451, zeroinitializer
  %453 = select <8 x i1> %452, <8 x float> %451, <8 x float> zeroinitializer
  %454 = mul i64 %indvars.iv104, 962072674304
  %sext119 = add i64 %454, 343597383680
  %455 = ashr exact i64 %sext119, 32
  %456 = getelementptr inbounds float, float* %11, i64 %455
  %457 = bitcast float* %456 to <8 x float>*
  store <8 x float> %453, <8 x float>* %457, align 32, !tbaa !7035
  %458 = load <8 x float>, <8 x float>* %69, align 16, !tbaa !7023
  %459 = fadd <8 x float> %315, %458
  %460 = fcmp ogt <8 x float> %459, zeroinitializer
  %461 = select <8 x i1> %460, <8 x float> %459, <8 x float> zeroinitializer
  %462 = mul i64 %indvars.iv104, 962072674304
  %sext120 = add i64 %462, 377957122048
  %463 = ashr exact i64 %sext120, 32
  %464 = getelementptr inbounds float, float* %11, i64 %463
  %465 = bitcast float* %464 to <8 x float>*
  store <8 x float> %461, <8 x float>* %465, align 32, !tbaa !7035
  %466 = load <8 x float>, <8 x float>* %71, align 16, !tbaa !7023
  %467 = fadd <8 x float> %315, %466
  %468 = fcmp ogt <8 x float> %467, zeroinitializer
  %469 = select <8 x i1> %468, <8 x float> %467, <8 x float> zeroinitializer
  %470 = mul i64 %indvars.iv104, 962072674304
  %sext121 = add i64 %470, 412316860416
  %471 = ashr exact i64 %sext121, 32
  %472 = getelementptr inbounds float, float* %11, i64 %471
  %473 = bitcast float* %472 to <8 x float>*
  store <8 x float> %469, <8 x float>* %473, align 32, !tbaa !7035
  %474 = load <8 x float>, <8 x float>* %73, align 16, !tbaa !7023
  %475 = fadd <8 x float> %315, %474
  %476 = fcmp ogt <8 x float> %475, zeroinitializer
  %477 = select <8 x i1> %476, <8 x float> %475, <8 x float> zeroinitializer
  %478 = mul i64 %indvars.iv104, 962072674304
  %sext122 = add i64 %478, 446676598784
  %479 = ashr exact i64 %sext122, 32
  %480 = getelementptr inbounds float, float* %11, i64 %479
  %481 = bitcast float* %480 to <8 x float>*
  store <8 x float> %477, <8 x float>* %481, align 32, !tbaa !7035
  %482 = load <8 x float>, <8 x float>* %28, align 16, !tbaa !7023
  %483 = fadd <8 x float> %315, %482
  %484 = fcmp ogt <8 x float> %483, zeroinitializer
  %485 = select <8 x i1> %484, <8 x float> %483, <8 x float> zeroinitializer
  %486 = mul i64 %indvars.iv104, 962072674304
  %sext131 = add i64 %486, 721554505728
  %487 = ashr exact i64 %sext131, 32
  %488 = getelementptr inbounds float, float* %11, i64 %487
  %489 = bitcast float* %488 to <8 x float>*
  store <8 x float> %485, <8 x float>* %489, align 32, !tbaa !7035
  %490 = load <8 x float>, <8 x float>* %75, align 16, !tbaa !7023
  %491 = fadd <8 x float> %315, %490
  %492 = fcmp ogt <8 x float> %491, zeroinitializer
  %493 = select <8 x i1> %492, <8 x float> %491, <8 x float> zeroinitializer
  %494 = mul i64 %indvars.iv104, 962072674304
  %sext123 = add i64 %494, 755914244096
  %495 = ashr exact i64 %sext123, 32
  %496 = getelementptr inbounds float, float* %11, i64 %495
  %497 = bitcast float* %496 to <8 x float>*
  store <8 x float> %493, <8 x float>* %497, align 32, !tbaa !7035
  %498 = load <8 x float>, <8 x float>* %77, align 16, !tbaa !7023
  %499 = fadd <8 x float> %315, %498
  %500 = fcmp ogt <8 x float> %499, zeroinitializer
  %501 = select <8 x i1> %500, <8 x float> %499, <8 x float> zeroinitializer
  %502 = mul i64 %indvars.iv104, 962072674304
  %sext124 = add i64 %502, 790273982464
  %503 = ashr exact i64 %sext124, 32
  %504 = getelementptr inbounds float, float* %11, i64 %503
  %505 = bitcast float* %504 to <8 x float>*
  store <8 x float> %501, <8 x float>* %505, align 32, !tbaa !7035
  %506 = load <8 x float>, <8 x float>* %79, align 16, !tbaa !7023
  %507 = fadd <8 x float> %315, %506
  %508 = fcmp ogt <8 x float> %507, zeroinitializer
  %509 = select <8 x i1> %508, <8 x float> %507, <8 x float> zeroinitializer
  %510 = mul i64 %indvars.iv104, 962072674304
  %sext125 = add i64 %510, 824633720832
  %511 = ashr exact i64 %sext125, 32
  %512 = getelementptr inbounds float, float* %11, i64 %511
  %513 = bitcast float* %512 to <8 x float>*
  store <8 x float> %509, <8 x float>* %513, align 32, !tbaa !7035
  %514 = load <8 x float>, <8 x float>* %81, align 16, !tbaa !7023
  %515 = fadd <8 x float> %315, %514
  %516 = fcmp ogt <8 x float> %515, zeroinitializer
  %517 = select <8 x i1> %516, <8 x float> %515, <8 x float> zeroinitializer
  %518 = mul i64 %indvars.iv104, 962072674304
  %sext126 = add i64 %518, 858993459200
  %519 = ashr exact i64 %sext126, 32
  %520 = getelementptr inbounds float, float* %11, i64 %519
  %521 = bitcast float* %520 to <8 x float>*
  store <8 x float> %517, <8 x float>* %521, align 32, !tbaa !7035
  %522 = load <8 x float>, <8 x float>* %83, align 16, !tbaa !7023
  %523 = fadd <8 x float> %315, %522
  %524 = fcmp ogt <8 x float> %523, zeroinitializer
  %525 = select <8 x i1> %524, <8 x float> %523, <8 x float> zeroinitializer
  %526 = mul i64 %indvars.iv104, 962072674304
  %sext127 = add i64 %526, 893353197568
  %527 = ashr exact i64 %sext127, 32
  %528 = getelementptr inbounds float, float* %11, i64 %527
  %529 = bitcast float* %528 to <8 x float>*
  store <8 x float> %525, <8 x float>* %529, align 32, !tbaa !7035
  %530 = load <8 x float>, <8 x float>* %85, align 16, !tbaa !7023
  %531 = fadd <8 x float> %315, %530
  %532 = fcmp ogt <8 x float> %531, zeroinitializer
  %533 = select <8 x i1> %532, <8 x float> %531, <8 x float> zeroinitializer
  %534 = mul i64 %indvars.iv104, 962072674304
  %sext128 = add i64 %534, 927712935936
  %535 = ashr exact i64 %sext128, 32
  %536 = getelementptr inbounds float, float* %11, i64 %535
  %537 = bitcast float* %536 to <8 x float>*
  store <8 x float> %533, <8 x float>* %537, align 32, !tbaa !7035
  %indvars.iv.next105 = add nsw i64 %indvars.iv104, 1
  %538 = icmp slt i64 %indvars.iv.next105, %30
  br i1 %538, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.431, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !7038
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !7052
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !7055
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([161 x i8], [161 x i8]* @.str.432, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !7057
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([161 x i8], [161 x i8]* @.str.433, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([161 x i8], [161 x i8]* @.str.434, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([161 x i8], [161 x i8]* @.str.435, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !7059
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !7073
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 4
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.90, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !7075
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 56
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !7078
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 56
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !7080
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 16
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !7084
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 200704
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !7098
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 50176
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !7100
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 896
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !7103
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 16
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !7105
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.91, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !7109
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 8
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !7123
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 4
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !7125
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !7128
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !7130
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 16
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !7134
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 32
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.227, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !7136
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 2048
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !7150
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 512
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !7152
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 512
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !7155
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 512
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !7157
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 32
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !7161
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.246, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !7163
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !7177
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 8
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !7179
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !7182
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !7184
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 32
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.229, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !7188
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 256
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !7202
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 32
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !7204
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 32
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !7207
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 32
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !7209
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.247, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !7213
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !7227
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 8
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !7229
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 56
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !7232
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 56
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !7234
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 32
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.231, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !7238
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 802816
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !7252
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 100352
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !7254
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 1792
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !7257
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 32
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !7259
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.248, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = alloca %44, align 8
  %6 = getelementptr inbounds %44, %44* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %44, %44* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %44, %44* %5, i64 0, i32 2
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %44, %44* %5, i64 0, i32 3
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %44, %44* %5, i64 0, i32 4
  store i32 %4, i32* %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %44* %5 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.436, i8* nonnull %12, i32 0)
  ret i32 %13
}

define private i32 @__tvm_parallel_lambda.436(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 223
  %20 = sdiv i32 %19, %18
  %21 = add nsw i32 %0, 1
  %22 = mul nsw i32 %20, %21
  %23 = icmp slt i32 %22, 224
  %24 = select i1 %23, i32 %22, i32 224
  %25 = mul nsw i32 %20, %0
  %26 = icmp slt i32 %25, 224
  %27 = select i1 %26, i32 %25, i32 224
  %28 = icmp slt i32 %27, %24
  br i1 %28, label %for_body, label %for_end, !prof !5

for_body:                                         ; preds = %entry, %for_end12
  %29 = phi i32 [ %333, %for_end12 ], [ %27, %entry ]
  %30 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %31 = tail call i8* %30(i32 1, i32 %16, i64 14336, i32 2, i32 32)
  %32 = bitcast i8* %31 to float*
  %33 = sdiv i32 %29, 28
  %34 = mul i32 %33, 28
  %.decomposed = sub i32 %29, %34
  %35 = mul nsw i32 %.decomposed, 1792
  %36 = shl i32 %33, 11
  %37 = sext i32 %36 to i64
  %38 = sext i32 %35 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end12, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end6
  %39 = mul nsw i32 %29, 3584
  %40 = shl nsw i32 %33, 5
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %13, i64 %41
  %43 = bitcast float* %42 to <32 x float>*
  %44 = load <32 x float>, <32 x float>* %43, align 128, !tbaa !7263
  br label %for_begin13.preheader

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv27 = phi i64 [ 0, %for_body ], [ %indvars.iv.next28, %for_end6 ]
  %45 = shl nsw i64 %indvars.iv27, 5
  %46 = getelementptr inbounds float, float* %32, i64 %45
  %47 = bitcast float* %46 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %47, align 128, !tbaa !7266
  %48 = add nuw nsw i64 %45, 1792
  %49 = getelementptr inbounds float, float* %32, i64 %48
  %50 = bitcast float* %49 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %50, align 128, !tbaa !7266
  %51 = shl i64 %indvars.iv27, 4
  %52 = add nsw i64 %51, %38
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_begin7.preheader, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_begin7.preheader ]
  %.lcssa2225 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %310, %for_begin7.preheader ]
  %.lcssa24 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %304, %for_begin7.preheader ]
  %53 = mul nuw nsw i64 %indvars.iv, 50176
  %54 = add nsw i64 %52, %53
  %55 = shl i64 %indvars.iv, 9
  %56 = add nuw nsw i64 %55, %37
  %57 = getelementptr inbounds float, float* %4, i64 %54
  %58 = load float, float* %57, align 4, !tbaa !7269
  %59 = insertelement <32 x float> undef, float %58, i32 0
  %60 = shufflevector <32 x float> %59, <32 x float> undef, <32 x i32> zeroinitializer
  %61 = getelementptr inbounds float, float* %7, i64 %56
  %62 = bitcast float* %61 to <32 x float>*
  %63 = load <32 x float>, <32 x float>* %62, align 128, !tbaa !7272
  %64 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %60, <32 x float> %63, <32 x float> %.lcssa24)
  %65 = add nsw i64 %54, 896
  %66 = getelementptr inbounds float, float* %4, i64 %65
  %67 = load float, float* %66, align 4, !tbaa !7269
  %68 = insertelement <32 x float> undef, float %67, i32 0
  %69 = shufflevector <32 x float> %68, <32 x float> undef, <32 x i32> zeroinitializer
  %70 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %69, <32 x float> %63, <32 x float> %.lcssa2225)
  %71 = or i64 %54, 1
  %72 = getelementptr inbounds float, float* %4, i64 %71
  %73 = load float, float* %72, align 4, !tbaa !7269
  %74 = insertelement <32 x float> undef, float %73, i32 0
  %75 = shufflevector <32 x float> %74, <32 x float> undef, <32 x i32> zeroinitializer
  %76 = or i64 %56, 32
  %77 = getelementptr inbounds float, float* %7, i64 %76
  %78 = bitcast float* %77 to <32 x float>*
  %79 = load <32 x float>, <32 x float>* %78, align 128, !tbaa !7272
  %80 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %75, <32 x float> %79, <32 x float> %64)
  %81 = add nsw i64 %71, 896
  %82 = getelementptr inbounds float, float* %4, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !7269
  %84 = insertelement <32 x float> undef, float %83, i32 0
  %85 = shufflevector <32 x float> %84, <32 x float> undef, <32 x i32> zeroinitializer
  %86 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %85, <32 x float> %79, <32 x float> %70)
  %87 = or i64 %54, 2
  %88 = getelementptr inbounds float, float* %4, i64 %87
  %89 = load float, float* %88, align 4, !tbaa !7269
  %90 = insertelement <32 x float> undef, float %89, i32 0
  %91 = shufflevector <32 x float> %90, <32 x float> undef, <32 x i32> zeroinitializer
  %92 = or i64 %56, 64
  %93 = getelementptr inbounds float, float* %7, i64 %92
  %94 = bitcast float* %93 to <32 x float>*
  %95 = load <32 x float>, <32 x float>* %94, align 128, !tbaa !7272
  %96 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %91, <32 x float> %95, <32 x float> %80)
  %97 = add nsw i64 %87, 896
  %98 = getelementptr inbounds float, float* %4, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !7269
  %100 = insertelement <32 x float> undef, float %99, i32 0
  %101 = shufflevector <32 x float> %100, <32 x float> undef, <32 x i32> zeroinitializer
  %102 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %101, <32 x float> %95, <32 x float> %86)
  %103 = or i64 %54, 3
  %104 = getelementptr inbounds float, float* %4, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !7269
  %106 = insertelement <32 x float> undef, float %105, i32 0
  %107 = shufflevector <32 x float> %106, <32 x float> undef, <32 x i32> zeroinitializer
  %108 = or i64 %56, 96
  %109 = getelementptr inbounds float, float* %7, i64 %108
  %110 = bitcast float* %109 to <32 x float>*
  %111 = load <32 x float>, <32 x float>* %110, align 128, !tbaa !7272
  %112 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %107, <32 x float> %111, <32 x float> %96)
  %113 = add nsw i64 %103, 896
  %114 = getelementptr inbounds float, float* %4, i64 %113
  %115 = load float, float* %114, align 4, !tbaa !7269
  %116 = insertelement <32 x float> undef, float %115, i32 0
  %117 = shufflevector <32 x float> %116, <32 x float> undef, <32 x i32> zeroinitializer
  %118 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %117, <32 x float> %111, <32 x float> %102)
  %119 = or i64 %54, 4
  %120 = getelementptr inbounds float, float* %4, i64 %119
  %121 = load float, float* %120, align 4, !tbaa !7269
  %122 = insertelement <32 x float> undef, float %121, i32 0
  %123 = shufflevector <32 x float> %122, <32 x float> undef, <32 x i32> zeroinitializer
  %124 = or i64 %56, 128
  %125 = getelementptr inbounds float, float* %7, i64 %124
  %126 = bitcast float* %125 to <32 x float>*
  %127 = load <32 x float>, <32 x float>* %126, align 128, !tbaa !7272
  %128 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %123, <32 x float> %127, <32 x float> %112)
  %129 = add nsw i64 %119, 896
  %130 = getelementptr inbounds float, float* %4, i64 %129
  %131 = load float, float* %130, align 4, !tbaa !7269
  %132 = insertelement <32 x float> undef, float %131, i32 0
  %133 = shufflevector <32 x float> %132, <32 x float> undef, <32 x i32> zeroinitializer
  %134 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %133, <32 x float> %127, <32 x float> %118)
  %135 = or i64 %54, 5
  %136 = getelementptr inbounds float, float* %4, i64 %135
  %137 = load float, float* %136, align 4, !tbaa !7269
  %138 = insertelement <32 x float> undef, float %137, i32 0
  %139 = shufflevector <32 x float> %138, <32 x float> undef, <32 x i32> zeroinitializer
  %140 = or i64 %56, 160
  %141 = getelementptr inbounds float, float* %7, i64 %140
  %142 = bitcast float* %141 to <32 x float>*
  %143 = load <32 x float>, <32 x float>* %142, align 128, !tbaa !7272
  %144 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %139, <32 x float> %143, <32 x float> %128)
  %145 = add nsw i64 %135, 896
  %146 = getelementptr inbounds float, float* %4, i64 %145
  %147 = load float, float* %146, align 4, !tbaa !7269
  %148 = insertelement <32 x float> undef, float %147, i32 0
  %149 = shufflevector <32 x float> %148, <32 x float> undef, <32 x i32> zeroinitializer
  %150 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %149, <32 x float> %143, <32 x float> %134)
  %151 = or i64 %54, 6
  %152 = getelementptr inbounds float, float* %4, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !7269
  %154 = insertelement <32 x float> undef, float %153, i32 0
  %155 = shufflevector <32 x float> %154, <32 x float> undef, <32 x i32> zeroinitializer
  %156 = or i64 %56, 192
  %157 = getelementptr inbounds float, float* %7, i64 %156
  %158 = bitcast float* %157 to <32 x float>*
  %159 = load <32 x float>, <32 x float>* %158, align 128, !tbaa !7272
  %160 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %155, <32 x float> %159, <32 x float> %144)
  %161 = add nsw i64 %151, 896
  %162 = getelementptr inbounds float, float* %4, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !7269
  %164 = insertelement <32 x float> undef, float %163, i32 0
  %165 = shufflevector <32 x float> %164, <32 x float> undef, <32 x i32> zeroinitializer
  %166 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %165, <32 x float> %159, <32 x float> %150)
  %167 = or i64 %54, 7
  %168 = getelementptr inbounds float, float* %4, i64 %167
  %169 = load float, float* %168, align 4, !tbaa !7269
  %170 = insertelement <32 x float> undef, float %169, i32 0
  %171 = shufflevector <32 x float> %170, <32 x float> undef, <32 x i32> zeroinitializer
  %172 = or i64 %56, 224
  %173 = getelementptr inbounds float, float* %7, i64 %172
  %174 = bitcast float* %173 to <32 x float>*
  %175 = load <32 x float>, <32 x float>* %174, align 128, !tbaa !7272
  %176 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %171, <32 x float> %175, <32 x float> %160)
  %177 = add nsw i64 %167, 896
  %178 = getelementptr inbounds float, float* %4, i64 %177
  %179 = load float, float* %178, align 4, !tbaa !7269
  %180 = insertelement <32 x float> undef, float %179, i32 0
  %181 = shufflevector <32 x float> %180, <32 x float> undef, <32 x i32> zeroinitializer
  %182 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %181, <32 x float> %175, <32 x float> %166)
  %183 = or i64 %54, 8
  %184 = getelementptr inbounds float, float* %4, i64 %183
  %185 = load float, float* %184, align 4, !tbaa !7269
  %186 = insertelement <32 x float> undef, float %185, i32 0
  %187 = shufflevector <32 x float> %186, <32 x float> undef, <32 x i32> zeroinitializer
  %188 = or i64 %56, 256
  %189 = getelementptr inbounds float, float* %7, i64 %188
  %190 = bitcast float* %189 to <32 x float>*
  %191 = load <32 x float>, <32 x float>* %190, align 128, !tbaa !7272
  %192 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %187, <32 x float> %191, <32 x float> %176)
  %193 = add nsw i64 %183, 896
  %194 = getelementptr inbounds float, float* %4, i64 %193
  %195 = load float, float* %194, align 4, !tbaa !7269
  %196 = insertelement <32 x float> undef, float %195, i32 0
  %197 = shufflevector <32 x float> %196, <32 x float> undef, <32 x i32> zeroinitializer
  %198 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %197, <32 x float> %191, <32 x float> %182)
  %199 = or i64 %54, 9
  %200 = getelementptr inbounds float, float* %4, i64 %199
  %201 = load float, float* %200, align 4, !tbaa !7269
  %202 = insertelement <32 x float> undef, float %201, i32 0
  %203 = shufflevector <32 x float> %202, <32 x float> undef, <32 x i32> zeroinitializer
  %204 = or i64 %56, 288
  %205 = getelementptr inbounds float, float* %7, i64 %204
  %206 = bitcast float* %205 to <32 x float>*
  %207 = load <32 x float>, <32 x float>* %206, align 128, !tbaa !7272
  %208 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %203, <32 x float> %207, <32 x float> %192)
  %209 = add nsw i64 %199, 896
  %210 = getelementptr inbounds float, float* %4, i64 %209
  %211 = load float, float* %210, align 4, !tbaa !7269
  %212 = insertelement <32 x float> undef, float %211, i32 0
  %213 = shufflevector <32 x float> %212, <32 x float> undef, <32 x i32> zeroinitializer
  %214 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %213, <32 x float> %207, <32 x float> %198)
  %215 = or i64 %54, 10
  %216 = getelementptr inbounds float, float* %4, i64 %215
  %217 = load float, float* %216, align 4, !tbaa !7269
  %218 = insertelement <32 x float> undef, float %217, i32 0
  %219 = shufflevector <32 x float> %218, <32 x float> undef, <32 x i32> zeroinitializer
  %220 = or i64 %56, 320
  %221 = getelementptr inbounds float, float* %7, i64 %220
  %222 = bitcast float* %221 to <32 x float>*
  %223 = load <32 x float>, <32 x float>* %222, align 128, !tbaa !7272
  %224 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %219, <32 x float> %223, <32 x float> %208)
  %225 = add nsw i64 %215, 896
  %226 = getelementptr inbounds float, float* %4, i64 %225
  %227 = load float, float* %226, align 4, !tbaa !7269
  %228 = insertelement <32 x float> undef, float %227, i32 0
  %229 = shufflevector <32 x float> %228, <32 x float> undef, <32 x i32> zeroinitializer
  %230 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %229, <32 x float> %223, <32 x float> %214)
  %231 = or i64 %54, 11
  %232 = getelementptr inbounds float, float* %4, i64 %231
  %233 = load float, float* %232, align 4, !tbaa !7269
  %234 = insertelement <32 x float> undef, float %233, i32 0
  %235 = shufflevector <32 x float> %234, <32 x float> undef, <32 x i32> zeroinitializer
  %236 = or i64 %56, 352
  %237 = getelementptr inbounds float, float* %7, i64 %236
  %238 = bitcast float* %237 to <32 x float>*
  %239 = load <32 x float>, <32 x float>* %238, align 128, !tbaa !7272
  %240 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %235, <32 x float> %239, <32 x float> %224)
  %241 = add nsw i64 %231, 896
  %242 = getelementptr inbounds float, float* %4, i64 %241
  %243 = load float, float* %242, align 4, !tbaa !7269
  %244 = insertelement <32 x float> undef, float %243, i32 0
  %245 = shufflevector <32 x float> %244, <32 x float> undef, <32 x i32> zeroinitializer
  %246 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %245, <32 x float> %239, <32 x float> %230)
  %247 = or i64 %54, 12
  %248 = getelementptr inbounds float, float* %4, i64 %247
  %249 = load float, float* %248, align 4, !tbaa !7269
  %250 = insertelement <32 x float> undef, float %249, i32 0
  %251 = shufflevector <32 x float> %250, <32 x float> undef, <32 x i32> zeroinitializer
  %252 = or i64 %56, 384
  %253 = getelementptr inbounds float, float* %7, i64 %252
  %254 = bitcast float* %253 to <32 x float>*
  %255 = load <32 x float>, <32 x float>* %254, align 128, !tbaa !7272
  %256 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %251, <32 x float> %255, <32 x float> %240)
  %257 = add nsw i64 %247, 896
  %258 = getelementptr inbounds float, float* %4, i64 %257
  %259 = load float, float* %258, align 4, !tbaa !7269
  %260 = insertelement <32 x float> undef, float %259, i32 0
  %261 = shufflevector <32 x float> %260, <32 x float> undef, <32 x i32> zeroinitializer
  %262 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %261, <32 x float> %255, <32 x float> %246)
  %263 = or i64 %54, 13
  %264 = getelementptr inbounds float, float* %4, i64 %263
  %265 = load float, float* %264, align 4, !tbaa !7269
  %266 = insertelement <32 x float> undef, float %265, i32 0
  %267 = shufflevector <32 x float> %266, <32 x float> undef, <32 x i32> zeroinitializer
  %268 = or i64 %56, 416
  %269 = getelementptr inbounds float, float* %7, i64 %268
  %270 = bitcast float* %269 to <32 x float>*
  %271 = load <32 x float>, <32 x float>* %270, align 128, !tbaa !7272
  %272 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %267, <32 x float> %271, <32 x float> %256)
  %273 = add nsw i64 %263, 896
  %274 = getelementptr inbounds float, float* %4, i64 %273
  %275 = load float, float* %274, align 4, !tbaa !7269
  %276 = insertelement <32 x float> undef, float %275, i32 0
  %277 = shufflevector <32 x float> %276, <32 x float> undef, <32 x i32> zeroinitializer
  %278 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %277, <32 x float> %271, <32 x float> %262)
  %279 = or i64 %54, 14
  %280 = getelementptr inbounds float, float* %4, i64 %279
  %281 = load float, float* %280, align 4, !tbaa !7269
  %282 = insertelement <32 x float> undef, float %281, i32 0
  %283 = shufflevector <32 x float> %282, <32 x float> undef, <32 x i32> zeroinitializer
  %284 = or i64 %56, 448
  %285 = getelementptr inbounds float, float* %7, i64 %284
  %286 = bitcast float* %285 to <32 x float>*
  %287 = load <32 x float>, <32 x float>* %286, align 128, !tbaa !7272
  %288 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %283, <32 x float> %287, <32 x float> %272)
  %289 = add nsw i64 %279, 896
  %290 = getelementptr inbounds float, float* %4, i64 %289
  %291 = load float, float* %290, align 4, !tbaa !7269
  %292 = insertelement <32 x float> undef, float %291, i32 0
  %293 = shufflevector <32 x float> %292, <32 x float> undef, <32 x i32> zeroinitializer
  %294 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %293, <32 x float> %287, <32 x float> %278)
  %295 = or i64 %54, 15
  %296 = getelementptr inbounds float, float* %4, i64 %295
  %297 = load float, float* %296, align 4, !tbaa !7269
  %298 = insertelement <32 x float> undef, float %297, i32 0
  %299 = shufflevector <32 x float> %298, <32 x float> undef, <32 x i32> zeroinitializer
  %300 = or i64 %56, 480
  %301 = getelementptr inbounds float, float* %7, i64 %300
  %302 = bitcast float* %301 to <32 x float>*
  %303 = load <32 x float>, <32 x float>* %302, align 128, !tbaa !7272
  %304 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %299, <32 x float> %303, <32 x float> %288)
  %305 = add nsw i64 %295, 896
  %306 = getelementptr inbounds float, float* %4, i64 %305
  %307 = load float, float* %306, align 4, !tbaa !7269
  %308 = insertelement <32 x float> undef, float %307, i32 0
  %309 = shufflevector <32 x float> %308, <32 x float> undef, <32 x i32> zeroinitializer
  %310 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %309, <32 x float> %303, <32 x float> %294)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond, label %for_end6, label %for_begin7.preheader, !prof !50

for_end6:                                         ; preds = %for_begin7.preheader
  store <32 x float> %304, <32 x float>* %47, align 128, !tbaa !7266
  store <32 x float> %310, <32 x float>* %50, align 128, !tbaa !7266
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %exitcond29 = icmp eq i64 %indvars.iv.next28, 56
  br i1 %exitcond29, label %for_begin10.preheader, label %for_body2, !prof !50

for_begin13.preheader:                            ; preds = %for_begin13.preheader, %for_begin10.preheader
  %indvars.iv33 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next34, %for_begin13.preheader ]
  %311 = shl nsw i64 %indvars.iv33, 5
  %312 = trunc i64 %311 to i32
  %313 = add i32 %39, %312
  %314 = getelementptr inbounds float, float* %32, i64 %311
  %315 = bitcast float* %314 to <32 x float>*
  %316 = load <32 x float>, <32 x float>* %315, align 128, !tbaa !7266
  %317 = fadd <32 x float> %44, %316
  %318 = sext i32 %313 to i64
  %319 = getelementptr inbounds float, float* %10, i64 %318
  %320 = bitcast float* %319 to <32 x float>*
  store <32 x float> %317, <32 x float>* %320, align 128, !tbaa !7275
  %321 = add nuw nsw i64 %311, 1792
  %322 = trunc i64 %321 to i32
  %323 = add i32 %39, %322
  %324 = getelementptr inbounds float, float* %32, i64 %321
  %325 = bitcast float* %324 to <32 x float>*
  %326 = load <32 x float>, <32 x float>* %325, align 128, !tbaa !7266
  %327 = fadd <32 x float> %44, %326
  %328 = sext i32 %323 to i64
  %329 = getelementptr inbounds float, float* %10, i64 %328
  %330 = bitcast float* %329 to <32 x float>*
  store <32 x float> %327, <32 x float>* %330, align 128, !tbaa !7275
  %indvars.iv.next34 = add nuw nsw i64 %indvars.iv33, 1
  %exitcond35 = icmp eq i64 %indvars.iv.next34, 56
  br i1 %exitcond35, label %for_end12, label %for_begin13.preheader, !prof !50

for_end12:                                        ; preds = %for_begin13.preheader
  %331 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %332 = tail call i32 %331(i32 1, i32 %16, i8* nonnull %31)
  %333 = add nsw i32 %29, 1
  %334 = icmp slt i32 %333, %24
  br i1 %334, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.437, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !7278
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !7292
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !7295
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.438, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !7297
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.439, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.440, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.441, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !7299
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !7313
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 64
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.162, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !7315
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 14
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.125, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !7318
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 14
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.126, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !7320
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 8
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !7324
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 100352
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !7338
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 1568
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !7340
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 112
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !7343
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 8
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !7345
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.442, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !7349
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 64
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.128, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !7363
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 64
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.205, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !7365
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 3
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !7368
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 3
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.105, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !7370
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 8
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !7374
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !7376
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 36864
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !7390
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 576
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !7392
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 192
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !7395
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 64
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !7397
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 8
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !7401
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([271 x i8], [271 x i8]* @.str.287, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !7403
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !7417
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 64
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.131, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !7419
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !7422
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !7424
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 8
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !7428
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 512
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !7442
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 8
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !7444
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 8
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !7447
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 8
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !7449
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.179, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !7453
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !7467
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 64
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.133, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !7469
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 7
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !7472
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 7
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.181, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !7474
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 8
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !7478
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 25088
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !7492
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 392
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !7494
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 56
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !7497
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 8
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !7499
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([234 x i8], [234 x i8]* @.str.182, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %6 = tail call i8* %5(i32 1, i32 %4, i64 460800, i32 2, i32 32)
  %7 = alloca %45, align 8
  %8 = getelementptr inbounds %45, %45* %7, i64 0, i32 0
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds %45, %45* %7, i64 0, i32 1
  store i8* %0, i8** %9, align 8
  %10 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %11 = bitcast %45* %7 to i8*
  %12 = call i32 %10(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.443, i8* nonnull %11, i32 0)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %12, %entry ], [ 0, %call_end2 ], [ %21, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %14 = alloca %46, align 8
  %15 = getelementptr inbounds %46, %46* %14, i64 0, i32 0
  store i8* %6, i8** %15, align 8
  %16 = getelementptr inbounds %46, %46* %14, i64 0, i32 1
  store i8* %1, i8** %16, align 8
  %17 = getelementptr inbounds %46, %46* %14, i64 0, i32 2
  store i8* %2, i8** %17, align 8
  %18 = getelementptr inbounds %46, %46* %14, i64 0, i32 3
  store i8* %3, i8** %18, align 8
  %19 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %20 = bitcast %46* %14 to i8*
  %21 = call i32 %19(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.444, i8* nonnull %20, i32 0)
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %23 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %24 = call i32 %23(i32 1, i32 %4, i8* %6)
  br label %call_fail
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.443(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 959
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 960
  %15 = select i1 %14, i32 %13, i32 960
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 960
  %18 = select i1 %17, i32 %16, i32 960
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv, 120
  %23 = trunc i64 %indvars.iv to i32
  %24 = sdiv i32 %23, 15
  %25 = mul i32 %24, 15
  %.decomposed = sub i32 %23, %25
  %26 = icmp sgt i32 %.decomposed, 0
  %27 = mul nsw i32 %.decomposed, 112
  %28 = mul nsw i32 %24, 1568
  %29 = add nsw i32 %27, -120
  %30 = add i32 %29, %28
  br i1 %26, label %if_end.us.14, label %for_body2.preheader

for_body2.preheader:                              ; preds = %for_begin1.preheader
  %31 = add i32 %18, %indvar
  %32 = mul i32 %31, 120
  %33 = sext i32 %32 to i64
  %scevgep = getelementptr float, float* %4, i64 %33
  %scevgep6 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %scevgep6, i8 0, i64 480, i1 false)
  br label %for_end3

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %for_body2.preheader, %if_end.us.14
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %34 = icmp slt i64 %indvars.iv.next, %21
  %indvar.next = add i32 %indvar, 1
  br i1 %34, label %for_begin1.preheader, label %for_end, !prof !5

if_end.us.14:                                     ; preds = %for_begin1.preheader
  %35 = getelementptr inbounds float, float* %4, i64 %22
  %36 = bitcast float* %35 to <8 x float>*
  store <8 x float> zeroinitializer, <8 x float>* %36, align 32, !tbaa !7503
  %37 = add nsw i64 %22, 8
  %38 = add i32 %30, 8
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds float, float* %7, i64 %39
  %41 = bitcast float* %40 to <8 x float>*
  %42 = load <8 x float>, <8 x float>* %41, align 32, !tbaa !7506
  %43 = getelementptr inbounds float, float* %4, i64 %37
  %44 = bitcast float* %43 to <8 x float>*
  store <8 x float> %42, <8 x float>* %44, align 32, !tbaa !7503
  %45 = add nsw i64 %22, 16
  %46 = add i32 %30, 16
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds float, float* %7, i64 %47
  %49 = bitcast float* %48 to <8 x float>*
  %50 = load <8 x float>, <8 x float>* %49, align 32, !tbaa !7506
  %51 = getelementptr inbounds float, float* %4, i64 %45
  %52 = bitcast float* %51 to <8 x float>*
  store <8 x float> %50, <8 x float>* %52, align 32, !tbaa !7503
  %53 = add nsw i64 %22, 24
  %54 = add i32 %30, 24
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds float, float* %7, i64 %55
  %57 = bitcast float* %56 to <8 x float>*
  %58 = load <8 x float>, <8 x float>* %57, align 32, !tbaa !7506
  %59 = getelementptr inbounds float, float* %4, i64 %53
  %60 = bitcast float* %59 to <8 x float>*
  store <8 x float> %58, <8 x float>* %60, align 32, !tbaa !7503
  %61 = add nsw i64 %22, 32
  %62 = add i32 %30, 32
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %7, i64 %63
  %65 = bitcast float* %64 to <8 x float>*
  %66 = load <8 x float>, <8 x float>* %65, align 32, !tbaa !7506
  %67 = getelementptr inbounds float, float* %4, i64 %61
  %68 = bitcast float* %67 to <8 x float>*
  store <8 x float> %66, <8 x float>* %68, align 32, !tbaa !7503
  %69 = add nsw i64 %22, 40
  %70 = add i32 %30, 40
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %7, i64 %71
  %73 = bitcast float* %72 to <8 x float>*
  %74 = load <8 x float>, <8 x float>* %73, align 32, !tbaa !7506
  %75 = getelementptr inbounds float, float* %4, i64 %69
  %76 = bitcast float* %75 to <8 x float>*
  store <8 x float> %74, <8 x float>* %76, align 32, !tbaa !7503
  %77 = add nsw i64 %22, 48
  %78 = add i32 %30, 48
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %7, i64 %79
  %81 = bitcast float* %80 to <8 x float>*
  %82 = load <8 x float>, <8 x float>* %81, align 32, !tbaa !7506
  %83 = getelementptr inbounds float, float* %4, i64 %77
  %84 = bitcast float* %83 to <8 x float>*
  store <8 x float> %82, <8 x float>* %84, align 32, !tbaa !7503
  %85 = add nsw i64 %22, 56
  %86 = add i32 %30, 56
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %7, i64 %87
  %89 = bitcast float* %88 to <8 x float>*
  %90 = load <8 x float>, <8 x float>* %89, align 32, !tbaa !7506
  %91 = getelementptr inbounds float, float* %4, i64 %85
  %92 = bitcast float* %91 to <8 x float>*
  store <8 x float> %90, <8 x float>* %92, align 32, !tbaa !7503
  %93 = add nsw i64 %22, 64
  %94 = add i32 %30, 64
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds float, float* %7, i64 %95
  %97 = bitcast float* %96 to <8 x float>*
  %98 = load <8 x float>, <8 x float>* %97, align 32, !tbaa !7506
  %99 = getelementptr inbounds float, float* %4, i64 %93
  %100 = bitcast float* %99 to <8 x float>*
  store <8 x float> %98, <8 x float>* %100, align 32, !tbaa !7503
  %101 = add nsw i64 %22, 72
  %102 = add i32 %30, 72
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 32, !tbaa !7506
  %107 = getelementptr inbounds float, float* %4, i64 %101
  %108 = bitcast float* %107 to <8 x float>*
  store <8 x float> %106, <8 x float>* %108, align 32, !tbaa !7503
  %109 = add nsw i64 %22, 80
  %110 = add i32 %30, 80
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = bitcast float* %112 to <8 x float>*
  %114 = load <8 x float>, <8 x float>* %113, align 32, !tbaa !7506
  %115 = getelementptr inbounds float, float* %4, i64 %109
  %116 = bitcast float* %115 to <8 x float>*
  store <8 x float> %114, <8 x float>* %116, align 32, !tbaa !7503
  %117 = add nsw i64 %22, 88
  %118 = add i32 %30, 88
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds float, float* %7, i64 %119
  %121 = bitcast float* %120 to <8 x float>*
  %122 = load <8 x float>, <8 x float>* %121, align 32, !tbaa !7506
  %123 = getelementptr inbounds float, float* %4, i64 %117
  %124 = bitcast float* %123 to <8 x float>*
  store <8 x float> %122, <8 x float>* %124, align 32, !tbaa !7503
  %125 = add nsw i64 %22, 96
  %126 = add i32 %30, 96
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds float, float* %7, i64 %127
  %129 = bitcast float* %128 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 32, !tbaa !7506
  %131 = getelementptr inbounds float, float* %4, i64 %125
  %132 = bitcast float* %131 to <8 x float>*
  store <8 x float> %130, <8 x float>* %132, align 32, !tbaa !7503
  %133 = add nsw i64 %22, 104
  %134 = add i32 %30, 104
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds float, float* %7, i64 %135
  %137 = bitcast float* %136 to <8 x float>*
  %138 = load <8 x float>, <8 x float>* %137, align 32, !tbaa !7506
  %139 = getelementptr inbounds float, float* %4, i64 %133
  %140 = bitcast float* %139 to <8 x float>*
  store <8 x float> %138, <8 x float>* %140, align 32, !tbaa !7503
  %141 = add nsw i64 %22, 112
  %142 = add i32 %30, 112
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = bitcast float* %144 to <8 x float>*
  %146 = load <8 x float>, <8 x float>* %145, align 32, !tbaa !7506
  %147 = getelementptr inbounds float, float* %4, i64 %141
  %148 = bitcast float* %147 to <8 x float>*
  store <8 x float> %146, <8 x float>* %148, align 32, !tbaa !7503
  br label %for_end3
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.444(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 447
  %17 = sdiv i32 %16, %15
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %17, %18
  %20 = icmp slt i32 %19, 448
  %21 = select i1 %20, i32 %19, i32 448
  %22 = mul nsw i32 %17, %0
  %23 = icmp slt i32 %22, 448
  %24 = select i1 %23, i32 %22, i32 448
  %25 = icmp slt i32 %24, %21
  br i1 %25, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %26 = sext i32 %24 to i64
  %27 = sext i32 %21 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_begin13.preheader
  %indvars.iv82 = phi i64 [ %26, %for_body.lr.ph ], [ %indvars.iv.next83, %for_begin13.preheader ]
  %28 = trunc i64 %indvars.iv82 to i32
  %29 = sdiv i32 %28, 7
  %30 = mul i32 %29, 7
  %.decomposed = sub i32 %28, %30
  %31 = mul nsw i32 %.decomposed, 240
  %32 = mul nsw i32 %29, 36864
  %33 = sext i32 %32 to i64
  %34 = sext i32 %31 to i64
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_begin13.preheader, %entry
  ret i32 0

for_begin13.preheader:                            ; preds = %for_end6
  %35 = mul nsw i64 %indvars.iv82, 56
  %36 = shl nsw i32 %29, 3
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds float, float* %13, i64 %37
  %39 = bitcast float* %38 to <8 x float>*
  %40 = load <8 x float>, <8 x float>* %39, align 32, !tbaa !7509
  %41 = fadd <8 x float> %40, %424
  %42 = fcmp ogt <8 x float> %41, zeroinitializer
  %43 = select <8 x i1> %42, <8 x float> %41, <8 x float> zeroinitializer
  %44 = getelementptr inbounds float, float* %10, i64 %35
  %45 = bitcast float* %44 to <8 x float>*
  store <8 x float> %43, <8 x float>* %45, align 32, !tbaa !7512
  %46 = add nsw i64 %35, 8
  %47 = fadd <8 x float> %40, %430
  %48 = fcmp ogt <8 x float> %47, zeroinitializer
  %49 = select <8 x i1> %48, <8 x float> %47, <8 x float> zeroinitializer
  %50 = getelementptr inbounds float, float* %10, i64 %46
  %51 = bitcast float* %50 to <8 x float>*
  store <8 x float> %49, <8 x float>* %51, align 32, !tbaa !7512
  %52 = add nsw i64 %35, 16
  %53 = fadd <8 x float> %40, %436
  %54 = fcmp ogt <8 x float> %53, zeroinitializer
  %55 = select <8 x i1> %54, <8 x float> %53, <8 x float> zeroinitializer
  %56 = getelementptr inbounds float, float* %10, i64 %52
  %57 = bitcast float* %56 to <8 x float>*
  store <8 x float> %55, <8 x float>* %57, align 32, !tbaa !7512
  %58 = add nsw i64 %35, 24
  %59 = fadd <8 x float> %40, %442
  %60 = fcmp ogt <8 x float> %59, zeroinitializer
  %61 = select <8 x i1> %60, <8 x float> %59, <8 x float> zeroinitializer
  %62 = getelementptr inbounds float, float* %10, i64 %58
  %63 = bitcast float* %62 to <8 x float>*
  store <8 x float> %61, <8 x float>* %63, align 32, !tbaa !7512
  %64 = add nsw i64 %35, 32
  %65 = fadd <8 x float> %40, %448
  %66 = fcmp ogt <8 x float> %65, zeroinitializer
  %67 = select <8 x i1> %66, <8 x float> %65, <8 x float> zeroinitializer
  %68 = getelementptr inbounds float, float* %10, i64 %64
  %69 = bitcast float* %68 to <8 x float>*
  store <8 x float> %67, <8 x float>* %69, align 32, !tbaa !7512
  %70 = add nsw i64 %35, 40
  %71 = fadd <8 x float> %40, %454
  %72 = fcmp ogt <8 x float> %71, zeroinitializer
  %73 = select <8 x i1> %72, <8 x float> %71, <8 x float> zeroinitializer
  %74 = getelementptr inbounds float, float* %10, i64 %70
  %75 = bitcast float* %74 to <8 x float>*
  store <8 x float> %73, <8 x float>* %75, align 32, !tbaa !7512
  %76 = add nsw i64 %35, 48
  %77 = fadd <8 x float> %40, %460
  %78 = fcmp ogt <8 x float> %77, zeroinitializer
  %79 = select <8 x i1> %78, <8 x float> %77, <8 x float> zeroinitializer
  %80 = getelementptr inbounds float, float* %10, i64 %76
  %81 = bitcast float* %80 to <8 x float>*
  store <8 x float> %79, <8 x float>* %81, align 32, !tbaa !7512
  %indvars.iv.next83 = add nsw i64 %indvars.iv82, 1
  %82 = icmp slt i64 %indvars.iv.next83, %27
  br i1 %82, label %for_body, label %for_end, !prof !5

for_begin4.preheader:                             ; preds = %for_end6, %for_body
  %indvars.iv76 = phi i64 [ 0, %for_body ], [ %indvars.iv.next77, %for_end6 ]
  %.lcssa28.lcssa.lcssa66 = phi <8 x float> [ zeroinitializer, %for_body ], [ %460, %for_end6 ]
  %.lcssa26.lcssa.lcssa64 = phi <8 x float> [ zeroinitializer, %for_body ], [ %454, %for_end6 ]
  %.lcssa24.lcssa.lcssa62 = phi <8 x float> [ zeroinitializer, %for_body ], [ %448, %for_end6 ]
  %.lcssa22.lcssa.lcssa61 = phi <8 x float> [ zeroinitializer, %for_body ], [ %442, %for_end6 ]
  %.lcssa20.lcssa.lcssa59 = phi <8 x float> [ zeroinitializer, %for_body ], [ %436, %for_end6 ]
  %.lcssa18.lcssa.lcssa57 = phi <8 x float> [ zeroinitializer, %for_body ], [ %430, %for_end6 ]
  %.lcssa.lcssa.lcssa55 = phi <8 x float> [ zeroinitializer, %for_body ], [ %424, %for_end6 ]
  %83 = mul nuw nsw i64 %indvars.iv76, 1800
  %84 = add nsw i64 %83, %34
  %85 = mul nuw nsw i64 %indvars.iv76, 576
  %86 = add nsw i64 %85, %33
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_end9, %for_begin4.preheader
  %indvars.iv73 = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next74, %for_end9 ]
  %.lcssa28.lcssa53 = phi <8 x float> [ %.lcssa28.lcssa.lcssa66, %for_begin4.preheader ], [ %460, %for_end9 ]
  %.lcssa26.lcssa51 = phi <8 x float> [ %.lcssa26.lcssa.lcssa64, %for_begin4.preheader ], [ %454, %for_end9 ]
  %.lcssa24.lcssa49 = phi <8 x float> [ %.lcssa24.lcssa.lcssa62, %for_begin4.preheader ], [ %448, %for_end9 ]
  %.lcssa22.lcssa47 = phi <8 x float> [ %.lcssa22.lcssa.lcssa61, %for_begin4.preheader ], [ %442, %for_end9 ]
  %.lcssa20.lcssa46 = phi <8 x float> [ %.lcssa20.lcssa.lcssa59, %for_begin4.preheader ], [ %436, %for_end9 ]
  %.lcssa18.lcssa44 = phi <8 x float> [ %.lcssa18.lcssa.lcssa57, %for_begin4.preheader ], [ %430, %for_end9 ]
  %.lcssa.lcssa42 = phi <8 x float> [ %.lcssa.lcssa.lcssa55, %for_begin4.preheader ], [ %424, %for_end9 ]
  %87 = mul nuw nsw i64 %indvars.iv73, 120
  %88 = add nsw i64 %84, %87
  %89 = mul nuw nsw i64 %indvars.iv73, 192
  %90 = add nsw i64 %86, %89
  br label %for_begin10.preheader

for_end6:                                         ; preds = %for_end9
  %indvars.iv.next77 = add nuw nsw i64 %indvars.iv76, 1
  %exitcond78 = icmp eq i64 %indvars.iv.next77, 64
  br i1 %exitcond78, label %for_begin13.preheader, label %for_begin4.preheader, !prof !50

for_begin10.preheader:                            ; preds = %for_begin10.preheader, %for_begin7.preheader
  %indvars.iv = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next, %for_begin10.preheader ]
  %.lcssa2841 = phi <8 x float> [ %.lcssa28.lcssa53, %for_begin7.preheader ], [ %460, %for_begin10.preheader ]
  %.lcssa2639 = phi <8 x float> [ %.lcssa26.lcssa51, %for_begin7.preheader ], [ %454, %for_begin10.preheader ]
  %.lcssa2437 = phi <8 x float> [ %.lcssa24.lcssa49, %for_begin7.preheader ], [ %448, %for_begin10.preheader ]
  %.lcssa2235 = phi <8 x float> [ %.lcssa22.lcssa47, %for_begin7.preheader ], [ %442, %for_begin10.preheader ]
  %.lcssa2033 = phi <8 x float> [ %.lcssa20.lcssa46, %for_begin7.preheader ], [ %436, %for_begin10.preheader ]
  %.lcssa1832 = phi <8 x float> [ %.lcssa18.lcssa44, %for_begin7.preheader ], [ %430, %for_begin10.preheader ]
  %.lcssa30 = phi <8 x float> [ %.lcssa.lcssa42, %for_begin7.preheader ], [ %424, %for_begin10.preheader ]
  %91 = shl i64 %indvars.iv, 3
  %92 = add nsw i64 %88, %91
  %93 = shl i64 %indvars.iv, 6
  %94 = add nsw i64 %90, %93
  %95 = getelementptr inbounds float, float* %4, i64 %92
  %96 = load float, float* %95, align 4, !tbaa !7503
  %97 = insertelement <8 x float> undef, float %96, i32 0
  %98 = shufflevector <8 x float> %97, <8 x float> undef, <8 x i32> zeroinitializer
  %99 = getelementptr inbounds float, float* %7, i64 %94
  %100 = bitcast float* %99 to <8 x float>*
  %101 = load <8 x float>, <8 x float>* %100, align 32, !tbaa !7515
  %102 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %98, <8 x float> %101, <8 x float> %.lcssa30)
  %103 = add nsw i64 %92, 16
  %104 = getelementptr inbounds float, float* %4, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !7503
  %106 = insertelement <8 x float> undef, float %105, i32 0
  %107 = shufflevector <8 x float> %106, <8 x float> undef, <8 x i32> zeroinitializer
  %108 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %107, <8 x float> %101, <8 x float> %.lcssa1832)
  %109 = add nsw i64 %92, 32
  %110 = getelementptr inbounds float, float* %4, i64 %109
  %111 = load float, float* %110, align 4, !tbaa !7503
  %112 = insertelement <8 x float> undef, float %111, i32 0
  %113 = shufflevector <8 x float> %112, <8 x float> undef, <8 x i32> zeroinitializer
  %114 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %113, <8 x float> %101, <8 x float> %.lcssa2033)
  %115 = add nsw i64 %92, 48
  %116 = getelementptr inbounds float, float* %4, i64 %115
  %117 = load float, float* %116, align 4, !tbaa !7503
  %118 = insertelement <8 x float> undef, float %117, i32 0
  %119 = shufflevector <8 x float> %118, <8 x float> undef, <8 x i32> zeroinitializer
  %120 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %119, <8 x float> %101, <8 x float> %.lcssa2235)
  %121 = add nsw i64 %92, 64
  %122 = getelementptr inbounds float, float* %4, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !7503
  %124 = insertelement <8 x float> undef, float %123, i32 0
  %125 = shufflevector <8 x float> %124, <8 x float> undef, <8 x i32> zeroinitializer
  %126 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %125, <8 x float> %101, <8 x float> %.lcssa2437)
  %127 = add nsw i64 %92, 80
  %128 = getelementptr inbounds float, float* %4, i64 %127
  %129 = load float, float* %128, align 4, !tbaa !7503
  %130 = insertelement <8 x float> undef, float %129, i32 0
  %131 = shufflevector <8 x float> %130, <8 x float> undef, <8 x i32> zeroinitializer
  %132 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %131, <8 x float> %101, <8 x float> %.lcssa2639)
  %133 = add nsw i64 %92, 96
  %134 = getelementptr inbounds float, float* %4, i64 %133
  %135 = load float, float* %134, align 4, !tbaa !7503
  %136 = insertelement <8 x float> undef, float %135, i32 0
  %137 = shufflevector <8 x float> %136, <8 x float> undef, <8 x i32> zeroinitializer
  %138 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %137, <8 x float> %101, <8 x float> %.lcssa2841)
  %139 = or i64 %92, 1
  %140 = getelementptr inbounds float, float* %4, i64 %139
  %141 = load float, float* %140, align 4, !tbaa !7503
  %142 = insertelement <8 x float> undef, float %141, i32 0
  %143 = shufflevector <8 x float> %142, <8 x float> undef, <8 x i32> zeroinitializer
  %144 = or i64 %94, 8
  %145 = getelementptr inbounds float, float* %7, i64 %144
  %146 = bitcast float* %145 to <8 x float>*
  %147 = load <8 x float>, <8 x float>* %146, align 32, !tbaa !7515
  %148 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %143, <8 x float> %147, <8 x float> %102)
  %149 = add nsw i64 %139, 16
  %150 = getelementptr inbounds float, float* %4, i64 %149
  %151 = load float, float* %150, align 4, !tbaa !7503
  %152 = insertelement <8 x float> undef, float %151, i32 0
  %153 = shufflevector <8 x float> %152, <8 x float> undef, <8 x i32> zeroinitializer
  %154 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %153, <8 x float> %147, <8 x float> %108)
  %155 = add nsw i64 %139, 32
  %156 = getelementptr inbounds float, float* %4, i64 %155
  %157 = load float, float* %156, align 4, !tbaa !7503
  %158 = insertelement <8 x float> undef, float %157, i32 0
  %159 = shufflevector <8 x float> %158, <8 x float> undef, <8 x i32> zeroinitializer
  %160 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %159, <8 x float> %147, <8 x float> %114)
  %161 = add nsw i64 %139, 48
  %162 = getelementptr inbounds float, float* %4, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !7503
  %164 = insertelement <8 x float> undef, float %163, i32 0
  %165 = shufflevector <8 x float> %164, <8 x float> undef, <8 x i32> zeroinitializer
  %166 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %165, <8 x float> %147, <8 x float> %120)
  %167 = add nsw i64 %139, 64
  %168 = getelementptr inbounds float, float* %4, i64 %167
  %169 = load float, float* %168, align 4, !tbaa !7503
  %170 = insertelement <8 x float> undef, float %169, i32 0
  %171 = shufflevector <8 x float> %170, <8 x float> undef, <8 x i32> zeroinitializer
  %172 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %171, <8 x float> %147, <8 x float> %126)
  %173 = add nsw i64 %139, 80
  %174 = getelementptr inbounds float, float* %4, i64 %173
  %175 = load float, float* %174, align 4, !tbaa !7503
  %176 = insertelement <8 x float> undef, float %175, i32 0
  %177 = shufflevector <8 x float> %176, <8 x float> undef, <8 x i32> zeroinitializer
  %178 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %177, <8 x float> %147, <8 x float> %132)
  %179 = add nsw i64 %139, 96
  %180 = getelementptr inbounds float, float* %4, i64 %179
  %181 = load float, float* %180, align 4, !tbaa !7503
  %182 = insertelement <8 x float> undef, float %181, i32 0
  %183 = shufflevector <8 x float> %182, <8 x float> undef, <8 x i32> zeroinitializer
  %184 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %183, <8 x float> %147, <8 x float> %138)
  %185 = or i64 %92, 2
  %186 = getelementptr inbounds float, float* %4, i64 %185
  %187 = load float, float* %186, align 4, !tbaa !7503
  %188 = insertelement <8 x float> undef, float %187, i32 0
  %189 = shufflevector <8 x float> %188, <8 x float> undef, <8 x i32> zeroinitializer
  %190 = or i64 %94, 16
  %191 = getelementptr inbounds float, float* %7, i64 %190
  %192 = bitcast float* %191 to <8 x float>*
  %193 = load <8 x float>, <8 x float>* %192, align 32, !tbaa !7515
  %194 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %189, <8 x float> %193, <8 x float> %148)
  %195 = add nsw i64 %185, 16
  %196 = getelementptr inbounds float, float* %4, i64 %195
  %197 = load float, float* %196, align 4, !tbaa !7503
  %198 = insertelement <8 x float> undef, float %197, i32 0
  %199 = shufflevector <8 x float> %198, <8 x float> undef, <8 x i32> zeroinitializer
  %200 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %199, <8 x float> %193, <8 x float> %154)
  %201 = add nsw i64 %185, 32
  %202 = getelementptr inbounds float, float* %4, i64 %201
  %203 = load float, float* %202, align 4, !tbaa !7503
  %204 = insertelement <8 x float> undef, float %203, i32 0
  %205 = shufflevector <8 x float> %204, <8 x float> undef, <8 x i32> zeroinitializer
  %206 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %205, <8 x float> %193, <8 x float> %160)
  %207 = add nsw i64 %185, 48
  %208 = getelementptr inbounds float, float* %4, i64 %207
  %209 = load float, float* %208, align 4, !tbaa !7503
  %210 = insertelement <8 x float> undef, float %209, i32 0
  %211 = shufflevector <8 x float> %210, <8 x float> undef, <8 x i32> zeroinitializer
  %212 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %211, <8 x float> %193, <8 x float> %166)
  %213 = add nsw i64 %185, 64
  %214 = getelementptr inbounds float, float* %4, i64 %213
  %215 = load float, float* %214, align 4, !tbaa !7503
  %216 = insertelement <8 x float> undef, float %215, i32 0
  %217 = shufflevector <8 x float> %216, <8 x float> undef, <8 x i32> zeroinitializer
  %218 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %217, <8 x float> %193, <8 x float> %172)
  %219 = add nsw i64 %185, 80
  %220 = getelementptr inbounds float, float* %4, i64 %219
  %221 = load float, float* %220, align 4, !tbaa !7503
  %222 = insertelement <8 x float> undef, float %221, i32 0
  %223 = shufflevector <8 x float> %222, <8 x float> undef, <8 x i32> zeroinitializer
  %224 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %223, <8 x float> %193, <8 x float> %178)
  %225 = add nsw i64 %185, 96
  %226 = getelementptr inbounds float, float* %4, i64 %225
  %227 = load float, float* %226, align 4, !tbaa !7503
  %228 = insertelement <8 x float> undef, float %227, i32 0
  %229 = shufflevector <8 x float> %228, <8 x float> undef, <8 x i32> zeroinitializer
  %230 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %229, <8 x float> %193, <8 x float> %184)
  %231 = or i64 %92, 3
  %232 = getelementptr inbounds float, float* %4, i64 %231
  %233 = load float, float* %232, align 4, !tbaa !7503
  %234 = insertelement <8 x float> undef, float %233, i32 0
  %235 = shufflevector <8 x float> %234, <8 x float> undef, <8 x i32> zeroinitializer
  %236 = or i64 %94, 24
  %237 = getelementptr inbounds float, float* %7, i64 %236
  %238 = bitcast float* %237 to <8 x float>*
  %239 = load <8 x float>, <8 x float>* %238, align 32, !tbaa !7515
  %240 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %235, <8 x float> %239, <8 x float> %194)
  %241 = add nsw i64 %231, 16
  %242 = getelementptr inbounds float, float* %4, i64 %241
  %243 = load float, float* %242, align 4, !tbaa !7503
  %244 = insertelement <8 x float> undef, float %243, i32 0
  %245 = shufflevector <8 x float> %244, <8 x float> undef, <8 x i32> zeroinitializer
  %246 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %245, <8 x float> %239, <8 x float> %200)
  %247 = add nsw i64 %231, 32
  %248 = getelementptr inbounds float, float* %4, i64 %247
  %249 = load float, float* %248, align 4, !tbaa !7503
  %250 = insertelement <8 x float> undef, float %249, i32 0
  %251 = shufflevector <8 x float> %250, <8 x float> undef, <8 x i32> zeroinitializer
  %252 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %251, <8 x float> %239, <8 x float> %206)
  %253 = add nsw i64 %231, 48
  %254 = getelementptr inbounds float, float* %4, i64 %253
  %255 = load float, float* %254, align 4, !tbaa !7503
  %256 = insertelement <8 x float> undef, float %255, i32 0
  %257 = shufflevector <8 x float> %256, <8 x float> undef, <8 x i32> zeroinitializer
  %258 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %257, <8 x float> %239, <8 x float> %212)
  %259 = add nsw i64 %231, 64
  %260 = getelementptr inbounds float, float* %4, i64 %259
  %261 = load float, float* %260, align 4, !tbaa !7503
  %262 = insertelement <8 x float> undef, float %261, i32 0
  %263 = shufflevector <8 x float> %262, <8 x float> undef, <8 x i32> zeroinitializer
  %264 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %263, <8 x float> %239, <8 x float> %218)
  %265 = add nsw i64 %231, 80
  %266 = getelementptr inbounds float, float* %4, i64 %265
  %267 = load float, float* %266, align 4, !tbaa !7503
  %268 = insertelement <8 x float> undef, float %267, i32 0
  %269 = shufflevector <8 x float> %268, <8 x float> undef, <8 x i32> zeroinitializer
  %270 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %269, <8 x float> %239, <8 x float> %224)
  %271 = add nsw i64 %231, 96
  %272 = getelementptr inbounds float, float* %4, i64 %271
  %273 = load float, float* %272, align 4, !tbaa !7503
  %274 = insertelement <8 x float> undef, float %273, i32 0
  %275 = shufflevector <8 x float> %274, <8 x float> undef, <8 x i32> zeroinitializer
  %276 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %275, <8 x float> %239, <8 x float> %230)
  %277 = or i64 %92, 4
  %278 = getelementptr inbounds float, float* %4, i64 %277
  %279 = load float, float* %278, align 4, !tbaa !7503
  %280 = insertelement <8 x float> undef, float %279, i32 0
  %281 = shufflevector <8 x float> %280, <8 x float> undef, <8 x i32> zeroinitializer
  %282 = or i64 %94, 32
  %283 = getelementptr inbounds float, float* %7, i64 %282
  %284 = bitcast float* %283 to <8 x float>*
  %285 = load <8 x float>, <8 x float>* %284, align 32, !tbaa !7515
  %286 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %281, <8 x float> %285, <8 x float> %240)
  %287 = add nsw i64 %277, 16
  %288 = getelementptr inbounds float, float* %4, i64 %287
  %289 = load float, float* %288, align 4, !tbaa !7503
  %290 = insertelement <8 x float> undef, float %289, i32 0
  %291 = shufflevector <8 x float> %290, <8 x float> undef, <8 x i32> zeroinitializer
  %292 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %291, <8 x float> %285, <8 x float> %246)
  %293 = add nsw i64 %277, 32
  %294 = getelementptr inbounds float, float* %4, i64 %293
  %295 = load float, float* %294, align 4, !tbaa !7503
  %296 = insertelement <8 x float> undef, float %295, i32 0
  %297 = shufflevector <8 x float> %296, <8 x float> undef, <8 x i32> zeroinitializer
  %298 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %297, <8 x float> %285, <8 x float> %252)
  %299 = add nsw i64 %277, 48
  %300 = getelementptr inbounds float, float* %4, i64 %299
  %301 = load float, float* %300, align 4, !tbaa !7503
  %302 = insertelement <8 x float> undef, float %301, i32 0
  %303 = shufflevector <8 x float> %302, <8 x float> undef, <8 x i32> zeroinitializer
  %304 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %303, <8 x float> %285, <8 x float> %258)
  %305 = add nsw i64 %277, 64
  %306 = getelementptr inbounds float, float* %4, i64 %305
  %307 = load float, float* %306, align 4, !tbaa !7503
  %308 = insertelement <8 x float> undef, float %307, i32 0
  %309 = shufflevector <8 x float> %308, <8 x float> undef, <8 x i32> zeroinitializer
  %310 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %309, <8 x float> %285, <8 x float> %264)
  %311 = add nsw i64 %277, 80
  %312 = getelementptr inbounds float, float* %4, i64 %311
  %313 = load float, float* %312, align 4, !tbaa !7503
  %314 = insertelement <8 x float> undef, float %313, i32 0
  %315 = shufflevector <8 x float> %314, <8 x float> undef, <8 x i32> zeroinitializer
  %316 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %315, <8 x float> %285, <8 x float> %270)
  %317 = add nsw i64 %277, 96
  %318 = getelementptr inbounds float, float* %4, i64 %317
  %319 = load float, float* %318, align 4, !tbaa !7503
  %320 = insertelement <8 x float> undef, float %319, i32 0
  %321 = shufflevector <8 x float> %320, <8 x float> undef, <8 x i32> zeroinitializer
  %322 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %321, <8 x float> %285, <8 x float> %276)
  %323 = or i64 %92, 5
  %324 = getelementptr inbounds float, float* %4, i64 %323
  %325 = load float, float* %324, align 4, !tbaa !7503
  %326 = insertelement <8 x float> undef, float %325, i32 0
  %327 = shufflevector <8 x float> %326, <8 x float> undef, <8 x i32> zeroinitializer
  %328 = or i64 %94, 40
  %329 = getelementptr inbounds float, float* %7, i64 %328
  %330 = bitcast float* %329 to <8 x float>*
  %331 = load <8 x float>, <8 x float>* %330, align 32, !tbaa !7515
  %332 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %327, <8 x float> %331, <8 x float> %286)
  %333 = add nsw i64 %323, 16
  %334 = getelementptr inbounds float, float* %4, i64 %333
  %335 = load float, float* %334, align 4, !tbaa !7503
  %336 = insertelement <8 x float> undef, float %335, i32 0
  %337 = shufflevector <8 x float> %336, <8 x float> undef, <8 x i32> zeroinitializer
  %338 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %337, <8 x float> %331, <8 x float> %292)
  %339 = add nsw i64 %323, 32
  %340 = getelementptr inbounds float, float* %4, i64 %339
  %341 = load float, float* %340, align 4, !tbaa !7503
  %342 = insertelement <8 x float> undef, float %341, i32 0
  %343 = shufflevector <8 x float> %342, <8 x float> undef, <8 x i32> zeroinitializer
  %344 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %343, <8 x float> %331, <8 x float> %298)
  %345 = add nsw i64 %323, 48
  %346 = getelementptr inbounds float, float* %4, i64 %345
  %347 = load float, float* %346, align 4, !tbaa !7503
  %348 = insertelement <8 x float> undef, float %347, i32 0
  %349 = shufflevector <8 x float> %348, <8 x float> undef, <8 x i32> zeroinitializer
  %350 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %349, <8 x float> %331, <8 x float> %304)
  %351 = add nsw i64 %323, 64
  %352 = getelementptr inbounds float, float* %4, i64 %351
  %353 = load float, float* %352, align 4, !tbaa !7503
  %354 = insertelement <8 x float> undef, float %353, i32 0
  %355 = shufflevector <8 x float> %354, <8 x float> undef, <8 x i32> zeroinitializer
  %356 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %355, <8 x float> %331, <8 x float> %310)
  %357 = add nsw i64 %323, 80
  %358 = getelementptr inbounds float, float* %4, i64 %357
  %359 = load float, float* %358, align 4, !tbaa !7503
  %360 = insertelement <8 x float> undef, float %359, i32 0
  %361 = shufflevector <8 x float> %360, <8 x float> undef, <8 x i32> zeroinitializer
  %362 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %361, <8 x float> %331, <8 x float> %316)
  %363 = add nsw i64 %323, 96
  %364 = getelementptr inbounds float, float* %4, i64 %363
  %365 = load float, float* %364, align 4, !tbaa !7503
  %366 = insertelement <8 x float> undef, float %365, i32 0
  %367 = shufflevector <8 x float> %366, <8 x float> undef, <8 x i32> zeroinitializer
  %368 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %367, <8 x float> %331, <8 x float> %322)
  %369 = or i64 %92, 6
  %370 = getelementptr inbounds float, float* %4, i64 %369
  %371 = load float, float* %370, align 4, !tbaa !7503
  %372 = insertelement <8 x float> undef, float %371, i32 0
  %373 = shufflevector <8 x float> %372, <8 x float> undef, <8 x i32> zeroinitializer
  %374 = or i64 %94, 48
  %375 = getelementptr inbounds float, float* %7, i64 %374
  %376 = bitcast float* %375 to <8 x float>*
  %377 = load <8 x float>, <8 x float>* %376, align 32, !tbaa !7515
  %378 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %373, <8 x float> %377, <8 x float> %332)
  %379 = add nsw i64 %369, 16
  %380 = getelementptr inbounds float, float* %4, i64 %379
  %381 = load float, float* %380, align 4, !tbaa !7503
  %382 = insertelement <8 x float> undef, float %381, i32 0
  %383 = shufflevector <8 x float> %382, <8 x float> undef, <8 x i32> zeroinitializer
  %384 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %383, <8 x float> %377, <8 x float> %338)
  %385 = add nsw i64 %369, 32
  %386 = getelementptr inbounds float, float* %4, i64 %385
  %387 = load float, float* %386, align 4, !tbaa !7503
  %388 = insertelement <8 x float> undef, float %387, i32 0
  %389 = shufflevector <8 x float> %388, <8 x float> undef, <8 x i32> zeroinitializer
  %390 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %389, <8 x float> %377, <8 x float> %344)
  %391 = add nsw i64 %369, 48
  %392 = getelementptr inbounds float, float* %4, i64 %391
  %393 = load float, float* %392, align 4, !tbaa !7503
  %394 = insertelement <8 x float> undef, float %393, i32 0
  %395 = shufflevector <8 x float> %394, <8 x float> undef, <8 x i32> zeroinitializer
  %396 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %395, <8 x float> %377, <8 x float> %350)
  %397 = add nsw i64 %369, 64
  %398 = getelementptr inbounds float, float* %4, i64 %397
  %399 = load float, float* %398, align 4, !tbaa !7503
  %400 = insertelement <8 x float> undef, float %399, i32 0
  %401 = shufflevector <8 x float> %400, <8 x float> undef, <8 x i32> zeroinitializer
  %402 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %401, <8 x float> %377, <8 x float> %356)
  %403 = add nsw i64 %369, 80
  %404 = getelementptr inbounds float, float* %4, i64 %403
  %405 = load float, float* %404, align 4, !tbaa !7503
  %406 = insertelement <8 x float> undef, float %405, i32 0
  %407 = shufflevector <8 x float> %406, <8 x float> undef, <8 x i32> zeroinitializer
  %408 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %407, <8 x float> %377, <8 x float> %362)
  %409 = add nsw i64 %369, 96
  %410 = getelementptr inbounds float, float* %4, i64 %409
  %411 = load float, float* %410, align 4, !tbaa !7503
  %412 = insertelement <8 x float> undef, float %411, i32 0
  %413 = shufflevector <8 x float> %412, <8 x float> undef, <8 x i32> zeroinitializer
  %414 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %413, <8 x float> %377, <8 x float> %368)
  %415 = or i64 %92, 7
  %416 = getelementptr inbounds float, float* %4, i64 %415
  %417 = load float, float* %416, align 4, !tbaa !7503
  %418 = insertelement <8 x float> undef, float %417, i32 0
  %419 = shufflevector <8 x float> %418, <8 x float> undef, <8 x i32> zeroinitializer
  %420 = or i64 %94, 56
  %421 = getelementptr inbounds float, float* %7, i64 %420
  %422 = bitcast float* %421 to <8 x float>*
  %423 = load <8 x float>, <8 x float>* %422, align 32, !tbaa !7515
  %424 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %419, <8 x float> %423, <8 x float> %378)
  %425 = add nsw i64 %415, 16
  %426 = getelementptr inbounds float, float* %4, i64 %425
  %427 = load float, float* %426, align 4, !tbaa !7503
  %428 = insertelement <8 x float> undef, float %427, i32 0
  %429 = shufflevector <8 x float> %428, <8 x float> undef, <8 x i32> zeroinitializer
  %430 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %429, <8 x float> %423, <8 x float> %384)
  %431 = add nsw i64 %415, 32
  %432 = getelementptr inbounds float, float* %4, i64 %431
  %433 = load float, float* %432, align 4, !tbaa !7503
  %434 = insertelement <8 x float> undef, float %433, i32 0
  %435 = shufflevector <8 x float> %434, <8 x float> undef, <8 x i32> zeroinitializer
  %436 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %435, <8 x float> %423, <8 x float> %390)
  %437 = add nsw i64 %415, 48
  %438 = getelementptr inbounds float, float* %4, i64 %437
  %439 = load float, float* %438, align 4, !tbaa !7503
  %440 = insertelement <8 x float> undef, float %439, i32 0
  %441 = shufflevector <8 x float> %440, <8 x float> undef, <8 x i32> zeroinitializer
  %442 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %441, <8 x float> %423, <8 x float> %396)
  %443 = add nsw i64 %415, 64
  %444 = getelementptr inbounds float, float* %4, i64 %443
  %445 = load float, float* %444, align 4, !tbaa !7503
  %446 = insertelement <8 x float> undef, float %445, i32 0
  %447 = shufflevector <8 x float> %446, <8 x float> undef, <8 x i32> zeroinitializer
  %448 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %447, <8 x float> %423, <8 x float> %402)
  %449 = add nsw i64 %415, 80
  %450 = getelementptr inbounds float, float* %4, i64 %449
  %451 = load float, float* %450, align 4, !tbaa !7503
  %452 = insertelement <8 x float> undef, float %451, i32 0
  %453 = shufflevector <8 x float> %452, <8 x float> undef, <8 x i32> zeroinitializer
  %454 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %453, <8 x float> %423, <8 x float> %408)
  %455 = add nsw i64 %415, 96
  %456 = getelementptr inbounds float, float* %4, i64 %455
  %457 = load float, float* %456, align 4, !tbaa !7503
  %458 = insertelement <8 x float> undef, float %457, i32 0
  %459 = shufflevector <8 x float> %458, <8 x float> undef, <8 x i32> zeroinitializer
  %460 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %459, <8 x float> %423, <8 x float> %414)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %for_end9, label %for_begin10.preheader, !prof !50

for_end9:                                         ; preds = %for_begin10.preheader
  %indvars.iv.next74 = add nuw nsw i64 %indvars.iv73, 1
  %exitcond75 = icmp eq i64 %indvars.iv.next74, 3
  br i1 %exitcond75, label %for_end6, label %for_begin7.preheader, !prof !50
}

define dllexport i32 @fused_nn_avg_pool2d(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.445, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !7518
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.446, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !7532
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.447, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !7534
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !7548
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 256
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.152, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !7550
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 7
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.174, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !7553
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 7
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.175, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !7555
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 8
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !7559
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 100352
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !7573
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 392
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !7575
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 56
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !7578
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 8
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !7580
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.366, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !7584
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !7598
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 256
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.448, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !7600
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 1
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !7603
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 1
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !7605
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 8
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !7609
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 2048
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !7623
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 8
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !7625
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 8
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !7628
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 8
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !7630
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([230 x i8], [230 x i8]* @.str.449, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_nn_avg_pool2d_compute_(i8* %15, i8* %23, i32 %21)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_avg_pool2d_compute_(i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %3 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %4 = tail call i8* %3(i32 1, i32 %2, i64 8192, i32 2, i32 32)
  %5 = alloca %47, align 8
  %6 = getelementptr inbounds %47, %47* %5, i64 0, i32 0
  store i8* %4, i8** %6, align 8
  %7 = getelementptr inbounds %47, %47* %5, i64 0, i32 1
  store i8* %0, i8** %7, align 8
  %8 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %9 = bitcast %47* %5 to i8*
  %10 = call i32 %8(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.450, i8* nonnull %9, i32 0)
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %10, %entry ], [ 0, %call_end2 ], [ %17, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %12 = alloca %48, align 8
  %13 = getelementptr inbounds %48, %48* %12, i64 0, i32 0
  store i8* %1, i8** %13, align 8
  %14 = getelementptr inbounds %48, %48* %12, i64 0, i32 1
  store i8* %4, i8** %14, align 8
  %15 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %16 = bitcast %48* %12 to i8*
  %17 = call i32 %15(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.451, i8* nonnull %16, i32 0)
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %19 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %20 = call i32 %19(i32 1, i32 %2, i8* %4)
  br label %call_fail
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.450(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 255
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 256
  %15 = select i1 %14, i32 %13, i32 256
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 256
  %18 = select i1 %17, i32 %16, i32 256
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_body
  %indvars.iv = phi i64 [ %20, %for_body.preheader ], [ %indvars.iv.next, %for_body ]
  %22 = phi i32 [ %18, %for_body.preheader ], [ %272, %for_body ]
  %23 = shl nsw i32 %22, 3
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = bitcast float* %25 to <8 x float>*
  store <8 x float> zeroinitializer, <8 x float>* %26, align 32, !tbaa !7634
  %27 = mul nsw i64 %indvars.iv, 392
  %28 = getelementptr inbounds float, float* %7, i64 %27
  %29 = bitcast float* %28 to <8 x float>*
  %30 = load <8 x float>, <8 x float>* %29, align 32, !tbaa !7637
  %31 = fadd <8 x float> %30, zeroinitializer
  %32 = add nsw i64 %27, 8
  %33 = getelementptr inbounds float, float* %7, i64 %32
  %34 = bitcast float* %33 to <8 x float>*
  %35 = load <8 x float>, <8 x float>* %34, align 32, !tbaa !7637
  %36 = fadd <8 x float> %35, %31
  %37 = add nsw i64 %27, 16
  %38 = getelementptr inbounds float, float* %7, i64 %37
  %39 = bitcast float* %38 to <8 x float>*
  %40 = load <8 x float>, <8 x float>* %39, align 32, !tbaa !7637
  %41 = fadd <8 x float> %40, %36
  %42 = add nsw i64 %27, 24
  %43 = getelementptr inbounds float, float* %7, i64 %42
  %44 = bitcast float* %43 to <8 x float>*
  %45 = load <8 x float>, <8 x float>* %44, align 32, !tbaa !7637
  %46 = fadd <8 x float> %45, %41
  %47 = add nsw i64 %27, 32
  %48 = getelementptr inbounds float, float* %7, i64 %47
  %49 = bitcast float* %48 to <8 x float>*
  %50 = load <8 x float>, <8 x float>* %49, align 32, !tbaa !7637
  %51 = fadd <8 x float> %50, %46
  %52 = add nsw i64 %27, 40
  %53 = getelementptr inbounds float, float* %7, i64 %52
  %54 = bitcast float* %53 to <8 x float>*
  %55 = load <8 x float>, <8 x float>* %54, align 32, !tbaa !7637
  %56 = fadd <8 x float> %55, %51
  %57 = add nsw i64 %27, 48
  %58 = getelementptr inbounds float, float* %7, i64 %57
  %59 = bitcast float* %58 to <8 x float>*
  %60 = load <8 x float>, <8 x float>* %59, align 32, !tbaa !7637
  %61 = fadd <8 x float> %60, %56
  %62 = add nsw i64 %27, 56
  %63 = getelementptr inbounds float, float* %7, i64 %62
  %64 = bitcast float* %63 to <8 x float>*
  %65 = load <8 x float>, <8 x float>* %64, align 32, !tbaa !7637
  %66 = fadd <8 x float> %65, %61
  %67 = add nsw i64 %27, 64
  %68 = getelementptr inbounds float, float* %7, i64 %67
  %69 = bitcast float* %68 to <8 x float>*
  %70 = load <8 x float>, <8 x float>* %69, align 32, !tbaa !7637
  %71 = fadd <8 x float> %70, %66
  %72 = add nsw i64 %27, 72
  %73 = getelementptr inbounds float, float* %7, i64 %72
  %74 = bitcast float* %73 to <8 x float>*
  %75 = load <8 x float>, <8 x float>* %74, align 32, !tbaa !7637
  %76 = fadd <8 x float> %75, %71
  %77 = add nsw i64 %27, 80
  %78 = getelementptr inbounds float, float* %7, i64 %77
  %79 = bitcast float* %78 to <8 x float>*
  %80 = load <8 x float>, <8 x float>* %79, align 32, !tbaa !7637
  %81 = fadd <8 x float> %80, %76
  %82 = add nsw i64 %27, 88
  %83 = getelementptr inbounds float, float* %7, i64 %82
  %84 = bitcast float* %83 to <8 x float>*
  %85 = load <8 x float>, <8 x float>* %84, align 32, !tbaa !7637
  %86 = fadd <8 x float> %85, %81
  %87 = add nsw i64 %27, 96
  %88 = getelementptr inbounds float, float* %7, i64 %87
  %89 = bitcast float* %88 to <8 x float>*
  %90 = load <8 x float>, <8 x float>* %89, align 32, !tbaa !7637
  %91 = fadd <8 x float> %90, %86
  %92 = add nsw i64 %27, 104
  %93 = getelementptr inbounds float, float* %7, i64 %92
  %94 = bitcast float* %93 to <8 x float>*
  %95 = load <8 x float>, <8 x float>* %94, align 32, !tbaa !7637
  %96 = fadd <8 x float> %95, %91
  %97 = add nsw i64 %27, 112
  %98 = getelementptr inbounds float, float* %7, i64 %97
  %99 = bitcast float* %98 to <8 x float>*
  %100 = load <8 x float>, <8 x float>* %99, align 32, !tbaa !7637
  %101 = fadd <8 x float> %100, %96
  %102 = add nsw i64 %27, 120
  %103 = getelementptr inbounds float, float* %7, i64 %102
  %104 = bitcast float* %103 to <8 x float>*
  %105 = load <8 x float>, <8 x float>* %104, align 32, !tbaa !7637
  %106 = fadd <8 x float> %105, %101
  %107 = add nsw i64 %27, 128
  %108 = getelementptr inbounds float, float* %7, i64 %107
  %109 = bitcast float* %108 to <8 x float>*
  %110 = load <8 x float>, <8 x float>* %109, align 32, !tbaa !7637
  %111 = fadd <8 x float> %110, %106
  %112 = add nsw i64 %27, 136
  %113 = getelementptr inbounds float, float* %7, i64 %112
  %114 = bitcast float* %113 to <8 x float>*
  %115 = load <8 x float>, <8 x float>* %114, align 32, !tbaa !7637
  %116 = fadd <8 x float> %115, %111
  %117 = add nsw i64 %27, 144
  %118 = getelementptr inbounds float, float* %7, i64 %117
  %119 = bitcast float* %118 to <8 x float>*
  %120 = load <8 x float>, <8 x float>* %119, align 32, !tbaa !7637
  %121 = fadd <8 x float> %120, %116
  %122 = add nsw i64 %27, 152
  %123 = getelementptr inbounds float, float* %7, i64 %122
  %124 = bitcast float* %123 to <8 x float>*
  %125 = load <8 x float>, <8 x float>* %124, align 32, !tbaa !7637
  %126 = fadd <8 x float> %125, %121
  %127 = add nsw i64 %27, 160
  %128 = getelementptr inbounds float, float* %7, i64 %127
  %129 = bitcast float* %128 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 32, !tbaa !7637
  %131 = fadd <8 x float> %130, %126
  %132 = add nsw i64 %27, 168
  %133 = getelementptr inbounds float, float* %7, i64 %132
  %134 = bitcast float* %133 to <8 x float>*
  %135 = load <8 x float>, <8 x float>* %134, align 32, !tbaa !7637
  %136 = fadd <8 x float> %135, %131
  %137 = add nsw i64 %27, 176
  %138 = getelementptr inbounds float, float* %7, i64 %137
  %139 = bitcast float* %138 to <8 x float>*
  %140 = load <8 x float>, <8 x float>* %139, align 32, !tbaa !7637
  %141 = fadd <8 x float> %140, %136
  %142 = add nsw i64 %27, 184
  %143 = getelementptr inbounds float, float* %7, i64 %142
  %144 = bitcast float* %143 to <8 x float>*
  %145 = load <8 x float>, <8 x float>* %144, align 32, !tbaa !7637
  %146 = fadd <8 x float> %145, %141
  %147 = add nsw i64 %27, 192
  %148 = getelementptr inbounds float, float* %7, i64 %147
  %149 = bitcast float* %148 to <8 x float>*
  %150 = load <8 x float>, <8 x float>* %149, align 32, !tbaa !7637
  %151 = fadd <8 x float> %150, %146
  %152 = add nsw i64 %27, 200
  %153 = getelementptr inbounds float, float* %7, i64 %152
  %154 = bitcast float* %153 to <8 x float>*
  %155 = load <8 x float>, <8 x float>* %154, align 32, !tbaa !7637
  %156 = fadd <8 x float> %155, %151
  %157 = add nsw i64 %27, 208
  %158 = getelementptr inbounds float, float* %7, i64 %157
  %159 = bitcast float* %158 to <8 x float>*
  %160 = load <8 x float>, <8 x float>* %159, align 32, !tbaa !7637
  %161 = fadd <8 x float> %160, %156
  %162 = add nsw i64 %27, 216
  %163 = getelementptr inbounds float, float* %7, i64 %162
  %164 = bitcast float* %163 to <8 x float>*
  %165 = load <8 x float>, <8 x float>* %164, align 32, !tbaa !7637
  %166 = fadd <8 x float> %165, %161
  %167 = add nsw i64 %27, 224
  %168 = getelementptr inbounds float, float* %7, i64 %167
  %169 = bitcast float* %168 to <8 x float>*
  %170 = load <8 x float>, <8 x float>* %169, align 32, !tbaa !7637
  %171 = fadd <8 x float> %170, %166
  %172 = add nsw i64 %27, 232
  %173 = getelementptr inbounds float, float* %7, i64 %172
  %174 = bitcast float* %173 to <8 x float>*
  %175 = load <8 x float>, <8 x float>* %174, align 32, !tbaa !7637
  %176 = fadd <8 x float> %175, %171
  %177 = add nsw i64 %27, 240
  %178 = getelementptr inbounds float, float* %7, i64 %177
  %179 = bitcast float* %178 to <8 x float>*
  %180 = load <8 x float>, <8 x float>* %179, align 32, !tbaa !7637
  %181 = fadd <8 x float> %180, %176
  %182 = add nsw i64 %27, 248
  %183 = getelementptr inbounds float, float* %7, i64 %182
  %184 = bitcast float* %183 to <8 x float>*
  %185 = load <8 x float>, <8 x float>* %184, align 32, !tbaa !7637
  %186 = fadd <8 x float> %185, %181
  %187 = add nsw i64 %27, 256
  %188 = getelementptr inbounds float, float* %7, i64 %187
  %189 = bitcast float* %188 to <8 x float>*
  %190 = load <8 x float>, <8 x float>* %189, align 32, !tbaa !7637
  %191 = fadd <8 x float> %190, %186
  %192 = add nsw i64 %27, 264
  %193 = getelementptr inbounds float, float* %7, i64 %192
  %194 = bitcast float* %193 to <8 x float>*
  %195 = load <8 x float>, <8 x float>* %194, align 32, !tbaa !7637
  %196 = fadd <8 x float> %195, %191
  %197 = add nsw i64 %27, 272
  %198 = getelementptr inbounds float, float* %7, i64 %197
  %199 = bitcast float* %198 to <8 x float>*
  %200 = load <8 x float>, <8 x float>* %199, align 32, !tbaa !7637
  %201 = fadd <8 x float> %200, %196
  %202 = add nsw i64 %27, 280
  %203 = getelementptr inbounds float, float* %7, i64 %202
  %204 = bitcast float* %203 to <8 x float>*
  %205 = load <8 x float>, <8 x float>* %204, align 32, !tbaa !7637
  %206 = fadd <8 x float> %205, %201
  %207 = add nsw i64 %27, 288
  %208 = getelementptr inbounds float, float* %7, i64 %207
  %209 = bitcast float* %208 to <8 x float>*
  %210 = load <8 x float>, <8 x float>* %209, align 32, !tbaa !7637
  %211 = fadd <8 x float> %210, %206
  %212 = add nsw i64 %27, 296
  %213 = getelementptr inbounds float, float* %7, i64 %212
  %214 = bitcast float* %213 to <8 x float>*
  %215 = load <8 x float>, <8 x float>* %214, align 32, !tbaa !7637
  %216 = fadd <8 x float> %215, %211
  %217 = add nsw i64 %27, 304
  %218 = getelementptr inbounds float, float* %7, i64 %217
  %219 = bitcast float* %218 to <8 x float>*
  %220 = load <8 x float>, <8 x float>* %219, align 32, !tbaa !7637
  %221 = fadd <8 x float> %220, %216
  %222 = add nsw i64 %27, 312
  %223 = getelementptr inbounds float, float* %7, i64 %222
  %224 = bitcast float* %223 to <8 x float>*
  %225 = load <8 x float>, <8 x float>* %224, align 32, !tbaa !7637
  %226 = fadd <8 x float> %225, %221
  %227 = add nsw i64 %27, 320
  %228 = getelementptr inbounds float, float* %7, i64 %227
  %229 = bitcast float* %228 to <8 x float>*
  %230 = load <8 x float>, <8 x float>* %229, align 32, !tbaa !7637
  %231 = fadd <8 x float> %230, %226
  %232 = add nsw i64 %27, 328
  %233 = getelementptr inbounds float, float* %7, i64 %232
  %234 = bitcast float* %233 to <8 x float>*
  %235 = load <8 x float>, <8 x float>* %234, align 32, !tbaa !7637
  %236 = fadd <8 x float> %235, %231
  %237 = add nsw i64 %27, 336
  %238 = getelementptr inbounds float, float* %7, i64 %237
  %239 = bitcast float* %238 to <8 x float>*
  %240 = load <8 x float>, <8 x float>* %239, align 32, !tbaa !7637
  %241 = fadd <8 x float> %240, %236
  %242 = add nsw i64 %27, 344
  %243 = getelementptr inbounds float, float* %7, i64 %242
  %244 = bitcast float* %243 to <8 x float>*
  %245 = load <8 x float>, <8 x float>* %244, align 32, !tbaa !7637
  %246 = fadd <8 x float> %245, %241
  %247 = add nsw i64 %27, 352
  %248 = getelementptr inbounds float, float* %7, i64 %247
  %249 = bitcast float* %248 to <8 x float>*
  %250 = load <8 x float>, <8 x float>* %249, align 32, !tbaa !7637
  %251 = fadd <8 x float> %250, %246
  %252 = add nsw i64 %27, 360
  %253 = getelementptr inbounds float, float* %7, i64 %252
  %254 = bitcast float* %253 to <8 x float>*
  %255 = load <8 x float>, <8 x float>* %254, align 32, !tbaa !7637
  %256 = fadd <8 x float> %255, %251
  %257 = add nsw i64 %27, 368
  %258 = getelementptr inbounds float, float* %7, i64 %257
  %259 = bitcast float* %258 to <8 x float>*
  %260 = load <8 x float>, <8 x float>* %259, align 32, !tbaa !7637
  %261 = fadd <8 x float> %260, %256
  %262 = add nsw i64 %27, 376
  %263 = getelementptr inbounds float, float* %7, i64 %262
  %264 = bitcast float* %263 to <8 x float>*
  %265 = load <8 x float>, <8 x float>* %264, align 32, !tbaa !7637
  %266 = fadd <8 x float> %265, %261
  %267 = add nsw i64 %27, 384
  %268 = getelementptr inbounds float, float* %7, i64 %267
  %269 = bitcast float* %268 to <8 x float>*
  %270 = load <8 x float>, <8 x float>* %269, align 32, !tbaa !7637
  %271 = fadd <8 x float> %270, %266
  store <8 x float> %271, <8 x float>* %26, align 32, !tbaa !7634
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %272 = add nsw i32 %22, 1
  %273 = icmp slt i64 %indvars.iv.next, %21
  br i1 %273, label %for_body, label %for_end, !prof !5

for_end:                                          ; preds = %for_body, %entry
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.451(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 255
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 256
  %15 = select i1 %14, i32 %13, i32 256
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 256
  %18 = select i1 %17, i32 %16, i32 256
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_begin1.preheader ]
  %22 = trunc i64 %indvars.iv to i32
  %23 = shl i32 %22, 3
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds float, float* %7, i64 %24
  %26 = getelementptr inbounds float, float* %4, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !7634
  %29 = fmul <4 x float> %28, <float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000>
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !7640
  %31 = or i64 %24, 4
  %32 = getelementptr inbounds float, float* %7, i64 %31
  %33 = getelementptr inbounds float, float* %4, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !7634
  %36 = fmul <4 x float> %35, <float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000>
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !7640
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %38 = icmp slt i64 %indvars.iv.next, %21
  br i1 %38, label %for_begin1.preheader, label %for_end, !prof !5

for_end:                                          ; preds = %for_begin1.preheader, %entry
  ret i32 0
}

define dllexport i32 @fused_layout_transform_36(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.452, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !7643
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.453, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !7657
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.454, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !7659
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !7673
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 16
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.100, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !7675
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 28
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !7678
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 28
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !7680
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 32
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !7684
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 401408
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !7698
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 25088
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !7700
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 896
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !7703
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 32
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !7705
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.293, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !7709
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !7723
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 1
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !7725
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 28
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.278, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !7728
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 28
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.279, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !7730
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 512
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.406, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !7734
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 401408
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !7748
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 401408
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !7750
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 14336
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !7753
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 512
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !7755
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.455, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_36_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_36_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %49, align 8
  %3 = getelementptr inbounds %49, %49* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %49, %49* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %49* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.456, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.456(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 27
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 28
  %15 = select i1 %14, i32 %13, i32 28
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 28
  %18 = select i1 %17, i32 %16, i32 28
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv10, 14336
  %23 = trunc i64 %indvars.iv10 to i32
  %24 = mul i32 %23, 896
  %25 = insertelement <16 x i32> undef, i32 %24, i32 0
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %26 = shl i64 %indvars.iv7, 9
  %27 = add nsw i64 %26, %22
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %28 = shl i32 %indvars.iv7.tr, 5
  %29 = insertelement <16 x i32> undef, i32 %28, i32 0
  %30 = add <16 x i32> %29, %25
  %31 = shufflevector <16 x i32> %30, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %32 = icmp slt i64 %indvars.iv.next11, %21
  br i1 %32, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %33 = shl nsw i64 %indvars.iv, 4
  %34 = add nsw i64 %27, %33
  %35 = trunc i64 %33 to i32
  %36 = insertelement <16 x i32> undef, i32 %35, i32 0
  %37 = trunc i64 %33 to i32
  %38 = or i32 %37, 1
  %39 = insertelement <16 x i32> %36, i32 %38, i32 1
  %40 = trunc i64 %33 to i32
  %41 = or i32 %40, 2
  %42 = insertelement <16 x i32> %39, i32 %41, i32 2
  %43 = trunc i64 %33 to i32
  %44 = or i32 %43, 3
  %45 = insertelement <16 x i32> %42, i32 %44, i32 3
  %46 = trunc i64 %33 to i32
  %47 = or i32 %46, 4
  %48 = insertelement <16 x i32> %45, i32 %47, i32 4
  %49 = trunc i64 %33 to i32
  %50 = or i32 %49, 5
  %51 = insertelement <16 x i32> %48, i32 %50, i32 5
  %52 = trunc i64 %33 to i32
  %53 = or i32 %52, 6
  %54 = insertelement <16 x i32> %51, i32 %53, i32 6
  %55 = trunc i64 %33 to i32
  %56 = or i32 %55, 7
  %57 = insertelement <16 x i32> %54, i32 %56, i32 7
  %58 = trunc i64 %33 to i32
  %59 = or i32 %58, 8
  %60 = insertelement <16 x i32> %57, i32 %59, i32 8
  %61 = trunc i64 %33 to i32
  %62 = or i32 %61, 9
  %63 = insertelement <16 x i32> %60, i32 %62, i32 9
  %64 = trunc i64 %33 to i32
  %65 = or i32 %64, 10
  %66 = insertelement <16 x i32> %63, i32 %65, i32 10
  %67 = trunc i64 %33 to i32
  %68 = or i32 %67, 11
  %69 = insertelement <16 x i32> %66, i32 %68, i32 11
  %70 = trunc i64 %33 to i32
  %71 = or i32 %70, 12
  %72 = insertelement <16 x i32> %69, i32 %71, i32 12
  %73 = trunc i64 %33 to i32
  %74 = or i32 %73, 13
  %75 = insertelement <16 x i32> %72, i32 %74, i32 13
  %76 = trunc i64 %33 to i32
  %77 = or i32 %76, 14
  %78 = insertelement <16 x i32> %75, i32 %77, i32 14
  %79 = trunc i64 %33 to i32
  %80 = or i32 %79, 15
  %81 = insertelement <16 x i32> %78, i32 %80, i32 15
  %82 = sdiv <16 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %83 = mul <16 x i32> %82, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %.decomposed = sub <16 x i32> %81, %83
  %84 = add nsw <16 x i32> %.decomposed, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %85 = icmp sgt <16 x i32> %.decomposed, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %86 = select <16 x i1> %85, <16 x i32> %.decomposed, <16 x i32> %84
  %not. = xor <16 x i1> %85, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %87 = zext <16 x i1> %not. to <16 x i32>
  %88 = sub nsw <16 x i32> %82, %87
  %89 = mul nsw <16 x i32> %88, <i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088>
  %90 = add <16 x i32> %31, %86
  %91 = add <16 x i32> %90, %89
  %92 = extractelement <16 x i32> %91, i64 0
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds float, float* %7, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !7759
  %96 = insertelement <16 x float> undef, float %95, i32 0
  %97 = extractelement <16 x i32> %91, i64 1
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds float, float* %7, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !7759
  %101 = insertelement <16 x float> %96, float %100, i32 1
  %102 = extractelement <16 x i32> %91, i64 2
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !7759
  %106 = insertelement <16 x float> %101, float %105, i32 2
  %107 = extractelement <16 x i32> %91, i64 3
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float* %7, i64 %108
  %110 = load float, float* %109, align 4, !tbaa !7759
  %111 = insertelement <16 x float> %106, float %110, i32 3
  %112 = extractelement <16 x i32> %91, i64 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds float, float* %7, i64 %113
  %115 = load float, float* %114, align 4, !tbaa !7759
  %116 = insertelement <16 x float> %111, float %115, i32 4
  %117 = extractelement <16 x i32> %91, i64 5
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds float, float* %7, i64 %118
  %120 = load float, float* %119, align 4, !tbaa !7759
  %121 = insertelement <16 x float> %116, float %120, i32 5
  %122 = extractelement <16 x i32> %91, i64 6
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds float, float* %7, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !7759
  %126 = insertelement <16 x float> %121, float %125, i32 6
  %127 = extractelement <16 x i32> %91, i64 7
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds float, float* %7, i64 %128
  %130 = load float, float* %129, align 4, !tbaa !7759
  %131 = insertelement <16 x float> %126, float %130, i32 7
  %132 = extractelement <16 x i32> %91, i64 8
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds float, float* %7, i64 %133
  %135 = load float, float* %134, align 4, !tbaa !7759
  %136 = insertelement <16 x float> %131, float %135, i32 8
  %137 = extractelement <16 x i32> %91, i64 9
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds float, float* %7, i64 %138
  %140 = load float, float* %139, align 4, !tbaa !7759
  %141 = insertelement <16 x float> %136, float %140, i32 9
  %142 = extractelement <16 x i32> %91, i64 10
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = load float, float* %144, align 4, !tbaa !7759
  %146 = insertelement <16 x float> %141, float %145, i32 10
  %147 = extractelement <16 x i32> %91, i64 11
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds float, float* %7, i64 %148
  %150 = load float, float* %149, align 4, !tbaa !7759
  %151 = insertelement <16 x float> %146, float %150, i32 11
  %152 = extractelement <16 x i32> %91, i64 12
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds float, float* %7, i64 %153
  %155 = load float, float* %154, align 4, !tbaa !7759
  %156 = insertelement <16 x float> %151, float %155, i32 12
  %157 = extractelement <16 x i32> %91, i64 13
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds float, float* %7, i64 %158
  %160 = load float, float* %159, align 4, !tbaa !7759
  %161 = insertelement <16 x float> %156, float %160, i32 13
  %162 = extractelement <16 x i32> %91, i64 14
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds float, float* %7, i64 %163
  %165 = load float, float* %164, align 4, !tbaa !7759
  %166 = insertelement <16 x float> %161, float %165, i32 14
  %167 = extractelement <16 x i32> %91, i64 15
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds float, float* %7, i64 %168
  %170 = load float, float* %169, align 4, !tbaa !7759
  %171 = insertelement <16 x float> %166, float %170, i32 15
  %172 = getelementptr inbounds float, float* %4, i64 %34
  %173 = bitcast float* %172 to <16 x float>*
  store <16 x float> %171, <16 x float>* %173, align 64, !tbaa !7762
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 28
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_layout_transform_37(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.457, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !7765
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.458, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !7779
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.459, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !7781
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !7795
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 16
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.100, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !7797
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 28
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !7800
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 28
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !7802
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 8
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !7806
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 100352
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !7820
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 6272
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !7822
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 224
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !7825
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 8
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !7827
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.460, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !7831
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !7845
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 8
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.226, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !7847
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 28
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.278, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !7850
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 28
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.279, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !7852
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 16
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !7856
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 100352
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !7870
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 12544
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !7872
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 448
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !7875
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 16
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !7877
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.461, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_37_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_37_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %50, align 8
  %3 = getelementptr inbounds %50, %50* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %50, %50* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %50* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.462, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.462(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 223
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 224
  %15 = select i1 %14, i32 %13, i32 224
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 224
  %18 = select i1 %17, i32 %16, i32 224
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv4 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next5, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv4, 448
  %23 = trunc i64 %indvars.iv4 to i32
  %24 = sdiv i32 %23, 28
  %25 = mul i32 %24, 28
  %.decomposed = sub i32 %23, %25
  %26 = mul nsw i32 %.decomposed, 224
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  %28 = shufflevector <16 x i32> %27, <16 x i32> undef, <16 x i32> zeroinitializer
  %29 = mul nsw i32 %24, 12544
  %30 = insertelement <16 x i32> undef, i32 %29, i32 0
  %31 = shufflevector <16 x i32> %30, <16 x i32> undef, <16 x i32> zeroinitializer
  %32 = add <16 x i32> %31, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 6272, i32 6273, i32 6274, i32 6275, i32 6276, i32 6277, i32 6278, i32 6279>
  %33 = add <16 x i32> %32, %28
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %34 = shl i64 %indvars.iv, 4
  %35 = add nsw i64 %34, %22
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %36 = shl i32 %indvars.iv.tr, 3
  %37 = insertelement <16 x i32> undef, i32 %36, i32 0
  %38 = shufflevector <16 x i32> %37, <16 x i32> undef, <16 x i32> zeroinitializer
  %39 = add <16 x i32> %33, %38
  %40 = extractelement <16 x i32> %39, i64 0
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %7, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !7881
  %44 = insertelement <16 x float> undef, float %43, i32 0
  %45 = extractelement <16 x i32> %39, i64 1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %7, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !7881
  %49 = insertelement <16 x float> %44, float %48, i32 1
  %50 = extractelement <16 x i32> %39, i64 2
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %7, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !7881
  %54 = insertelement <16 x float> %49, float %53, i32 2
  %55 = extractelement <16 x i32> %39, i64 3
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %7, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !7881
  %59 = insertelement <16 x float> %54, float %58, i32 3
  %60 = extractelement <16 x i32> %39, i64 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %7, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !7881
  %64 = insertelement <16 x float> %59, float %63, i32 4
  %65 = extractelement <16 x i32> %39, i64 5
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %7, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !7881
  %69 = insertelement <16 x float> %64, float %68, i32 5
  %70 = extractelement <16 x i32> %39, i64 6
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %7, i64 %71
  %73 = load float, float* %72, align 4, !tbaa !7881
  %74 = insertelement <16 x float> %69, float %73, i32 6
  %75 = extractelement <16 x i32> %39, i64 7
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds float, float* %7, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !7881
  %79 = insertelement <16 x float> %74, float %78, i32 7
  %80 = extractelement <16 x i32> %39, i64 8
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float* %7, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !7881
  %84 = insertelement <16 x float> %79, float %83, i32 8
  %85 = extractelement <16 x i32> %39, i64 9
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds float, float* %7, i64 %86
  %88 = load float, float* %87, align 4, !tbaa !7881
  %89 = insertelement <16 x float> %84, float %88, i32 9
  %90 = extractelement <16 x i32> %39, i64 10
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds float, float* %7, i64 %91
  %93 = load float, float* %92, align 4, !tbaa !7881
  %94 = insertelement <16 x float> %89, float %93, i32 10
  %95 = extractelement <16 x i32> %39, i64 11
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %7, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !7881
  %99 = insertelement <16 x float> %94, float %98, i32 11
  %100 = extractelement <16 x i32> %39, i64 12
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !7881
  %104 = insertelement <16 x float> %99, float %103, i32 12
  %105 = extractelement <16 x i32> %39, i64 13
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !7881
  %109 = insertelement <16 x float> %104, float %108, i32 13
  %110 = extractelement <16 x i32> %39, i64 14
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !7881
  %114 = insertelement <16 x float> %109, float %113, i32 14
  %115 = extractelement <16 x i32> %39, i64 15
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !7881
  %119 = insertelement <16 x float> %114, float %118, i32 15
  %120 = getelementptr inbounds float, float* %4, i64 %35
  %121 = bitcast float* %120 to <16 x float>*
  store <16 x float> %119, <16 x float>* %121, align 64, !tbaa !7884
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, 1
  %122 = icmp slt i64 %indvars.iv.next5, %21
  br i1 %122, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.463, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !7887
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !7901
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !7904
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.464, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !7906
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.465, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.466, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.467, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !7908
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !7922
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 4
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.90, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !7924
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 28
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !7927
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 28
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !7929
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 32
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !7933
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 100352
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !7947
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 25088
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !7949
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 896
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !7952
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 32
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !7954
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.468, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !7958
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 16
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !7972
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 4
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !7974
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 3
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !7977
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 3
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.105, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !7979
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 32
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.469, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !7983
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !7985
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 9216
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !7999
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 2304
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !8001
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 768
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !8004
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 256
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !8006
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 8
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !8010
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.470, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !8012
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !8026
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 16
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !8028
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !8031
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !8033
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 8
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !8037
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 128
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !8051
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 8
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !8053
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 8
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !8056
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 8
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !8058
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.110, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !8062
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !8076
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 16
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !8078
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 28
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !8081
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 28
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.113, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !8083
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 8
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !8087
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 100352
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !8101
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 6272
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !8103
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 224
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !8106
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 8
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !8108
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.115, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %6 = tail call i8* %5(i32 1, i32 %4, i64 460800, i32 2, i32 32)
  %7 = alloca %51, align 8
  %8 = getelementptr inbounds %51, %51* %7, i64 0, i32 0
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds %51, %51* %7, i64 0, i32 1
  store i8* %0, i8** %9, align 8
  %10 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %11 = bitcast %51* %7 to i8*
  %12 = call i32 %10(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.471, i8* nonnull %11, i32 0)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %12, %entry ], [ 0, %call_end2 ], [ %21, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %14 = alloca %52, align 8
  %15 = getelementptr inbounds %52, %52* %14, i64 0, i32 0
  store i8* %6, i8** %15, align 8
  %16 = getelementptr inbounds %52, %52* %14, i64 0, i32 1
  store i8* %1, i8** %16, align 8
  %17 = getelementptr inbounds %52, %52* %14, i64 0, i32 2
  store i8* %2, i8** %17, align 8
  %18 = getelementptr inbounds %52, %52* %14, i64 0, i32 3
  store i8* %3, i8** %18, align 8
  %19 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %20 = bitcast %52* %14 to i8*
  %21 = call i32 %19(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.472, i8* nonnull %20, i32 0)
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %23 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %24 = call i32 %23(i32 1, i32 %4, i8* %6)
  br label %call_fail
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.471(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 119
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 120
  %15 = select i1 %14, i32 %13, i32 120
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 120
  %18 = select i1 %17, i32 %16, i32 120
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv, 960
  %23 = trunc i64 %indvars.iv to i32
  %24 = sdiv i32 %23, 30
  %25 = mul i32 %24, 30
  %.decomposed = sub i32 %23, %25
  %.off = add nsw i32 %.decomposed, -1
  %26 = icmp ult i32 %.off, 28
  %27 = mul nsw i32 %.decomposed, 896
  %28 = mul nsw i32 %24, 25088
  %29 = add nsw i32 %27, -928
  %30 = add i32 %29, %28
  br i1 %26, label %if_end.us.29, label %for_body2.preheader

for_body2.preheader:                              ; preds = %for_begin1.preheader
  %31 = add i32 %18, %indvar
  %32 = mul i32 %31, 960
  %33 = sext i32 %32 to i64
  %scevgep = getelementptr float, float* %4, i64 %33
  %scevgep5 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 128 %scevgep5, i8 0, i64 3840, i1 false)
  br label %for_end3

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %for_body2.preheader, %if_end.us.29
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %34 = icmp slt i64 %indvars.iv.next, %21
  %indvar.next = add i32 %indvar, 1
  br i1 %34, label %for_begin1.preheader, label %for_end, !prof !5

if_end.us.29:                                     ; preds = %for_begin1.preheader
  %35 = getelementptr inbounds float, float* %4, i64 %22
  %36 = bitcast float* %35 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %36, align 128, !tbaa !8112
  %37 = or i64 %22, 32
  %38 = add i32 %30, 32
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds float, float* %7, i64 %39
  %41 = bitcast float* %40 to <32 x float>*
  %42 = load <32 x float>, <32 x float>* %41, align 128, !tbaa !8115
  %43 = getelementptr inbounds float, float* %4, i64 %37
  %44 = bitcast float* %43 to <32 x float>*
  store <32 x float> %42, <32 x float>* %44, align 128, !tbaa !8112
  %45 = add nsw i64 %22, 64
  %46 = add i32 %30, 64
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds float, float* %7, i64 %47
  %49 = bitcast float* %48 to <32 x float>*
  %50 = load <32 x float>, <32 x float>* %49, align 128, !tbaa !8115
  %51 = getelementptr inbounds float, float* %4, i64 %45
  %52 = bitcast float* %51 to <32 x float>*
  store <32 x float> %50, <32 x float>* %52, align 128, !tbaa !8112
  %53 = add nsw i64 %22, 96
  %54 = add i32 %30, 96
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds float, float* %7, i64 %55
  %57 = bitcast float* %56 to <32 x float>*
  %58 = load <32 x float>, <32 x float>* %57, align 128, !tbaa !8115
  %59 = getelementptr inbounds float, float* %4, i64 %53
  %60 = bitcast float* %59 to <32 x float>*
  store <32 x float> %58, <32 x float>* %60, align 128, !tbaa !8112
  %61 = add nsw i64 %22, 128
  %62 = add i32 %30, 128
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %7, i64 %63
  %65 = bitcast float* %64 to <32 x float>*
  %66 = load <32 x float>, <32 x float>* %65, align 128, !tbaa !8115
  %67 = getelementptr inbounds float, float* %4, i64 %61
  %68 = bitcast float* %67 to <32 x float>*
  store <32 x float> %66, <32 x float>* %68, align 128, !tbaa !8112
  %69 = add nsw i64 %22, 160
  %70 = add i32 %30, 160
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %7, i64 %71
  %73 = bitcast float* %72 to <32 x float>*
  %74 = load <32 x float>, <32 x float>* %73, align 128, !tbaa !8115
  %75 = getelementptr inbounds float, float* %4, i64 %69
  %76 = bitcast float* %75 to <32 x float>*
  store <32 x float> %74, <32 x float>* %76, align 128, !tbaa !8112
  %77 = add nsw i64 %22, 192
  %78 = add i32 %30, 192
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %7, i64 %79
  %81 = bitcast float* %80 to <32 x float>*
  %82 = load <32 x float>, <32 x float>* %81, align 128, !tbaa !8115
  %83 = getelementptr inbounds float, float* %4, i64 %77
  %84 = bitcast float* %83 to <32 x float>*
  store <32 x float> %82, <32 x float>* %84, align 128, !tbaa !8112
  %85 = add nsw i64 %22, 224
  %86 = add i32 %30, 224
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %7, i64 %87
  %89 = bitcast float* %88 to <32 x float>*
  %90 = load <32 x float>, <32 x float>* %89, align 128, !tbaa !8115
  %91 = getelementptr inbounds float, float* %4, i64 %85
  %92 = bitcast float* %91 to <32 x float>*
  store <32 x float> %90, <32 x float>* %92, align 128, !tbaa !8112
  %93 = add nsw i64 %22, 256
  %94 = add i32 %30, 256
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds float, float* %7, i64 %95
  %97 = bitcast float* %96 to <32 x float>*
  %98 = load <32 x float>, <32 x float>* %97, align 128, !tbaa !8115
  %99 = getelementptr inbounds float, float* %4, i64 %93
  %100 = bitcast float* %99 to <32 x float>*
  store <32 x float> %98, <32 x float>* %100, align 128, !tbaa !8112
  %101 = add nsw i64 %22, 288
  %102 = add i32 %30, 288
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = bitcast float* %104 to <32 x float>*
  %106 = load <32 x float>, <32 x float>* %105, align 128, !tbaa !8115
  %107 = getelementptr inbounds float, float* %4, i64 %101
  %108 = bitcast float* %107 to <32 x float>*
  store <32 x float> %106, <32 x float>* %108, align 128, !tbaa !8112
  %109 = add nsw i64 %22, 320
  %110 = add i32 %30, 320
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = bitcast float* %112 to <32 x float>*
  %114 = load <32 x float>, <32 x float>* %113, align 128, !tbaa !8115
  %115 = getelementptr inbounds float, float* %4, i64 %109
  %116 = bitcast float* %115 to <32 x float>*
  store <32 x float> %114, <32 x float>* %116, align 128, !tbaa !8112
  %117 = add nsw i64 %22, 352
  %118 = add i32 %30, 352
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds float, float* %7, i64 %119
  %121 = bitcast float* %120 to <32 x float>*
  %122 = load <32 x float>, <32 x float>* %121, align 128, !tbaa !8115
  %123 = getelementptr inbounds float, float* %4, i64 %117
  %124 = bitcast float* %123 to <32 x float>*
  store <32 x float> %122, <32 x float>* %124, align 128, !tbaa !8112
  %125 = add nsw i64 %22, 384
  %126 = add i32 %30, 384
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds float, float* %7, i64 %127
  %129 = bitcast float* %128 to <32 x float>*
  %130 = load <32 x float>, <32 x float>* %129, align 128, !tbaa !8115
  %131 = getelementptr inbounds float, float* %4, i64 %125
  %132 = bitcast float* %131 to <32 x float>*
  store <32 x float> %130, <32 x float>* %132, align 128, !tbaa !8112
  %133 = add nsw i64 %22, 416
  %134 = add i32 %30, 416
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds float, float* %7, i64 %135
  %137 = bitcast float* %136 to <32 x float>*
  %138 = load <32 x float>, <32 x float>* %137, align 128, !tbaa !8115
  %139 = getelementptr inbounds float, float* %4, i64 %133
  %140 = bitcast float* %139 to <32 x float>*
  store <32 x float> %138, <32 x float>* %140, align 128, !tbaa !8112
  %141 = add nsw i64 %22, 448
  %142 = add i32 %30, 448
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = bitcast float* %144 to <32 x float>*
  %146 = load <32 x float>, <32 x float>* %145, align 128, !tbaa !8115
  %147 = getelementptr inbounds float, float* %4, i64 %141
  %148 = bitcast float* %147 to <32 x float>*
  store <32 x float> %146, <32 x float>* %148, align 128, !tbaa !8112
  %149 = add nsw i64 %22, 480
  %150 = add i32 %30, 480
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = bitcast float* %152 to <32 x float>*
  %154 = load <32 x float>, <32 x float>* %153, align 128, !tbaa !8115
  %155 = getelementptr inbounds float, float* %4, i64 %149
  %156 = bitcast float* %155 to <32 x float>*
  store <32 x float> %154, <32 x float>* %156, align 128, !tbaa !8112
  %157 = add nsw i64 %22, 512
  %158 = add i32 %30, 512
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds float, float* %7, i64 %159
  %161 = bitcast float* %160 to <32 x float>*
  %162 = load <32 x float>, <32 x float>* %161, align 128, !tbaa !8115
  %163 = getelementptr inbounds float, float* %4, i64 %157
  %164 = bitcast float* %163 to <32 x float>*
  store <32 x float> %162, <32 x float>* %164, align 128, !tbaa !8112
  %165 = add nsw i64 %22, 544
  %166 = add i32 %30, 544
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds float, float* %7, i64 %167
  %169 = bitcast float* %168 to <32 x float>*
  %170 = load <32 x float>, <32 x float>* %169, align 128, !tbaa !8115
  %171 = getelementptr inbounds float, float* %4, i64 %165
  %172 = bitcast float* %171 to <32 x float>*
  store <32 x float> %170, <32 x float>* %172, align 128, !tbaa !8112
  %173 = add nsw i64 %22, 576
  %174 = add i32 %30, 576
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds float, float* %7, i64 %175
  %177 = bitcast float* %176 to <32 x float>*
  %178 = load <32 x float>, <32 x float>* %177, align 128, !tbaa !8115
  %179 = getelementptr inbounds float, float* %4, i64 %173
  %180 = bitcast float* %179 to <32 x float>*
  store <32 x float> %178, <32 x float>* %180, align 128, !tbaa !8112
  %181 = add nsw i64 %22, 608
  %182 = add i32 %30, 608
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds float, float* %7, i64 %183
  %185 = bitcast float* %184 to <32 x float>*
  %186 = load <32 x float>, <32 x float>* %185, align 128, !tbaa !8115
  %187 = getelementptr inbounds float, float* %4, i64 %181
  %188 = bitcast float* %187 to <32 x float>*
  store <32 x float> %186, <32 x float>* %188, align 128, !tbaa !8112
  %189 = add nsw i64 %22, 640
  %190 = add i32 %30, 640
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds float, float* %7, i64 %191
  %193 = bitcast float* %192 to <32 x float>*
  %194 = load <32 x float>, <32 x float>* %193, align 128, !tbaa !8115
  %195 = getelementptr inbounds float, float* %4, i64 %189
  %196 = bitcast float* %195 to <32 x float>*
  store <32 x float> %194, <32 x float>* %196, align 128, !tbaa !8112
  %197 = add nsw i64 %22, 672
  %198 = add i32 %30, 672
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds float, float* %7, i64 %199
  %201 = bitcast float* %200 to <32 x float>*
  %202 = load <32 x float>, <32 x float>* %201, align 128, !tbaa !8115
  %203 = getelementptr inbounds float, float* %4, i64 %197
  %204 = bitcast float* %203 to <32 x float>*
  store <32 x float> %202, <32 x float>* %204, align 128, !tbaa !8112
  %205 = add nsw i64 %22, 704
  %206 = add i32 %30, 704
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds float, float* %7, i64 %207
  %209 = bitcast float* %208 to <32 x float>*
  %210 = load <32 x float>, <32 x float>* %209, align 128, !tbaa !8115
  %211 = getelementptr inbounds float, float* %4, i64 %205
  %212 = bitcast float* %211 to <32 x float>*
  store <32 x float> %210, <32 x float>* %212, align 128, !tbaa !8112
  %213 = add nsw i64 %22, 736
  %214 = add i32 %30, 736
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds float, float* %7, i64 %215
  %217 = bitcast float* %216 to <32 x float>*
  %218 = load <32 x float>, <32 x float>* %217, align 128, !tbaa !8115
  %219 = getelementptr inbounds float, float* %4, i64 %213
  %220 = bitcast float* %219 to <32 x float>*
  store <32 x float> %218, <32 x float>* %220, align 128, !tbaa !8112
  %221 = add nsw i64 %22, 768
  %222 = add i32 %30, 768
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds float, float* %7, i64 %223
  %225 = bitcast float* %224 to <32 x float>*
  %226 = load <32 x float>, <32 x float>* %225, align 128, !tbaa !8115
  %227 = getelementptr inbounds float, float* %4, i64 %221
  %228 = bitcast float* %227 to <32 x float>*
  store <32 x float> %226, <32 x float>* %228, align 128, !tbaa !8112
  %229 = add nsw i64 %22, 800
  %230 = add i32 %30, 800
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds float, float* %7, i64 %231
  %233 = bitcast float* %232 to <32 x float>*
  %234 = load <32 x float>, <32 x float>* %233, align 128, !tbaa !8115
  %235 = getelementptr inbounds float, float* %4, i64 %229
  %236 = bitcast float* %235 to <32 x float>*
  store <32 x float> %234, <32 x float>* %236, align 128, !tbaa !8112
  %237 = add nsw i64 %22, 832
  %238 = add i32 %30, 832
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds float, float* %7, i64 %239
  %241 = bitcast float* %240 to <32 x float>*
  %242 = load <32 x float>, <32 x float>* %241, align 128, !tbaa !8115
  %243 = getelementptr inbounds float, float* %4, i64 %237
  %244 = bitcast float* %243 to <32 x float>*
  store <32 x float> %242, <32 x float>* %244, align 128, !tbaa !8112
  %245 = add nsw i64 %22, 864
  %246 = add i32 %30, 864
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds float, float* %7, i64 %247
  %249 = bitcast float* %248 to <32 x float>*
  %250 = load <32 x float>, <32 x float>* %249, align 128, !tbaa !8115
  %251 = getelementptr inbounds float, float* %4, i64 %245
  %252 = bitcast float* %251 to <32 x float>*
  store <32 x float> %250, <32 x float>* %252, align 128, !tbaa !8112
  %253 = add nsw i64 %22, 896
  %254 = add i32 %30, 896
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds float, float* %7, i64 %255
  %257 = bitcast float* %256 to <32 x float>*
  %258 = load <32 x float>, <32 x float>* %257, align 128, !tbaa !8115
  %259 = getelementptr inbounds float, float* %4, i64 %253
  %260 = bitcast float* %259 to <32 x float>*
  store <32 x float> %258, <32 x float>* %260, align 128, !tbaa !8112
  %261 = add nsw i64 %22, 928
  %262 = getelementptr inbounds float, float* %4, i64 %261
  %263 = bitcast float* %262 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %263, align 128, !tbaa !8112
  br label %for_end3
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.472(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = alloca [14 x <8 x float>], align 32
  %4 = bitcast [14 x <8 x float>]* %3 to i8*
  %5 = alloca [28 x <8 x float>], align 16
  %.sub = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0
  %6 = bitcast i8* %2 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 16
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 24
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 447
  %20 = sdiv i32 %19, %18
  %21 = add nsw i32 %0, 1
  %22 = mul nsw i32 %20, %21
  %23 = icmp slt i32 %22, 448
  %24 = select i1 %23, i32 %22, i32 448
  %25 = mul nsw i32 %20, %0
  %26 = icmp slt i32 %25, 448
  %27 = select i1 %26, i32 %25, i32 448
  %28 = icmp slt i32 %27, %24
  br i1 %28, label %for_begin1.preheader.lr.ph, label %for_end, !prof !5

for_begin1.preheader.lr.ph:                       ; preds = %entry
  %29 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 8
  %30 = bitcast float* %29 to <8 x float>*
  %31 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 16
  %32 = bitcast float* %31 to <8 x float>*
  %33 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 24
  %34 = bitcast float* %33 to <8 x float>*
  %35 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 32
  %36 = bitcast float* %35 to <8 x float>*
  %37 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 40
  %38 = bitcast float* %37 to <8 x float>*
  %39 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 48
  %40 = bitcast float* %39 to <8 x float>*
  %41 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 56
  %42 = bitcast float* %41 to <8 x float>*
  %43 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 64
  %44 = bitcast float* %43 to <8 x float>*
  %45 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 72
  %46 = bitcast float* %45 to <8 x float>*
  %47 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 80
  %48 = bitcast float* %47 to <8 x float>*
  %49 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 88
  %50 = bitcast float* %49 to <8 x float>*
  %51 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 96
  %52 = bitcast float* %51 to <8 x float>*
  %53 = getelementptr inbounds [14 x <8 x float>], [14 x <8 x float>]* %3, i64 0, i64 0, i64 104
  %54 = bitcast float* %53 to <8 x float>*
  %55 = sext i32 %27 to i64
  %56 = sext i32 %24 to i64
  %57 = bitcast [14 x <8 x float>]* %3 to i8*
  %58 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0
  %59 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 8
  %60 = bitcast float* %59 to <8 x float>*
  %61 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 16
  %62 = bitcast float* %61 to <8 x float>*
  %63 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 24
  %64 = bitcast float* %63 to <8 x float>*
  %65 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 32
  %66 = bitcast float* %65 to <8 x float>*
  %67 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 40
  %68 = bitcast float* %67 to <8 x float>*
  %69 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 48
  %70 = bitcast float* %69 to <8 x float>*
  %71 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 56
  %72 = bitcast float* %71 to <8 x float>*
  %73 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 64
  %74 = bitcast float* %73 to <8 x float>*
  %75 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 72
  %76 = bitcast float* %75 to <8 x float>*
  %77 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 80
  %78 = bitcast float* %77 to <8 x float>*
  %79 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 88
  %80 = bitcast float* %79 to <8 x float>*
  %81 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 96
  %82 = bitcast float* %81 to <8 x float>*
  %83 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 104
  %84 = bitcast float* %83 to <8 x float>*
  %85 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 112
  %86 = bitcast float* %85 to <8 x float>*
  %87 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 120
  %88 = bitcast float* %87 to <8 x float>*
  %89 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 128
  %90 = bitcast float* %89 to <8 x float>*
  %91 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 136
  %92 = bitcast float* %91 to <8 x float>*
  %93 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 144
  %94 = bitcast float* %93 to <8 x float>*
  %95 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 152
  %96 = bitcast float* %95 to <8 x float>*
  %97 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 160
  %98 = bitcast float* %97 to <8 x float>*
  %99 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 168
  %100 = bitcast float* %99 to <8 x float>*
  %101 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 176
  %102 = bitcast float* %101 to <8 x float>*
  %103 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 184
  %104 = bitcast float* %103 to <8 x float>*
  %105 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 192
  %106 = bitcast float* %105 to <8 x float>*
  %107 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 200
  %108 = bitcast float* %107 to <8 x float>*
  %109 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 208
  %110 = bitcast float* %109 to <8 x float>*
  %111 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 0, i64 216
  %112 = bitcast float* %111 to <8 x float>*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.lr.ph, %for_begin19.preheader
  %indvars.iv168 = phi i64 [ %55, %for_begin1.preheader.lr.ph ], [ %indvars.iv.next169, %for_begin19.preheader ]
  %113 = trunc i64 %indvars.iv168 to i32
  %114 = sdiv i32 %113, 28
  %115 = mul i32 %114, 28
  %.decomposed = sub i32 %113, %115
  %116 = mul nsw i32 %114, 9216
  %117 = sext i32 %116 to i64
  br label %for_body2

for_end:                                          ; preds = %for_begin19.preheader, %entry
  ret i32 0

for_begin19.preheader:                            ; preds = %for_begin16.preheader
  %118 = mul nsw i64 %indvars.iv168, 224
  %119 = shl nsw i32 %114, 3
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds float, float* %16, i64 %120
  %122 = bitcast float* %121 to <8 x float>*
  %123 = load <8 x float>, <8 x float>* %122, align 32, !tbaa !8118
  %124 = load <8 x float>, <8 x float>* %58, align 16, !tbaa !8121
  %125 = fadd <8 x float> %123, %124
  %126 = fcmp ogt <8 x float> %125, zeroinitializer
  %127 = select <8 x i1> %126, <8 x float> %125, <8 x float> zeroinitializer
  %128 = getelementptr inbounds float, float* %13, i64 %118
  %129 = bitcast float* %128 to <8 x float>*
  store <8 x float> %127, <8 x float>* %129, align 32, !tbaa !8124
  %130 = load <8 x float>, <8 x float>* %60, align 16, !tbaa !8121
  %131 = fadd <8 x float> %123, %130
  %132 = fcmp ogt <8 x float> %131, zeroinitializer
  %133 = select <8 x i1> %132, <8 x float> %131, <8 x float> zeroinitializer
  %134 = mul i64 %indvars.iv168, 962072674304
  %sext = ashr exact i64 %134, 32
  %135 = or i64 %sext, 8
  %136 = getelementptr inbounds float, float* %13, i64 %135
  %137 = bitcast float* %136 to <8 x float>*
  store <8 x float> %133, <8 x float>* %137, align 32, !tbaa !8124
  %138 = load <8 x float>, <8 x float>* %62, align 16, !tbaa !8121
  %139 = fadd <8 x float> %123, %138
  %140 = fcmp ogt <8 x float> %139, zeroinitializer
  %141 = select <8 x i1> %140, <8 x float> %139, <8 x float> zeroinitializer
  %142 = mul i64 %indvars.iv168, 962072674304
  %sext170 = ashr exact i64 %142, 32
  %143 = or i64 %sext170, 16
  %144 = getelementptr inbounds float, float* %13, i64 %143
  %145 = bitcast float* %144 to <8 x float>*
  store <8 x float> %141, <8 x float>* %145, align 32, !tbaa !8124
  %146 = load <8 x float>, <8 x float>* %64, align 16, !tbaa !8121
  %147 = fadd <8 x float> %123, %146
  %148 = fcmp ogt <8 x float> %147, zeroinitializer
  %149 = select <8 x i1> %148, <8 x float> %147, <8 x float> zeroinitializer
  %150 = mul i64 %indvars.iv168, 962072674304
  %sext171 = ashr exact i64 %150, 32
  %151 = or i64 %sext171, 24
  %152 = getelementptr inbounds float, float* %13, i64 %151
  %153 = bitcast float* %152 to <8 x float>*
  store <8 x float> %149, <8 x float>* %153, align 32, !tbaa !8124
  %154 = load <8 x float>, <8 x float>* %66, align 16, !tbaa !8121
  %155 = fadd <8 x float> %123, %154
  %156 = fcmp ogt <8 x float> %155, zeroinitializer
  %157 = select <8 x i1> %156, <8 x float> %155, <8 x float> zeroinitializer
  %158 = mul i64 %indvars.iv168, 962072674304
  %sext172 = add i64 %158, 137438953472
  %159 = ashr exact i64 %sext172, 32
  %160 = getelementptr inbounds float, float* %13, i64 %159
  %161 = bitcast float* %160 to <8 x float>*
  store <8 x float> %157, <8 x float>* %161, align 32, !tbaa !8124
  %162 = load <8 x float>, <8 x float>* %68, align 16, !tbaa !8121
  %163 = fadd <8 x float> %123, %162
  %164 = fcmp ogt <8 x float> %163, zeroinitializer
  %165 = select <8 x i1> %164, <8 x float> %163, <8 x float> zeroinitializer
  %166 = mul i64 %indvars.iv168, 962072674304
  %sext173 = add i64 %166, 171798691840
  %167 = ashr exact i64 %sext173, 32
  %168 = getelementptr inbounds float, float* %13, i64 %167
  %169 = bitcast float* %168 to <8 x float>*
  store <8 x float> %165, <8 x float>* %169, align 32, !tbaa !8124
  %170 = load <8 x float>, <8 x float>* %70, align 16, !tbaa !8121
  %171 = fadd <8 x float> %123, %170
  %172 = fcmp ogt <8 x float> %171, zeroinitializer
  %173 = select <8 x i1> %172, <8 x float> %171, <8 x float> zeroinitializer
  %174 = mul i64 %indvars.iv168, 962072674304
  %sext174 = add i64 %174, 206158430208
  %175 = ashr exact i64 %sext174, 32
  %176 = getelementptr inbounds float, float* %13, i64 %175
  %177 = bitcast float* %176 to <8 x float>*
  store <8 x float> %173, <8 x float>* %177, align 32, !tbaa !8124
  %178 = load <8 x float>, <8 x float>* %72, align 16, !tbaa !8121
  %179 = fadd <8 x float> %123, %178
  %180 = fcmp ogt <8 x float> %179, zeroinitializer
  %181 = select <8 x i1> %180, <8 x float> %179, <8 x float> zeroinitializer
  %182 = mul i64 %indvars.iv168, 962072674304
  %sext175 = add i64 %182, 240518168576
  %183 = ashr exact i64 %sext175, 32
  %184 = getelementptr inbounds float, float* %13, i64 %183
  %185 = bitcast float* %184 to <8 x float>*
  store <8 x float> %181, <8 x float>* %185, align 32, !tbaa !8124
  %186 = load <8 x float>, <8 x float>* %74, align 16, !tbaa !8121
  %187 = fadd <8 x float> %123, %186
  %188 = fcmp ogt <8 x float> %187, zeroinitializer
  %189 = select <8 x i1> %188, <8 x float> %187, <8 x float> zeroinitializer
  %190 = mul i64 %indvars.iv168, 962072674304
  %sext176 = add i64 %190, 274877906944
  %191 = ashr exact i64 %sext176, 32
  %192 = getelementptr inbounds float, float* %13, i64 %191
  %193 = bitcast float* %192 to <8 x float>*
  store <8 x float> %189, <8 x float>* %193, align 32, !tbaa !8124
  %194 = load <8 x float>, <8 x float>* %76, align 16, !tbaa !8121
  %195 = fadd <8 x float> %123, %194
  %196 = fcmp ogt <8 x float> %195, zeroinitializer
  %197 = select <8 x i1> %196, <8 x float> %195, <8 x float> zeroinitializer
  %198 = mul i64 %indvars.iv168, 962072674304
  %sext177 = add i64 %198, 309237645312
  %199 = ashr exact i64 %sext177, 32
  %200 = getelementptr inbounds float, float* %13, i64 %199
  %201 = bitcast float* %200 to <8 x float>*
  store <8 x float> %197, <8 x float>* %201, align 32, !tbaa !8124
  %202 = load <8 x float>, <8 x float>* %78, align 16, !tbaa !8121
  %203 = fadd <8 x float> %123, %202
  %204 = fcmp ogt <8 x float> %203, zeroinitializer
  %205 = select <8 x i1> %204, <8 x float> %203, <8 x float> zeroinitializer
  %206 = mul i64 %indvars.iv168, 962072674304
  %sext178 = add i64 %206, 343597383680
  %207 = ashr exact i64 %sext178, 32
  %208 = getelementptr inbounds float, float* %13, i64 %207
  %209 = bitcast float* %208 to <8 x float>*
  store <8 x float> %205, <8 x float>* %209, align 32, !tbaa !8124
  %210 = load <8 x float>, <8 x float>* %80, align 16, !tbaa !8121
  %211 = fadd <8 x float> %123, %210
  %212 = fcmp ogt <8 x float> %211, zeroinitializer
  %213 = select <8 x i1> %212, <8 x float> %211, <8 x float> zeroinitializer
  %214 = mul i64 %indvars.iv168, 962072674304
  %sext179 = add i64 %214, 377957122048
  %215 = ashr exact i64 %sext179, 32
  %216 = getelementptr inbounds float, float* %13, i64 %215
  %217 = bitcast float* %216 to <8 x float>*
  store <8 x float> %213, <8 x float>* %217, align 32, !tbaa !8124
  %218 = load <8 x float>, <8 x float>* %82, align 16, !tbaa !8121
  %219 = fadd <8 x float> %123, %218
  %220 = fcmp ogt <8 x float> %219, zeroinitializer
  %221 = select <8 x i1> %220, <8 x float> %219, <8 x float> zeroinitializer
  %222 = mul i64 %indvars.iv168, 962072674304
  %sext180 = add i64 %222, 412316860416
  %223 = ashr exact i64 %sext180, 32
  %224 = getelementptr inbounds float, float* %13, i64 %223
  %225 = bitcast float* %224 to <8 x float>*
  store <8 x float> %221, <8 x float>* %225, align 32, !tbaa !8124
  %226 = load <8 x float>, <8 x float>* %84, align 16, !tbaa !8121
  %227 = fadd <8 x float> %123, %226
  %228 = fcmp ogt <8 x float> %227, zeroinitializer
  %229 = select <8 x i1> %228, <8 x float> %227, <8 x float> zeroinitializer
  %230 = mul i64 %indvars.iv168, 962072674304
  %sext181 = add i64 %230, 446676598784
  %231 = ashr exact i64 %sext181, 32
  %232 = getelementptr inbounds float, float* %13, i64 %231
  %233 = bitcast float* %232 to <8 x float>*
  store <8 x float> %229, <8 x float>* %233, align 32, !tbaa !8124
  %234 = load <8 x float>, <8 x float>* %86, align 16, !tbaa !8121
  %235 = fadd <8 x float> %123, %234
  %236 = fcmp ogt <8 x float> %235, zeroinitializer
  %237 = select <8 x i1> %236, <8 x float> %235, <8 x float> zeroinitializer
  %238 = mul i64 %indvars.iv168, 962072674304
  %sext182 = add i64 %238, 481036337152
  %239 = ashr exact i64 %sext182, 32
  %240 = getelementptr inbounds float, float* %13, i64 %239
  %241 = bitcast float* %240 to <8 x float>*
  store <8 x float> %237, <8 x float>* %241, align 32, !tbaa !8124
  %242 = load <8 x float>, <8 x float>* %88, align 16, !tbaa !8121
  %243 = fadd <8 x float> %123, %242
  %244 = fcmp ogt <8 x float> %243, zeroinitializer
  %245 = select <8 x i1> %244, <8 x float> %243, <8 x float> zeroinitializer
  %246 = mul i64 %indvars.iv168, 962072674304
  %sext183 = add i64 %246, 515396075520
  %247 = ashr exact i64 %sext183, 32
  %248 = getelementptr inbounds float, float* %13, i64 %247
  %249 = bitcast float* %248 to <8 x float>*
  store <8 x float> %245, <8 x float>* %249, align 32, !tbaa !8124
  %250 = load <8 x float>, <8 x float>* %90, align 16, !tbaa !8121
  %251 = fadd <8 x float> %123, %250
  %252 = fcmp ogt <8 x float> %251, zeroinitializer
  %253 = select <8 x i1> %252, <8 x float> %251, <8 x float> zeroinitializer
  %254 = mul i64 %indvars.iv168, 962072674304
  %sext184 = add i64 %254, 549755813888
  %255 = ashr exact i64 %sext184, 32
  %256 = getelementptr inbounds float, float* %13, i64 %255
  %257 = bitcast float* %256 to <8 x float>*
  store <8 x float> %253, <8 x float>* %257, align 32, !tbaa !8124
  %258 = load <8 x float>, <8 x float>* %92, align 16, !tbaa !8121
  %259 = fadd <8 x float> %123, %258
  %260 = fcmp ogt <8 x float> %259, zeroinitializer
  %261 = select <8 x i1> %260, <8 x float> %259, <8 x float> zeroinitializer
  %262 = mul i64 %indvars.iv168, 962072674304
  %sext185 = add i64 %262, 584115552256
  %263 = ashr exact i64 %sext185, 32
  %264 = getelementptr inbounds float, float* %13, i64 %263
  %265 = bitcast float* %264 to <8 x float>*
  store <8 x float> %261, <8 x float>* %265, align 32, !tbaa !8124
  %266 = load <8 x float>, <8 x float>* %94, align 16, !tbaa !8121
  %267 = fadd <8 x float> %123, %266
  %268 = fcmp ogt <8 x float> %267, zeroinitializer
  %269 = select <8 x i1> %268, <8 x float> %267, <8 x float> zeroinitializer
  %270 = mul i64 %indvars.iv168, 962072674304
  %sext186 = add i64 %270, 618475290624
  %271 = ashr exact i64 %sext186, 32
  %272 = getelementptr inbounds float, float* %13, i64 %271
  %273 = bitcast float* %272 to <8 x float>*
  store <8 x float> %269, <8 x float>* %273, align 32, !tbaa !8124
  %274 = load <8 x float>, <8 x float>* %96, align 16, !tbaa !8121
  %275 = fadd <8 x float> %123, %274
  %276 = fcmp ogt <8 x float> %275, zeroinitializer
  %277 = select <8 x i1> %276, <8 x float> %275, <8 x float> zeroinitializer
  %278 = mul i64 %indvars.iv168, 962072674304
  %sext187 = add i64 %278, 652835028992
  %279 = ashr exact i64 %sext187, 32
  %280 = getelementptr inbounds float, float* %13, i64 %279
  %281 = bitcast float* %280 to <8 x float>*
  store <8 x float> %277, <8 x float>* %281, align 32, !tbaa !8124
  %282 = load <8 x float>, <8 x float>* %98, align 16, !tbaa !8121
  %283 = fadd <8 x float> %123, %282
  %284 = fcmp ogt <8 x float> %283, zeroinitializer
  %285 = select <8 x i1> %284, <8 x float> %283, <8 x float> zeroinitializer
  %286 = mul i64 %indvars.iv168, 962072674304
  %sext188 = add i64 %286, 687194767360
  %287 = ashr exact i64 %sext188, 32
  %288 = getelementptr inbounds float, float* %13, i64 %287
  %289 = bitcast float* %288 to <8 x float>*
  store <8 x float> %285, <8 x float>* %289, align 32, !tbaa !8124
  %290 = load <8 x float>, <8 x float>* %100, align 16, !tbaa !8121
  %291 = fadd <8 x float> %123, %290
  %292 = fcmp ogt <8 x float> %291, zeroinitializer
  %293 = select <8 x i1> %292, <8 x float> %291, <8 x float> zeroinitializer
  %294 = mul i64 %indvars.iv168, 962072674304
  %sext189 = add i64 %294, 721554505728
  %295 = ashr exact i64 %sext189, 32
  %296 = getelementptr inbounds float, float* %13, i64 %295
  %297 = bitcast float* %296 to <8 x float>*
  store <8 x float> %293, <8 x float>* %297, align 32, !tbaa !8124
  %298 = load <8 x float>, <8 x float>* %102, align 16, !tbaa !8121
  %299 = fadd <8 x float> %123, %298
  %300 = fcmp ogt <8 x float> %299, zeroinitializer
  %301 = select <8 x i1> %300, <8 x float> %299, <8 x float> zeroinitializer
  %302 = mul i64 %indvars.iv168, 962072674304
  %sext190 = add i64 %302, 755914244096
  %303 = ashr exact i64 %sext190, 32
  %304 = getelementptr inbounds float, float* %13, i64 %303
  %305 = bitcast float* %304 to <8 x float>*
  store <8 x float> %301, <8 x float>* %305, align 32, !tbaa !8124
  %306 = load <8 x float>, <8 x float>* %104, align 16, !tbaa !8121
  %307 = fadd <8 x float> %123, %306
  %308 = fcmp ogt <8 x float> %307, zeroinitializer
  %309 = select <8 x i1> %308, <8 x float> %307, <8 x float> zeroinitializer
  %310 = mul i64 %indvars.iv168, 962072674304
  %sext191 = add i64 %310, 790273982464
  %311 = ashr exact i64 %sext191, 32
  %312 = getelementptr inbounds float, float* %13, i64 %311
  %313 = bitcast float* %312 to <8 x float>*
  store <8 x float> %309, <8 x float>* %313, align 32, !tbaa !8124
  %314 = load <8 x float>, <8 x float>* %106, align 16, !tbaa !8121
  %315 = fadd <8 x float> %123, %314
  %316 = fcmp ogt <8 x float> %315, zeroinitializer
  %317 = select <8 x i1> %316, <8 x float> %315, <8 x float> zeroinitializer
  %318 = mul i64 %indvars.iv168, 962072674304
  %sext192 = add i64 %318, 824633720832
  %319 = ashr exact i64 %sext192, 32
  %320 = getelementptr inbounds float, float* %13, i64 %319
  %321 = bitcast float* %320 to <8 x float>*
  store <8 x float> %317, <8 x float>* %321, align 32, !tbaa !8124
  %322 = load <8 x float>, <8 x float>* %108, align 16, !tbaa !8121
  %323 = fadd <8 x float> %123, %322
  %324 = fcmp ogt <8 x float> %323, zeroinitializer
  %325 = select <8 x i1> %324, <8 x float> %323, <8 x float> zeroinitializer
  %326 = mul i64 %indvars.iv168, 962072674304
  %sext193 = add i64 %326, 858993459200
  %327 = ashr exact i64 %sext193, 32
  %328 = getelementptr inbounds float, float* %13, i64 %327
  %329 = bitcast float* %328 to <8 x float>*
  store <8 x float> %325, <8 x float>* %329, align 32, !tbaa !8124
  %330 = load <8 x float>, <8 x float>* %110, align 16, !tbaa !8121
  %331 = fadd <8 x float> %123, %330
  %332 = fcmp ogt <8 x float> %331, zeroinitializer
  %333 = select <8 x i1> %332, <8 x float> %331, <8 x float> zeroinitializer
  %334 = mul i64 %indvars.iv168, 962072674304
  %sext194 = add i64 %334, 893353197568
  %335 = ashr exact i64 %sext194, 32
  %336 = getelementptr inbounds float, float* %13, i64 %335
  %337 = bitcast float* %336 to <8 x float>*
  store <8 x float> %333, <8 x float>* %337, align 32, !tbaa !8124
  %338 = load <8 x float>, <8 x float>* %112, align 16, !tbaa !8121
  %339 = fadd <8 x float> %123, %338
  %340 = fcmp ogt <8 x float> %339, zeroinitializer
  %341 = select <8 x i1> %340, <8 x float> %339, <8 x float> zeroinitializer
  %342 = mul i64 %indvars.iv168, 962072674304
  %sext195 = add i64 %342, 927712935936
  %343 = ashr exact i64 %sext195, 32
  %344 = getelementptr inbounds float, float* %13, i64 %343
  %345 = bitcast float* %344 to <8 x float>*
  store <8 x float> %341, <8 x float>* %345, align 32, !tbaa !8124
  %indvars.iv.next169 = add nsw i64 %indvars.iv168, 1
  %346 = icmp slt i64 %indvars.iv.next169, %56
  br i1 %346, label %for_begin1.preheader, label %for_end, !prof !5

for_body2:                                        ; preds = %for_begin16.preheader, %for_begin1.preheader
  %indvar = phi i64 [ 0, %for_begin1.preheader ], [ %indvar.next, %for_begin16.preheader ]
  %347 = mul nuw nsw i64 %indvar, 14
  %scevgep = getelementptr [28 x <8 x float>], [28 x <8 x float>]* %5, i64 0, i64 %347
  %scevgep160 = bitcast <8 x float>* %scevgep to i8*
  %348 = mul nuw nsw i64 %indvar, 448
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %57, i8 0, i64 448, i1 false)
  br label %for_begin7.preheader

for_begin16.preheader:                            ; preds = %for_end9
  store <8 x float> %593, <8 x float>* %.sub, align 32, !tbaa !8127
  store <8 x float> %599, <8 x float>* %30, align 32, !tbaa !8138
  store <8 x float> %605, <8 x float>* %32, align 32, !tbaa !8140
  store <8 x float> %611, <8 x float>* %34, align 32, !tbaa !8143
  store <8 x float> %617, <8 x float>* %36, align 32, !tbaa !8145
  store <8 x float> %623, <8 x float>* %38, align 32, !tbaa !8149
  store <8 x float> %629, <8 x float>* %40, align 32, !tbaa !8151
  store <8 x float> %635, <8 x float>* %42, align 32, !tbaa !8154
  store <8 x float> %641, <8 x float>* %44, align 32, !tbaa !8156
  store <8 x float> %647, <8 x float>* %46, align 32, !tbaa !8161
  store <8 x float> %653, <8 x float>* %48, align 32, !tbaa !8163
  store <8 x float> %659, <8 x float>* %50, align 32, !tbaa !8166
  store <8 x float> %665, <8 x float>* %52, align 32, !tbaa !8168
  store <8 x float> %671, <8 x float>* %54, align 32, !tbaa !8172
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep160, i8* nonnull align 32 %4, i64 448, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond161 = icmp eq i64 %indvar.next, 2
  br i1 %exitcond161, label %for_begin19.preheader, label %for_body2, !prof !50

for_begin7.preheader:                             ; preds = %for_end9, %for_body2
  %indvars.iv154 = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next155, %for_end9 ]
  %.lcssa53.lcssa.lcssa133 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %671, %for_end9 ]
  %.lcssa51.lcssa.lcssa131 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %665, %for_end9 ]
  %.lcssa49.lcssa.lcssa129 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %659, %for_end9 ]
  %.lcssa47.lcssa.lcssa127 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %653, %for_end9 ]
  %.lcssa45.lcssa.lcssa125 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %647, %for_end9 ]
  %.lcssa43.lcssa.lcssa123 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %641, %for_end9 ]
  %.lcssa41.lcssa.lcssa121 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %635, %for_end9 ]
  %.lcssa39.lcssa.lcssa119 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %629, %for_end9 ]
  %.lcssa37.lcssa.lcssa117 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %623, %for_end9 ]
  %.lcssa35.lcssa.lcssa115 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %617, %for_end9 ]
  %.lcssa33.lcssa.lcssa114 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %611, %for_end9 ]
  %.lcssa31.lcssa.lcssa112 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %605, %for_end9 ]
  %.lcssa29.lcssa.lcssa110 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %599, %for_end9 ]
  %.lcssa.lcssa.lcssa108 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %593, %for_end9 ]
  %349 = mul nuw nsw i64 %indvars.iv154, 28800
  %350 = add nuw nsw i64 %349, %348
  %351 = mul nuw nsw i64 %indvars.iv154, 2304
  %352 = add nsw i64 %351, %117
  %353 = trunc i64 %350 to i32
  br label %for_begin10.preheader

for_begin10.preheader:                            ; preds = %for_end15.2, %for_begin7.preheader
  %indvars.iv150 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next151, %for_end15.2 ]
  %.lcssa53.lcssa106 = phi <8 x float> [ %.lcssa53.lcssa.lcssa133, %for_begin7.preheader ], [ %671, %for_end15.2 ]
  %.lcssa51.lcssa104 = phi <8 x float> [ %.lcssa51.lcssa.lcssa131, %for_begin7.preheader ], [ %665, %for_end15.2 ]
  %.lcssa49.lcssa102 = phi <8 x float> [ %.lcssa49.lcssa.lcssa129, %for_begin7.preheader ], [ %659, %for_end15.2 ]
  %.lcssa47.lcssa100 = phi <8 x float> [ %.lcssa47.lcssa.lcssa127, %for_begin7.preheader ], [ %653, %for_end15.2 ]
  %.lcssa45.lcssa98 = phi <8 x float> [ %.lcssa45.lcssa.lcssa125, %for_begin7.preheader ], [ %647, %for_end15.2 ]
  %.lcssa43.lcssa96 = phi <8 x float> [ %.lcssa43.lcssa.lcssa123, %for_begin7.preheader ], [ %641, %for_end15.2 ]
  %.lcssa41.lcssa94 = phi <8 x float> [ %.lcssa41.lcssa.lcssa121, %for_begin7.preheader ], [ %635, %for_end15.2 ]
  %.lcssa39.lcssa92 = phi <8 x float> [ %.lcssa39.lcssa.lcssa119, %for_begin7.preheader ], [ %629, %for_end15.2 ]
  %.lcssa37.lcssa90 = phi <8 x float> [ %.lcssa37.lcssa.lcssa117, %for_begin7.preheader ], [ %623, %for_end15.2 ]
  %.lcssa35.lcssa88 = phi <8 x float> [ %.lcssa35.lcssa.lcssa115, %for_begin7.preheader ], [ %617, %for_end15.2 ]
  %.lcssa33.lcssa86 = phi <8 x float> [ %.lcssa33.lcssa.lcssa114, %for_begin7.preheader ], [ %611, %for_end15.2 ]
  %.lcssa31.lcssa85 = phi <8 x float> [ %.lcssa31.lcssa.lcssa112, %for_begin7.preheader ], [ %605, %for_end15.2 ]
  %.lcssa29.lcssa83 = phi <8 x float> [ %.lcssa29.lcssa.lcssa110, %for_begin7.preheader ], [ %599, %for_end15.2 ]
  %.lcssa.lcssa81 = phi <8 x float> [ %.lcssa.lcssa.lcssa108, %for_begin7.preheader ], [ %593, %for_end15.2 ]
  %354 = phi i32 [ 0, %for_begin7.preheader ], [ %672, %for_end15.2 ]
  %reass.add = add nsw i32 %354, %.decomposed
  %reass.mul = mul i32 %reass.add, 960
  %355 = add nsw i32 %reass.mul, %353
  %356 = mul nuw nsw i64 %indvars.iv150, 768
  %357 = add nsw i64 %352, %356
  %358 = sext i32 %355 to i64
  br label %for_body14

for_end9:                                         ; preds = %for_end15.2
  %indvars.iv.next155 = add nuw nsw i64 %indvars.iv154, 1
  %exitcond156 = icmp eq i64 %indvars.iv.next155, 4
  br i1 %exitcond156, label %for_begin16.preheader, label %for_begin7.preheader, !prof !50

for_body14:                                       ; preds = %for_body14, %for_begin10.preheader
  %indvars.iv = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next, %for_body14 ]
  %359 = phi <8 x float> [ %.lcssa53.lcssa106, %for_begin10.preheader ], [ %461, %for_body14 ]
  %360 = phi <8 x float> [ %.lcssa51.lcssa104, %for_begin10.preheader ], [ %455, %for_body14 ]
  %361 = phi <8 x float> [ %.lcssa49.lcssa102, %for_begin10.preheader ], [ %449, %for_body14 ]
  %362 = phi <8 x float> [ %.lcssa47.lcssa100, %for_begin10.preheader ], [ %443, %for_body14 ]
  %363 = phi <8 x float> [ %.lcssa45.lcssa98, %for_begin10.preheader ], [ %437, %for_body14 ]
  %364 = phi <8 x float> [ %.lcssa43.lcssa96, %for_begin10.preheader ], [ %431, %for_body14 ]
  %365 = phi <8 x float> [ %.lcssa41.lcssa94, %for_begin10.preheader ], [ %425, %for_body14 ]
  %366 = phi <8 x float> [ %.lcssa39.lcssa92, %for_begin10.preheader ], [ %419, %for_body14 ]
  %367 = phi <8 x float> [ %.lcssa37.lcssa90, %for_begin10.preheader ], [ %413, %for_body14 ]
  %368 = phi <8 x float> [ %.lcssa35.lcssa88, %for_begin10.preheader ], [ %407, %for_body14 ]
  %369 = phi <8 x float> [ %.lcssa33.lcssa86, %for_begin10.preheader ], [ %401, %for_body14 ]
  %370 = phi <8 x float> [ %.lcssa31.lcssa85, %for_begin10.preheader ], [ %395, %for_body14 ]
  %371 = phi <8 x float> [ %.lcssa29.lcssa83, %for_begin10.preheader ], [ %389, %for_body14 ]
  %372 = phi <8 x float> [ %.lcssa.lcssa81, %for_begin10.preheader ], [ %383, %for_body14 ]
  %373 = add nsw i64 %indvars.iv, %358
  %374 = getelementptr inbounds float, float* %7, i64 %373
  %375 = load float, float* %374, align 4, !tbaa !8112
  %376 = insertelement <8 x float> undef, float %375, i32 0
  %377 = shufflevector <8 x float> %376, <8 x float> undef, <8 x i32> zeroinitializer
  %378 = shl i64 %indvars.iv, 3
  %379 = add nsw i64 %357, %378
  %380 = getelementptr inbounds float, float* %10, i64 %379
  %381 = bitcast float* %380 to <8 x float>*
  %382 = load <8 x float>, <8 x float>* %381, align 32, !tbaa !8174
  %383 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %377, <8 x float> %382, <8 x float> %372)
  %384 = add nsw i64 %373, 32
  %385 = getelementptr inbounds float, float* %7, i64 %384
  %386 = load float, float* %385, align 4, !tbaa !8112
  %387 = insertelement <8 x float> undef, float %386, i32 0
  %388 = shufflevector <8 x float> %387, <8 x float> undef, <8 x i32> zeroinitializer
  %389 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %388, <8 x float> %382, <8 x float> %371)
  %390 = add nsw i64 %373, 64
  %391 = getelementptr inbounds float, float* %7, i64 %390
  %392 = load float, float* %391, align 4, !tbaa !8112
  %393 = insertelement <8 x float> undef, float %392, i32 0
  %394 = shufflevector <8 x float> %393, <8 x float> undef, <8 x i32> zeroinitializer
  %395 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %394, <8 x float> %382, <8 x float> %370)
  %396 = add nsw i64 %373, 96
  %397 = getelementptr inbounds float, float* %7, i64 %396
  %398 = load float, float* %397, align 4, !tbaa !8112
  %399 = insertelement <8 x float> undef, float %398, i32 0
  %400 = shufflevector <8 x float> %399, <8 x float> undef, <8 x i32> zeroinitializer
  %401 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %400, <8 x float> %382, <8 x float> %369)
  %402 = add nsw i64 %373, 128
  %403 = getelementptr inbounds float, float* %7, i64 %402
  %404 = load float, float* %403, align 4, !tbaa !8112
  %405 = insertelement <8 x float> undef, float %404, i32 0
  %406 = shufflevector <8 x float> %405, <8 x float> undef, <8 x i32> zeroinitializer
  %407 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %406, <8 x float> %382, <8 x float> %368)
  %408 = add nsw i64 %373, 160
  %409 = getelementptr inbounds float, float* %7, i64 %408
  %410 = load float, float* %409, align 4, !tbaa !8112
  %411 = insertelement <8 x float> undef, float %410, i32 0
  %412 = shufflevector <8 x float> %411, <8 x float> undef, <8 x i32> zeroinitializer
  %413 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %412, <8 x float> %382, <8 x float> %367)
  %414 = add nsw i64 %373, 192
  %415 = getelementptr inbounds float, float* %7, i64 %414
  %416 = load float, float* %415, align 4, !tbaa !8112
  %417 = insertelement <8 x float> undef, float %416, i32 0
  %418 = shufflevector <8 x float> %417, <8 x float> undef, <8 x i32> zeroinitializer
  %419 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %418, <8 x float> %382, <8 x float> %366)
  %420 = add nsw i64 %373, 224
  %421 = getelementptr inbounds float, float* %7, i64 %420
  %422 = load float, float* %421, align 4, !tbaa !8112
  %423 = insertelement <8 x float> undef, float %422, i32 0
  %424 = shufflevector <8 x float> %423, <8 x float> undef, <8 x i32> zeroinitializer
  %425 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %424, <8 x float> %382, <8 x float> %365)
  %426 = add nsw i64 %373, 256
  %427 = getelementptr inbounds float, float* %7, i64 %426
  %428 = load float, float* %427, align 4, !tbaa !8112
  %429 = insertelement <8 x float> undef, float %428, i32 0
  %430 = shufflevector <8 x float> %429, <8 x float> undef, <8 x i32> zeroinitializer
  %431 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %430, <8 x float> %382, <8 x float> %364)
  %432 = add nsw i64 %373, 288
  %433 = getelementptr inbounds float, float* %7, i64 %432
  %434 = load float, float* %433, align 4, !tbaa !8112
  %435 = insertelement <8 x float> undef, float %434, i32 0
  %436 = shufflevector <8 x float> %435, <8 x float> undef, <8 x i32> zeroinitializer
  %437 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %436, <8 x float> %382, <8 x float> %363)
  %438 = add nsw i64 %373, 320
  %439 = getelementptr inbounds float, float* %7, i64 %438
  %440 = load float, float* %439, align 4, !tbaa !8112
  %441 = insertelement <8 x float> undef, float %440, i32 0
  %442 = shufflevector <8 x float> %441, <8 x float> undef, <8 x i32> zeroinitializer
  %443 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %442, <8 x float> %382, <8 x float> %362)
  %444 = add nsw i64 %373, 352
  %445 = getelementptr inbounds float, float* %7, i64 %444
  %446 = load float, float* %445, align 4, !tbaa !8112
  %447 = insertelement <8 x float> undef, float %446, i32 0
  %448 = shufflevector <8 x float> %447, <8 x float> undef, <8 x i32> zeroinitializer
  %449 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %448, <8 x float> %382, <8 x float> %361)
  %450 = add nsw i64 %373, 384
  %451 = getelementptr inbounds float, float* %7, i64 %450
  %452 = load float, float* %451, align 4, !tbaa !8112
  %453 = insertelement <8 x float> undef, float %452, i32 0
  %454 = shufflevector <8 x float> %453, <8 x float> undef, <8 x i32> zeroinitializer
  %455 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %454, <8 x float> %382, <8 x float> %360)
  %456 = add nsw i64 %373, 416
  %457 = getelementptr inbounds float, float* %7, i64 %456
  %458 = load float, float* %457, align 4, !tbaa !8112
  %459 = insertelement <8 x float> undef, float %458, i32 0
  %460 = shufflevector <8 x float> %459, <8 x float> undef, <8 x i32> zeroinitializer
  %461 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %460, <8 x float> %382, <8 x float> %359)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for_end15, label %for_body14, !prof !50

for_end15:                                        ; preds = %for_body14
  %462 = or i64 %358, 32
  %463 = add nsw i64 %357, 256
  br label %for_body14.1

for_body14.1:                                     ; preds = %for_body14.1, %for_end15
  %indvars.iv.1 = phi i64 [ 0, %for_end15 ], [ %indvars.iv.next.1, %for_body14.1 ]
  %464 = phi <8 x float> [ %461, %for_end15 ], [ %566, %for_body14.1 ]
  %465 = phi <8 x float> [ %455, %for_end15 ], [ %560, %for_body14.1 ]
  %466 = phi <8 x float> [ %449, %for_end15 ], [ %554, %for_body14.1 ]
  %467 = phi <8 x float> [ %443, %for_end15 ], [ %548, %for_body14.1 ]
  %468 = phi <8 x float> [ %437, %for_end15 ], [ %542, %for_body14.1 ]
  %469 = phi <8 x float> [ %431, %for_end15 ], [ %536, %for_body14.1 ]
  %470 = phi <8 x float> [ %425, %for_end15 ], [ %530, %for_body14.1 ]
  %471 = phi <8 x float> [ %419, %for_end15 ], [ %524, %for_body14.1 ]
  %472 = phi <8 x float> [ %413, %for_end15 ], [ %518, %for_body14.1 ]
  %473 = phi <8 x float> [ %407, %for_end15 ], [ %512, %for_body14.1 ]
  %474 = phi <8 x float> [ %401, %for_end15 ], [ %506, %for_body14.1 ]
  %475 = phi <8 x float> [ %395, %for_end15 ], [ %500, %for_body14.1 ]
  %476 = phi <8 x float> [ %389, %for_end15 ], [ %494, %for_body14.1 ]
  %477 = phi <8 x float> [ %383, %for_end15 ], [ %488, %for_body14.1 ]
  %478 = add nsw i64 %462, %indvars.iv.1
  %479 = getelementptr inbounds float, float* %7, i64 %478
  %480 = load float, float* %479, align 4, !tbaa !8112
  %481 = insertelement <8 x float> undef, float %480, i32 0
  %482 = shufflevector <8 x float> %481, <8 x float> undef, <8 x i32> zeroinitializer
  %483 = shl i64 %indvars.iv.1, 3
  %484 = add nsw i64 %463, %483
  %485 = getelementptr inbounds float, float* %10, i64 %484
  %486 = bitcast float* %485 to <8 x float>*
  %487 = load <8 x float>, <8 x float>* %486, align 32, !tbaa !8174
  %488 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %482, <8 x float> %487, <8 x float> %477)
  %489 = add nsw i64 %478, 32
  %490 = getelementptr inbounds float, float* %7, i64 %489
  %491 = load float, float* %490, align 4, !tbaa !8112
  %492 = insertelement <8 x float> undef, float %491, i32 0
  %493 = shufflevector <8 x float> %492, <8 x float> undef, <8 x i32> zeroinitializer
  %494 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %493, <8 x float> %487, <8 x float> %476)
  %495 = add nsw i64 %478, 64
  %496 = getelementptr inbounds float, float* %7, i64 %495
  %497 = load float, float* %496, align 4, !tbaa !8112
  %498 = insertelement <8 x float> undef, float %497, i32 0
  %499 = shufflevector <8 x float> %498, <8 x float> undef, <8 x i32> zeroinitializer
  %500 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %499, <8 x float> %487, <8 x float> %475)
  %501 = add nsw i64 %478, 96
  %502 = getelementptr inbounds float, float* %7, i64 %501
  %503 = load float, float* %502, align 4, !tbaa !8112
  %504 = insertelement <8 x float> undef, float %503, i32 0
  %505 = shufflevector <8 x float> %504, <8 x float> undef, <8 x i32> zeroinitializer
  %506 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %505, <8 x float> %487, <8 x float> %474)
  %507 = add nsw i64 %478, 128
  %508 = getelementptr inbounds float, float* %7, i64 %507
  %509 = load float, float* %508, align 4, !tbaa !8112
  %510 = insertelement <8 x float> undef, float %509, i32 0
  %511 = shufflevector <8 x float> %510, <8 x float> undef, <8 x i32> zeroinitializer
  %512 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %511, <8 x float> %487, <8 x float> %473)
  %513 = add nsw i64 %478, 160
  %514 = getelementptr inbounds float, float* %7, i64 %513
  %515 = load float, float* %514, align 4, !tbaa !8112
  %516 = insertelement <8 x float> undef, float %515, i32 0
  %517 = shufflevector <8 x float> %516, <8 x float> undef, <8 x i32> zeroinitializer
  %518 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %517, <8 x float> %487, <8 x float> %472)
  %519 = add nsw i64 %478, 192
  %520 = getelementptr inbounds float, float* %7, i64 %519
  %521 = load float, float* %520, align 4, !tbaa !8112
  %522 = insertelement <8 x float> undef, float %521, i32 0
  %523 = shufflevector <8 x float> %522, <8 x float> undef, <8 x i32> zeroinitializer
  %524 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %523, <8 x float> %487, <8 x float> %471)
  %525 = add nsw i64 %478, 224
  %526 = getelementptr inbounds float, float* %7, i64 %525
  %527 = load float, float* %526, align 4, !tbaa !8112
  %528 = insertelement <8 x float> undef, float %527, i32 0
  %529 = shufflevector <8 x float> %528, <8 x float> undef, <8 x i32> zeroinitializer
  %530 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %529, <8 x float> %487, <8 x float> %470)
  %531 = add nsw i64 %478, 256
  %532 = getelementptr inbounds float, float* %7, i64 %531
  %533 = load float, float* %532, align 4, !tbaa !8112
  %534 = insertelement <8 x float> undef, float %533, i32 0
  %535 = shufflevector <8 x float> %534, <8 x float> undef, <8 x i32> zeroinitializer
  %536 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %535, <8 x float> %487, <8 x float> %469)
  %537 = add nsw i64 %478, 288
  %538 = getelementptr inbounds float, float* %7, i64 %537
  %539 = load float, float* %538, align 4, !tbaa !8112
  %540 = insertelement <8 x float> undef, float %539, i32 0
  %541 = shufflevector <8 x float> %540, <8 x float> undef, <8 x i32> zeroinitializer
  %542 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %541, <8 x float> %487, <8 x float> %468)
  %543 = add nsw i64 %478, 320
  %544 = getelementptr inbounds float, float* %7, i64 %543
  %545 = load float, float* %544, align 4, !tbaa !8112
  %546 = insertelement <8 x float> undef, float %545, i32 0
  %547 = shufflevector <8 x float> %546, <8 x float> undef, <8 x i32> zeroinitializer
  %548 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %547, <8 x float> %487, <8 x float> %467)
  %549 = add nsw i64 %478, 352
  %550 = getelementptr inbounds float, float* %7, i64 %549
  %551 = load float, float* %550, align 4, !tbaa !8112
  %552 = insertelement <8 x float> undef, float %551, i32 0
  %553 = shufflevector <8 x float> %552, <8 x float> undef, <8 x i32> zeroinitializer
  %554 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %553, <8 x float> %487, <8 x float> %466)
  %555 = add nsw i64 %478, 384
  %556 = getelementptr inbounds float, float* %7, i64 %555
  %557 = load float, float* %556, align 4, !tbaa !8112
  %558 = insertelement <8 x float> undef, float %557, i32 0
  %559 = shufflevector <8 x float> %558, <8 x float> undef, <8 x i32> zeroinitializer
  %560 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %559, <8 x float> %487, <8 x float> %465)
  %561 = add nsw i64 %478, 416
  %562 = getelementptr inbounds float, float* %7, i64 %561
  %563 = load float, float* %562, align 4, !tbaa !8112
  %564 = insertelement <8 x float> undef, float %563, i32 0
  %565 = shufflevector <8 x float> %564, <8 x float> undef, <8 x i32> zeroinitializer
  %566 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %565, <8 x float> %487, <8 x float> %464)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 32
  br i1 %exitcond.1, label %for_end15.1, label %for_body14.1, !prof !50

for_end15.1:                                      ; preds = %for_body14.1
  %567 = add nsw i64 %358, 64
  %568 = add nsw i64 %357, 512
  br label %for_body14.2

for_body14.2:                                     ; preds = %for_body14.2, %for_end15.1
  %indvars.iv.2 = phi i64 [ 0, %for_end15.1 ], [ %indvars.iv.next.2, %for_body14.2 ]
  %569 = phi <8 x float> [ %566, %for_end15.1 ], [ %671, %for_body14.2 ]
  %570 = phi <8 x float> [ %560, %for_end15.1 ], [ %665, %for_body14.2 ]
  %571 = phi <8 x float> [ %554, %for_end15.1 ], [ %659, %for_body14.2 ]
  %572 = phi <8 x float> [ %548, %for_end15.1 ], [ %653, %for_body14.2 ]
  %573 = phi <8 x float> [ %542, %for_end15.1 ], [ %647, %for_body14.2 ]
  %574 = phi <8 x float> [ %536, %for_end15.1 ], [ %641, %for_body14.2 ]
  %575 = phi <8 x float> [ %530, %for_end15.1 ], [ %635, %for_body14.2 ]
  %576 = phi <8 x float> [ %524, %for_end15.1 ], [ %629, %for_body14.2 ]
  %577 = phi <8 x float> [ %518, %for_end15.1 ], [ %623, %for_body14.2 ]
  %578 = phi <8 x float> [ %512, %for_end15.1 ], [ %617, %for_body14.2 ]
  %579 = phi <8 x float> [ %506, %for_end15.1 ], [ %611, %for_body14.2 ]
  %580 = phi <8 x float> [ %500, %for_end15.1 ], [ %605, %for_body14.2 ]
  %581 = phi <8 x float> [ %494, %for_end15.1 ], [ %599, %for_body14.2 ]
  %582 = phi <8 x float> [ %488, %for_end15.1 ], [ %593, %for_body14.2 ]
  %583 = add nsw i64 %567, %indvars.iv.2
  %584 = getelementptr inbounds float, float* %7, i64 %583
  %585 = load float, float* %584, align 4, !tbaa !8112
  %586 = insertelement <8 x float> undef, float %585, i32 0
  %587 = shufflevector <8 x float> %586, <8 x float> undef, <8 x i32> zeroinitializer
  %588 = shl i64 %indvars.iv.2, 3
  %589 = add nsw i64 %568, %588
  %590 = getelementptr inbounds float, float* %10, i64 %589
  %591 = bitcast float* %590 to <8 x float>*
  %592 = load <8 x float>, <8 x float>* %591, align 32, !tbaa !8174
  %593 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %587, <8 x float> %592, <8 x float> %582)
  %594 = add nsw i64 %583, 32
  %595 = getelementptr inbounds float, float* %7, i64 %594
  %596 = load float, float* %595, align 4, !tbaa !8112
  %597 = insertelement <8 x float> undef, float %596, i32 0
  %598 = shufflevector <8 x float> %597, <8 x float> undef, <8 x i32> zeroinitializer
  %599 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %598, <8 x float> %592, <8 x float> %581)
  %600 = add nsw i64 %583, 64
  %601 = getelementptr inbounds float, float* %7, i64 %600
  %602 = load float, float* %601, align 4, !tbaa !8112
  %603 = insertelement <8 x float> undef, float %602, i32 0
  %604 = shufflevector <8 x float> %603, <8 x float> undef, <8 x i32> zeroinitializer
  %605 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %604, <8 x float> %592, <8 x float> %580)
  %606 = add nsw i64 %583, 96
  %607 = getelementptr inbounds float, float* %7, i64 %606
  %608 = load float, float* %607, align 4, !tbaa !8112
  %609 = insertelement <8 x float> undef, float %608, i32 0
  %610 = shufflevector <8 x float> %609, <8 x float> undef, <8 x i32> zeroinitializer
  %611 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %610, <8 x float> %592, <8 x float> %579)
  %612 = add nsw i64 %583, 128
  %613 = getelementptr inbounds float, float* %7, i64 %612
  %614 = load float, float* %613, align 4, !tbaa !8112
  %615 = insertelement <8 x float> undef, float %614, i32 0
  %616 = shufflevector <8 x float> %615, <8 x float> undef, <8 x i32> zeroinitializer
  %617 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %616, <8 x float> %592, <8 x float> %578)
  %618 = add nsw i64 %583, 160
  %619 = getelementptr inbounds float, float* %7, i64 %618
  %620 = load float, float* %619, align 4, !tbaa !8112
  %621 = insertelement <8 x float> undef, float %620, i32 0
  %622 = shufflevector <8 x float> %621, <8 x float> undef, <8 x i32> zeroinitializer
  %623 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %622, <8 x float> %592, <8 x float> %577)
  %624 = add nsw i64 %583, 192
  %625 = getelementptr inbounds float, float* %7, i64 %624
  %626 = load float, float* %625, align 4, !tbaa !8112
  %627 = insertelement <8 x float> undef, float %626, i32 0
  %628 = shufflevector <8 x float> %627, <8 x float> undef, <8 x i32> zeroinitializer
  %629 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %628, <8 x float> %592, <8 x float> %576)
  %630 = add nsw i64 %583, 224
  %631 = getelementptr inbounds float, float* %7, i64 %630
  %632 = load float, float* %631, align 4, !tbaa !8112
  %633 = insertelement <8 x float> undef, float %632, i32 0
  %634 = shufflevector <8 x float> %633, <8 x float> undef, <8 x i32> zeroinitializer
  %635 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %634, <8 x float> %592, <8 x float> %575)
  %636 = add nsw i64 %583, 256
  %637 = getelementptr inbounds float, float* %7, i64 %636
  %638 = load float, float* %637, align 4, !tbaa !8112
  %639 = insertelement <8 x float> undef, float %638, i32 0
  %640 = shufflevector <8 x float> %639, <8 x float> undef, <8 x i32> zeroinitializer
  %641 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %640, <8 x float> %592, <8 x float> %574)
  %642 = add nsw i64 %583, 288
  %643 = getelementptr inbounds float, float* %7, i64 %642
  %644 = load float, float* %643, align 4, !tbaa !8112
  %645 = insertelement <8 x float> undef, float %644, i32 0
  %646 = shufflevector <8 x float> %645, <8 x float> undef, <8 x i32> zeroinitializer
  %647 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %646, <8 x float> %592, <8 x float> %573)
  %648 = add nsw i64 %583, 320
  %649 = getelementptr inbounds float, float* %7, i64 %648
  %650 = load float, float* %649, align 4, !tbaa !8112
  %651 = insertelement <8 x float> undef, float %650, i32 0
  %652 = shufflevector <8 x float> %651, <8 x float> undef, <8 x i32> zeroinitializer
  %653 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %652, <8 x float> %592, <8 x float> %572)
  %654 = add nsw i64 %583, 352
  %655 = getelementptr inbounds float, float* %7, i64 %654
  %656 = load float, float* %655, align 4, !tbaa !8112
  %657 = insertelement <8 x float> undef, float %656, i32 0
  %658 = shufflevector <8 x float> %657, <8 x float> undef, <8 x i32> zeroinitializer
  %659 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %658, <8 x float> %592, <8 x float> %571)
  %660 = add nsw i64 %583, 384
  %661 = getelementptr inbounds float, float* %7, i64 %660
  %662 = load float, float* %661, align 4, !tbaa !8112
  %663 = insertelement <8 x float> undef, float %662, i32 0
  %664 = shufflevector <8 x float> %663, <8 x float> undef, <8 x i32> zeroinitializer
  %665 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %664, <8 x float> %592, <8 x float> %570)
  %666 = add nsw i64 %583, 416
  %667 = getelementptr inbounds float, float* %7, i64 %666
  %668 = load float, float* %667, align 4, !tbaa !8112
  %669 = insertelement <8 x float> undef, float %668, i32 0
  %670 = shufflevector <8 x float> %669, <8 x float> undef, <8 x i32> zeroinitializer
  %671 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %670, <8 x float> %592, <8 x float> %569)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 32
  br i1 %exitcond.2, label %for_end15.2, label %for_body14.2, !prof !50

for_end15.2:                                      ; preds = %for_body14.2
  %indvars.iv.next151 = add nuw nsw i64 %indvars.iv150, 1
  %672 = add nuw nsw i32 %354, 1
  %exitcond153 = icmp eq i64 %indvars.iv.next151, 3
  br i1 %exitcond153, label %for_end9, label %for_begin10.preheader, !prof !50
}

define dllexport i32 @fused_layout_transform_38(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.473, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !8177
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %27 = load i64*, i64** %26, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %28(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.474, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !8191
  switch i32 %31, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %32(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.475, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %33 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %assert_end8, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  %43 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 2
  %46 = and i1 %42, %45
  %47 = and i1 %39, %46
  br i1 %47, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %48(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %49 = load i64, i64* %17, align 8, !tbaa !8193
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %53 = getelementptr inbounds i64, i64* %17, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !8207
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %55, 8
  br i1 %56, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %58 = getelementptr inbounds i64, i64* %17, i64 2
  %59 = load i64, i64* %58, align 8, !tbaa !8209
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 28
  br i1 %61, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %17, i64 3
  %64 = load i64, i64* %63, align 8, !tbaa !8212
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 28
  br i1 %66, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %67(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %68 = getelementptr inbounds i64, i64* %17, i64 4
  %69 = load i64, i64* %68, align 8, !tbaa !8214
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, 16
  br i1 %71, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %73 = icmp eq i64* %19, null
  br i1 %73, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %74 = load i64, i64* %19, align 8, !tbaa !8218
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 100352
  %77 = getelementptr inbounds i64, i64* %19, i64 1
  %78 = load i64, i64* %77, align 8, !tbaa !8232
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, 12544
  %81 = getelementptr inbounds i64, i64* %19, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !8234
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 448
  %85 = getelementptr inbounds i64, i64* %19, i64 3
  %86 = load i64, i64* %85, align 8, !tbaa !8237
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 16
  %89 = getelementptr inbounds i64, i64* %19, i64 4
  %90 = load i64, i64* %89, align 8, !tbaa !8239
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = and i1 %88, %92
  %94 = and i1 %84, %93
  %95 = and i1 %80, %94
  %96 = and i1 %76, %95
  br i1 %96, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.225, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end30, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = icmp eq i16 %111, 1
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 2
  %119 = and i1 %115, %118
  %120 = and i1 %112, %119
  br i1 %120, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %122 = load i64, i64* %25, align 8, !tbaa !8243
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %126 = getelementptr inbounds i64, i64* %25, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !8257
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 4
  br i1 %129, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %131 = getelementptr inbounds i64, i64* %25, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !8259
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 28
  br i1 %134, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.278, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %136 = getelementptr inbounds i64, i64* %25, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !8262
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 28
  br i1 %139, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.279, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %141 = getelementptr inbounds i64, i64* %25, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !8264
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 32
  br i1 %144, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.469, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %146 = icmp eq i64* %27, null
  br i1 %146, label %if_end44, label %if_then43, !prof !50

if_then43:                                        ; preds = %assert_end42
  %147 = load i64, i64* %27, align 8, !tbaa !8268
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %148, 100352
  %150 = getelementptr inbounds i64, i64* %27, i64 1
  %151 = load i64, i64* %150, align 8, !tbaa !8282
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %152, 25088
  %154 = getelementptr inbounds i64, i64* %27, i64 2
  %155 = load i64, i64* %154, align 8, !tbaa !8284
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 896
  %158 = getelementptr inbounds i64, i64* %27, i64 3
  %159 = load i64, i64* %158, align 8, !tbaa !8287
  %160 = trunc i64 %159 to i32
  %161 = icmp eq i32 %160, 32
  %162 = getelementptr inbounds i64, i64* %27, i64 4
  %163 = load i64, i64* %162, align 8, !tbaa !8289
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  %166 = and i1 %161, %165
  %167 = and i1 %157, %166
  %168 = and i1 %153, %167
  %169 = and i1 %149, %168
  br i1 %169, label %if_end44, label %assert_fail45, !prof !5

if_end44:                                         ; preds = %assert_end42, %if_then43
  %170 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %assert_end48, label %assert_fail47, !prof !5

assert_fail45:                                    ; preds = %if_then43
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.476, i64 0, i64 0))
  ret i32 -1

assert_fail47:                                    ; preds = %if_end44
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %if_end44
  %175 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %179 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %21, %180
  br i1 %181, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %183 = tail call fastcc i32 @fused_layout_transform_38_compute_(i8* %23, i8* %15)
  ret i32 %183
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_38_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %53, align 8
  %3 = getelementptr inbounds %53, %53* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %53, %53* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %53* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.477, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.477(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 111
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 112
  %15 = select i1 %14, i32 %13, i32 112
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 112
  %18 = select i1 %17, i32 %16, i32 112
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv7, 896
  %23 = trunc i64 %indvars.iv7 to i32
  %24 = sdiv i32 %23, 28
  %25 = mul i32 %24, 28
  %.decomposed = sub i32 %23, %25
  %26 = mul nsw i32 %.decomposed, 448
  %27 = mul nsw i32 %24, 25088
  %28 = add i32 %26, %27
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %29 = shl i64 %indvars.iv, 5
  %30 = add nsw i64 %29, %22
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %31 = shl i32 %indvars.iv.tr, 4
  %32 = add i32 %28, %31
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds float, float* %7, i64 %33
  %35 = bitcast float* %34 to <16 x float>*
  %36 = load <16 x float>, <16 x float>* %35, align 64, !tbaa !8293
  %37 = getelementptr inbounds float, float* %4, i64 %30
  %38 = bitcast float* %37 to <16 x float>*
  store <16 x float> %36, <16 x float>* %38, align 64, !tbaa !8296
  %39 = or i64 %30, 16
  %40 = add i32 %32, 12544
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %7, i64 %41
  %43 = bitcast float* %42 to <16 x float>*
  %44 = load <16 x float>, <16 x float>* %43, align 64, !tbaa !8293
  %45 = getelementptr inbounds float, float* %4, i64 %39
  %46 = bitcast float* %45 to <16 x float>*
  store <16 x float> %44, <16 x float>* %46, align 64, !tbaa !8296
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !50

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %47 = icmp slt i64 %indvars.iv.next8, %21
  br i1 %47, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.478, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !8299
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !8313
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !8316
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %51 = load i64*, i64** %50, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.479, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !tbaa !8318
  switch i32 %55, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.480, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %57 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %57(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.481, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.482, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %59 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 5
  br i1 %61, label %assert_end12, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 1
  %66 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 32
  %69 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 2
  %72 = and i1 %68, %71
  %73 = and i1 %65, %72
  br i1 %73, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %75 = load i64, i64* %29, align 8, !tbaa !8320
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %79 = getelementptr inbounds i64, i64* %29, i64 1
  %80 = load i64, i64* %79, align 8, !tbaa !8334
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 4
  br i1 %82, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.90, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %84 = getelementptr inbounds i64, i64* %29, i64 2
  %85 = load i64, i64* %84, align 8, !tbaa !8336
  %86 = trunc i64 %85 to i32
  %87 = icmp eq i32 %86, 28
  br i1 %87, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %29, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !8339
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 28
  br i1 %92, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %93(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %94 = getelementptr inbounds i64, i64* %29, i64 4
  %95 = load i64, i64* %94, align 8, !tbaa !8341
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 128
  br i1 %97, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.483, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %99 = icmp eq i64* %31, null
  br i1 %99, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end24
  %100 = load i64, i64* %31, align 8, !tbaa !8345
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, 401408
  %103 = getelementptr inbounds i64, i64* %31, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !8359
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 100352
  %107 = getelementptr inbounds i64, i64* %31, i64 2
  %108 = load i64, i64* %107, align 8, !tbaa !8361
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, 3584
  %111 = getelementptr inbounds i64, i64* %31, i64 3
  %112 = load i64, i64* %111, align 8, !tbaa !8364
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 128
  %115 = getelementptr inbounds i64, i64* %31, i64 4
  %116 = load i64, i64* %115, align 8, !tbaa !8366
  %117 = trunc i64 %116 to i32
  %118 = icmp eq i32 %117, 1
  %119 = and i1 %114, %118
  %120 = and i1 %110, %119
  %121 = and i1 %106, %120
  %122 = and i1 %102, %121
  br i1 %122, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %123 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([242 x i8], [242 x i8]* @.str.484, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %128 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end34, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 1
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  %145 = and i1 %141, %144
  %146 = and i1 %138, %145
  br i1 %146, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %148 = load i64, i64* %37, align 8, !tbaa !8370
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 8
  br i1 %150, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %152 = getelementptr inbounds i64, i64* %37, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !8384
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 4
  br i1 %155, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %157 = getelementptr inbounds i64, i64* %37, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !8386
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %162 = getelementptr inbounds i64, i64* %37, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !8389
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %167 = getelementptr inbounds i64, i64* %37, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !8391
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 128
  br i1 %170, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.294, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %172 = getelementptr inbounds i64, i64* %37, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !8395
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 16
  br i1 %175, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %177 = icmp eq i64* %39, null
  br i1 %177, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %178 = load i64, i64* %39, align 8, !tbaa !8397
  %179 = trunc i64 %178 to i32
  %180 = icmp eq i32 %179, 8192
  %181 = getelementptr inbounds i64, i64* %39, i64 1
  %182 = load i64, i64* %181, align 8, !tbaa !8411
  %183 = trunc i64 %182 to i32
  %184 = icmp eq i32 %183, 2048
  %185 = getelementptr inbounds i64, i64* %39, i64 2
  %186 = load i64, i64* %185, align 8, !tbaa !8413
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 2048
  %189 = getelementptr inbounds i64, i64* %39, i64 3
  %190 = load i64, i64* %189, align 8, !tbaa !8416
  %191 = trunc i64 %190 to i32
  %192 = icmp eq i32 %191, 2048
  %193 = getelementptr inbounds i64, i64* %39, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !8418
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 16
  %197 = getelementptr inbounds i64, i64* %39, i64 5
  %198 = load i64, i64* %197, align 8, !tbaa !8422
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, 1
  %201 = and i1 %196, %200
  %202 = and i1 %192, %201
  %203 = and i1 %188, %202
  %204 = and i1 %184, %203
  %205 = and i1 %180, %204
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([275 x i8], [275 x i8]* @.str.485, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %33, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end62, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 1
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 2
  %232 = and i1 %228, %231
  %233 = and i1 %225, %232
  br i1 %233, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %235 = load i64, i64* %43, align 8, !tbaa !8424
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %239 = getelementptr inbounds i64, i64* %43, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !8438
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 8
  br i1 %242, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %244 = getelementptr inbounds i64, i64* %43, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !8440
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %249 = getelementptr inbounds i64, i64* %43, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !8443
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %254 = getelementptr inbounds i64, i64* %43, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !8445
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 16
  br i1 %257, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %259 = icmp eq i64* %45, null
  br i1 %259, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %260 = load i64, i64* %45, align 8, !tbaa !8449
  %261 = trunc i64 %260 to i32
  %262 = icmp eq i32 %261, 128
  %263 = getelementptr inbounds i64, i64* %45, i64 1
  %264 = load i64, i64* %263, align 8, !tbaa !8463
  %265 = trunc i64 %264 to i32
  %266 = icmp eq i32 %265, 16
  %267 = getelementptr inbounds i64, i64* %45, i64 2
  %268 = load i64, i64* %267, align 8, !tbaa !8465
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 16
  %271 = getelementptr inbounds i64, i64* %45, i64 3
  %272 = load i64, i64* %271, align 8, !tbaa !8468
  %273 = trunc i64 %272 to i32
  %274 = icmp eq i32 %273, 16
  %275 = getelementptr inbounds i64, i64* %45, i64 4
  %276 = load i64, i64* %275, align 8, !tbaa !8470
  %277 = trunc i64 %276 to i32
  %278 = icmp eq i32 %277, 1
  %279 = and i1 %274, %278
  %280 = and i1 %270, %279
  %281 = and i1 %266, %280
  %282 = and i1 %262, %281
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %33, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end88, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = icmp eq i16 %301, 1
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %307 = load i8, i8* %306, align 1
  %308 = icmp eq i8 %307, 2
  %309 = and i1 %305, %308
  %310 = and i1 %302, %309
  br i1 %310, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %312 = load i64, i64* %49, align 8, !tbaa !8474
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %316 = getelementptr inbounds i64, i64* %49, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !8488
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 8
  br i1 %319, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %321 = getelementptr inbounds i64, i64* %49, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !8490
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 28
  br i1 %324, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %326 = getelementptr inbounds i64, i64* %49, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !8493
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 28
  br i1 %329, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.113, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %331 = getelementptr inbounds i64, i64* %49, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !8495
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 16
  br i1 %334, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %336 = icmp eq i64* %51, null
  br i1 %336, label %if_end102, label %if_then101, !prof !50

if_then101:                                       ; preds = %assert_end100
  %337 = load i64, i64* %51, align 8, !tbaa !8499
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %338, 100352
  %340 = getelementptr inbounds i64, i64* %51, i64 1
  %341 = load i64, i64* %340, align 8, !tbaa !8513
  %342 = trunc i64 %341 to i32
  %343 = icmp eq i32 %342, 12544
  %344 = getelementptr inbounds i64, i64* %51, i64 2
  %345 = load i64, i64* %344, align 8, !tbaa !8515
  %346 = trunc i64 %345 to i32
  %347 = icmp eq i32 %346, 448
  %348 = getelementptr inbounds i64, i64* %51, i64 3
  %349 = load i64, i64* %348, align 8, !tbaa !8518
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %350, 16
  %352 = getelementptr inbounds i64, i64* %51, i64 4
  %353 = load i64, i64* %352, align 8, !tbaa !8520
  %354 = trunc i64 %353 to i32
  %355 = icmp eq i32 %354, 1
  %356 = and i1 %351, %355
  %357 = and i1 %347, %356
  %358 = and i1 %343, %357
  %359 = and i1 %339, %358
  br i1 %359, label %if_end102, label %assert_fail103, !prof !5

if_end102:                                        ; preds = %assert_end100, %if_then101
  %360 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %361 = load i64, i64* %360, align 8
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %assert_end106, label %assert_fail105, !prof !5

assert_fail103:                                   ; preds = %if_then101
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.486, i64 0, i64 0))
  ret i32 -1

assert_fail105:                                   ; preds = %if_end102
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %364(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %if_end102
  %365 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 1
  br i1 %367, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %369 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %33, %370
  br i1 %371, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %372(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %373 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9_compute_(i8* %27, i8* %35, i8* %47, i8* %41, i32 %33)
  ret i32 %373
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = alloca %54, align 8
  %6 = getelementptr inbounds %54, %54* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %54, %54* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %54, %54* %5, i64 0, i32 2
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %54, %54* %5, i64 0, i32 3
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %54, %54* %5, i64 0, i32 4
  store i32 %4, i32* %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %54* %5 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.487, i8* nonnull %12, i32 0)
  ret i32 %13
}

define private i32 @__tvm_parallel_lambda.487(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 223
  %20 = sdiv i32 %19, %18
  %21 = add nsw i32 %0, 1
  %22 = mul nsw i32 %20, %21
  %23 = icmp slt i32 %22, 224
  %24 = select i1 %23, i32 %22, i32 224
  %25 = mul nsw i32 %20, %0
  %26 = icmp slt i32 %25, 224
  %27 = select i1 %26, i32 %25, i32 224
  %28 = icmp slt i32 %27, %24
  br i1 %28, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %29 = sext i32 %27 to i64
  %30 = sext i32 %24 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_begin10.preheader
  %indvars.iv64 = phi i64 [ %29, %for_body.preheader ], [ %indvars.iv.next65, %for_begin10.preheader ]
  %31 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %32 = tail call i8* %31(i32 1, i32 %16, i64 1792, i32 2, i32 32)
  %33 = bitcast i8* %32 to float*
  %34 = trunc i64 %indvars.iv64 to i32
  %35 = sdiv i32 %34, 28
  %36 = mul i32 %35, 28
  %.decomposed = sub i32 %34, %36
  %37 = mul nsw i32 %.decomposed, 3584
  %38 = shl i32 %35, 13
  %39 = sext i32 %38 to i64
  %40 = sext i32 %37 to i64
  %41 = or i64 %39, 2048
  %42 = or i64 %39, 4096
  %43 = or i64 %39, 6144
  br label %for_body2

for_end:                                          ; preds = %for_begin10.preheader, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end9.3
  %44 = mul nsw i64 %indvars.iv64, 448
  %45 = shl nsw i32 %35, 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %13, i64 %46
  %48 = bitcast float* %47 to <16 x float>*
  %49 = load <16 x float>, <16 x float>* %48, align 64, !tbaa !8524
  %50 = bitcast i8* %32 to <16 x float>*
  %51 = load <16 x float>, <16 x float>* %50, align 64, !tbaa !8527
  %52 = fadd <16 x float> %49, %51
  %53 = fcmp ogt <16 x float> %52, zeroinitializer
  %54 = select <16 x i1> %53, <16 x float> %52, <16 x float> zeroinitializer
  %55 = getelementptr inbounds float, float* %10, i64 %44
  %56 = bitcast float* %55 to <16 x float>*
  store <16 x float> %54, <16 x float>* %56, align 64, !tbaa !8530
  %57 = getelementptr inbounds i8, i8* %32, i64 64
  %58 = bitcast i8* %57 to <16 x float>*
  %59 = load <16 x float>, <16 x float>* %58, align 64, !tbaa !8527
  %60 = fadd <16 x float> %49, %59
  %61 = fcmp ogt <16 x float> %60, zeroinitializer
  %62 = select <16 x i1> %61, <16 x float> %60, <16 x float> zeroinitializer
  %63 = mul i64 %indvars.iv64, 1924145348608
  %sext = ashr exact i64 %63, 32
  %64 = or i64 %sext, 16
  %65 = getelementptr inbounds float, float* %10, i64 %64
  %66 = bitcast float* %65 to <16 x float>*
  store <16 x float> %62, <16 x float>* %66, align 64, !tbaa !8530
  %67 = getelementptr inbounds i8, i8* %32, i64 128
  %68 = bitcast i8* %67 to <16 x float>*
  %69 = load <16 x float>, <16 x float>* %68, align 64, !tbaa !8527
  %70 = fadd <16 x float> %49, %69
  %71 = fcmp ogt <16 x float> %70, zeroinitializer
  %72 = select <16 x i1> %71, <16 x float> %70, <16 x float> zeroinitializer
  %73 = mul i64 %indvars.iv64, 1924145348608
  %sext66 = ashr exact i64 %73, 32
  %74 = or i64 %sext66, 32
  %75 = getelementptr inbounds float, float* %10, i64 %74
  %76 = bitcast float* %75 to <16 x float>*
  store <16 x float> %72, <16 x float>* %76, align 64, !tbaa !8530
  %77 = getelementptr inbounds i8, i8* %32, i64 192
  %78 = bitcast i8* %77 to <16 x float>*
  %79 = load <16 x float>, <16 x float>* %78, align 64, !tbaa !8527
  %80 = fadd <16 x float> %49, %79
  %81 = fcmp ogt <16 x float> %80, zeroinitializer
  %82 = select <16 x i1> %81, <16 x float> %80, <16 x float> zeroinitializer
  %83 = mul i64 %indvars.iv64, 1924145348608
  %sext67 = ashr exact i64 %83, 32
  %84 = or i64 %sext67, 48
  %85 = getelementptr inbounds float, float* %10, i64 %84
  %86 = bitcast float* %85 to <16 x float>*
  store <16 x float> %82, <16 x float>* %86, align 64, !tbaa !8530
  %87 = getelementptr inbounds i8, i8* %32, i64 256
  %88 = bitcast i8* %87 to <16 x float>*
  %89 = load <16 x float>, <16 x float>* %88, align 64, !tbaa !8527
  %90 = fadd <16 x float> %49, %89
  %91 = fcmp ogt <16 x float> %90, zeroinitializer
  %92 = select <16 x i1> %91, <16 x float> %90, <16 x float> zeroinitializer
  %93 = mul i64 %indvars.iv64, 1924145348608
  %sext68 = add i64 %93, 274877906944
  %94 = ashr exact i64 %sext68, 32
  %95 = getelementptr inbounds float, float* %10, i64 %94
  %96 = bitcast float* %95 to <16 x float>*
  store <16 x float> %92, <16 x float>* %96, align 64, !tbaa !8530
  %97 = getelementptr inbounds i8, i8* %32, i64 320
  %98 = bitcast i8* %97 to <16 x float>*
  %99 = load <16 x float>, <16 x float>* %98, align 64, !tbaa !8527
  %100 = fadd <16 x float> %49, %99
  %101 = fcmp ogt <16 x float> %100, zeroinitializer
  %102 = select <16 x i1> %101, <16 x float> %100, <16 x float> zeroinitializer
  %103 = mul i64 %indvars.iv64, 1924145348608
  %sext69 = add i64 %103, 343597383680
  %104 = ashr exact i64 %sext69, 32
  %105 = getelementptr inbounds float, float* %10, i64 %104
  %106 = bitcast float* %105 to <16 x float>*
  store <16 x float> %102, <16 x float>* %106, align 64, !tbaa !8530
  %107 = getelementptr inbounds i8, i8* %32, i64 384
  %108 = bitcast i8* %107 to <16 x float>*
  %109 = load <16 x float>, <16 x float>* %108, align 64, !tbaa !8527
  %110 = fadd <16 x float> %49, %109
  %111 = fcmp ogt <16 x float> %110, zeroinitializer
  %112 = select <16 x i1> %111, <16 x float> %110, <16 x float> zeroinitializer
  %113 = mul i64 %indvars.iv64, 1924145348608
  %sext70 = add i64 %113, 412316860416
  %114 = ashr exact i64 %sext70, 32
  %115 = getelementptr inbounds float, float* %10, i64 %114
  %116 = bitcast float* %115 to <16 x float>*
  store <16 x float> %112, <16 x float>* %116, align 64, !tbaa !8530
  %117 = getelementptr inbounds i8, i8* %32, i64 448
  %118 = bitcast i8* %117 to <16 x float>*
  %119 = load <16 x float>, <16 x float>* %118, align 64, !tbaa !8527
  %120 = fadd <16 x float> %49, %119
  %121 = fcmp ogt <16 x float> %120, zeroinitializer
  %122 = select <16 x i1> %121, <16 x float> %120, <16 x float> zeroinitializer
  %123 = mul i64 %indvars.iv64, 1924145348608
  %sext71 = add i64 %123, 481036337152
  %124 = ashr exact i64 %sext71, 32
  %125 = getelementptr inbounds float, float* %10, i64 %124
  %126 = bitcast float* %125 to <16 x float>*
  store <16 x float> %122, <16 x float>* %126, align 64, !tbaa !8530
  %127 = getelementptr inbounds i8, i8* %32, i64 512
  %128 = bitcast i8* %127 to <16 x float>*
  %129 = load <16 x float>, <16 x float>* %128, align 64, !tbaa !8527
  %130 = fadd <16 x float> %49, %129
  %131 = fcmp ogt <16 x float> %130, zeroinitializer
  %132 = select <16 x i1> %131, <16 x float> %130, <16 x float> zeroinitializer
  %133 = mul i64 %indvars.iv64, 1924145348608
  %sext72 = add i64 %133, 549755813888
  %134 = ashr exact i64 %sext72, 32
  %135 = getelementptr inbounds float, float* %10, i64 %134
  %136 = bitcast float* %135 to <16 x float>*
  store <16 x float> %132, <16 x float>* %136, align 64, !tbaa !8530
  %137 = getelementptr inbounds i8, i8* %32, i64 576
  %138 = bitcast i8* %137 to <16 x float>*
  %139 = load <16 x float>, <16 x float>* %138, align 64, !tbaa !8527
  %140 = fadd <16 x float> %49, %139
  %141 = fcmp ogt <16 x float> %140, zeroinitializer
  %142 = select <16 x i1> %141, <16 x float> %140, <16 x float> zeroinitializer
  %143 = mul i64 %indvars.iv64, 1924145348608
  %sext73 = add i64 %143, 618475290624
  %144 = ashr exact i64 %sext73, 32
  %145 = getelementptr inbounds float, float* %10, i64 %144
  %146 = bitcast float* %145 to <16 x float>*
  store <16 x float> %142, <16 x float>* %146, align 64, !tbaa !8530
  %147 = getelementptr inbounds i8, i8* %32, i64 640
  %148 = bitcast i8* %147 to <16 x float>*
  %149 = load <16 x float>, <16 x float>* %148, align 64, !tbaa !8527
  %150 = fadd <16 x float> %49, %149
  %151 = fcmp ogt <16 x float> %150, zeroinitializer
  %152 = select <16 x i1> %151, <16 x float> %150, <16 x float> zeroinitializer
  %153 = mul i64 %indvars.iv64, 1924145348608
  %sext74 = add i64 %153, 687194767360
  %154 = ashr exact i64 %sext74, 32
  %155 = getelementptr inbounds float, float* %10, i64 %154
  %156 = bitcast float* %155 to <16 x float>*
  store <16 x float> %152, <16 x float>* %156, align 64, !tbaa !8530
  %157 = getelementptr inbounds i8, i8* %32, i64 704
  %158 = bitcast i8* %157 to <16 x float>*
  %159 = load <16 x float>, <16 x float>* %158, align 64, !tbaa !8527
  %160 = fadd <16 x float> %49, %159
  %161 = fcmp ogt <16 x float> %160, zeroinitializer
  %162 = select <16 x i1> %161, <16 x float> %160, <16 x float> zeroinitializer
  %163 = mul i64 %indvars.iv64, 1924145348608
  %sext75 = add i64 %163, 755914244096
  %164 = ashr exact i64 %sext75, 32
  %165 = getelementptr inbounds float, float* %10, i64 %164
  %166 = bitcast float* %165 to <16 x float>*
  store <16 x float> %162, <16 x float>* %166, align 64, !tbaa !8530
  %167 = getelementptr inbounds i8, i8* %32, i64 768
  %168 = bitcast i8* %167 to <16 x float>*
  %169 = load <16 x float>, <16 x float>* %168, align 64, !tbaa !8527
  %170 = fadd <16 x float> %49, %169
  %171 = fcmp ogt <16 x float> %170, zeroinitializer
  %172 = select <16 x i1> %171, <16 x float> %170, <16 x float> zeroinitializer
  %173 = mul i64 %indvars.iv64, 1924145348608
  %sext76 = add i64 %173, 824633720832
  %174 = ashr exact i64 %sext76, 32
  %175 = getelementptr inbounds float, float* %10, i64 %174
  %176 = bitcast float* %175 to <16 x float>*
  store <16 x float> %172, <16 x float>* %176, align 64, !tbaa !8530
  %177 = getelementptr inbounds i8, i8* %32, i64 832
  %178 = bitcast i8* %177 to <16 x float>*
  %179 = load <16 x float>, <16 x float>* %178, align 64, !tbaa !8527
  %180 = fadd <16 x float> %49, %179
  %181 = fcmp ogt <16 x float> %180, zeroinitializer
  %182 = select <16 x i1> %181, <16 x float> %180, <16 x float> zeroinitializer
  %183 = mul i64 %indvars.iv64, 1924145348608
  %sext77 = add i64 %183, 893353197568
  %184 = ashr exact i64 %sext77, 32
  %185 = getelementptr inbounds float, float* %10, i64 %184
  %186 = bitcast float* %185 to <16 x float>*
  store <16 x float> %182, <16 x float>* %186, align 64, !tbaa !8530
  %187 = getelementptr inbounds i8, i8* %32, i64 896
  %188 = bitcast i8* %187 to <16 x float>*
  %189 = load <16 x float>, <16 x float>* %188, align 64, !tbaa !8527
  %190 = fadd <16 x float> %49, %189
  %191 = fcmp ogt <16 x float> %190, zeroinitializer
  %192 = select <16 x i1> %191, <16 x float> %190, <16 x float> zeroinitializer
  %193 = mul i64 %indvars.iv64, 1924145348608
  %sext78 = add i64 %193, 962072674304
  %194 = ashr exact i64 %sext78, 32
  %195 = getelementptr inbounds float, float* %10, i64 %194
  %196 = bitcast float* %195 to <16 x float>*
  store <16 x float> %192, <16 x float>* %196, align 64, !tbaa !8530
  %197 = getelementptr inbounds i8, i8* %32, i64 960
  %198 = bitcast i8* %197 to <16 x float>*
  %199 = load <16 x float>, <16 x float>* %198, align 64, !tbaa !8527
  %200 = fadd <16 x float> %49, %199
  %201 = fcmp ogt <16 x float> %200, zeroinitializer
  %202 = select <16 x i1> %201, <16 x float> %200, <16 x float> zeroinitializer
  %203 = mul i64 %indvars.iv64, 1924145348608
  %sext79 = add i64 %203, 1030792151040
  %204 = ashr exact i64 %sext79, 32
  %205 = getelementptr inbounds float, float* %10, i64 %204
  %206 = bitcast float* %205 to <16 x float>*
  store <16 x float> %202, <16 x float>* %206, align 64, !tbaa !8530
  %207 = getelementptr inbounds i8, i8* %32, i64 1024
  %208 = bitcast i8* %207 to <16 x float>*
  %209 = load <16 x float>, <16 x float>* %208, align 64, !tbaa !8527
  %210 = fadd <16 x float> %49, %209
  %211 = fcmp ogt <16 x float> %210, zeroinitializer
  %212 = select <16 x i1> %211, <16 x float> %210, <16 x float> zeroinitializer
  %213 = mul i64 %indvars.iv64, 1924145348608
  %sext80 = add i64 %213, 1099511627776
  %214 = ashr exact i64 %sext80, 32
  %215 = getelementptr inbounds float, float* %10, i64 %214
  %216 = bitcast float* %215 to <16 x float>*
  store <16 x float> %212, <16 x float>* %216, align 64, !tbaa !8530
  %217 = getelementptr inbounds i8, i8* %32, i64 1088
  %218 = bitcast i8* %217 to <16 x float>*
  %219 = load <16 x float>, <16 x float>* %218, align 64, !tbaa !8527
  %220 = fadd <16 x float> %49, %219
  %221 = fcmp ogt <16 x float> %220, zeroinitializer
  %222 = select <16 x i1> %221, <16 x float> %220, <16 x float> zeroinitializer
  %223 = mul i64 %indvars.iv64, 1924145348608
  %sext81 = add i64 %223, 1168231104512
  %224 = ashr exact i64 %sext81, 32
  %225 = getelementptr inbounds float, float* %10, i64 %224
  %226 = bitcast float* %225 to <16 x float>*
  store <16 x float> %222, <16 x float>* %226, align 64, !tbaa !8530
  %227 = getelementptr inbounds i8, i8* %32, i64 1152
  %228 = bitcast i8* %227 to <16 x float>*
  %229 = load <16 x float>, <16 x float>* %228, align 64, !tbaa !8527
  %230 = fadd <16 x float> %49, %229
  %231 = fcmp ogt <16 x float> %230, zeroinitializer
  %232 = select <16 x i1> %231, <16 x float> %230, <16 x float> zeroinitializer
  %233 = mul i64 %indvars.iv64, 1924145348608
  %sext82 = add i64 %233, 1236950581248
  %234 = ashr exact i64 %sext82, 32
  %235 = getelementptr inbounds float, float* %10, i64 %234
  %236 = bitcast float* %235 to <16 x float>*
  store <16 x float> %232, <16 x float>* %236, align 64, !tbaa !8530
  %237 = getelementptr inbounds i8, i8* %32, i64 1216
  %238 = bitcast i8* %237 to <16 x float>*
  %239 = load <16 x float>, <16 x float>* %238, align 64, !tbaa !8527
  %240 = fadd <16 x float> %49, %239
  %241 = fcmp ogt <16 x float> %240, zeroinitializer
  %242 = select <16 x i1> %241, <16 x float> %240, <16 x float> zeroinitializer
  %243 = mul i64 %indvars.iv64, 1924145348608
  %sext83 = add i64 %243, 1305670057984
  %244 = ashr exact i64 %sext83, 32
  %245 = getelementptr inbounds float, float* %10, i64 %244
  %246 = bitcast float* %245 to <16 x float>*
  store <16 x float> %242, <16 x float>* %246, align 64, !tbaa !8530
  %247 = getelementptr inbounds i8, i8* %32, i64 1280
  %248 = bitcast i8* %247 to <16 x float>*
  %249 = load <16 x float>, <16 x float>* %248, align 64, !tbaa !8527
  %250 = fadd <16 x float> %49, %249
  %251 = fcmp ogt <16 x float> %250, zeroinitializer
  %252 = select <16 x i1> %251, <16 x float> %250, <16 x float> zeroinitializer
  %253 = mul i64 %indvars.iv64, 1924145348608
  %sext84 = add i64 %253, 1374389534720
  %254 = ashr exact i64 %sext84, 32
  %255 = getelementptr inbounds float, float* %10, i64 %254
  %256 = bitcast float* %255 to <16 x float>*
  store <16 x float> %252, <16 x float>* %256, align 64, !tbaa !8530
  %257 = getelementptr inbounds i8, i8* %32, i64 1344
  %258 = bitcast i8* %257 to <16 x float>*
  %259 = load <16 x float>, <16 x float>* %258, align 64, !tbaa !8527
  %260 = fadd <16 x float> %49, %259
  %261 = fcmp ogt <16 x float> %260, zeroinitializer
  %262 = select <16 x i1> %261, <16 x float> %260, <16 x float> zeroinitializer
  %263 = mul i64 %indvars.iv64, 1924145348608
  %sext85 = add i64 %263, 1443109011456
  %264 = ashr exact i64 %sext85, 32
  %265 = getelementptr inbounds float, float* %10, i64 %264
  %266 = bitcast float* %265 to <16 x float>*
  store <16 x float> %262, <16 x float>* %266, align 64, !tbaa !8530
  %267 = getelementptr inbounds i8, i8* %32, i64 1408
  %268 = bitcast i8* %267 to <16 x float>*
  %269 = load <16 x float>, <16 x float>* %268, align 64, !tbaa !8527
  %270 = fadd <16 x float> %49, %269
  %271 = fcmp ogt <16 x float> %270, zeroinitializer
  %272 = select <16 x i1> %271, <16 x float> %270, <16 x float> zeroinitializer
  %273 = mul i64 %indvars.iv64, 1924145348608
  %sext86 = add i64 %273, 1511828488192
  %274 = ashr exact i64 %sext86, 32
  %275 = getelementptr inbounds float, float* %10, i64 %274
  %276 = bitcast float* %275 to <16 x float>*
  store <16 x float> %272, <16 x float>* %276, align 64, !tbaa !8530
  %277 = getelementptr inbounds i8, i8* %32, i64 1472
  %278 = bitcast i8* %277 to <16 x float>*
  %279 = load <16 x float>, <16 x float>* %278, align 64, !tbaa !8527
  %280 = fadd <16 x float> %49, %279
  %281 = fcmp ogt <16 x float> %280, zeroinitializer
  %282 = select <16 x i1> %281, <16 x float> %280, <16 x float> zeroinitializer
  %283 = mul i64 %indvars.iv64, 1924145348608
  %sext87 = add i64 %283, 1580547964928
  %284 = ashr exact i64 %sext87, 32
  %285 = getelementptr inbounds float, float* %10, i64 %284
  %286 = bitcast float* %285 to <16 x float>*
  store <16 x float> %282, <16 x float>* %286, align 64, !tbaa !8530
  %287 = getelementptr inbounds i8, i8* %32, i64 1536
  %288 = bitcast i8* %287 to <16 x float>*
  %289 = load <16 x float>, <16 x float>* %288, align 64, !tbaa !8527
  %290 = fadd <16 x float> %49, %289
  %291 = fcmp ogt <16 x float> %290, zeroinitializer
  %292 = select <16 x i1> %291, <16 x float> %290, <16 x float> zeroinitializer
  %293 = mul i64 %indvars.iv64, 1924145348608
  %sext88 = add i64 %293, 1649267441664
  %294 = ashr exact i64 %sext88, 32
  %295 = getelementptr inbounds float, float* %10, i64 %294
  %296 = bitcast float* %295 to <16 x float>*
  store <16 x float> %292, <16 x float>* %296, align 64, !tbaa !8530
  %297 = getelementptr inbounds i8, i8* %32, i64 1600
  %298 = bitcast i8* %297 to <16 x float>*
  %299 = load <16 x float>, <16 x float>* %298, align 64, !tbaa !8527
  %300 = fadd <16 x float> %49, %299
  %301 = fcmp ogt <16 x float> %300, zeroinitializer
  %302 = select <16 x i1> %301, <16 x float> %300, <16 x float> zeroinitializer
  %303 = mul i64 %indvars.iv64, 1924145348608
  %sext89 = add i64 %303, 1717986918400
  %304 = ashr exact i64 %sext89, 32
  %305 = getelementptr inbounds float, float* %10, i64 %304
  %306 = bitcast float* %305 to <16 x float>*
  store <16 x float> %302, <16 x float>* %306, align 64, !tbaa !8530
  %307 = getelementptr inbounds i8, i8* %32, i64 1664
  %308 = bitcast i8* %307 to <16 x float>*
  %309 = load <16 x float>, <16 x float>* %308, align 64, !tbaa !8527
  %310 = fadd <16 x float> %49, %309
  %311 = fcmp ogt <16 x float> %310, zeroinitializer
  %312 = select <16 x i1> %311, <16 x float> %310, <16 x float> zeroinitializer
  %313 = mul i64 %indvars.iv64, 1924145348608
  %sext90 = add i64 %313, 1786706395136
  %314 = ashr exact i64 %sext90, 32
  %315 = getelementptr inbounds float, float* %10, i64 %314
  %316 = bitcast float* %315 to <16 x float>*
  store <16 x float> %312, <16 x float>* %316, align 64, !tbaa !8530
  %317 = getelementptr inbounds i8, i8* %32, i64 1728
  %318 = bitcast i8* %317 to <16 x float>*
  %319 = load <16 x float>, <16 x float>* %318, align 64, !tbaa !8527
  %320 = fadd <16 x float> %49, %319
  %321 = fcmp ogt <16 x float> %320, zeroinitializer
  %322 = select <16 x i1> %321, <16 x float> %320, <16 x float> zeroinitializer
  %323 = mul i64 %indvars.iv64, 1924145348608
  %sext91 = add i64 %323, 1855425871872
  %324 = ashr exact i64 %sext91, 32
  %325 = getelementptr inbounds float, float* %10, i64 %324
  %326 = bitcast float* %325 to <16 x float>*
  store <16 x float> %322, <16 x float>* %326, align 64, !tbaa !8530
  %327 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %328 = tail call i32 %327(i32 1, i32 %16, i8* nonnull %32)
  %indvars.iv.next65 = add nsw i64 %indvars.iv64, 1
  %329 = icmp slt i64 %indvars.iv.next65, %30
  br i1 %329, label %for_body, label %for_end, !prof !5

for_body2:                                        ; preds = %for_end9.3, %for_body
  %indvars.iv55 = phi i64 [ 0, %for_body ], [ %indvars.iv.next56, %for_end9.3 ]
  %330 = mul nuw nsw i64 %indvars.iv55, 112
  %331 = getelementptr inbounds float, float* %33, i64 %330
  %332 = bitcast float* %331 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %332, align 64, !tbaa !8527
  %333 = add nuw nsw i64 %330, 16
  %334 = getelementptr inbounds float, float* %33, i64 %333
  %335 = bitcast float* %334 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %335, align 64, !tbaa !8527
  %336 = add nuw nsw i64 %330, 32
  %337 = getelementptr inbounds float, float* %33, i64 %336
  %338 = bitcast float* %337 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %338, align 64, !tbaa !8527
  %339 = add nuw nsw i64 %330, 48
  %340 = getelementptr inbounds float, float* %33, i64 %339
  %341 = bitcast float* %340 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %341, align 64, !tbaa !8527
  %342 = add nuw nsw i64 %330, 64
  %343 = getelementptr inbounds float, float* %33, i64 %342
  %344 = bitcast float* %343 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %344, align 64, !tbaa !8527
  %345 = add nuw nsw i64 %330, 80
  %346 = getelementptr inbounds float, float* %33, i64 %345
  %347 = bitcast float* %346 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %347, align 64, !tbaa !8527
  %348 = add nuw nsw i64 %330, 96
  %349 = getelementptr inbounds float, float* %33, i64 %348
  %350 = bitcast float* %349 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %350, align 64, !tbaa !8527
  %351 = mul nuw nsw i64 %indvars.iv55, 896
  %352 = add nsw i64 %351, %40
  br label %for_body8

for_body8:                                        ; preds = %for_body8, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_body8 ]
  %353 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %406, %for_body8 ]
  %354 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %400, %for_body8 ]
  %355 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %394, %for_body8 ]
  %356 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %388, %for_body8 ]
  %357 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %382, %for_body8 ]
  %358 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %376, %for_body8 ]
  %359 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %370, %for_body8 ]
  %360 = add nsw i64 %352, %indvars.iv
  %361 = getelementptr inbounds float, float* %4, i64 %360
  %362 = load float, float* %361, align 4, !tbaa !8533
  %363 = insertelement <16 x float> undef, float %362, i32 0
  %364 = shufflevector <16 x float> %363, <16 x float> undef, <16 x i32> zeroinitializer
  %365 = shl i64 %indvars.iv, 4
  %366 = add nuw nsw i64 %365, %39
  %367 = getelementptr inbounds float, float* %7, i64 %366
  %368 = bitcast float* %367 to <16 x float>*
  %369 = load <16 x float>, <16 x float>* %368, align 64, !tbaa !8536
  %370 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %364, <16 x float> %369, <16 x float> %359)
  %371 = add nsw i64 %360, 128
  %372 = getelementptr inbounds float, float* %4, i64 %371
  %373 = load float, float* %372, align 4, !tbaa !8533
  %374 = insertelement <16 x float> undef, float %373, i32 0
  %375 = shufflevector <16 x float> %374, <16 x float> undef, <16 x i32> zeroinitializer
  %376 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %375, <16 x float> %369, <16 x float> %358)
  %377 = add nsw i64 %360, 256
  %378 = getelementptr inbounds float, float* %4, i64 %377
  %379 = load float, float* %378, align 4, !tbaa !8533
  %380 = insertelement <16 x float> undef, float %379, i32 0
  %381 = shufflevector <16 x float> %380, <16 x float> undef, <16 x i32> zeroinitializer
  %382 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %381, <16 x float> %369, <16 x float> %357)
  %383 = add nsw i64 %360, 384
  %384 = getelementptr inbounds float, float* %4, i64 %383
  %385 = load float, float* %384, align 4, !tbaa !8533
  %386 = insertelement <16 x float> undef, float %385, i32 0
  %387 = shufflevector <16 x float> %386, <16 x float> undef, <16 x i32> zeroinitializer
  %388 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %387, <16 x float> %369, <16 x float> %356)
  %389 = add nsw i64 %360, 512
  %390 = getelementptr inbounds float, float* %4, i64 %389
  %391 = load float, float* %390, align 4, !tbaa !8533
  %392 = insertelement <16 x float> undef, float %391, i32 0
  %393 = shufflevector <16 x float> %392, <16 x float> undef, <16 x i32> zeroinitializer
  %394 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %393, <16 x float> %369, <16 x float> %355)
  %395 = add nsw i64 %360, 640
  %396 = getelementptr inbounds float, float* %4, i64 %395
  %397 = load float, float* %396, align 4, !tbaa !8533
  %398 = insertelement <16 x float> undef, float %397, i32 0
  %399 = shufflevector <16 x float> %398, <16 x float> undef, <16 x i32> zeroinitializer
  %400 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %399, <16 x float> %369, <16 x float> %354)
  %401 = add nsw i64 %360, 768
  %402 = getelementptr inbounds float, float* %4, i64 %401
  %403 = load float, float* %402, align 4, !tbaa !8533
  %404 = insertelement <16 x float> undef, float %403, i32 0
  %405 = shufflevector <16 x float> %404, <16 x float> undef, <16 x i32> zeroinitializer
  %406 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %405, <16 x float> %369, <16 x float> %353)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %for_end9, label %for_body8, !prof !50

for_end9:                                         ; preds = %for_body8
  %407 = add nsw i64 %352, 100352
  br label %for_body8.1

for_body8.1:                                      ; preds = %for_body8.1, %for_end9
  %indvars.iv.1 = phi i64 [ 0, %for_end9 ], [ %indvars.iv.next.1, %for_body8.1 ]
  %408 = phi <16 x float> [ %406, %for_end9 ], [ %461, %for_body8.1 ]
  %409 = phi <16 x float> [ %400, %for_end9 ], [ %455, %for_body8.1 ]
  %410 = phi <16 x float> [ %394, %for_end9 ], [ %449, %for_body8.1 ]
  %411 = phi <16 x float> [ %388, %for_end9 ], [ %443, %for_body8.1 ]
  %412 = phi <16 x float> [ %382, %for_end9 ], [ %437, %for_body8.1 ]
  %413 = phi <16 x float> [ %376, %for_end9 ], [ %431, %for_body8.1 ]
  %414 = phi <16 x float> [ %370, %for_end9 ], [ %425, %for_body8.1 ]
  %415 = add nsw i64 %407, %indvars.iv.1
  %416 = getelementptr inbounds float, float* %4, i64 %415
  %417 = load float, float* %416, align 4, !tbaa !8533
  %418 = insertelement <16 x float> undef, float %417, i32 0
  %419 = shufflevector <16 x float> %418, <16 x float> undef, <16 x i32> zeroinitializer
  %420 = shl i64 %indvars.iv.1, 4
  %421 = add nuw nsw i64 %41, %420
  %422 = getelementptr inbounds float, float* %7, i64 %421
  %423 = bitcast float* %422 to <16 x float>*
  %424 = load <16 x float>, <16 x float>* %423, align 64, !tbaa !8536
  %425 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %419, <16 x float> %424, <16 x float> %414)
  %426 = add nsw i64 %415, 128
  %427 = getelementptr inbounds float, float* %4, i64 %426
  %428 = load float, float* %427, align 4, !tbaa !8533
  %429 = insertelement <16 x float> undef, float %428, i32 0
  %430 = shufflevector <16 x float> %429, <16 x float> undef, <16 x i32> zeroinitializer
  %431 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %430, <16 x float> %424, <16 x float> %413)
  %432 = add nsw i64 %415, 256
  %433 = getelementptr inbounds float, float* %4, i64 %432
  %434 = load float, float* %433, align 4, !tbaa !8533
  %435 = insertelement <16 x float> undef, float %434, i32 0
  %436 = shufflevector <16 x float> %435, <16 x float> undef, <16 x i32> zeroinitializer
  %437 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %436, <16 x float> %424, <16 x float> %412)
  %438 = add nsw i64 %415, 384
  %439 = getelementptr inbounds float, float* %4, i64 %438
  %440 = load float, float* %439, align 4, !tbaa !8533
  %441 = insertelement <16 x float> undef, float %440, i32 0
  %442 = shufflevector <16 x float> %441, <16 x float> undef, <16 x i32> zeroinitializer
  %443 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %442, <16 x float> %424, <16 x float> %411)
  %444 = add nsw i64 %415, 512
  %445 = getelementptr inbounds float, float* %4, i64 %444
  %446 = load float, float* %445, align 4, !tbaa !8533
  %447 = insertelement <16 x float> undef, float %446, i32 0
  %448 = shufflevector <16 x float> %447, <16 x float> undef, <16 x i32> zeroinitializer
  %449 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %448, <16 x float> %424, <16 x float> %410)
  %450 = add nsw i64 %415, 640
  %451 = getelementptr inbounds float, float* %4, i64 %450
  %452 = load float, float* %451, align 4, !tbaa !8533
  %453 = insertelement <16 x float> undef, float %452, i32 0
  %454 = shufflevector <16 x float> %453, <16 x float> undef, <16 x i32> zeroinitializer
  %455 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %454, <16 x float> %424, <16 x float> %409)
  %456 = add nsw i64 %415, 768
  %457 = getelementptr inbounds float, float* %4, i64 %456
  %458 = load float, float* %457, align 4, !tbaa !8533
  %459 = insertelement <16 x float> undef, float %458, i32 0
  %460 = shufflevector <16 x float> %459, <16 x float> undef, <16 x i32> zeroinitializer
  %461 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %460, <16 x float> %424, <16 x float> %408)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 128
  br i1 %exitcond.1, label %for_end9.1, label %for_body8.1, !prof !50

for_end9.1:                                       ; preds = %for_body8.1
  %462 = add nsw i64 %352, 200704
  br label %for_body8.2

for_body8.2:                                      ; preds = %for_body8.2, %for_end9.1
  %indvars.iv.2 = phi i64 [ 0, %for_end9.1 ], [ %indvars.iv.next.2, %for_body8.2 ]
  %463 = phi <16 x float> [ %461, %for_end9.1 ], [ %516, %for_body8.2 ]
  %464 = phi <16 x float> [ %455, %for_end9.1 ], [ %510, %for_body8.2 ]
  %465 = phi <16 x float> [ %449, %for_end9.1 ], [ %504, %for_body8.2 ]
  %466 = phi <16 x float> [ %443, %for_end9.1 ], [ %498, %for_body8.2 ]
  %467 = phi <16 x float> [ %437, %for_end9.1 ], [ %492, %for_body8.2 ]
  %468 = phi <16 x float> [ %431, %for_end9.1 ], [ %486, %for_body8.2 ]
  %469 = phi <16 x float> [ %425, %for_end9.1 ], [ %480, %for_body8.2 ]
  %470 = add nuw nsw i64 %462, %indvars.iv.2
  %471 = getelementptr inbounds float, float* %4, i64 %470
  %472 = load float, float* %471, align 4, !tbaa !8533
  %473 = insertelement <16 x float> undef, float %472, i32 0
  %474 = shufflevector <16 x float> %473, <16 x float> undef, <16 x i32> zeroinitializer
  %475 = shl i64 %indvars.iv.2, 4
  %476 = add nuw nsw i64 %42, %475
  %477 = getelementptr inbounds float, float* %7, i64 %476
  %478 = bitcast float* %477 to <16 x float>*
  %479 = load <16 x float>, <16 x float>* %478, align 64, !tbaa !8536
  %480 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %474, <16 x float> %479, <16 x float> %469)
  %481 = add nsw i64 %470, 128
  %482 = getelementptr inbounds float, float* %4, i64 %481
  %483 = load float, float* %482, align 4, !tbaa !8533
  %484 = insertelement <16 x float> undef, float %483, i32 0
  %485 = shufflevector <16 x float> %484, <16 x float> undef, <16 x i32> zeroinitializer
  %486 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %485, <16 x float> %479, <16 x float> %468)
  %487 = add nsw i64 %470, 256
  %488 = getelementptr inbounds float, float* %4, i64 %487
  %489 = load float, float* %488, align 4, !tbaa !8533
  %490 = insertelement <16 x float> undef, float %489, i32 0
  %491 = shufflevector <16 x float> %490, <16 x float> undef, <16 x i32> zeroinitializer
  %492 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %491, <16 x float> %479, <16 x float> %467)
  %493 = add nsw i64 %470, 384
  %494 = getelementptr inbounds float, float* %4, i64 %493
  %495 = load float, float* %494, align 4, !tbaa !8533
  %496 = insertelement <16 x float> undef, float %495, i32 0
  %497 = shufflevector <16 x float> %496, <16 x float> undef, <16 x i32> zeroinitializer
  %498 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %497, <16 x float> %479, <16 x float> %466)
  %499 = add nsw i64 %470, 512
  %500 = getelementptr inbounds float, float* %4, i64 %499
  %501 = load float, float* %500, align 4, !tbaa !8533
  %502 = insertelement <16 x float> undef, float %501, i32 0
  %503 = shufflevector <16 x float> %502, <16 x float> undef, <16 x i32> zeroinitializer
  %504 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %503, <16 x float> %479, <16 x float> %465)
  %505 = add nsw i64 %470, 640
  %506 = getelementptr inbounds float, float* %4, i64 %505
  %507 = load float, float* %506, align 4, !tbaa !8533
  %508 = insertelement <16 x float> undef, float %507, i32 0
  %509 = shufflevector <16 x float> %508, <16 x float> undef, <16 x i32> zeroinitializer
  %510 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %509, <16 x float> %479, <16 x float> %464)
  %511 = add nsw i64 %470, 768
  %512 = getelementptr inbounds float, float* %4, i64 %511
  %513 = load float, float* %512, align 4, !tbaa !8533
  %514 = insertelement <16 x float> undef, float %513, i32 0
  %515 = shufflevector <16 x float> %514, <16 x float> undef, <16 x i32> zeroinitializer
  %516 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %515, <16 x float> %479, <16 x float> %463)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 128
  br i1 %exitcond.2, label %for_end9.2, label %for_body8.2, !prof !50

for_end9.2:                                       ; preds = %for_body8.2
  %517 = add nsw i64 %352, 301056
  br label %for_body8.3

for_body8.3:                                      ; preds = %for_body8.3, %for_end9.2
  %indvars.iv.3 = phi i64 [ 0, %for_end9.2 ], [ %indvars.iv.next.3, %for_body8.3 ]
  %518 = phi <16 x float> [ %516, %for_end9.2 ], [ %571, %for_body8.3 ]
  %519 = phi <16 x float> [ %510, %for_end9.2 ], [ %565, %for_body8.3 ]
  %520 = phi <16 x float> [ %504, %for_end9.2 ], [ %559, %for_body8.3 ]
  %521 = phi <16 x float> [ %498, %for_end9.2 ], [ %553, %for_body8.3 ]
  %522 = phi <16 x float> [ %492, %for_end9.2 ], [ %547, %for_body8.3 ]
  %523 = phi <16 x float> [ %486, %for_end9.2 ], [ %541, %for_body8.3 ]
  %524 = phi <16 x float> [ %480, %for_end9.2 ], [ %535, %for_body8.3 ]
  %525 = add nuw nsw i64 %517, %indvars.iv.3
  %526 = getelementptr inbounds float, float* %4, i64 %525
  %527 = load float, float* %526, align 4, !tbaa !8533
  %528 = insertelement <16 x float> undef, float %527, i32 0
  %529 = shufflevector <16 x float> %528, <16 x float> undef, <16 x i32> zeroinitializer
  %530 = shl i64 %indvars.iv.3, 4
  %531 = add nuw nsw i64 %43, %530
  %532 = getelementptr inbounds float, float* %7, i64 %531
  %533 = bitcast float* %532 to <16 x float>*
  %534 = load <16 x float>, <16 x float>* %533, align 64, !tbaa !8536
  %535 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %529, <16 x float> %534, <16 x float> %524)
  %536 = add nsw i64 %525, 128
  %537 = getelementptr inbounds float, float* %4, i64 %536
  %538 = load float, float* %537, align 4, !tbaa !8533
  %539 = insertelement <16 x float> undef, float %538, i32 0
  %540 = shufflevector <16 x float> %539, <16 x float> undef, <16 x i32> zeroinitializer
  %541 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %540, <16 x float> %534, <16 x float> %523)
  %542 = add nsw i64 %525, 256
  %543 = getelementptr inbounds float, float* %4, i64 %542
  %544 = load float, float* %543, align 4, !tbaa !8533
  %545 = insertelement <16 x float> undef, float %544, i32 0
  %546 = shufflevector <16 x float> %545, <16 x float> undef, <16 x i32> zeroinitializer
  %547 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %546, <16 x float> %534, <16 x float> %522)
  %548 = add nsw i64 %525, 384
  %549 = getelementptr inbounds float, float* %4, i64 %548
  %550 = load float, float* %549, align 4, !tbaa !8533
  %551 = insertelement <16 x float> undef, float %550, i32 0
  %552 = shufflevector <16 x float> %551, <16 x float> undef, <16 x i32> zeroinitializer
  %553 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %552, <16 x float> %534, <16 x float> %521)
  %554 = add nsw i64 %525, 512
  %555 = getelementptr inbounds float, float* %4, i64 %554
  %556 = load float, float* %555, align 4, !tbaa !8533
  %557 = insertelement <16 x float> undef, float %556, i32 0
  %558 = shufflevector <16 x float> %557, <16 x float> undef, <16 x i32> zeroinitializer
  %559 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %558, <16 x float> %534, <16 x float> %520)
  %560 = add nsw i64 %525, 640
  %561 = getelementptr inbounds float, float* %4, i64 %560
  %562 = load float, float* %561, align 4, !tbaa !8533
  %563 = insertelement <16 x float> undef, float %562, i32 0
  %564 = shufflevector <16 x float> %563, <16 x float> undef, <16 x i32> zeroinitializer
  %565 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %564, <16 x float> %534, <16 x float> %519)
  %566 = add nsw i64 %525, 768
  %567 = getelementptr inbounds float, float* %4, i64 %566
  %568 = load float, float* %567, align 4, !tbaa !8533
  %569 = insertelement <16 x float> undef, float %568, i32 0
  %570 = shufflevector <16 x float> %569, <16 x float> undef, <16 x i32> zeroinitializer
  %571 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %570, <16 x float> %534, <16 x float> %518)
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.3, 1
  %exitcond.3 = icmp eq i64 %indvars.iv.next.3, 128
  br i1 %exitcond.3, label %for_end9.3, label %for_body8.3, !prof !50

for_end9.3:                                       ; preds = %for_body8.3
  store <16 x float> %535, <16 x float>* %332, align 64, !tbaa !8527
  store <16 x float> %541, <16 x float>* %335, align 64, !tbaa !8527
  store <16 x float> %547, <16 x float>* %338, align 64, !tbaa !8527
  store <16 x float> %553, <16 x float>* %341, align 64, !tbaa !8527
  store <16 x float> %559, <16 x float>* %344, align 64, !tbaa !8527
  store <16 x float> %565, <16 x float>* %347, align 64, !tbaa !8527
  store <16 x float> %571, <16 x float>* %350, align 64, !tbaa !8527
  %indvars.iv.next56 = add nuw nsw i64 %indvars.iv55, 1
  %exitcond57 = icmp eq i64 %indvars.iv.next56, 4
  br i1 %exitcond57, label %for_begin10.preheader, label %for_body2, !prof !50
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { noinline }
attributes #1 = { nofree norecurse nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind }
attributes #5 = { argmemonly nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, dwoId: 1)
!1 = !DIFile(filename: "model.tvm", directory: "/tmp/")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -target=aarch64-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = !{!"branch_weights", i32 1048576, i32 1}
!6 = !{!7, !7, i64 0}
!7 = !{!"ctx_ptr", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"0x9f482950.w1.b0", !11, i64 0}
!11 = !{!"0x9f482950.w2.b0", !12, i64 0}
!12 = !{!"0x9f482950.w4.b0", !13, i64 0}
!13 = !{!"0x9f482950.w8.b0", !14, i64 0}
!14 = !{!"0x9f482950.w16.b0", !15, i64 0}
!15 = !{!"0x9f482950.w32.b0", !16, i64 0}
!16 = !{!"0x9f482950.w64.b0", !17, i64 0}
!17 = !{!"0x9f482950.w128.b0", !18, i64 0}
!18 = !{!"0x9f482950.w256.b0", !19, i64 0}
!19 = !{!"0x9f482950.w512.b0", !20, i64 0}
!20 = !{!"0x9f482950.w1024.b0", !21, i64 0}
!21 = !{!"int32", !22, i64 0}
!22 = !{!"0x9f482950", !8, i64 0}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x9f482950.w1.b1", !11, i64 0}
!25 = !{!26, !26, i64 0}
!26 = !{!"0x9f80e100.w1.b0", !27, i64 0}
!27 = !{!"0x9f80e100.w2.b0", !28, i64 0}
!28 = !{!"0x9f80e100.w4.b0", !29, i64 0}
!29 = !{!"0x9f80e100.w8.b0", !30, i64 0}
!30 = !{!"0x9f80e100.w16.b0", !31, i64 0}
!31 = !{!"0x9f80e100.w32.b0", !32, i64 0}
!32 = !{!"0x9f80e100.w64.b0", !33, i64 0}
!33 = !{!"0x9f80e100.w128.b0", !34, i64 0}
!34 = !{!"0x9f80e100.w256.b0", !35, i64 0}
!35 = !{!"0x9f80e100.w512.b0", !36, i64 0}
!36 = !{!"0x9f80e100.w1024.b0", !37, i64 0}
!37 = !{!"int64", !38, i64 0}
!38 = !{!"0x9f80e100", !8, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x9f80e100.w1.b1", !27, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x9f80e100.w1.b2", !43, i64 0}
!43 = !{!"0x9f80e100.w2.b2", !28, i64 0}
!44 = !{!45, !45, i64 0}
!45 = !{!"0x9f80e100.w1.b3", !43, i64 0}
!46 = !{!47, !47, i64 0}
!47 = !{!"0x9f80e100.w1.b4", !48, i64 0}
!48 = !{!"0x9f80e100.w2.b4", !49, i64 0}
!49 = !{!"0x9f80e100.w4.b4", !29, i64 0}
!50 = !{!"branch_weights", i32 1, i32 1048576}
!51 = !{!52, !52, i64 0}
!52 = !{!"0x9f80e240.w1.b0", !53, i64 0}
!53 = !{!"0x9f80e240.w2.b0", !54, i64 0}
!54 = !{!"0x9f80e240.w4.b0", !55, i64 0}
!55 = !{!"0x9f80e240.w8.b0", !56, i64 0}
!56 = !{!"0x9f80e240.w16.b0", !57, i64 0}
!57 = !{!"0x9f80e240.w32.b0", !58, i64 0}
!58 = !{!"0x9f80e240.w64.b0", !59, i64 0}
!59 = !{!"0x9f80e240.w128.b0", !60, i64 0}
!60 = !{!"0x9f80e240.w256.b0", !61, i64 0}
!61 = !{!"0x9f80e240.w512.b0", !62, i64 0}
!62 = !{!"0x9f80e240.w1024.b0", !63, i64 0}
!63 = !{!"int64", !64, i64 0}
!64 = !{!"0x9f80e240", !8, i64 0}
!65 = !{!66, !66, i64 0}
!66 = !{!"0x9f80e240.w1.b1", !53, i64 0}
!67 = !{!68, !68, i64 0}
!68 = !{!"0x9f80e240.w1.b2", !69, i64 0}
!69 = !{!"0x9f80e240.w2.b2", !54, i64 0}
!70 = !{!71, !71, i64 0}
!71 = !{!"0x9f80e240.w1.b3", !69, i64 0}
!72 = !{!73, !73, i64 0}
!73 = !{!"0x9f80e240.w1.b4", !74, i64 0}
!74 = !{!"0x9f80e240.w2.b4", !75, i64 0}
!75 = !{!"0x9f80e240.w4.b4", !55, i64 0}
!76 = !{!77, !77, i64 0}
!77 = !{!"0x9f80fef0.w1.b0", !78, i64 0}
!78 = !{!"0x9f80fef0.w2.b0", !79, i64 0}
!79 = !{!"0x9f80fef0.w4.b0", !80, i64 0}
!80 = !{!"0x9f80fef0.w8.b0", !81, i64 0}
!81 = !{!"0x9f80fef0.w16.b0", !82, i64 0}
!82 = !{!"0x9f80fef0.w32.b0", !83, i64 0}
!83 = !{!"0x9f80fef0.w64.b0", !84, i64 0}
!84 = !{!"0x9f80fef0.w128.b0", !85, i64 0}
!85 = !{!"0x9f80fef0.w256.b0", !86, i64 0}
!86 = !{!"0x9f80fef0.w512.b0", !87, i64 0}
!87 = !{!"0x9f80fef0.w1024.b0", !88, i64 0}
!88 = !{!"int64", !89, i64 0}
!89 = !{!"0x9f80fef0", !8, i64 0}
!90 = !{!91, !91, i64 0}
!91 = !{!"0x9f80fef0.w1.b1", !78, i64 0}
!92 = !{!93, !93, i64 0}
!93 = !{!"0x9f80fef0.w1.b2", !94, i64 0}
!94 = !{!"0x9f80fef0.w2.b2", !79, i64 0}
!95 = !{!96, !96, i64 0}
!96 = !{!"0x9f80fef0.w1.b3", !94, i64 0}
!97 = !{!98, !98, i64 0}
!98 = !{!"0x9f80fef0.w1.b4", !99, i64 0}
!99 = !{!"0x9f80fef0.w2.b4", !100, i64 0}
!100 = !{!"0x9f80fef0.w4.b4", !80, i64 0}
!101 = !{!102, !102, i64 0}
!102 = !{!"0x9f8100f0.w1.b0", !103, i64 0}
!103 = !{!"0x9f8100f0.w2.b0", !104, i64 0}
!104 = !{!"0x9f8100f0.w4.b0", !105, i64 0}
!105 = !{!"0x9f8100f0.w8.b0", !106, i64 0}
!106 = !{!"0x9f8100f0.w16.b0", !107, i64 0}
!107 = !{!"0x9f8100f0.w32.b0", !108, i64 0}
!108 = !{!"0x9f8100f0.w64.b0", !109, i64 0}
!109 = !{!"0x9f8100f0.w128.b0", !110, i64 0}
!110 = !{!"0x9f8100f0.w256.b0", !111, i64 0}
!111 = !{!"0x9f8100f0.w512.b0", !112, i64 0}
!112 = !{!"0x9f8100f0.w1024.b0", !113, i64 0}
!113 = !{!"int64", !114, i64 0}
!114 = !{!"0x9f8100f0", !8, i64 0}
!115 = !{!116, !116, i64 0}
!116 = !{!"0x9f8100f0.w1.b1", !103, i64 0}
!117 = !{!118, !118, i64 0}
!118 = !{!"0x9f8100f0.w1.b2", !119, i64 0}
!119 = !{!"0x9f8100f0.w2.b2", !104, i64 0}
!120 = !{!121, !121, i64 0}
!121 = !{!"0x9f8100f0.w1.b3", !119, i64 0}
!122 = !{!123, !123, i64 0}
!123 = !{!"0x9f8100f0.w1.b4", !124, i64 0}
!124 = !{!"0x9f8100f0.w2.b4", !125, i64 0}
!125 = !{!"0x9f8100f0.w4.b4", !105, i64 0}
!126 = !{!127, !127, i64 0}
!127 = !{!"float32", !128, i64 0}
!128 = !{!"0x92fe7da0", !8, i64 0}
!129 = !{!130, !130, i64 0}
!130 = !{!"float32", !131, i64 0}
!131 = !{!"0x9d91fef0", !8, i64 0}
!132 = !{!133, !133, i64 0}
!133 = !{!"0x9f476c00.w1.b0", !134, i64 0}
!134 = !{!"0x9f476c00.w2.b0", !135, i64 0}
!135 = !{!"0x9f476c00.w4.b0", !136, i64 0}
!136 = !{!"0x9f476c00.w8.b0", !137, i64 0}
!137 = !{!"0x9f476c00.w16.b0", !138, i64 0}
!138 = !{!"0x9f476c00.w32.b0", !139, i64 0}
!139 = !{!"0x9f476c00.w64.b0", !140, i64 0}
!140 = !{!"0x9f476c00.w128.b0", !141, i64 0}
!141 = !{!"0x9f476c00.w256.b0", !142, i64 0}
!142 = !{!"0x9f476c00.w512.b0", !143, i64 0}
!143 = !{!"0x9f476c00.w1024.b0", !144, i64 0}
!144 = !{!"int32", !145, i64 0}
!145 = !{!"0x9f476c00", !8, i64 0}
!146 = !{!147, !147, i64 0}
!147 = !{!"0x9f476c00.w1.b2", !148, i64 0}
!148 = !{!"0x9f476c00.w2.b2", !135, i64 0}
!149 = !{!150, !150, i64 0}
!150 = !{!"0x9f476c00.w1.b3", !148, i64 0}
!151 = !{!152, !152, i64 0}
!152 = !{!"0x9f476c00.w1.b1", !134, i64 0}
!153 = !{!154, !154, i64 0}
!154 = !{!"0x9f4828a0.w1.b0", !155, i64 0}
!155 = !{!"0x9f4828a0.w2.b0", !156, i64 0}
!156 = !{!"0x9f4828a0.w4.b0", !157, i64 0}
!157 = !{!"0x9f4828a0.w8.b0", !158, i64 0}
!158 = !{!"0x9f4828a0.w16.b0", !159, i64 0}
!159 = !{!"0x9f4828a0.w32.b0", !160, i64 0}
!160 = !{!"0x9f4828a0.w64.b0", !161, i64 0}
!161 = !{!"0x9f4828a0.w128.b0", !162, i64 0}
!162 = !{!"0x9f4828a0.w256.b0", !163, i64 0}
!163 = !{!"0x9f4828a0.w512.b0", !164, i64 0}
!164 = !{!"0x9f4828a0.w1024.b0", !165, i64 0}
!165 = !{!"int64", !166, i64 0}
!166 = !{!"0x9f4828a0", !8, i64 0}
!167 = !{!168, !168, i64 0}
!168 = !{!"0x9f4828a0.w1.b1", !155, i64 0}
!169 = !{!170, !170, i64 0}
!170 = !{!"0x9f4828a0.w1.b2", !171, i64 0}
!171 = !{!"0x9f4828a0.w2.b2", !156, i64 0}
!172 = !{!173, !173, i64 0}
!173 = !{!"0x9f4828a0.w1.b3", !171, i64 0}
!174 = !{!175, !175, i64 0}
!175 = !{!"0x9f4828a0.w1.b4", !176, i64 0}
!176 = !{!"0x9f4828a0.w2.b4", !177, i64 0}
!177 = !{!"0x9f4828a0.w4.b4", !157, i64 0}
!178 = !{!179, !179, i64 0}
!179 = !{!"0x9f482aa0.w1.b0", !180, i64 0}
!180 = !{!"0x9f482aa0.w2.b0", !181, i64 0}
!181 = !{!"0x9f482aa0.w4.b0", !182, i64 0}
!182 = !{!"0x9f482aa0.w8.b0", !183, i64 0}
!183 = !{!"0x9f482aa0.w16.b0", !184, i64 0}
!184 = !{!"0x9f482aa0.w32.b0", !185, i64 0}
!185 = !{!"0x9f482aa0.w64.b0", !186, i64 0}
!186 = !{!"0x9f482aa0.w128.b0", !187, i64 0}
!187 = !{!"0x9f482aa0.w256.b0", !188, i64 0}
!188 = !{!"0x9f482aa0.w512.b0", !189, i64 0}
!189 = !{!"0x9f482aa0.w1024.b0", !190, i64 0}
!190 = !{!"int64", !191, i64 0}
!191 = !{!"0x9f482aa0", !8, i64 0}
!192 = !{!193, !193, i64 0}
!193 = !{!"0x9f482aa0.w1.b1", !180, i64 0}
!194 = !{!195, !195, i64 0}
!195 = !{!"0x9f482aa0.w1.b2", !196, i64 0}
!196 = !{!"0x9f482aa0.w2.b2", !181, i64 0}
!197 = !{!198, !198, i64 0}
!198 = !{!"0x9f482aa0.w1.b3", !196, i64 0}
!199 = !{!200, !200, i64 0}
!200 = !{!"0x9f482aa0.w1.b4", !201, i64 0}
!201 = !{!"0x9f482aa0.w2.b4", !202, i64 0}
!202 = !{!"0x9f482aa0.w4.b4", !182, i64 0}
!203 = !{!204, !204, i64 0}
!204 = !{!"0x9f484de0.w1.b0", !205, i64 0}
!205 = !{!"0x9f484de0.w2.b0", !206, i64 0}
!206 = !{!"0x9f484de0.w4.b0", !207, i64 0}
!207 = !{!"0x9f484de0.w8.b0", !208, i64 0}
!208 = !{!"0x9f484de0.w16.b0", !209, i64 0}
!209 = !{!"0x9f484de0.w32.b0", !210, i64 0}
!210 = !{!"0x9f484de0.w64.b0", !211, i64 0}
!211 = !{!"0x9f484de0.w128.b0", !212, i64 0}
!212 = !{!"0x9f484de0.w256.b0", !213, i64 0}
!213 = !{!"0x9f484de0.w512.b0", !214, i64 0}
!214 = !{!"0x9f484de0.w1024.b0", !215, i64 0}
!215 = !{!"int64", !216, i64 0}
!216 = !{!"0x9f484de0", !8, i64 0}
!217 = !{!218, !218, i64 0}
!218 = !{!"0x9f484de0.w1.b1", !205, i64 0}
!219 = !{!220, !220, i64 0}
!220 = !{!"0x9f484de0.w1.b2", !221, i64 0}
!221 = !{!"0x9f484de0.w2.b2", !206, i64 0}
!222 = !{!223, !223, i64 0}
!223 = !{!"0x9f484de0.w1.b3", !221, i64 0}
!224 = !{!225, !225, i64 0}
!225 = !{!"0x9f484de0.w1.b4", !226, i64 0}
!226 = !{!"0x9f484de0.w2.b4", !227, i64 0}
!227 = !{!"0x9f484de0.w4.b4", !207, i64 0}
!228 = !{!229, !229, i64 0}
!229 = !{!"0x9f484de0.w1.b5", !226, i64 0}
!230 = !{!231, !231, i64 0}
!231 = !{!"0x9f484fe0.w1.b0", !232, i64 0}
!232 = !{!"0x9f484fe0.w2.b0", !233, i64 0}
!233 = !{!"0x9f484fe0.w4.b0", !234, i64 0}
!234 = !{!"0x9f484fe0.w8.b0", !235, i64 0}
!235 = !{!"0x9f484fe0.w16.b0", !236, i64 0}
!236 = !{!"0x9f484fe0.w32.b0", !237, i64 0}
!237 = !{!"0x9f484fe0.w64.b0", !238, i64 0}
!238 = !{!"0x9f484fe0.w128.b0", !239, i64 0}
!239 = !{!"0x9f484fe0.w256.b0", !240, i64 0}
!240 = !{!"0x9f484fe0.w512.b0", !241, i64 0}
!241 = !{!"0x9f484fe0.w1024.b0", !242, i64 0}
!242 = !{!"int64", !243, i64 0}
!243 = !{!"0x9f484fe0", !8, i64 0}
!244 = !{!245, !245, i64 0}
!245 = !{!"0x9f484fe0.w1.b1", !232, i64 0}
!246 = !{!247, !247, i64 0}
!247 = !{!"0x9f484fe0.w1.b2", !248, i64 0}
!248 = !{!"0x9f484fe0.w2.b2", !233, i64 0}
!249 = !{!250, !250, i64 0}
!250 = !{!"0x9f484fe0.w1.b3", !248, i64 0}
!251 = !{!252, !252, i64 0}
!252 = !{!"0x9f484fe0.w1.b4", !253, i64 0}
!253 = !{!"0x9f484fe0.w2.b4", !254, i64 0}
!254 = !{!"0x9f484fe0.w4.b4", !234, i64 0}
!255 = !{!256, !256, i64 0}
!256 = !{!"0x9f484fe0.w1.b5", !253, i64 0}
!257 = !{!258, !258, i64 0}
!258 = !{!"0x9f486e80.w1.b0", !259, i64 0}
!259 = !{!"0x9f486e80.w2.b0", !260, i64 0}
!260 = !{!"0x9f486e80.w4.b0", !261, i64 0}
!261 = !{!"0x9f486e80.w8.b0", !262, i64 0}
!262 = !{!"0x9f486e80.w16.b0", !263, i64 0}
!263 = !{!"0x9f486e80.w32.b0", !264, i64 0}
!264 = !{!"0x9f486e80.w64.b0", !265, i64 0}
!265 = !{!"0x9f486e80.w128.b0", !266, i64 0}
!266 = !{!"0x9f486e80.w256.b0", !267, i64 0}
!267 = !{!"0x9f486e80.w512.b0", !268, i64 0}
!268 = !{!"0x9f486e80.w1024.b0", !269, i64 0}
!269 = !{!"int64", !270, i64 0}
!270 = !{!"0x9f486e80", !8, i64 0}
!271 = !{!272, !272, i64 0}
!272 = !{!"0x9f486e80.w1.b1", !259, i64 0}
!273 = !{!274, !274, i64 0}
!274 = !{!"0x9f486e80.w1.b2", !275, i64 0}
!275 = !{!"0x9f486e80.w2.b2", !260, i64 0}
!276 = !{!277, !277, i64 0}
!277 = !{!"0x9f486e80.w1.b3", !275, i64 0}
!278 = !{!279, !279, i64 0}
!279 = !{!"0x9f486e80.w1.b4", !280, i64 0}
!280 = !{!"0x9f486e80.w2.b4", !281, i64 0}
!281 = !{!"0x9f486e80.w4.b4", !261, i64 0}
!282 = !{!283, !283, i64 0}
!283 = !{!"0x9f4852e0.w1.b0", !284, i64 0}
!284 = !{!"0x9f4852e0.w2.b0", !285, i64 0}
!285 = !{!"0x9f4852e0.w4.b0", !286, i64 0}
!286 = !{!"0x9f4852e0.w8.b0", !287, i64 0}
!287 = !{!"0x9f4852e0.w16.b0", !288, i64 0}
!288 = !{!"0x9f4852e0.w32.b0", !289, i64 0}
!289 = !{!"0x9f4852e0.w64.b0", !290, i64 0}
!290 = !{!"0x9f4852e0.w128.b0", !291, i64 0}
!291 = !{!"0x9f4852e0.w256.b0", !292, i64 0}
!292 = !{!"0x9f4852e0.w512.b0", !293, i64 0}
!293 = !{!"0x9f4852e0.w1024.b0", !294, i64 0}
!294 = !{!"int64", !295, i64 0}
!295 = !{!"0x9f4852e0", !8, i64 0}
!296 = !{!297, !297, i64 0}
!297 = !{!"0x9f4852e0.w1.b1", !284, i64 0}
!298 = !{!299, !299, i64 0}
!299 = !{!"0x9f4852e0.w1.b2", !300, i64 0}
!300 = !{!"0x9f4852e0.w2.b2", !285, i64 0}
!301 = !{!302, !302, i64 0}
!302 = !{!"0x9f4852e0.w1.b3", !300, i64 0}
!303 = !{!304, !304, i64 0}
!304 = !{!"0x9f4852e0.w1.b4", !305, i64 0}
!305 = !{!"0x9f4852e0.w2.b4", !306, i64 0}
!306 = !{!"0x9f4852e0.w4.b4", !286, i64 0}
!307 = !{!308, !308, i64 0}
!308 = !{!"0x9f8098e0.w1.b0", !309, i64 0}
!309 = !{!"0x9f8098e0.w2.b0", !310, i64 0}
!310 = !{!"0x9f8098e0.w4.b0", !311, i64 0}
!311 = !{!"0x9f8098e0.w8.b0", !312, i64 0}
!312 = !{!"0x9f8098e0.w16.b0", !313, i64 0}
!313 = !{!"0x9f8098e0.w32.b0", !314, i64 0}
!314 = !{!"0x9f8098e0.w64.b0", !315, i64 0}
!315 = !{!"0x9f8098e0.w128.b0", !316, i64 0}
!316 = !{!"0x9f8098e0.w256.b0", !317, i64 0}
!317 = !{!"0x9f8098e0.w512.b0", !318, i64 0}
!318 = !{!"0x9f8098e0.w1024.b0", !319, i64 0}
!319 = !{!"int64", !320, i64 0}
!320 = !{!"0x9f8098e0", !8, i64 0}
!321 = !{!322, !322, i64 0}
!322 = !{!"0x9f8098e0.w1.b1", !309, i64 0}
!323 = !{!324, !324, i64 0}
!324 = !{!"0x9f8098e0.w1.b2", !325, i64 0}
!325 = !{!"0x9f8098e0.w2.b2", !310, i64 0}
!326 = !{!327, !327, i64 0}
!327 = !{!"0x9f8098e0.w1.b3", !325, i64 0}
!328 = !{!329, !329, i64 0}
!329 = !{!"0x9f8098e0.w1.b4", !330, i64 0}
!330 = !{!"0x9f8098e0.w2.b4", !331, i64 0}
!331 = !{!"0x9f8098e0.w4.b4", !311, i64 0}
!332 = !{!333, !333, i64 0}
!333 = !{!"0x9f80a7f0.w1.b0", !334, i64 0}
!334 = !{!"0x9f80a7f0.w2.b0", !335, i64 0}
!335 = !{!"0x9f80a7f0.w4.b0", !336, i64 0}
!336 = !{!"0x9f80a7f0.w8.b0", !337, i64 0}
!337 = !{!"0x9f80a7f0.w16.b0", !338, i64 0}
!338 = !{!"0x9f80a7f0.w32.b0", !339, i64 0}
!339 = !{!"0x9f80a7f0.w64.b0", !340, i64 0}
!340 = !{!"0x9f80a7f0.w128.b0", !341, i64 0}
!341 = !{!"0x9f80a7f0.w256.b0", !342, i64 0}
!342 = !{!"0x9f80a7f0.w512.b0", !343, i64 0}
!343 = !{!"0x9f80a7f0.w1024.b0", !344, i64 0}
!344 = !{!"int64", !345, i64 0}
!345 = !{!"0x9f80a7f0", !8, i64 0}
!346 = !{!347, !347, i64 0}
!347 = !{!"0x9f80a7f0.w1.b1", !334, i64 0}
!348 = !{!349, !349, i64 0}
!349 = !{!"0x9f80a7f0.w1.b2", !350, i64 0}
!350 = !{!"0x9f80a7f0.w2.b2", !335, i64 0}
!351 = !{!352, !352, i64 0}
!352 = !{!"0x9f80a7f0.w1.b3", !350, i64 0}
!353 = !{!354, !354, i64 0}
!354 = !{!"0x9f80a7f0.w1.b4", !355, i64 0}
!355 = !{!"0x9f80a7f0.w2.b4", !356, i64 0}
!356 = !{!"0x9f80a7f0.w4.b4", !336, i64 0}
!357 = !{!358, !358, i64 0}
!358 = !{!"float32", !359, i64 0}
!359 = !{!"0xaa5ba4a0", !8, i64 0}
!360 = !{!361, !361, i64 0}
!361 = !{!"float32", !362, i64 0}
!362 = !{!"0xa89f5490", !8, i64 0}
!363 = !{!364, !364, i64 0}
!364 = !{!"float32", !365, i64 0}
!365 = !{!"0xa89f42b0", !8, i64 0}
!366 = !{!367, !367, i64 0}
!367 = !{!"float32", !368, i64 0}
!368 = !{!"0xa89f4210", !8, i64 0}
!369 = !{!370, !370, i64 0}
!370 = !{!"float32", !371, i64 0}
!371 = !{!"0xaa5ba4f0", !8, i64 0}
!372 = !{!373, !373, i64 0}
!373 = !{!"0x9f472e70.w1.b0", !374, i64 0}
!374 = !{!"0x9f472e70.w2.b0", !375, i64 0}
!375 = !{!"0x9f472e70.w4.b0", !376, i64 0}
!376 = !{!"0x9f472e70.w8.b0", !377, i64 0}
!377 = !{!"0x9f472e70.w16.b0", !378, i64 0}
!378 = !{!"0x9f472e70.w32.b0", !379, i64 0}
!379 = !{!"0x9f472e70.w64.b0", !380, i64 0}
!380 = !{!"0x9f472e70.w128.b0", !381, i64 0}
!381 = !{!"0x9f472e70.w256.b0", !382, i64 0}
!382 = !{!"0x9f472e70.w512.b0", !383, i64 0}
!383 = !{!"0x9f472e70.w1024.b0", !384, i64 0}
!384 = !{!"int32", !385, i64 0}
!385 = !{!"0x9f472e70", !8, i64 0}
!386 = !{!387, !387, i64 0}
!387 = !{!"0x9f472e70.w1.b2", !388, i64 0}
!388 = !{!"0x9f472e70.w2.b2", !375, i64 0}
!389 = !{!390, !390, i64 0}
!390 = !{!"0x9f472e70.w1.b3", !388, i64 0}
!391 = !{!392, !392, i64 0}
!392 = !{!"0x9f472e70.w1.b1", !374, i64 0}
!393 = !{!394, !394, i64 0}
!394 = !{!"0x9f476a00.w1.b0", !395, i64 0}
!395 = !{!"0x9f476a00.w2.b0", !396, i64 0}
!396 = !{!"0x9f476a00.w4.b0", !397, i64 0}
!397 = !{!"0x9f476a00.w8.b0", !398, i64 0}
!398 = !{!"0x9f476a00.w16.b0", !399, i64 0}
!399 = !{!"0x9f476a00.w32.b0", !400, i64 0}
!400 = !{!"0x9f476a00.w64.b0", !401, i64 0}
!401 = !{!"0x9f476a00.w128.b0", !402, i64 0}
!402 = !{!"0x9f476a00.w256.b0", !403, i64 0}
!403 = !{!"0x9f476a00.w512.b0", !404, i64 0}
!404 = !{!"0x9f476a00.w1024.b0", !405, i64 0}
!405 = !{!"int64", !406, i64 0}
!406 = !{!"0x9f476a00", !8, i64 0}
!407 = !{!408, !408, i64 0}
!408 = !{!"0x9f476a00.w1.b1", !395, i64 0}
!409 = !{!410, !410, i64 0}
!410 = !{!"0x9f476a00.w1.b2", !411, i64 0}
!411 = !{!"0x9f476a00.w2.b2", !396, i64 0}
!412 = !{!413, !413, i64 0}
!413 = !{!"0x9f476a00.w1.b3", !411, i64 0}
!414 = !{!415, !415, i64 0}
!415 = !{!"0x9f476a00.w1.b4", !416, i64 0}
!416 = !{!"0x9f476a00.w2.b4", !417, i64 0}
!417 = !{!"0x9f476a00.w4.b4", !397, i64 0}
!418 = !{!419, !419, i64 0}
!419 = !{!"0x9f476f30.w1.b0", !420, i64 0}
!420 = !{!"0x9f476f30.w2.b0", !421, i64 0}
!421 = !{!"0x9f476f30.w4.b0", !422, i64 0}
!422 = !{!"0x9f476f30.w8.b0", !423, i64 0}
!423 = !{!"0x9f476f30.w16.b0", !424, i64 0}
!424 = !{!"0x9f476f30.w32.b0", !425, i64 0}
!425 = !{!"0x9f476f30.w64.b0", !426, i64 0}
!426 = !{!"0x9f476f30.w128.b0", !427, i64 0}
!427 = !{!"0x9f476f30.w256.b0", !428, i64 0}
!428 = !{!"0x9f476f30.w512.b0", !429, i64 0}
!429 = !{!"0x9f476f30.w1024.b0", !430, i64 0}
!430 = !{!"int64", !431, i64 0}
!431 = !{!"0x9f476f30", !8, i64 0}
!432 = !{!433, !433, i64 0}
!433 = !{!"0x9f476f30.w1.b1", !420, i64 0}
!434 = !{!435, !435, i64 0}
!435 = !{!"0x9f476f30.w1.b2", !436, i64 0}
!436 = !{!"0x9f476f30.w2.b2", !421, i64 0}
!437 = !{!438, !438, i64 0}
!438 = !{!"0x9f476f30.w1.b3", !436, i64 0}
!439 = !{!440, !440, i64 0}
!440 = !{!"0x9f476f30.w1.b4", !441, i64 0}
!441 = !{!"0x9f476f30.w2.b4", !442, i64 0}
!442 = !{!"0x9f476f30.w4.b4", !422, i64 0}
!443 = !{!444, !444, i64 0}
!444 = !{!"0x9f479270.w1.b0", !445, i64 0}
!445 = !{!"0x9f479270.w2.b0", !446, i64 0}
!446 = !{!"0x9f479270.w4.b0", !447, i64 0}
!447 = !{!"0x9f479270.w8.b0", !448, i64 0}
!448 = !{!"0x9f479270.w16.b0", !449, i64 0}
!449 = !{!"0x9f479270.w32.b0", !450, i64 0}
!450 = !{!"0x9f479270.w64.b0", !451, i64 0}
!451 = !{!"0x9f479270.w128.b0", !452, i64 0}
!452 = !{!"0x9f479270.w256.b0", !453, i64 0}
!453 = !{!"0x9f479270.w512.b0", !454, i64 0}
!454 = !{!"0x9f479270.w1024.b0", !455, i64 0}
!455 = !{!"int64", !456, i64 0}
!456 = !{!"0x9f479270", !8, i64 0}
!457 = !{!458, !458, i64 0}
!458 = !{!"0x9f479270.w1.b1", !445, i64 0}
!459 = !{!460, !460, i64 0}
!460 = !{!"0x9f479270.w1.b2", !461, i64 0}
!461 = !{!"0x9f479270.w2.b2", !446, i64 0}
!462 = !{!463, !463, i64 0}
!463 = !{!"0x9f479270.w1.b3", !461, i64 0}
!464 = !{!465, !465, i64 0}
!465 = !{!"0x9f479270.w1.b4", !466, i64 0}
!466 = !{!"0x9f479270.w2.b4", !467, i64 0}
!467 = !{!"0x9f479270.w4.b4", !447, i64 0}
!468 = !{!469, !469, i64 0}
!469 = !{!"0x9f479270.w1.b5", !466, i64 0}
!470 = !{!471, !471, i64 0}
!471 = !{!"0x9f479470.w1.b0", !472, i64 0}
!472 = !{!"0x9f479470.w2.b0", !473, i64 0}
!473 = !{!"0x9f479470.w4.b0", !474, i64 0}
!474 = !{!"0x9f479470.w8.b0", !475, i64 0}
!475 = !{!"0x9f479470.w16.b0", !476, i64 0}
!476 = !{!"0x9f479470.w32.b0", !477, i64 0}
!477 = !{!"0x9f479470.w64.b0", !478, i64 0}
!478 = !{!"0x9f479470.w128.b0", !479, i64 0}
!479 = !{!"0x9f479470.w256.b0", !480, i64 0}
!480 = !{!"0x9f479470.w512.b0", !481, i64 0}
!481 = !{!"0x9f479470.w1024.b0", !482, i64 0}
!482 = !{!"int64", !483, i64 0}
!483 = !{!"0x9f479470", !8, i64 0}
!484 = !{!485, !485, i64 0}
!485 = !{!"0x9f479470.w1.b1", !472, i64 0}
!486 = !{!487, !487, i64 0}
!487 = !{!"0x9f479470.w1.b2", !488, i64 0}
!488 = !{!"0x9f479470.w2.b2", !473, i64 0}
!489 = !{!490, !490, i64 0}
!490 = !{!"0x9f479470.w1.b3", !488, i64 0}
!491 = !{!492, !492, i64 0}
!492 = !{!"0x9f479470.w1.b4", !493, i64 0}
!493 = !{!"0x9f479470.w2.b4", !494, i64 0}
!494 = !{!"0x9f479470.w4.b4", !474, i64 0}
!495 = !{!496, !496, i64 0}
!496 = !{!"0x9f479470.w1.b5", !493, i64 0}
!497 = !{!498, !498, i64 0}
!498 = !{!"0x9f47b310.w1.b0", !499, i64 0}
!499 = !{!"0x9f47b310.w2.b0", !500, i64 0}
!500 = !{!"0x9f47b310.w4.b0", !501, i64 0}
!501 = !{!"0x9f47b310.w8.b0", !502, i64 0}
!502 = !{!"0x9f47b310.w16.b0", !503, i64 0}
!503 = !{!"0x9f47b310.w32.b0", !504, i64 0}
!504 = !{!"0x9f47b310.w64.b0", !505, i64 0}
!505 = !{!"0x9f47b310.w128.b0", !506, i64 0}
!506 = !{!"0x9f47b310.w256.b0", !507, i64 0}
!507 = !{!"0x9f47b310.w512.b0", !508, i64 0}
!508 = !{!"0x9f47b310.w1024.b0", !509, i64 0}
!509 = !{!"int64", !510, i64 0}
!510 = !{!"0x9f47b310", !8, i64 0}
!511 = !{!512, !512, i64 0}
!512 = !{!"0x9f47b310.w1.b1", !499, i64 0}
!513 = !{!514, !514, i64 0}
!514 = !{!"0x9f47b310.w1.b2", !515, i64 0}
!515 = !{!"0x9f47b310.w2.b2", !500, i64 0}
!516 = !{!517, !517, i64 0}
!517 = !{!"0x9f47b310.w1.b3", !515, i64 0}
!518 = !{!519, !519, i64 0}
!519 = !{!"0x9f47b310.w1.b4", !520, i64 0}
!520 = !{!"0x9f47b310.w2.b4", !521, i64 0}
!521 = !{!"0x9f47b310.w4.b4", !501, i64 0}
!522 = !{!523, !523, i64 0}
!523 = !{!"0x9f479770.w1.b0", !524, i64 0}
!524 = !{!"0x9f479770.w2.b0", !525, i64 0}
!525 = !{!"0x9f479770.w4.b0", !526, i64 0}
!526 = !{!"0x9f479770.w8.b0", !527, i64 0}
!527 = !{!"0x9f479770.w16.b0", !528, i64 0}
!528 = !{!"0x9f479770.w32.b0", !529, i64 0}
!529 = !{!"0x9f479770.w64.b0", !530, i64 0}
!530 = !{!"0x9f479770.w128.b0", !531, i64 0}
!531 = !{!"0x9f479770.w256.b0", !532, i64 0}
!532 = !{!"0x9f479770.w512.b0", !533, i64 0}
!533 = !{!"0x9f479770.w1024.b0", !534, i64 0}
!534 = !{!"int64", !535, i64 0}
!535 = !{!"0x9f479770", !8, i64 0}
!536 = !{!537, !537, i64 0}
!537 = !{!"0x9f479770.w1.b1", !524, i64 0}
!538 = !{!539, !539, i64 0}
!539 = !{!"0x9f479770.w1.b2", !540, i64 0}
!540 = !{!"0x9f479770.w2.b2", !525, i64 0}
!541 = !{!542, !542, i64 0}
!542 = !{!"0x9f479770.w1.b3", !540, i64 0}
!543 = !{!544, !544, i64 0}
!544 = !{!"0x9f479770.w1.b4", !545, i64 0}
!545 = !{!"0x9f479770.w2.b4", !546, i64 0}
!546 = !{!"0x9f479770.w4.b4", !526, i64 0}
!547 = !{!548, !548, i64 0}
!548 = !{!"0x9f47d8d0.w1.b0", !549, i64 0}
!549 = !{!"0x9f47d8d0.w2.b0", !550, i64 0}
!550 = !{!"0x9f47d8d0.w4.b0", !551, i64 0}
!551 = !{!"0x9f47d8d0.w8.b0", !552, i64 0}
!552 = !{!"0x9f47d8d0.w16.b0", !553, i64 0}
!553 = !{!"0x9f47d8d0.w32.b0", !554, i64 0}
!554 = !{!"0x9f47d8d0.w64.b0", !555, i64 0}
!555 = !{!"0x9f47d8d0.w128.b0", !556, i64 0}
!556 = !{!"0x9f47d8d0.w256.b0", !557, i64 0}
!557 = !{!"0x9f47d8d0.w512.b0", !558, i64 0}
!558 = !{!"0x9f47d8d0.w1024.b0", !559, i64 0}
!559 = !{!"int64", !560, i64 0}
!560 = !{!"0x9f47d8d0", !8, i64 0}
!561 = !{!562, !562, i64 0}
!562 = !{!"0x9f47d8d0.w1.b1", !549, i64 0}
!563 = !{!564, !564, i64 0}
!564 = !{!"0x9f47d8d0.w1.b2", !565, i64 0}
!565 = !{!"0x9f47d8d0.w2.b2", !550, i64 0}
!566 = !{!567, !567, i64 0}
!567 = !{!"0x9f47d8d0.w1.b3", !565, i64 0}
!568 = !{!569, !569, i64 0}
!569 = !{!"0x9f47d8d0.w1.b4", !570, i64 0}
!570 = !{!"0x9f47d8d0.w2.b4", !571, i64 0}
!571 = !{!"0x9f47d8d0.w4.b4", !551, i64 0}
!572 = !{!573, !573, i64 0}
!573 = !{!"0x9f47e7e0.w1.b0", !574, i64 0}
!574 = !{!"0x9f47e7e0.w2.b0", !575, i64 0}
!575 = !{!"0x9f47e7e0.w4.b0", !576, i64 0}
!576 = !{!"0x9f47e7e0.w8.b0", !577, i64 0}
!577 = !{!"0x9f47e7e0.w16.b0", !578, i64 0}
!578 = !{!"0x9f47e7e0.w32.b0", !579, i64 0}
!579 = !{!"0x9f47e7e0.w64.b0", !580, i64 0}
!580 = !{!"0x9f47e7e0.w128.b0", !581, i64 0}
!581 = !{!"0x9f47e7e0.w256.b0", !582, i64 0}
!582 = !{!"0x9f47e7e0.w512.b0", !583, i64 0}
!583 = !{!"0x9f47e7e0.w1024.b0", !584, i64 0}
!584 = !{!"int64", !585, i64 0}
!585 = !{!"0x9f47e7e0", !8, i64 0}
!586 = !{!587, !587, i64 0}
!587 = !{!"0x9f47e7e0.w1.b1", !574, i64 0}
!588 = !{!589, !589, i64 0}
!589 = !{!"0x9f47e7e0.w1.b2", !590, i64 0}
!590 = !{!"0x9f47e7e0.w2.b2", !575, i64 0}
!591 = !{!592, !592, i64 0}
!592 = !{!"0x9f47e7e0.w1.b3", !590, i64 0}
!593 = !{!594, !594, i64 0}
!594 = !{!"0x9f47e7e0.w1.b4", !595, i64 0}
!595 = !{!"0x9f47e7e0.w2.b4", !596, i64 0}
!596 = !{!"0x9f47e7e0.w4.b4", !576, i64 0}
!597 = !{!598, !598, i64 0}
!598 = !{!"float32", !599, i64 0}
!599 = !{!"0x9f0db6f0", !8, i64 0}
!600 = !{!601, !601, i64 0}
!601 = !{!"float32", !602, i64 0}
!602 = !{!"0xaa5f0610", !8, i64 0}
!603 = !{!604, !604, i64 0}
!604 = !{!"float32", !605, i64 0}
!605 = !{!"0x9f0dda60", !8, i64 0}
!606 = !{!607, !607, i64 0}
!607 = !{!"float32", !608, i64 0}
!608 = !{!"0x9f0dd9c0", !8, i64 0}
!609 = !{!610, !610, i64 0}
!610 = !{!"float32", !611, i64 0}
!611 = !{!"0x9f0dc4c0", !8, i64 0}
!612 = !{!613, !613, i64 0}
!613 = !{!"0x9f46d110.w1.b0", !614, i64 0}
!614 = !{!"0x9f46d110.w2.b0", !615, i64 0}
!615 = !{!"0x9f46d110.w4.b0", !616, i64 0}
!616 = !{!"0x9f46d110.w8.b0", !617, i64 0}
!617 = !{!"0x9f46d110.w16.b0", !618, i64 0}
!618 = !{!"0x9f46d110.w32.b0", !619, i64 0}
!619 = !{!"0x9f46d110.w64.b0", !620, i64 0}
!620 = !{!"0x9f46d110.w128.b0", !621, i64 0}
!621 = !{!"0x9f46d110.w256.b0", !622, i64 0}
!622 = !{!"0x9f46d110.w512.b0", !623, i64 0}
!623 = !{!"0x9f46d110.w1024.b0", !624, i64 0}
!624 = !{!"int32", !625, i64 0}
!625 = !{!"0x9f46d110", !8, i64 0}
!626 = !{!627, !627, i64 0}
!627 = !{!"0x9f46d110.w1.b1", !614, i64 0}
!628 = !{!629, !629, i64 0}
!629 = !{!"0x9f470100.w1.b0", !630, i64 0}
!630 = !{!"0x9f470100.w2.b0", !631, i64 0}
!631 = !{!"0x9f470100.w4.b0", !632, i64 0}
!632 = !{!"0x9f470100.w8.b0", !633, i64 0}
!633 = !{!"0x9f470100.w16.b0", !634, i64 0}
!634 = !{!"0x9f470100.w32.b0", !635, i64 0}
!635 = !{!"0x9f470100.w64.b0", !636, i64 0}
!636 = !{!"0x9f470100.w128.b0", !637, i64 0}
!637 = !{!"0x9f470100.w256.b0", !638, i64 0}
!638 = !{!"0x9f470100.w512.b0", !639, i64 0}
!639 = !{!"0x9f470100.w1024.b0", !640, i64 0}
!640 = !{!"int64", !641, i64 0}
!641 = !{!"0x9f470100", !8, i64 0}
!642 = !{!643, !643, i64 0}
!643 = !{!"0x9f470100.w1.b1", !630, i64 0}
!644 = !{!645, !645, i64 0}
!645 = !{!"0x9f470100.w1.b2", !646, i64 0}
!646 = !{!"0x9f470100.w2.b2", !631, i64 0}
!647 = !{!648, !648, i64 0}
!648 = !{!"0x9f470100.w1.b3", !646, i64 0}
!649 = !{!650, !650, i64 0}
!650 = !{!"0x9f470100.w1.b4", !651, i64 0}
!651 = !{!"0x9f470100.w2.b4", !652, i64 0}
!652 = !{!"0x9f470100.w4.b4", !632, i64 0}
!653 = !{!654, !654, i64 0}
!654 = !{!"0x9f470630.w1.b0", !655, i64 0}
!655 = !{!"0x9f470630.w2.b0", !656, i64 0}
!656 = !{!"0x9f470630.w4.b0", !657, i64 0}
!657 = !{!"0x9f470630.w8.b0", !658, i64 0}
!658 = !{!"0x9f470630.w16.b0", !659, i64 0}
!659 = !{!"0x9f470630.w32.b0", !660, i64 0}
!660 = !{!"0x9f470630.w64.b0", !661, i64 0}
!661 = !{!"0x9f470630.w128.b0", !662, i64 0}
!662 = !{!"0x9f470630.w256.b0", !663, i64 0}
!663 = !{!"0x9f470630.w512.b0", !664, i64 0}
!664 = !{!"0x9f470630.w1024.b0", !665, i64 0}
!665 = !{!"int64", !666, i64 0}
!666 = !{!"0x9f470630", !8, i64 0}
!667 = !{!668, !668, i64 0}
!668 = !{!"0x9f470630.w1.b1", !655, i64 0}
!669 = !{!670, !670, i64 0}
!670 = !{!"0x9f470630.w1.b2", !671, i64 0}
!671 = !{!"0x9f470630.w2.b2", !656, i64 0}
!672 = !{!673, !673, i64 0}
!673 = !{!"0x9f470630.w1.b3", !671, i64 0}
!674 = !{!675, !675, i64 0}
!675 = !{!"0x9f470630.w1.b4", !676, i64 0}
!676 = !{!"0x9f470630.w2.b4", !677, i64 0}
!677 = !{!"0x9f470630.w4.b4", !657, i64 0}
!678 = !{!679, !679, i64 0}
!679 = !{!"0x9f472970.w1.b0", !680, i64 0}
!680 = !{!"0x9f472970.w2.b0", !681, i64 0}
!681 = !{!"0x9f472970.w4.b0", !682, i64 0}
!682 = !{!"0x9f472970.w8.b0", !683, i64 0}
!683 = !{!"0x9f472970.w16.b0", !684, i64 0}
!684 = !{!"0x9f472970.w32.b0", !685, i64 0}
!685 = !{!"0x9f472970.w64.b0", !686, i64 0}
!686 = !{!"0x9f472970.w128.b0", !687, i64 0}
!687 = !{!"0x9f472970.w256.b0", !688, i64 0}
!688 = !{!"0x9f472970.w512.b0", !689, i64 0}
!689 = !{!"0x9f472970.w1024.b0", !690, i64 0}
!690 = !{!"int64", !691, i64 0}
!691 = !{!"0x9f472970", !8, i64 0}
!692 = !{!693, !693, i64 0}
!693 = !{!"0x9f472970.w1.b1", !680, i64 0}
!694 = !{!695, !695, i64 0}
!695 = !{!"0x9f472970.w1.b2", !696, i64 0}
!696 = !{!"0x9f472970.w2.b2", !681, i64 0}
!697 = !{!698, !698, i64 0}
!698 = !{!"0x9f472970.w1.b3", !696, i64 0}
!699 = !{!700, !700, i64 0}
!700 = !{!"0x9f472970.w1.b4", !701, i64 0}
!701 = !{!"0x9f472970.w2.b4", !702, i64 0}
!702 = !{!"0x9f472970.w4.b4", !682, i64 0}
!703 = !{!704, !704, i64 0}
!704 = !{!"0x9f472b70.w1.b0", !705, i64 0}
!705 = !{!"0x9f472b70.w2.b0", !706, i64 0}
!706 = !{!"0x9f472b70.w4.b0", !707, i64 0}
!707 = !{!"0x9f472b70.w8.b0", !708, i64 0}
!708 = !{!"0x9f472b70.w16.b0", !709, i64 0}
!709 = !{!"0x9f472b70.w32.b0", !710, i64 0}
!710 = !{!"0x9f472b70.w64.b0", !711, i64 0}
!711 = !{!"0x9f472b70.w128.b0", !712, i64 0}
!712 = !{!"0x9f472b70.w256.b0", !713, i64 0}
!713 = !{!"0x9f472b70.w512.b0", !714, i64 0}
!714 = !{!"0x9f472b70.w1024.b0", !715, i64 0}
!715 = !{!"int64", !716, i64 0}
!716 = !{!"0x9f472b70", !8, i64 0}
!717 = !{!718, !718, i64 0}
!718 = !{!"0x9f472b70.w1.b1", !705, i64 0}
!719 = !{!720, !720, i64 0}
!720 = !{!"0x9f472b70.w1.b2", !721, i64 0}
!721 = !{!"0x9f472b70.w2.b2", !706, i64 0}
!722 = !{!723, !723, i64 0}
!723 = !{!"0x9f472b70.w1.b3", !721, i64 0}
!724 = !{!725, !725, i64 0}
!725 = !{!"0x9f472b70.w1.b4", !726, i64 0}
!726 = !{!"0x9f472b70.w2.b4", !727, i64 0}
!727 = !{!"0x9f472b70.w4.b4", !707, i64 0}
!728 = !{!729, !729, i64 0}
!729 = !{!"float32", !730, i64 0}
!730 = !{!"0xa8932fd0", !8, i64 0}
!731 = !{!732, !732, i64 0}
!732 = !{!"float32", !733, i64 0}
!733 = !{!"0x9e628330", !8, i64 0}
!734 = !{!735, !735, i64 0}
!735 = !{!"0x9f4673b0.w1.b0", !736, i64 0}
!736 = !{!"0x9f4673b0.w2.b0", !737, i64 0}
!737 = !{!"0x9f4673b0.w4.b0", !738, i64 0}
!738 = !{!"0x9f4673b0.w8.b0", !739, i64 0}
!739 = !{!"0x9f4673b0.w16.b0", !740, i64 0}
!740 = !{!"0x9f4673b0.w32.b0", !741, i64 0}
!741 = !{!"0x9f4673b0.w64.b0", !742, i64 0}
!742 = !{!"0x9f4673b0.w128.b0", !743, i64 0}
!743 = !{!"0x9f4673b0.w256.b0", !744, i64 0}
!744 = !{!"0x9f4673b0.w512.b0", !745, i64 0}
!745 = !{!"0x9f4673b0.w1024.b0", !746, i64 0}
!746 = !{!"int32", !747, i64 0}
!747 = !{!"0x9f4673b0", !8, i64 0}
!748 = !{!749, !749, i64 0}
!749 = !{!"0x9f4673b0.w1.b1", !736, i64 0}
!750 = !{!751, !751, i64 0}
!751 = !{!"0x9f46a3a0.w1.b0", !752, i64 0}
!752 = !{!"0x9f46a3a0.w2.b0", !753, i64 0}
!753 = !{!"0x9f46a3a0.w4.b0", !754, i64 0}
!754 = !{!"0x9f46a3a0.w8.b0", !755, i64 0}
!755 = !{!"0x9f46a3a0.w16.b0", !756, i64 0}
!756 = !{!"0x9f46a3a0.w32.b0", !757, i64 0}
!757 = !{!"0x9f46a3a0.w64.b0", !758, i64 0}
!758 = !{!"0x9f46a3a0.w128.b0", !759, i64 0}
!759 = !{!"0x9f46a3a0.w256.b0", !760, i64 0}
!760 = !{!"0x9f46a3a0.w512.b0", !761, i64 0}
!761 = !{!"0x9f46a3a0.w1024.b0", !762, i64 0}
!762 = !{!"int64", !763, i64 0}
!763 = !{!"0x9f46a3a0", !8, i64 0}
!764 = !{!765, !765, i64 0}
!765 = !{!"0x9f46a3a0.w1.b1", !752, i64 0}
!766 = !{!767, !767, i64 0}
!767 = !{!"0x9f46a3a0.w1.b2", !768, i64 0}
!768 = !{!"0x9f46a3a0.w2.b2", !753, i64 0}
!769 = !{!770, !770, i64 0}
!770 = !{!"0x9f46a3a0.w1.b3", !768, i64 0}
!771 = !{!772, !772, i64 0}
!772 = !{!"0x9f46a3a0.w1.b4", !773, i64 0}
!773 = !{!"0x9f46a3a0.w2.b4", !774, i64 0}
!774 = !{!"0x9f46a3a0.w4.b4", !754, i64 0}
!775 = !{!776, !776, i64 0}
!776 = !{!"0x9f46a8d0.w1.b0", !777, i64 0}
!777 = !{!"0x9f46a8d0.w2.b0", !778, i64 0}
!778 = !{!"0x9f46a8d0.w4.b0", !779, i64 0}
!779 = !{!"0x9f46a8d0.w8.b0", !780, i64 0}
!780 = !{!"0x9f46a8d0.w16.b0", !781, i64 0}
!781 = !{!"0x9f46a8d0.w32.b0", !782, i64 0}
!782 = !{!"0x9f46a8d0.w64.b0", !783, i64 0}
!783 = !{!"0x9f46a8d0.w128.b0", !784, i64 0}
!784 = !{!"0x9f46a8d0.w256.b0", !785, i64 0}
!785 = !{!"0x9f46a8d0.w512.b0", !786, i64 0}
!786 = !{!"0x9f46a8d0.w1024.b0", !787, i64 0}
!787 = !{!"int64", !788, i64 0}
!788 = !{!"0x9f46a8d0", !8, i64 0}
!789 = !{!790, !790, i64 0}
!790 = !{!"0x9f46a8d0.w1.b1", !777, i64 0}
!791 = !{!792, !792, i64 0}
!792 = !{!"0x9f46a8d0.w1.b2", !793, i64 0}
!793 = !{!"0x9f46a8d0.w2.b2", !778, i64 0}
!794 = !{!795, !795, i64 0}
!795 = !{!"0x9f46a8d0.w1.b3", !793, i64 0}
!796 = !{!797, !797, i64 0}
!797 = !{!"0x9f46a8d0.w1.b4", !798, i64 0}
!798 = !{!"0x9f46a8d0.w2.b4", !799, i64 0}
!799 = !{!"0x9f46a8d0.w4.b4", !779, i64 0}
!800 = !{!801, !801, i64 0}
!801 = !{!"0x9f46cc10.w1.b0", !802, i64 0}
!802 = !{!"0x9f46cc10.w2.b0", !803, i64 0}
!803 = !{!"0x9f46cc10.w4.b0", !804, i64 0}
!804 = !{!"0x9f46cc10.w8.b0", !805, i64 0}
!805 = !{!"0x9f46cc10.w16.b0", !806, i64 0}
!806 = !{!"0x9f46cc10.w32.b0", !807, i64 0}
!807 = !{!"0x9f46cc10.w64.b0", !808, i64 0}
!808 = !{!"0x9f46cc10.w128.b0", !809, i64 0}
!809 = !{!"0x9f46cc10.w256.b0", !810, i64 0}
!810 = !{!"0x9f46cc10.w512.b0", !811, i64 0}
!811 = !{!"0x9f46cc10.w1024.b0", !812, i64 0}
!812 = !{!"int64", !813, i64 0}
!813 = !{!"0x9f46cc10", !8, i64 0}
!814 = !{!815, !815, i64 0}
!815 = !{!"0x9f46cc10.w1.b1", !802, i64 0}
!816 = !{!817, !817, i64 0}
!817 = !{!"0x9f46cc10.w1.b2", !818, i64 0}
!818 = !{!"0x9f46cc10.w2.b2", !803, i64 0}
!819 = !{!820, !820, i64 0}
!820 = !{!"0x9f46cc10.w1.b3", !818, i64 0}
!821 = !{!822, !822, i64 0}
!822 = !{!"0x9f46cc10.w1.b4", !823, i64 0}
!823 = !{!"0x9f46cc10.w2.b4", !824, i64 0}
!824 = !{!"0x9f46cc10.w4.b4", !804, i64 0}
!825 = !{!826, !826, i64 0}
!826 = !{!"0x9f46ce10.w1.b0", !827, i64 0}
!827 = !{!"0x9f46ce10.w2.b0", !828, i64 0}
!828 = !{!"0x9f46ce10.w4.b0", !829, i64 0}
!829 = !{!"0x9f46ce10.w8.b0", !830, i64 0}
!830 = !{!"0x9f46ce10.w16.b0", !831, i64 0}
!831 = !{!"0x9f46ce10.w32.b0", !832, i64 0}
!832 = !{!"0x9f46ce10.w64.b0", !833, i64 0}
!833 = !{!"0x9f46ce10.w128.b0", !834, i64 0}
!834 = !{!"0x9f46ce10.w256.b0", !835, i64 0}
!835 = !{!"0x9f46ce10.w512.b0", !836, i64 0}
!836 = !{!"0x9f46ce10.w1024.b0", !837, i64 0}
!837 = !{!"int64", !838, i64 0}
!838 = !{!"0x9f46ce10", !8, i64 0}
!839 = !{!840, !840, i64 0}
!840 = !{!"0x9f46ce10.w1.b1", !827, i64 0}
!841 = !{!842, !842, i64 0}
!842 = !{!"0x9f46ce10.w1.b2", !843, i64 0}
!843 = !{!"0x9f46ce10.w2.b2", !828, i64 0}
!844 = !{!845, !845, i64 0}
!845 = !{!"0x9f46ce10.w1.b3", !843, i64 0}
!846 = !{!847, !847, i64 0}
!847 = !{!"0x9f46ce10.w1.b4", !848, i64 0}
!848 = !{!"0x9f46ce10.w2.b4", !849, i64 0}
!849 = !{!"0x9f46ce10.w4.b4", !829, i64 0}
!850 = !{!851, !851, i64 0}
!851 = !{!"float32", !852, i64 0}
!852 = !{!"0x903abf40", !8, i64 0}
!853 = !{!854, !854, i64 0}
!854 = !{!"float32", !855, i64 0}
!855 = !{!"0xa8c3fc00", !8, i64 0}
!856 = !{!857, !857, i64 0}
!857 = !{!"0x9f459bd0.w1.b0", !858, i64 0}
!858 = !{!"0x9f459bd0.w2.b0", !859, i64 0}
!859 = !{!"0x9f459bd0.w4.b0", !860, i64 0}
!860 = !{!"0x9f459bd0.w8.b0", !861, i64 0}
!861 = !{!"0x9f459bd0.w16.b0", !862, i64 0}
!862 = !{!"0x9f459bd0.w32.b0", !863, i64 0}
!863 = !{!"0x9f459bd0.w64.b0", !864, i64 0}
!864 = !{!"0x9f459bd0.w128.b0", !865, i64 0}
!865 = !{!"0x9f459bd0.w256.b0", !866, i64 0}
!866 = !{!"0x9f459bd0.w512.b0", !867, i64 0}
!867 = !{!"0x9f459bd0.w1024.b0", !868, i64 0}
!868 = !{!"int32", !869, i64 0}
!869 = !{!"0x9f459bd0", !8, i64 0}
!870 = !{!871, !871, i64 0}
!871 = !{!"0x9f459bd0.w1.b1", !858, i64 0}
!872 = !{!873, !873, i64 0}
!873 = !{!"0x9f4650c0.w1.b0", !874, i64 0}
!874 = !{!"0x9f4650c0.w2.b0", !875, i64 0}
!875 = !{!"0x9f4650c0.w4.b0", !876, i64 0}
!876 = !{!"0x9f4650c0.w8.b0", !877, i64 0}
!877 = !{!"0x9f4650c0.w16.b0", !878, i64 0}
!878 = !{!"0x9f4650c0.w32.b0", !879, i64 0}
!879 = !{!"0x9f4650c0.w64.b0", !880, i64 0}
!880 = !{!"0x9f4650c0.w128.b0", !881, i64 0}
!881 = !{!"0x9f4650c0.w256.b0", !882, i64 0}
!882 = !{!"0x9f4650c0.w512.b0", !883, i64 0}
!883 = !{!"0x9f4650c0.w1024.b0", !884, i64 0}
!884 = !{!"int64", !885, i64 0}
!885 = !{!"0x9f4650c0", !8, i64 0}
!886 = !{!887, !887, i64 0}
!887 = !{!"0x9f4650c0.w1.b1", !874, i64 0}
!888 = !{!889, !889, i64 0}
!889 = !{!"0x9f4650c0.w1.b2", !890, i64 0}
!890 = !{!"0x9f4650c0.w2.b2", !875, i64 0}
!891 = !{!892, !892, i64 0}
!892 = !{!"0x9f4650c0.w1.b3", !890, i64 0}
!893 = !{!894, !894, i64 0}
!894 = !{!"0x9f4650c0.w1.b4", !895, i64 0}
!895 = !{!"0x9f4650c0.w2.b4", !896, i64 0}
!896 = !{!"0x9f4650c0.w4.b4", !876, i64 0}
!897 = !{!898, !898, i64 0}
!898 = !{!"0x9f465200.w1.b0", !899, i64 0}
!899 = !{!"0x9f465200.w2.b0", !900, i64 0}
!900 = !{!"0x9f465200.w4.b0", !901, i64 0}
!901 = !{!"0x9f465200.w8.b0", !902, i64 0}
!902 = !{!"0x9f465200.w16.b0", !903, i64 0}
!903 = !{!"0x9f465200.w32.b0", !904, i64 0}
!904 = !{!"0x9f465200.w64.b0", !905, i64 0}
!905 = !{!"0x9f465200.w128.b0", !906, i64 0}
!906 = !{!"0x9f465200.w256.b0", !907, i64 0}
!907 = !{!"0x9f465200.w512.b0", !908, i64 0}
!908 = !{!"0x9f465200.w1024.b0", !909, i64 0}
!909 = !{!"int64", !910, i64 0}
!910 = !{!"0x9f465200", !8, i64 0}
!911 = !{!912, !912, i64 0}
!912 = !{!"0x9f465200.w1.b1", !899, i64 0}
!913 = !{!914, !914, i64 0}
!914 = !{!"0x9f465200.w1.b2", !915, i64 0}
!915 = !{!"0x9f465200.w2.b2", !900, i64 0}
!916 = !{!917, !917, i64 0}
!917 = !{!"0x9f465200.w1.b3", !915, i64 0}
!918 = !{!919, !919, i64 0}
!919 = !{!"0x9f465200.w1.b4", !920, i64 0}
!920 = !{!"0x9f465200.w2.b4", !921, i64 0}
!921 = !{!"0x9f465200.w4.b4", !901, i64 0}
!922 = !{!923, !923, i64 0}
!923 = !{!"0x9f466eb0.w1.b0", !924, i64 0}
!924 = !{!"0x9f466eb0.w2.b0", !925, i64 0}
!925 = !{!"0x9f466eb0.w4.b0", !926, i64 0}
!926 = !{!"0x9f466eb0.w8.b0", !927, i64 0}
!927 = !{!"0x9f466eb0.w16.b0", !928, i64 0}
!928 = !{!"0x9f466eb0.w32.b0", !929, i64 0}
!929 = !{!"0x9f466eb0.w64.b0", !930, i64 0}
!930 = !{!"0x9f466eb0.w128.b0", !931, i64 0}
!931 = !{!"0x9f466eb0.w256.b0", !932, i64 0}
!932 = !{!"0x9f466eb0.w512.b0", !933, i64 0}
!933 = !{!"0x9f466eb0.w1024.b0", !934, i64 0}
!934 = !{!"int64", !935, i64 0}
!935 = !{!"0x9f466eb0", !8, i64 0}
!936 = !{!937, !937, i64 0}
!937 = !{!"0x9f466eb0.w1.b1", !924, i64 0}
!938 = !{!939, !939, i64 0}
!939 = !{!"0x9f466eb0.w1.b2", !940, i64 0}
!940 = !{!"0x9f466eb0.w2.b2", !925, i64 0}
!941 = !{!942, !942, i64 0}
!942 = !{!"0x9f466eb0.w1.b3", !940, i64 0}
!943 = !{!944, !944, i64 0}
!944 = !{!"0x9f466eb0.w1.b4", !945, i64 0}
!945 = !{!"0x9f466eb0.w2.b4", !946, i64 0}
!946 = !{!"0x9f466eb0.w4.b4", !926, i64 0}
!947 = !{!948, !948, i64 0}
!948 = !{!"0x9f4670b0.w1.b0", !949, i64 0}
!949 = !{!"0x9f4670b0.w2.b0", !950, i64 0}
!950 = !{!"0x9f4670b0.w4.b0", !951, i64 0}
!951 = !{!"0x9f4670b0.w8.b0", !952, i64 0}
!952 = !{!"0x9f4670b0.w16.b0", !953, i64 0}
!953 = !{!"0x9f4670b0.w32.b0", !954, i64 0}
!954 = !{!"0x9f4670b0.w64.b0", !955, i64 0}
!955 = !{!"0x9f4670b0.w128.b0", !956, i64 0}
!956 = !{!"0x9f4670b0.w256.b0", !957, i64 0}
!957 = !{!"0x9f4670b0.w512.b0", !958, i64 0}
!958 = !{!"0x9f4670b0.w1024.b0", !959, i64 0}
!959 = !{!"int64", !960, i64 0}
!960 = !{!"0x9f4670b0", !8, i64 0}
!961 = !{!962, !962, i64 0}
!962 = !{!"0x9f4670b0.w1.b1", !949, i64 0}
!963 = !{!964, !964, i64 0}
!964 = !{!"0x9f4670b0.w1.b2", !965, i64 0}
!965 = !{!"0x9f4670b0.w2.b2", !950, i64 0}
!966 = !{!967, !967, i64 0}
!967 = !{!"0x9f4670b0.w1.b3", !965, i64 0}
!968 = !{!969, !969, i64 0}
!969 = !{!"0x9f4670b0.w1.b4", !970, i64 0}
!970 = !{!"0x9f4670b0.w2.b4", !971, i64 0}
!971 = !{!"0x9f4670b0.w4.b4", !951, i64 0}
!972 = !{!973, !973, i64 0}
!973 = !{!"float32", !974, i64 0}
!974 = !{!"0xaa5e4670", !8, i64 0}
!975 = !{!976, !976, i64 0}
!976 = !{!"float32", !977, i64 0}
!977 = !{!"0xaa5e4fd0", !8, i64 0}
!978 = !{!979, !979, i64 0}
!979 = !{!"0x9f44e1d0.w1.b0", !980, i64 0}
!980 = !{!"0x9f44e1d0.w2.b0", !981, i64 0}
!981 = !{!"0x9f44e1d0.w4.b0", !982, i64 0}
!982 = !{!"0x9f44e1d0.w8.b0", !983, i64 0}
!983 = !{!"0x9f44e1d0.w16.b0", !984, i64 0}
!984 = !{!"0x9f44e1d0.w32.b0", !985, i64 0}
!985 = !{!"0x9f44e1d0.w64.b0", !986, i64 0}
!986 = !{!"0x9f44e1d0.w128.b0", !987, i64 0}
!987 = !{!"0x9f44e1d0.w256.b0", !988, i64 0}
!988 = !{!"0x9f44e1d0.w512.b0", !989, i64 0}
!989 = !{!"0x9f44e1d0.w1024.b0", !990, i64 0}
!990 = !{!"int32", !991, i64 0}
!991 = !{!"0x9f44e1d0", !8, i64 0}
!992 = !{!993, !993, i64 0}
!993 = !{!"0x9f44e1d0.w1.b2", !994, i64 0}
!994 = !{!"0x9f44e1d0.w2.b2", !981, i64 0}
!995 = !{!996, !996, i64 0}
!996 = !{!"0x9f44e1d0.w1.b3", !994, i64 0}
!997 = !{!998, !998, i64 0}
!998 = !{!"0x9f44e1d0.w1.b1", !980, i64 0}
!999 = !{!1000, !1000, i64 0}
!1000 = !{!"0x9f459b20.w1.b0", !1001, i64 0}
!1001 = !{!"0x9f459b20.w2.b0", !1002, i64 0}
!1002 = !{!"0x9f459b20.w4.b0", !1003, i64 0}
!1003 = !{!"0x9f459b20.w8.b0", !1004, i64 0}
!1004 = !{!"0x9f459b20.w16.b0", !1005, i64 0}
!1005 = !{!"0x9f459b20.w32.b0", !1006, i64 0}
!1006 = !{!"0x9f459b20.w64.b0", !1007, i64 0}
!1007 = !{!"0x9f459b20.w128.b0", !1008, i64 0}
!1008 = !{!"0x9f459b20.w256.b0", !1009, i64 0}
!1009 = !{!"0x9f459b20.w512.b0", !1010, i64 0}
!1010 = !{!"0x9f459b20.w1024.b0", !1011, i64 0}
!1011 = !{!"int64", !1012, i64 0}
!1012 = !{!"0x9f459b20", !8, i64 0}
!1013 = !{!1014, !1014, i64 0}
!1014 = !{!"0x9f459b20.w1.b1", !1001, i64 0}
!1015 = !{!1016, !1016, i64 0}
!1016 = !{!"0x9f459b20.w1.b2", !1017, i64 0}
!1017 = !{!"0x9f459b20.w2.b2", !1002, i64 0}
!1018 = !{!1019, !1019, i64 0}
!1019 = !{!"0x9f459b20.w1.b3", !1017, i64 0}
!1020 = !{!1021, !1021, i64 0}
!1021 = !{!"0x9f459b20.w1.b4", !1022, i64 0}
!1022 = !{!"0x9f459b20.w2.b4", !1023, i64 0}
!1023 = !{!"0x9f459b20.w4.b4", !1003, i64 0}
!1024 = !{!1025, !1025, i64 0}
!1025 = !{!"0x9f459d20.w1.b0", !1026, i64 0}
!1026 = !{!"0x9f459d20.w2.b0", !1027, i64 0}
!1027 = !{!"0x9f459d20.w4.b0", !1028, i64 0}
!1028 = !{!"0x9f459d20.w8.b0", !1029, i64 0}
!1029 = !{!"0x9f459d20.w16.b0", !1030, i64 0}
!1030 = !{!"0x9f459d20.w32.b0", !1031, i64 0}
!1031 = !{!"0x9f459d20.w64.b0", !1032, i64 0}
!1032 = !{!"0x9f459d20.w128.b0", !1033, i64 0}
!1033 = !{!"0x9f459d20.w256.b0", !1034, i64 0}
!1034 = !{!"0x9f459d20.w512.b0", !1035, i64 0}
!1035 = !{!"0x9f459d20.w1024.b0", !1036, i64 0}
!1036 = !{!"int64", !1037, i64 0}
!1037 = !{!"0x9f459d20", !8, i64 0}
!1038 = !{!1039, !1039, i64 0}
!1039 = !{!"0x9f459d20.w1.b1", !1026, i64 0}
!1040 = !{!1041, !1041, i64 0}
!1041 = !{!"0x9f459d20.w1.b2", !1042, i64 0}
!1042 = !{!"0x9f459d20.w2.b2", !1027, i64 0}
!1043 = !{!1044, !1044, i64 0}
!1044 = !{!"0x9f459d20.w1.b3", !1042, i64 0}
!1045 = !{!1046, !1046, i64 0}
!1046 = !{!"0x9f459d20.w1.b4", !1047, i64 0}
!1047 = !{!"0x9f459d20.w2.b4", !1048, i64 0}
!1048 = !{!"0x9f459d20.w4.b4", !1028, i64 0}
!1049 = !{!1050, !1050, i64 0}
!1050 = !{!"0x9f45c060.w1.b0", !1051, i64 0}
!1051 = !{!"0x9f45c060.w2.b0", !1052, i64 0}
!1052 = !{!"0x9f45c060.w4.b0", !1053, i64 0}
!1053 = !{!"0x9f45c060.w8.b0", !1054, i64 0}
!1054 = !{!"0x9f45c060.w16.b0", !1055, i64 0}
!1055 = !{!"0x9f45c060.w32.b0", !1056, i64 0}
!1056 = !{!"0x9f45c060.w64.b0", !1057, i64 0}
!1057 = !{!"0x9f45c060.w128.b0", !1058, i64 0}
!1058 = !{!"0x9f45c060.w256.b0", !1059, i64 0}
!1059 = !{!"0x9f45c060.w512.b0", !1060, i64 0}
!1060 = !{!"0x9f45c060.w1024.b0", !1061, i64 0}
!1061 = !{!"int64", !1062, i64 0}
!1062 = !{!"0x9f45c060", !8, i64 0}
!1063 = !{!1064, !1064, i64 0}
!1064 = !{!"0x9f45c060.w1.b1", !1051, i64 0}
!1065 = !{!1066, !1066, i64 0}
!1066 = !{!"0x9f45c060.w1.b2", !1067, i64 0}
!1067 = !{!"0x9f45c060.w2.b2", !1052, i64 0}
!1068 = !{!1069, !1069, i64 0}
!1069 = !{!"0x9f45c060.w1.b3", !1067, i64 0}
!1070 = !{!1071, !1071, i64 0}
!1071 = !{!"0x9f45c060.w1.b4", !1072, i64 0}
!1072 = !{!"0x9f45c060.w2.b4", !1073, i64 0}
!1073 = !{!"0x9f45c060.w4.b4", !1053, i64 0}
!1074 = !{!1075, !1075, i64 0}
!1075 = !{!"0x9f45c060.w1.b5", !1072, i64 0}
!1076 = !{!1077, !1077, i64 0}
!1077 = !{!"0x9f45c260.w1.b0", !1078, i64 0}
!1078 = !{!"0x9f45c260.w2.b0", !1079, i64 0}
!1079 = !{!"0x9f45c260.w4.b0", !1080, i64 0}
!1080 = !{!"0x9f45c260.w8.b0", !1081, i64 0}
!1081 = !{!"0x9f45c260.w16.b0", !1082, i64 0}
!1082 = !{!"0x9f45c260.w32.b0", !1083, i64 0}
!1083 = !{!"0x9f45c260.w64.b0", !1084, i64 0}
!1084 = !{!"0x9f45c260.w128.b0", !1085, i64 0}
!1085 = !{!"0x9f45c260.w256.b0", !1086, i64 0}
!1086 = !{!"0x9f45c260.w512.b0", !1087, i64 0}
!1087 = !{!"0x9f45c260.w1024.b0", !1088, i64 0}
!1088 = !{!"int64", !1089, i64 0}
!1089 = !{!"0x9f45c260", !8, i64 0}
!1090 = !{!1091, !1091, i64 0}
!1091 = !{!"0x9f45c260.w1.b1", !1078, i64 0}
!1092 = !{!1093, !1093, i64 0}
!1093 = !{!"0x9f45c260.w1.b2", !1094, i64 0}
!1094 = !{!"0x9f45c260.w2.b2", !1079, i64 0}
!1095 = !{!1096, !1096, i64 0}
!1096 = !{!"0x9f45c260.w1.b3", !1094, i64 0}
!1097 = !{!1098, !1098, i64 0}
!1098 = !{!"0x9f45c260.w1.b4", !1099, i64 0}
!1099 = !{!"0x9f45c260.w2.b4", !1100, i64 0}
!1100 = !{!"0x9f45c260.w4.b4", !1080, i64 0}
!1101 = !{!1102, !1102, i64 0}
!1102 = !{!"0x9f45c260.w1.b5", !1099, i64 0}
!1103 = !{!1104, !1104, i64 0}
!1104 = !{!"0x9f45e100.w1.b0", !1105, i64 0}
!1105 = !{!"0x9f45e100.w2.b0", !1106, i64 0}
!1106 = !{!"0x9f45e100.w4.b0", !1107, i64 0}
!1107 = !{!"0x9f45e100.w8.b0", !1108, i64 0}
!1108 = !{!"0x9f45e100.w16.b0", !1109, i64 0}
!1109 = !{!"0x9f45e100.w32.b0", !1110, i64 0}
!1110 = !{!"0x9f45e100.w64.b0", !1111, i64 0}
!1111 = !{!"0x9f45e100.w128.b0", !1112, i64 0}
!1112 = !{!"0x9f45e100.w256.b0", !1113, i64 0}
!1113 = !{!"0x9f45e100.w512.b0", !1114, i64 0}
!1114 = !{!"0x9f45e100.w1024.b0", !1115, i64 0}
!1115 = !{!"int64", !1116, i64 0}
!1116 = !{!"0x9f45e100", !8, i64 0}
!1117 = !{!1118, !1118, i64 0}
!1118 = !{!"0x9f45e100.w1.b1", !1105, i64 0}
!1119 = !{!1120, !1120, i64 0}
!1120 = !{!"0x9f45e100.w1.b2", !1121, i64 0}
!1121 = !{!"0x9f45e100.w2.b2", !1106, i64 0}
!1122 = !{!1123, !1123, i64 0}
!1123 = !{!"0x9f45e100.w1.b3", !1121, i64 0}
!1124 = !{!1125, !1125, i64 0}
!1125 = !{!"0x9f45e100.w1.b4", !1126, i64 0}
!1126 = !{!"0x9f45e100.w2.b4", !1127, i64 0}
!1127 = !{!"0x9f45e100.w4.b4", !1107, i64 0}
!1128 = !{!1129, !1129, i64 0}
!1129 = !{!"0x9f45c560.w1.b0", !1130, i64 0}
!1130 = !{!"0x9f45c560.w2.b0", !1131, i64 0}
!1131 = !{!"0x9f45c560.w4.b0", !1132, i64 0}
!1132 = !{!"0x9f45c560.w8.b0", !1133, i64 0}
!1133 = !{!"0x9f45c560.w16.b0", !1134, i64 0}
!1134 = !{!"0x9f45c560.w32.b0", !1135, i64 0}
!1135 = !{!"0x9f45c560.w64.b0", !1136, i64 0}
!1136 = !{!"0x9f45c560.w128.b0", !1137, i64 0}
!1137 = !{!"0x9f45c560.w256.b0", !1138, i64 0}
!1138 = !{!"0x9f45c560.w512.b0", !1139, i64 0}
!1139 = !{!"0x9f45c560.w1024.b0", !1140, i64 0}
!1140 = !{!"int64", !1141, i64 0}
!1141 = !{!"0x9f45c560", !8, i64 0}
!1142 = !{!1143, !1143, i64 0}
!1143 = !{!"0x9f45c560.w1.b1", !1130, i64 0}
!1144 = !{!1145, !1145, i64 0}
!1145 = !{!"0x9f45c560.w1.b2", !1146, i64 0}
!1146 = !{!"0x9f45c560.w2.b2", !1131, i64 0}
!1147 = !{!1148, !1148, i64 0}
!1148 = !{!"0x9f45c560.w1.b3", !1146, i64 0}
!1149 = !{!1150, !1150, i64 0}
!1150 = !{!"0x9f45c560.w1.b4", !1151, i64 0}
!1151 = !{!"0x9f45c560.w2.b4", !1152, i64 0}
!1152 = !{!"0x9f45c560.w4.b4", !1132, i64 0}
!1153 = !{!1154, !1154, i64 0}
!1154 = !{!"0x9f4606c0.w1.b0", !1155, i64 0}
!1155 = !{!"0x9f4606c0.w2.b0", !1156, i64 0}
!1156 = !{!"0x9f4606c0.w4.b0", !1157, i64 0}
!1157 = !{!"0x9f4606c0.w8.b0", !1158, i64 0}
!1158 = !{!"0x9f4606c0.w16.b0", !1159, i64 0}
!1159 = !{!"0x9f4606c0.w32.b0", !1160, i64 0}
!1160 = !{!"0x9f4606c0.w64.b0", !1161, i64 0}
!1161 = !{!"0x9f4606c0.w128.b0", !1162, i64 0}
!1162 = !{!"0x9f4606c0.w256.b0", !1163, i64 0}
!1163 = !{!"0x9f4606c0.w512.b0", !1164, i64 0}
!1164 = !{!"0x9f4606c0.w1024.b0", !1165, i64 0}
!1165 = !{!"int64", !1166, i64 0}
!1166 = !{!"0x9f4606c0", !8, i64 0}
!1167 = !{!1168, !1168, i64 0}
!1168 = !{!"0x9f4606c0.w1.b1", !1155, i64 0}
!1169 = !{!1170, !1170, i64 0}
!1170 = !{!"0x9f4606c0.w1.b2", !1171, i64 0}
!1171 = !{!"0x9f4606c0.w2.b2", !1156, i64 0}
!1172 = !{!1173, !1173, i64 0}
!1173 = !{!"0x9f4606c0.w1.b3", !1171, i64 0}
!1174 = !{!1175, !1175, i64 0}
!1175 = !{!"0x9f4606c0.w1.b4", !1176, i64 0}
!1176 = !{!"0x9f4606c0.w2.b4", !1177, i64 0}
!1177 = !{!"0x9f4606c0.w4.b4", !1157, i64 0}
!1178 = !{!1179, !1179, i64 0}
!1179 = !{!"0x9f4615d0.w1.b0", !1180, i64 0}
!1180 = !{!"0x9f4615d0.w2.b0", !1181, i64 0}
!1181 = !{!"0x9f4615d0.w4.b0", !1182, i64 0}
!1182 = !{!"0x9f4615d0.w8.b0", !1183, i64 0}
!1183 = !{!"0x9f4615d0.w16.b0", !1184, i64 0}
!1184 = !{!"0x9f4615d0.w32.b0", !1185, i64 0}
!1185 = !{!"0x9f4615d0.w64.b0", !1186, i64 0}
!1186 = !{!"0x9f4615d0.w128.b0", !1187, i64 0}
!1187 = !{!"0x9f4615d0.w256.b0", !1188, i64 0}
!1188 = !{!"0x9f4615d0.w512.b0", !1189, i64 0}
!1189 = !{!"0x9f4615d0.w1024.b0", !1190, i64 0}
!1190 = !{!"int64", !1191, i64 0}
!1191 = !{!"0x9f4615d0", !8, i64 0}
!1192 = !{!1193, !1193, i64 0}
!1193 = !{!"0x9f4615d0.w1.b1", !1180, i64 0}
!1194 = !{!1195, !1195, i64 0}
!1195 = !{!"0x9f4615d0.w1.b2", !1196, i64 0}
!1196 = !{!"0x9f4615d0.w2.b2", !1181, i64 0}
!1197 = !{!1198, !1198, i64 0}
!1198 = !{!"0x9f4615d0.w1.b3", !1196, i64 0}
!1199 = !{!1200, !1200, i64 0}
!1200 = !{!"0x9f4615d0.w1.b4", !1201, i64 0}
!1201 = !{!"0x9f4615d0.w2.b4", !1202, i64 0}
!1202 = !{!"0x9f4615d0.w4.b4", !1182, i64 0}
!1203 = !{!1204, !1204, i64 0}
!1204 = !{!"float32", !1205, i64 0}
!1205 = !{!"0x9f0b4450", !8, i64 0}
!1206 = !{!1207, !1207, i64 0}
!1207 = !{!"float32", !1208, i64 0}
!1208 = !{!"0x9f0b3ef0", !8, i64 0}
!1209 = !{!1210, !1210, i64 0}
!1210 = !{!"float32", !1211, i64 0}
!1211 = !{!"0x9f0b4330", !8, i64 0}
!1212 = !{!1213, !1213, i64 0}
!1213 = !{!"float32", !1214, i64 0}
!1214 = !{!"0xab24ee20", !8, i64 0}
!1215 = !{!1216, !1216, i64 0}
!1216 = !{!"float32", !1217, i64 0}
!1217 = !{!"0x9f0b42a0", !8, i64 0}
!1218 = !{!1219, !1219, i64 0}
!1219 = !{!"0xab24ed30.w8.b0", !1220, i64 0}
!1220 = !{!"0xab24ed30.w16.b0", !1221, i64 0}
!1221 = !{!"0xab24ed30.w32.b0", !1222, i64 0}
!1222 = !{!"0xab24ed30.w64.b0", !1223, i64 0}
!1223 = !{!"0xab24ed30.w128.b0", !1224, i64 0}
!1224 = !{!"0xab24ed30.w256.b0", !1225, i64 0}
!1225 = !{!"0xab24ed30.w512.b0", !1226, i64 0}
!1226 = !{!"0xab24ed30.w1024.b0", !1227, i64 0}
!1227 = !{!"float32", !1228, i64 0}
!1228 = !{!"0xab24ed30", !8, i64 0}
!1229 = !{!1230, !1230, i64 0}
!1230 = !{!"0xab24ed30.w8.b8", !1220, i64 0}
!1231 = !{!1232, !1232, i64 0}
!1232 = !{!"0xab24ed30.w8.b16", !1233, i64 0}
!1233 = !{!"0xab24ed30.w16.b16", !1221, i64 0}
!1234 = !{!1235, !1235, i64 0}
!1235 = !{!"0xab24ed30.w8.b24", !1233, i64 0}
!1236 = !{!1237, !1237, i64 0}
!1237 = !{!"0xab24ed30.w8.b32", !1238, i64 0}
!1238 = !{!"0xab24ed30.w16.b32", !1239, i64 0}
!1239 = !{!"0xab24ed30.w32.b32", !1222, i64 0}
!1240 = !{!1241, !1241, i64 0}
!1241 = !{!"0xab24ed30.w8.b40", !1238, i64 0}
!1242 = !{!1243, !1243, i64 0}
!1243 = !{!"0xab24ed30.w8.b48", !1244, i64 0}
!1244 = !{!"0xab24ed30.w16.b48", !1239, i64 0}
!1245 = !{!1246, !1246, i64 0}
!1246 = !{!"0xab24ed30.w8.b56", !1244, i64 0}
!1247 = !{!1248, !1248, i64 0}
!1248 = !{!"0xab24ed30.w8.b64", !1249, i64 0}
!1249 = !{!"0xab24ed30.w16.b64", !1250, i64 0}
!1250 = !{!"0xab24ed30.w32.b64", !1251, i64 0}
!1251 = !{!"0xab24ed30.w64.b64", !1223, i64 0}
!1252 = !{!1253, !1253, i64 0}
!1253 = !{!"0xab24ed30.w8.b72", !1249, i64 0}
!1254 = !{!1255, !1255, i64 0}
!1255 = !{!"0xab24ed30.w8.b80", !1256, i64 0}
!1256 = !{!"0xab24ed30.w16.b80", !1250, i64 0}
!1257 = !{!1258, !1258, i64 0}
!1258 = !{!"0xab24ed30.w8.b88", !1256, i64 0}
!1259 = !{!1260, !1260, i64 0}
!1260 = !{!"0xab24ed30.w8.b96", !1261, i64 0}
!1261 = !{!"0xab24ed30.w16.b96", !1262, i64 0}
!1262 = !{!"0xab24ed30.w32.b96", !1251, i64 0}
!1263 = !{!1264, !1264, i64 0}
!1264 = !{!"0xab24ed30.w8.b104", !1261, i64 0}
!1265 = !{!1266, !1266, i64 0}
!1266 = !{!"float32", !1267, i64 0}
!1267 = !{!"0x9f0b43c0", !8, i64 0}
!1268 = !{!1269, !1269, i64 0}
!1269 = !{!"0x95494260.w1.b0", !1270, i64 0}
!1270 = !{!"0x95494260.w2.b0", !1271, i64 0}
!1271 = !{!"0x95494260.w4.b0", !1272, i64 0}
!1272 = !{!"0x95494260.w8.b0", !1273, i64 0}
!1273 = !{!"0x95494260.w16.b0", !1274, i64 0}
!1274 = !{!"0x95494260.w32.b0", !1275, i64 0}
!1275 = !{!"0x95494260.w64.b0", !1276, i64 0}
!1276 = !{!"0x95494260.w128.b0", !1277, i64 0}
!1277 = !{!"0x95494260.w256.b0", !1278, i64 0}
!1278 = !{!"0x95494260.w512.b0", !1279, i64 0}
!1279 = !{!"0x95494260.w1024.b0", !1280, i64 0}
!1280 = !{!"int32", !1281, i64 0}
!1281 = !{!"0x95494260", !8, i64 0}
!1282 = !{!1283, !1283, i64 0}
!1283 = !{!"0x95494260.w1.b2", !1284, i64 0}
!1284 = !{!"0x95494260.w2.b2", !1271, i64 0}
!1285 = !{!1286, !1286, i64 0}
!1286 = !{!"0x95494260.w1.b3", !1284, i64 0}
!1287 = !{!1288, !1288, i64 0}
!1288 = !{!"0x95494260.w1.b4", !1289, i64 0}
!1289 = !{!"0x95494260.w2.b4", !1290, i64 0}
!1290 = !{!"0x95494260.w4.b4", !1272, i64 0}
!1291 = !{!1292, !1292, i64 0}
!1292 = !{!"0x95494260.w1.b1", !1270, i64 0}
!1293 = !{!1294, !1294, i64 0}
!1294 = !{!"0x954a0070.w1.b0", !1295, i64 0}
!1295 = !{!"0x954a0070.w2.b0", !1296, i64 0}
!1296 = !{!"0x954a0070.w4.b0", !1297, i64 0}
!1297 = !{!"0x954a0070.w8.b0", !1298, i64 0}
!1298 = !{!"0x954a0070.w16.b0", !1299, i64 0}
!1299 = !{!"0x954a0070.w32.b0", !1300, i64 0}
!1300 = !{!"0x954a0070.w64.b0", !1301, i64 0}
!1301 = !{!"0x954a0070.w128.b0", !1302, i64 0}
!1302 = !{!"0x954a0070.w256.b0", !1303, i64 0}
!1303 = !{!"0x954a0070.w512.b0", !1304, i64 0}
!1304 = !{!"0x954a0070.w1024.b0", !1305, i64 0}
!1305 = !{!"int64", !1306, i64 0}
!1306 = !{!"0x954a0070", !8, i64 0}
!1307 = !{!1308, !1308, i64 0}
!1308 = !{!"0x954a0070.w1.b1", !1295, i64 0}
!1309 = !{!1310, !1310, i64 0}
!1310 = !{!"0x954a0070.w1.b2", !1311, i64 0}
!1311 = !{!"0x954a0070.w2.b2", !1296, i64 0}
!1312 = !{!1313, !1313, i64 0}
!1313 = !{!"0x954a0070.w1.b3", !1311, i64 0}
!1314 = !{!1315, !1315, i64 0}
!1315 = !{!"0x954a0070.w1.b4", !1316, i64 0}
!1316 = !{!"0x954a0070.w2.b4", !1317, i64 0}
!1317 = !{!"0x954a0070.w4.b4", !1297, i64 0}
!1318 = !{!1319, !1319, i64 0}
!1319 = !{!"0x954a05a0.w1.b0", !1320, i64 0}
!1320 = !{!"0x954a05a0.w2.b0", !1321, i64 0}
!1321 = !{!"0x954a05a0.w4.b0", !1322, i64 0}
!1322 = !{!"0x954a05a0.w8.b0", !1323, i64 0}
!1323 = !{!"0x954a05a0.w16.b0", !1324, i64 0}
!1324 = !{!"0x954a05a0.w32.b0", !1325, i64 0}
!1325 = !{!"0x954a05a0.w64.b0", !1326, i64 0}
!1326 = !{!"0x954a05a0.w128.b0", !1327, i64 0}
!1327 = !{!"0x954a05a0.w256.b0", !1328, i64 0}
!1328 = !{!"0x954a05a0.w512.b0", !1329, i64 0}
!1329 = !{!"0x954a05a0.w1024.b0", !1330, i64 0}
!1330 = !{!"int64", !1331, i64 0}
!1331 = !{!"0x954a05a0", !8, i64 0}
!1332 = !{!1333, !1333, i64 0}
!1333 = !{!"0x954a05a0.w1.b1", !1320, i64 0}
!1334 = !{!1335, !1335, i64 0}
!1335 = !{!"0x954a05a0.w1.b2", !1336, i64 0}
!1336 = !{!"0x954a05a0.w2.b2", !1321, i64 0}
!1337 = !{!1338, !1338, i64 0}
!1338 = !{!"0x954a05a0.w1.b3", !1336, i64 0}
!1339 = !{!1340, !1340, i64 0}
!1340 = !{!"0x954a05a0.w1.b4", !1341, i64 0}
!1341 = !{!"0x954a05a0.w2.b4", !1342, i64 0}
!1342 = !{!"0x954a05a0.w4.b4", !1322, i64 0}
!1343 = !{!1344, !1344, i64 0}
!1344 = !{!"0x954a28e0.w1.b0", !1345, i64 0}
!1345 = !{!"0x954a28e0.w2.b0", !1346, i64 0}
!1346 = !{!"0x954a28e0.w4.b0", !1347, i64 0}
!1347 = !{!"0x954a28e0.w8.b0", !1348, i64 0}
!1348 = !{!"0x954a28e0.w16.b0", !1349, i64 0}
!1349 = !{!"0x954a28e0.w32.b0", !1350, i64 0}
!1350 = !{!"0x954a28e0.w64.b0", !1351, i64 0}
!1351 = !{!"0x954a28e0.w128.b0", !1352, i64 0}
!1352 = !{!"0x954a28e0.w256.b0", !1353, i64 0}
!1353 = !{!"0x954a28e0.w512.b0", !1354, i64 0}
!1354 = !{!"0x954a28e0.w1024.b0", !1355, i64 0}
!1355 = !{!"int64", !1356, i64 0}
!1356 = !{!"0x954a28e0", !8, i64 0}
!1357 = !{!1358, !1358, i64 0}
!1358 = !{!"0x954a28e0.w1.b1", !1345, i64 0}
!1359 = !{!1360, !1360, i64 0}
!1360 = !{!"0x954a28e0.w1.b2", !1361, i64 0}
!1361 = !{!"0x954a28e0.w2.b2", !1346, i64 0}
!1362 = !{!1363, !1363, i64 0}
!1363 = !{!"0x954a28e0.w1.b3", !1361, i64 0}
!1364 = !{!1365, !1365, i64 0}
!1365 = !{!"0x954a28e0.w1.b4", !1366, i64 0}
!1366 = !{!"0x954a28e0.w2.b4", !1367, i64 0}
!1367 = !{!"0x954a28e0.w4.b4", !1347, i64 0}
!1368 = !{!1369, !1369, i64 0}
!1369 = !{!"0x954a28e0.w1.b5", !1366, i64 0}
!1370 = !{!1371, !1371, i64 0}
!1371 = !{!"0x954a2ae0.w1.b0", !1372, i64 0}
!1372 = !{!"0x954a2ae0.w2.b0", !1373, i64 0}
!1373 = !{!"0x954a2ae0.w4.b0", !1374, i64 0}
!1374 = !{!"0x954a2ae0.w8.b0", !1375, i64 0}
!1375 = !{!"0x954a2ae0.w16.b0", !1376, i64 0}
!1376 = !{!"0x954a2ae0.w32.b0", !1377, i64 0}
!1377 = !{!"0x954a2ae0.w64.b0", !1378, i64 0}
!1378 = !{!"0x954a2ae0.w128.b0", !1379, i64 0}
!1379 = !{!"0x954a2ae0.w256.b0", !1380, i64 0}
!1380 = !{!"0x954a2ae0.w512.b0", !1381, i64 0}
!1381 = !{!"0x954a2ae0.w1024.b0", !1382, i64 0}
!1382 = !{!"int64", !1383, i64 0}
!1383 = !{!"0x954a2ae0", !8, i64 0}
!1384 = !{!1385, !1385, i64 0}
!1385 = !{!"0x954a2ae0.w1.b1", !1372, i64 0}
!1386 = !{!1387, !1387, i64 0}
!1387 = !{!"0x954a2ae0.w1.b2", !1388, i64 0}
!1388 = !{!"0x954a2ae0.w2.b2", !1373, i64 0}
!1389 = !{!1390, !1390, i64 0}
!1390 = !{!"0x954a2ae0.w1.b3", !1388, i64 0}
!1391 = !{!1392, !1392, i64 0}
!1392 = !{!"0x954a2ae0.w1.b4", !1393, i64 0}
!1393 = !{!"0x954a2ae0.w2.b4", !1394, i64 0}
!1394 = !{!"0x954a2ae0.w4.b4", !1374, i64 0}
!1395 = !{!1396, !1396, i64 0}
!1396 = !{!"0x954a2ae0.w1.b5", !1393, i64 0}
!1397 = !{!1398, !1398, i64 0}
!1398 = !{!"0x954a4980.w1.b0", !1399, i64 0}
!1399 = !{!"0x954a4980.w2.b0", !1400, i64 0}
!1400 = !{!"0x954a4980.w4.b0", !1401, i64 0}
!1401 = !{!"0x954a4980.w8.b0", !1402, i64 0}
!1402 = !{!"0x954a4980.w16.b0", !1403, i64 0}
!1403 = !{!"0x954a4980.w32.b0", !1404, i64 0}
!1404 = !{!"0x954a4980.w64.b0", !1405, i64 0}
!1405 = !{!"0x954a4980.w128.b0", !1406, i64 0}
!1406 = !{!"0x954a4980.w256.b0", !1407, i64 0}
!1407 = !{!"0x954a4980.w512.b0", !1408, i64 0}
!1408 = !{!"0x954a4980.w1024.b0", !1409, i64 0}
!1409 = !{!"int64", !1410, i64 0}
!1410 = !{!"0x954a4980", !8, i64 0}
!1411 = !{!1412, !1412, i64 0}
!1412 = !{!"0x954a4980.w1.b1", !1399, i64 0}
!1413 = !{!1414, !1414, i64 0}
!1414 = !{!"0x954a4980.w1.b2", !1415, i64 0}
!1415 = !{!"0x954a4980.w2.b2", !1400, i64 0}
!1416 = !{!1417, !1417, i64 0}
!1417 = !{!"0x954a4980.w1.b3", !1415, i64 0}
!1418 = !{!1419, !1419, i64 0}
!1419 = !{!"0x954a4980.w1.b4", !1420, i64 0}
!1420 = !{!"0x954a4980.w2.b4", !1421, i64 0}
!1421 = !{!"0x954a4980.w4.b4", !1401, i64 0}
!1422 = !{!1423, !1423, i64 0}
!1423 = !{!"0x954a2de0.w1.b0", !1424, i64 0}
!1424 = !{!"0x954a2de0.w2.b0", !1425, i64 0}
!1425 = !{!"0x954a2de0.w4.b0", !1426, i64 0}
!1426 = !{!"0x954a2de0.w8.b0", !1427, i64 0}
!1427 = !{!"0x954a2de0.w16.b0", !1428, i64 0}
!1428 = !{!"0x954a2de0.w32.b0", !1429, i64 0}
!1429 = !{!"0x954a2de0.w64.b0", !1430, i64 0}
!1430 = !{!"0x954a2de0.w128.b0", !1431, i64 0}
!1431 = !{!"0x954a2de0.w256.b0", !1432, i64 0}
!1432 = !{!"0x954a2de0.w512.b0", !1433, i64 0}
!1433 = !{!"0x954a2de0.w1024.b0", !1434, i64 0}
!1434 = !{!"int64", !1435, i64 0}
!1435 = !{!"0x954a2de0", !8, i64 0}
!1436 = !{!1437, !1437, i64 0}
!1437 = !{!"0x954a2de0.w1.b1", !1424, i64 0}
!1438 = !{!1439, !1439, i64 0}
!1439 = !{!"0x954a2de0.w1.b2", !1440, i64 0}
!1440 = !{!"0x954a2de0.w2.b2", !1425, i64 0}
!1441 = !{!1442, !1442, i64 0}
!1442 = !{!"0x954a2de0.w1.b3", !1440, i64 0}
!1443 = !{!1444, !1444, i64 0}
!1444 = !{!"0x954a2de0.w1.b4", !1445, i64 0}
!1445 = !{!"0x954a2de0.w2.b4", !1446, i64 0}
!1446 = !{!"0x954a2de0.w4.b4", !1426, i64 0}
!1447 = !{!1448, !1448, i64 0}
!1448 = !{!"0x954a6f40.w1.b0", !1449, i64 0}
!1449 = !{!"0x954a6f40.w2.b0", !1450, i64 0}
!1450 = !{!"0x954a6f40.w4.b0", !1451, i64 0}
!1451 = !{!"0x954a6f40.w8.b0", !1452, i64 0}
!1452 = !{!"0x954a6f40.w16.b0", !1453, i64 0}
!1453 = !{!"0x954a6f40.w32.b0", !1454, i64 0}
!1454 = !{!"0x954a6f40.w64.b0", !1455, i64 0}
!1455 = !{!"0x954a6f40.w128.b0", !1456, i64 0}
!1456 = !{!"0x954a6f40.w256.b0", !1457, i64 0}
!1457 = !{!"0x954a6f40.w512.b0", !1458, i64 0}
!1458 = !{!"0x954a6f40.w1024.b0", !1459, i64 0}
!1459 = !{!"int64", !1460, i64 0}
!1460 = !{!"0x954a6f40", !8, i64 0}
!1461 = !{!1462, !1462, i64 0}
!1462 = !{!"0x954a6f40.w1.b1", !1449, i64 0}
!1463 = !{!1464, !1464, i64 0}
!1464 = !{!"0x954a6f40.w1.b2", !1465, i64 0}
!1465 = !{!"0x954a6f40.w2.b2", !1450, i64 0}
!1466 = !{!1467, !1467, i64 0}
!1467 = !{!"0x954a6f40.w1.b3", !1465, i64 0}
!1468 = !{!1469, !1469, i64 0}
!1469 = !{!"0x954a6f40.w1.b4", !1470, i64 0}
!1470 = !{!"0x954a6f40.w2.b4", !1471, i64 0}
!1471 = !{!"0x954a6f40.w4.b4", !1451, i64 0}
!1472 = !{!1473, !1473, i64 0}
!1473 = !{!"0x954a7e50.w1.b0", !1474, i64 0}
!1474 = !{!"0x954a7e50.w2.b0", !1475, i64 0}
!1475 = !{!"0x954a7e50.w4.b0", !1476, i64 0}
!1476 = !{!"0x954a7e50.w8.b0", !1477, i64 0}
!1477 = !{!"0x954a7e50.w16.b0", !1478, i64 0}
!1478 = !{!"0x954a7e50.w32.b0", !1479, i64 0}
!1479 = !{!"0x954a7e50.w64.b0", !1480, i64 0}
!1480 = !{!"0x954a7e50.w128.b0", !1481, i64 0}
!1481 = !{!"0x954a7e50.w256.b0", !1482, i64 0}
!1482 = !{!"0x954a7e50.w512.b0", !1483, i64 0}
!1483 = !{!"0x954a7e50.w1024.b0", !1484, i64 0}
!1484 = !{!"int64", !1485, i64 0}
!1485 = !{!"0x954a7e50", !8, i64 0}
!1486 = !{!1487, !1487, i64 0}
!1487 = !{!"0x954a7e50.w1.b1", !1474, i64 0}
!1488 = !{!1489, !1489, i64 0}
!1489 = !{!"0x954a7e50.w1.b2", !1490, i64 0}
!1490 = !{!"0x954a7e50.w2.b2", !1475, i64 0}
!1491 = !{!1492, !1492, i64 0}
!1492 = !{!"0x954a7e50.w1.b3", !1490, i64 0}
!1493 = !{!1494, !1494, i64 0}
!1494 = !{!"0x954a7e50.w1.b4", !1495, i64 0}
!1495 = !{!"0x954a7e50.w2.b4", !1496, i64 0}
!1496 = !{!"0x954a7e50.w4.b4", !1476, i64 0}
!1497 = !{!1498, !1498, i64 0}
!1498 = !{!"0x954a9a00.w1.b0", !1499, i64 0}
!1499 = !{!"0x954a9a00.w2.b0", !1500, i64 0}
!1500 = !{!"0x954a9a00.w4.b0", !1501, i64 0}
!1501 = !{!"0x954a9a00.w8.b0", !1502, i64 0}
!1502 = !{!"0x954a9a00.w16.b0", !1503, i64 0}
!1503 = !{!"0x954a9a00.w32.b0", !1504, i64 0}
!1504 = !{!"0x954a9a00.w64.b0", !1505, i64 0}
!1505 = !{!"0x954a9a00.w128.b0", !1506, i64 0}
!1506 = !{!"0x954a9a00.w256.b0", !1507, i64 0}
!1507 = !{!"0x954a9a00.w512.b0", !1508, i64 0}
!1508 = !{!"0x954a9a00.w1024.b0", !1509, i64 0}
!1509 = !{!"int64", !1510, i64 0}
!1510 = !{!"0x954a9a00", !8, i64 0}
!1511 = !{!1512, !1512, i64 0}
!1512 = !{!"0x954a9a00.w1.b1", !1499, i64 0}
!1513 = !{!1514, !1514, i64 0}
!1514 = !{!"0x954a9a00.w1.b2", !1515, i64 0}
!1515 = !{!"0x954a9a00.w2.b2", !1500, i64 0}
!1516 = !{!1517, !1517, i64 0}
!1517 = !{!"0x954a9a00.w1.b3", !1515, i64 0}
!1518 = !{!1519, !1519, i64 0}
!1519 = !{!"0x954a9a00.w1.b4", !1520, i64 0}
!1520 = !{!"0x954a9a00.w2.b4", !1521, i64 0}
!1521 = !{!"0x954a9a00.w4.b4", !1501, i64 0}
!1522 = !{!1523, !1523, i64 0}
!1523 = !{!"0x954a97b0.w1.b0", !1524, i64 0}
!1524 = !{!"0x954a97b0.w2.b0", !1525, i64 0}
!1525 = !{!"0x954a97b0.w4.b0", !1526, i64 0}
!1526 = !{!"0x954a97b0.w8.b0", !1527, i64 0}
!1527 = !{!"0x954a97b0.w16.b0", !1528, i64 0}
!1528 = !{!"0x954a97b0.w32.b0", !1529, i64 0}
!1529 = !{!"0x954a97b0.w64.b0", !1530, i64 0}
!1530 = !{!"0x954a97b0.w128.b0", !1531, i64 0}
!1531 = !{!"0x954a97b0.w256.b0", !1532, i64 0}
!1532 = !{!"0x954a97b0.w512.b0", !1533, i64 0}
!1533 = !{!"0x954a97b0.w1024.b0", !1534, i64 0}
!1534 = !{!"int64", !1535, i64 0}
!1535 = !{!"0x954a97b0", !8, i64 0}
!1536 = !{!1537, !1537, i64 0}
!1537 = !{!"0x954a97b0.w1.b1", !1524, i64 0}
!1538 = !{!1539, !1539, i64 0}
!1539 = !{!"0x954a97b0.w1.b2", !1540, i64 0}
!1540 = !{!"0x954a97b0.w2.b2", !1525, i64 0}
!1541 = !{!1542, !1542, i64 0}
!1542 = !{!"0x954a97b0.w1.b3", !1540, i64 0}
!1543 = !{!1544, !1544, i64 0}
!1544 = !{!"0x954a97b0.w1.b4", !1545, i64 0}
!1545 = !{!"0x954a97b0.w2.b4", !1546, i64 0}
!1546 = !{!"0x954a97b0.w4.b4", !1526, i64 0}
!1547 = !{!1548, !1548, i64 0}
!1548 = !{!"float32", !1549, i64 0}
!1549 = !{!"0xa8acacd0", !8, i64 0}
!1550 = !{!1551, !1551, i64 0}
!1551 = !{!"float32", !1552, i64 0}
!1552 = !{!"0x930642c0", !8, i64 0}
!1553 = !{!1554, !1554, i64 0}
!1554 = !{!"float32", !1555, i64 0}
!1555 = !{!"0x9e78f720", !8, i64 0}
!1556 = !{!1557, !1557, i64 0}
!1557 = !{!"float32", !1558, i64 0}
!1558 = !{!"0x9d4fa830", !8, i64 0}
!1559 = !{!1560, !1560, i64 0}
!1560 = !{!"float32", !1561, i64 0}
!1561 = !{!"0x99d6c570", !8, i64 0}
!1562 = !{!1563, !1563, i64 0}
!1563 = !{!"float32", !1564, i64 0}
!1564 = !{!"0xa8acad20", !8, i64 0}
!1565 = !{!1566, !1566, i64 0}
!1566 = !{!"0x95ae04e0.w1.b0", !1567, i64 0}
!1567 = !{!"0x95ae04e0.w2.b0", !1568, i64 0}
!1568 = !{!"0x95ae04e0.w4.b0", !1569, i64 0}
!1569 = !{!"0x95ae04e0.w8.b0", !1570, i64 0}
!1570 = !{!"0x95ae04e0.w16.b0", !1571, i64 0}
!1571 = !{!"0x95ae04e0.w32.b0", !1572, i64 0}
!1572 = !{!"0x95ae04e0.w64.b0", !1573, i64 0}
!1573 = !{!"0x95ae04e0.w128.b0", !1574, i64 0}
!1574 = !{!"0x95ae04e0.w256.b0", !1575, i64 0}
!1575 = !{!"0x95ae04e0.w512.b0", !1576, i64 0}
!1576 = !{!"0x95ae04e0.w1024.b0", !1577, i64 0}
!1577 = !{!"int32", !1578, i64 0}
!1578 = !{!"0x95ae04e0", !8, i64 0}
!1579 = !{!1580, !1580, i64 0}
!1580 = !{!"0x95ae04e0.w1.b1", !1567, i64 0}
!1581 = !{!1582, !1582, i64 0}
!1582 = !{!"0x954890a0.w1.b0", !1583, i64 0}
!1583 = !{!"0x954890a0.w2.b0", !1584, i64 0}
!1584 = !{!"0x954890a0.w4.b0", !1585, i64 0}
!1585 = !{!"0x954890a0.w8.b0", !1586, i64 0}
!1586 = !{!"0x954890a0.w16.b0", !1587, i64 0}
!1587 = !{!"0x954890a0.w32.b0", !1588, i64 0}
!1588 = !{!"0x954890a0.w64.b0", !1589, i64 0}
!1589 = !{!"0x954890a0.w128.b0", !1590, i64 0}
!1590 = !{!"0x954890a0.w256.b0", !1591, i64 0}
!1591 = !{!"0x954890a0.w512.b0", !1592, i64 0}
!1592 = !{!"0x954890a0.w1024.b0", !1593, i64 0}
!1593 = !{!"int64", !1594, i64 0}
!1594 = !{!"0x954890a0", !8, i64 0}
!1595 = !{!1596, !1596, i64 0}
!1596 = !{!"0x954890a0.w1.b1", !1583, i64 0}
!1597 = !{!1598, !1598, i64 0}
!1598 = !{!"0x954890a0.w1.b2", !1599, i64 0}
!1599 = !{!"0x954890a0.w2.b2", !1584, i64 0}
!1600 = !{!1601, !1601, i64 0}
!1601 = !{!"0x954890a0.w1.b3", !1599, i64 0}
!1602 = !{!1603, !1603, i64 0}
!1603 = !{!"0x954890a0.w1.b4", !1604, i64 0}
!1604 = !{!"0x954890a0.w2.b4", !1605, i64 0}
!1605 = !{!"0x954890a0.w4.b4", !1585, i64 0}
!1606 = !{!1607, !1607, i64 0}
!1607 = !{!"0x954891e0.w1.b0", !1608, i64 0}
!1608 = !{!"0x954891e0.w2.b0", !1609, i64 0}
!1609 = !{!"0x954891e0.w4.b0", !1610, i64 0}
!1610 = !{!"0x954891e0.w8.b0", !1611, i64 0}
!1611 = !{!"0x954891e0.w16.b0", !1612, i64 0}
!1612 = !{!"0x954891e0.w32.b0", !1613, i64 0}
!1613 = !{!"0x954891e0.w64.b0", !1614, i64 0}
!1614 = !{!"0x954891e0.w128.b0", !1615, i64 0}
!1615 = !{!"0x954891e0.w256.b0", !1616, i64 0}
!1616 = !{!"0x954891e0.w512.b0", !1617, i64 0}
!1617 = !{!"0x954891e0.w1024.b0", !1618, i64 0}
!1618 = !{!"int64", !1619, i64 0}
!1619 = !{!"0x954891e0", !8, i64 0}
!1620 = !{!1621, !1621, i64 0}
!1621 = !{!"0x954891e0.w1.b1", !1608, i64 0}
!1622 = !{!1623, !1623, i64 0}
!1623 = !{!"0x954891e0.w1.b2", !1624, i64 0}
!1624 = !{!"0x954891e0.w2.b2", !1609, i64 0}
!1625 = !{!1626, !1626, i64 0}
!1626 = !{!"0x954891e0.w1.b3", !1624, i64 0}
!1627 = !{!1628, !1628, i64 0}
!1628 = !{!"0x954891e0.w1.b4", !1629, i64 0}
!1629 = !{!"0x954891e0.w2.b4", !1630, i64 0}
!1630 = !{!"0x954891e0.w4.b4", !1610, i64 0}
!1631 = !{!1632, !1632, i64 0}
!1632 = !{!"0x9548ae90.w1.b0", !1633, i64 0}
!1633 = !{!"0x9548ae90.w2.b0", !1634, i64 0}
!1634 = !{!"0x9548ae90.w4.b0", !1635, i64 0}
!1635 = !{!"0x9548ae90.w8.b0", !1636, i64 0}
!1636 = !{!"0x9548ae90.w16.b0", !1637, i64 0}
!1637 = !{!"0x9548ae90.w32.b0", !1638, i64 0}
!1638 = !{!"0x9548ae90.w64.b0", !1639, i64 0}
!1639 = !{!"0x9548ae90.w128.b0", !1640, i64 0}
!1640 = !{!"0x9548ae90.w256.b0", !1641, i64 0}
!1641 = !{!"0x9548ae90.w512.b0", !1642, i64 0}
!1642 = !{!"0x9548ae90.w1024.b0", !1643, i64 0}
!1643 = !{!"int64", !1644, i64 0}
!1644 = !{!"0x9548ae90", !8, i64 0}
!1645 = !{!1646, !1646, i64 0}
!1646 = !{!"0x9548ae90.w1.b1", !1633, i64 0}
!1647 = !{!1648, !1648, i64 0}
!1648 = !{!"0x9548b090.w1.b0", !1649, i64 0}
!1649 = !{!"0x9548b090.w2.b0", !1650, i64 0}
!1650 = !{!"0x9548b090.w4.b0", !1651, i64 0}
!1651 = !{!"0x9548b090.w8.b0", !1652, i64 0}
!1652 = !{!"0x9548b090.w16.b0", !1653, i64 0}
!1653 = !{!"0x9548b090.w32.b0", !1654, i64 0}
!1654 = !{!"0x9548b090.w64.b0", !1655, i64 0}
!1655 = !{!"0x9548b090.w128.b0", !1656, i64 0}
!1656 = !{!"0x9548b090.w256.b0", !1657, i64 0}
!1657 = !{!"0x9548b090.w512.b0", !1658, i64 0}
!1658 = !{!"0x9548b090.w1024.b0", !1659, i64 0}
!1659 = !{!"int64", !1660, i64 0}
!1660 = !{!"0x9548b090", !8, i64 0}
!1661 = !{!1662, !1662, i64 0}
!1662 = !{!"0x9548b090.w1.b1", !1649, i64 0}
!1663 = !{!1664, !1664, i64 0}
!1664 = !{!"float32", !1665, i64 0}
!1665 = !{!"0x97779a30", !8, i64 0}
!1666 = !{!1667, !1667, i64 0}
!1667 = !{!"float32", !1668, i64 0}
!1668 = !{!"0x907f09e0", !8, i64 0}
!1669 = !{!1670, !1670, i64 0}
!1670 = !{!"0x932fa2a0.w1.b0", !1671, i64 0}
!1671 = !{!"0x932fa2a0.w2.b0", !1672, i64 0}
!1672 = !{!"0x932fa2a0.w4.b0", !1673, i64 0}
!1673 = !{!"0x932fa2a0.w8.b0", !1674, i64 0}
!1674 = !{!"0x932fa2a0.w16.b0", !1675, i64 0}
!1675 = !{!"0x932fa2a0.w32.b0", !1676, i64 0}
!1676 = !{!"0x932fa2a0.w64.b0", !1677, i64 0}
!1677 = !{!"0x932fa2a0.w128.b0", !1678, i64 0}
!1678 = !{!"0x932fa2a0.w256.b0", !1679, i64 0}
!1679 = !{!"0x932fa2a0.w512.b0", !1680, i64 0}
!1680 = !{!"0x932fa2a0.w1024.b0", !1681, i64 0}
!1681 = !{!"int32", !1682, i64 0}
!1682 = !{!"0x932fa2a0", !8, i64 0}
!1683 = !{!1684, !1684, i64 0}
!1684 = !{!"0x932fa2a0.w1.b1", !1671, i64 0}
!1685 = !{!1686, !1686, i64 0}
!1686 = !{!"0x95ad2220.w1.b0", !1687, i64 0}
!1687 = !{!"0x95ad2220.w2.b0", !1688, i64 0}
!1688 = !{!"0x95ad2220.w4.b0", !1689, i64 0}
!1689 = !{!"0x95ad2220.w8.b0", !1690, i64 0}
!1690 = !{!"0x95ad2220.w16.b0", !1691, i64 0}
!1691 = !{!"0x95ad2220.w32.b0", !1692, i64 0}
!1692 = !{!"0x95ad2220.w64.b0", !1693, i64 0}
!1693 = !{!"0x95ad2220.w128.b0", !1694, i64 0}
!1694 = !{!"0x95ad2220.w256.b0", !1695, i64 0}
!1695 = !{!"0x95ad2220.w512.b0", !1696, i64 0}
!1696 = !{!"0x95ad2220.w1024.b0", !1697, i64 0}
!1697 = !{!"int64", !1698, i64 0}
!1698 = !{!"0x95ad2220", !8, i64 0}
!1699 = !{!1700, !1700, i64 0}
!1700 = !{!"0x95ad2220.w1.b1", !1687, i64 0}
!1701 = !{!1702, !1702, i64 0}
!1702 = !{!"0x95ad2220.w1.b2", !1703, i64 0}
!1703 = !{!"0x95ad2220.w2.b2", !1688, i64 0}
!1704 = !{!1705, !1705, i64 0}
!1705 = !{!"0x95ad2220.w1.b3", !1703, i64 0}
!1706 = !{!1707, !1707, i64 0}
!1707 = !{!"0x95ad2220.w1.b4", !1708, i64 0}
!1708 = !{!"0x95ad2220.w2.b4", !1709, i64 0}
!1709 = !{!"0x95ad2220.w4.b4", !1689, i64 0}
!1710 = !{!1711, !1711, i64 0}
!1711 = !{!"0x95ad2300.w1.b0", !1712, i64 0}
!1712 = !{!"0x95ad2300.w2.b0", !1713, i64 0}
!1713 = !{!"0x95ad2300.w4.b0", !1714, i64 0}
!1714 = !{!"0x95ad2300.w8.b0", !1715, i64 0}
!1715 = !{!"0x95ad2300.w16.b0", !1716, i64 0}
!1716 = !{!"0x95ad2300.w32.b0", !1717, i64 0}
!1717 = !{!"0x95ad2300.w64.b0", !1718, i64 0}
!1718 = !{!"0x95ad2300.w128.b0", !1719, i64 0}
!1719 = !{!"0x95ad2300.w256.b0", !1720, i64 0}
!1720 = !{!"0x95ad2300.w512.b0", !1721, i64 0}
!1721 = !{!"0x95ad2300.w1024.b0", !1722, i64 0}
!1722 = !{!"int64", !1723, i64 0}
!1723 = !{!"0x95ad2300", !8, i64 0}
!1724 = !{!1725, !1725, i64 0}
!1725 = !{!"0x95ad2300.w1.b1", !1712, i64 0}
!1726 = !{!1727, !1727, i64 0}
!1727 = !{!"0x95ad2300.w1.b2", !1728, i64 0}
!1728 = !{!"0x95ad2300.w2.b2", !1713, i64 0}
!1729 = !{!1730, !1730, i64 0}
!1730 = !{!"0x95ad2300.w1.b3", !1728, i64 0}
!1731 = !{!1732, !1732, i64 0}
!1732 = !{!"0x95ad2300.w1.b4", !1733, i64 0}
!1733 = !{!"0x95ad2300.w2.b4", !1734, i64 0}
!1734 = !{!"0x95ad2300.w4.b4", !1714, i64 0}
!1735 = !{!1736, !1736, i64 0}
!1736 = !{!"0x95ad3800.w1.b0", !1737, i64 0}
!1737 = !{!"0x95ad3800.w2.b0", !1738, i64 0}
!1738 = !{!"0x95ad3800.w4.b0", !1739, i64 0}
!1739 = !{!"0x95ad3800.w8.b0", !1740, i64 0}
!1740 = !{!"0x95ad3800.w16.b0", !1741, i64 0}
!1741 = !{!"0x95ad3800.w32.b0", !1742, i64 0}
!1742 = !{!"0x95ad3800.w64.b0", !1743, i64 0}
!1743 = !{!"0x95ad3800.w128.b0", !1744, i64 0}
!1744 = !{!"0x95ad3800.w256.b0", !1745, i64 0}
!1745 = !{!"0x95ad3800.w512.b0", !1746, i64 0}
!1746 = !{!"0x95ad3800.w1024.b0", !1747, i64 0}
!1747 = !{!"int64", !1748, i64 0}
!1748 = !{!"0x95ad3800", !8, i64 0}
!1749 = !{!1750, !1750, i64 0}
!1750 = !{!"0x95ad3800.w1.b1", !1737, i64 0}
!1751 = !{!1752, !1752, i64 0}
!1752 = !{!"0x95ad3800.w1.b2", !1753, i64 0}
!1753 = !{!"0x95ad3800.w2.b2", !1738, i64 0}
!1754 = !{!1755, !1755, i64 0}
!1755 = !{!"0x95ad3800.w1.b3", !1753, i64 0}
!1756 = !{!1757, !1757, i64 0}
!1757 = !{!"0x95ad3800.w1.b4", !1758, i64 0}
!1758 = !{!"0x95ad3800.w2.b4", !1759, i64 0}
!1759 = !{!"0x95ad3800.w4.b4", !1739, i64 0}
!1760 = !{!1761, !1761, i64 0}
!1761 = !{!"0x95ad3a00.w1.b0", !1762, i64 0}
!1762 = !{!"0x95ad3a00.w2.b0", !1763, i64 0}
!1763 = !{!"0x95ad3a00.w4.b0", !1764, i64 0}
!1764 = !{!"0x95ad3a00.w8.b0", !1765, i64 0}
!1765 = !{!"0x95ad3a00.w16.b0", !1766, i64 0}
!1766 = !{!"0x95ad3a00.w32.b0", !1767, i64 0}
!1767 = !{!"0x95ad3a00.w64.b0", !1768, i64 0}
!1768 = !{!"0x95ad3a00.w128.b0", !1769, i64 0}
!1769 = !{!"0x95ad3a00.w256.b0", !1770, i64 0}
!1770 = !{!"0x95ad3a00.w512.b0", !1771, i64 0}
!1771 = !{!"0x95ad3a00.w1024.b0", !1772, i64 0}
!1772 = !{!"int64", !1773, i64 0}
!1773 = !{!"0x95ad3a00", !8, i64 0}
!1774 = !{!1775, !1775, i64 0}
!1775 = !{!"0x95ad3a00.w1.b1", !1762, i64 0}
!1776 = !{!1777, !1777, i64 0}
!1777 = !{!"0x95ad3a00.w1.b2", !1778, i64 0}
!1778 = !{!"0x95ad3a00.w2.b2", !1763, i64 0}
!1779 = !{!1780, !1780, i64 0}
!1780 = !{!"0x95ad3a00.w1.b3", !1778, i64 0}
!1781 = !{!1782, !1782, i64 0}
!1782 = !{!"0x95ad3a00.w1.b4", !1783, i64 0}
!1783 = !{!"0x95ad3a00.w2.b4", !1784, i64 0}
!1784 = !{!"0x95ad3a00.w4.b4", !1764, i64 0}
!1785 = !{!1786, !1786, i64 0}
!1786 = !{!"float32", !1787, i64 0}
!1787 = !{!"0x95b4ae30", !8, i64 0}
!1788 = !{!1789, !1789, i64 0}
!1789 = !{!"float32", !1790, i64 0}
!1790 = !{!"0x95a0c190", !8, i64 0}
!1791 = !{!1792, !1792, i64 0}
!1792 = !{!"0x954904a0.w1.b0", !1793, i64 0}
!1793 = !{!"0x954904a0.w2.b0", !1794, i64 0}
!1794 = !{!"0x954904a0.w4.b0", !1795, i64 0}
!1795 = !{!"0x954904a0.w8.b0", !1796, i64 0}
!1796 = !{!"0x954904a0.w16.b0", !1797, i64 0}
!1797 = !{!"0x954904a0.w32.b0", !1798, i64 0}
!1798 = !{!"0x954904a0.w64.b0", !1799, i64 0}
!1799 = !{!"0x954904a0.w128.b0", !1800, i64 0}
!1800 = !{!"0x954904a0.w256.b0", !1801, i64 0}
!1801 = !{!"0x954904a0.w512.b0", !1802, i64 0}
!1802 = !{!"0x954904a0.w1024.b0", !1803, i64 0}
!1803 = !{!"int32", !1804, i64 0}
!1804 = !{!"0x954904a0", !8, i64 0}
!1805 = !{!1806, !1806, i64 0}
!1806 = !{!"0x954904a0.w1.b2", !1807, i64 0}
!1807 = !{!"0x954904a0.w2.b2", !1794, i64 0}
!1808 = !{!1809, !1809, i64 0}
!1809 = !{!"0x954904a0.w1.b3", !1807, i64 0}
!1810 = !{!1811, !1811, i64 0}
!1811 = !{!"0x954904a0.w1.b1", !1793, i64 0}
!1812 = !{!1813, !1813, i64 0}
!1813 = !{!"0x95494060.w1.b0", !1814, i64 0}
!1814 = !{!"0x95494060.w2.b0", !1815, i64 0}
!1815 = !{!"0x95494060.w4.b0", !1816, i64 0}
!1816 = !{!"0x95494060.w8.b0", !1817, i64 0}
!1817 = !{!"0x95494060.w16.b0", !1818, i64 0}
!1818 = !{!"0x95494060.w32.b0", !1819, i64 0}
!1819 = !{!"0x95494060.w64.b0", !1820, i64 0}
!1820 = !{!"0x95494060.w128.b0", !1821, i64 0}
!1821 = !{!"0x95494060.w256.b0", !1822, i64 0}
!1822 = !{!"0x95494060.w512.b0", !1823, i64 0}
!1823 = !{!"0x95494060.w1024.b0", !1824, i64 0}
!1824 = !{!"int64", !1825, i64 0}
!1825 = !{!"0x95494060", !8, i64 0}
!1826 = !{!1827, !1827, i64 0}
!1827 = !{!"0x95494060.w1.b1", !1814, i64 0}
!1828 = !{!1829, !1829, i64 0}
!1829 = !{!"0x95494060.w1.b2", !1830, i64 0}
!1830 = !{!"0x95494060.w2.b2", !1815, i64 0}
!1831 = !{!1832, !1832, i64 0}
!1832 = !{!"0x95494060.w1.b3", !1830, i64 0}
!1833 = !{!1834, !1834, i64 0}
!1834 = !{!"0x95494060.w1.b4", !1835, i64 0}
!1835 = !{!"0x95494060.w2.b4", !1836, i64 0}
!1836 = !{!"0x95494060.w4.b4", !1816, i64 0}
!1837 = !{!1838, !1838, i64 0}
!1838 = !{!"0x95494590.w1.b0", !1839, i64 0}
!1839 = !{!"0x95494590.w2.b0", !1840, i64 0}
!1840 = !{!"0x95494590.w4.b0", !1841, i64 0}
!1841 = !{!"0x95494590.w8.b0", !1842, i64 0}
!1842 = !{!"0x95494590.w16.b0", !1843, i64 0}
!1843 = !{!"0x95494590.w32.b0", !1844, i64 0}
!1844 = !{!"0x95494590.w64.b0", !1845, i64 0}
!1845 = !{!"0x95494590.w128.b0", !1846, i64 0}
!1846 = !{!"0x95494590.w256.b0", !1847, i64 0}
!1847 = !{!"0x95494590.w512.b0", !1848, i64 0}
!1848 = !{!"0x95494590.w1024.b0", !1849, i64 0}
!1849 = !{!"int64", !1850, i64 0}
!1850 = !{!"0x95494590", !8, i64 0}
!1851 = !{!1852, !1852, i64 0}
!1852 = !{!"0x95494590.w1.b1", !1839, i64 0}
!1853 = !{!1854, !1854, i64 0}
!1854 = !{!"0x95494590.w1.b2", !1855, i64 0}
!1855 = !{!"0x95494590.w2.b2", !1840, i64 0}
!1856 = !{!1857, !1857, i64 0}
!1857 = !{!"0x95494590.w1.b3", !1855, i64 0}
!1858 = !{!1859, !1859, i64 0}
!1859 = !{!"0x95494590.w1.b4", !1860, i64 0}
!1860 = !{!"0x95494590.w2.b4", !1861, i64 0}
!1861 = !{!"0x95494590.w4.b4", !1841, i64 0}
!1862 = !{!1863, !1863, i64 0}
!1863 = !{!"0x954968d0.w1.b0", !1864, i64 0}
!1864 = !{!"0x954968d0.w2.b0", !1865, i64 0}
!1865 = !{!"0x954968d0.w4.b0", !1866, i64 0}
!1866 = !{!"0x954968d0.w8.b0", !1867, i64 0}
!1867 = !{!"0x954968d0.w16.b0", !1868, i64 0}
!1868 = !{!"0x954968d0.w32.b0", !1869, i64 0}
!1869 = !{!"0x954968d0.w64.b0", !1870, i64 0}
!1870 = !{!"0x954968d0.w128.b0", !1871, i64 0}
!1871 = !{!"0x954968d0.w256.b0", !1872, i64 0}
!1872 = !{!"0x954968d0.w512.b0", !1873, i64 0}
!1873 = !{!"0x954968d0.w1024.b0", !1874, i64 0}
!1874 = !{!"int64", !1875, i64 0}
!1875 = !{!"0x954968d0", !8, i64 0}
!1876 = !{!1877, !1877, i64 0}
!1877 = !{!"0x954968d0.w1.b1", !1864, i64 0}
!1878 = !{!1879, !1879, i64 0}
!1879 = !{!"0x954968d0.w1.b2", !1880, i64 0}
!1880 = !{!"0x954968d0.w2.b2", !1865, i64 0}
!1881 = !{!1882, !1882, i64 0}
!1882 = !{!"0x954968d0.w1.b3", !1880, i64 0}
!1883 = !{!1884, !1884, i64 0}
!1884 = !{!"0x954968d0.w1.b4", !1885, i64 0}
!1885 = !{!"0x954968d0.w2.b4", !1886, i64 0}
!1886 = !{!"0x954968d0.w4.b4", !1866, i64 0}
!1887 = !{!1888, !1888, i64 0}
!1888 = !{!"0x954968d0.w1.b5", !1885, i64 0}
!1889 = !{!1890, !1890, i64 0}
!1890 = !{!"0x95496ad0.w1.b0", !1891, i64 0}
!1891 = !{!"0x95496ad0.w2.b0", !1892, i64 0}
!1892 = !{!"0x95496ad0.w4.b0", !1893, i64 0}
!1893 = !{!"0x95496ad0.w8.b0", !1894, i64 0}
!1894 = !{!"0x95496ad0.w16.b0", !1895, i64 0}
!1895 = !{!"0x95496ad0.w32.b0", !1896, i64 0}
!1896 = !{!"0x95496ad0.w64.b0", !1897, i64 0}
!1897 = !{!"0x95496ad0.w128.b0", !1898, i64 0}
!1898 = !{!"0x95496ad0.w256.b0", !1899, i64 0}
!1899 = !{!"0x95496ad0.w512.b0", !1900, i64 0}
!1900 = !{!"0x95496ad0.w1024.b0", !1901, i64 0}
!1901 = !{!"int64", !1902, i64 0}
!1902 = !{!"0x95496ad0", !8, i64 0}
!1903 = !{!1904, !1904, i64 0}
!1904 = !{!"0x95496ad0.w1.b1", !1891, i64 0}
!1905 = !{!1906, !1906, i64 0}
!1906 = !{!"0x95496ad0.w1.b2", !1907, i64 0}
!1907 = !{!"0x95496ad0.w2.b2", !1892, i64 0}
!1908 = !{!1909, !1909, i64 0}
!1909 = !{!"0x95496ad0.w1.b3", !1907, i64 0}
!1910 = !{!1911, !1911, i64 0}
!1911 = !{!"0x95496ad0.w1.b4", !1912, i64 0}
!1912 = !{!"0x95496ad0.w2.b4", !1913, i64 0}
!1913 = !{!"0x95496ad0.w4.b4", !1893, i64 0}
!1914 = !{!1915, !1915, i64 0}
!1915 = !{!"0x95496ad0.w1.b5", !1912, i64 0}
!1916 = !{!1917, !1917, i64 0}
!1917 = !{!"0x95498970.w1.b0", !1918, i64 0}
!1918 = !{!"0x95498970.w2.b0", !1919, i64 0}
!1919 = !{!"0x95498970.w4.b0", !1920, i64 0}
!1920 = !{!"0x95498970.w8.b0", !1921, i64 0}
!1921 = !{!"0x95498970.w16.b0", !1922, i64 0}
!1922 = !{!"0x95498970.w32.b0", !1923, i64 0}
!1923 = !{!"0x95498970.w64.b0", !1924, i64 0}
!1924 = !{!"0x95498970.w128.b0", !1925, i64 0}
!1925 = !{!"0x95498970.w256.b0", !1926, i64 0}
!1926 = !{!"0x95498970.w512.b0", !1927, i64 0}
!1927 = !{!"0x95498970.w1024.b0", !1928, i64 0}
!1928 = !{!"int64", !1929, i64 0}
!1929 = !{!"0x95498970", !8, i64 0}
!1930 = !{!1931, !1931, i64 0}
!1931 = !{!"0x95498970.w1.b1", !1918, i64 0}
!1932 = !{!1933, !1933, i64 0}
!1933 = !{!"0x95498970.w1.b2", !1934, i64 0}
!1934 = !{!"0x95498970.w2.b2", !1919, i64 0}
!1935 = !{!1936, !1936, i64 0}
!1936 = !{!"0x95498970.w1.b3", !1934, i64 0}
!1937 = !{!1938, !1938, i64 0}
!1938 = !{!"0x95498970.w1.b4", !1939, i64 0}
!1939 = !{!"0x95498970.w2.b4", !1940, i64 0}
!1940 = !{!"0x95498970.w4.b4", !1920, i64 0}
!1941 = !{!1942, !1942, i64 0}
!1942 = !{!"0x95496dd0.w1.b0", !1943, i64 0}
!1943 = !{!"0x95496dd0.w2.b0", !1944, i64 0}
!1944 = !{!"0x95496dd0.w4.b0", !1945, i64 0}
!1945 = !{!"0x95496dd0.w8.b0", !1946, i64 0}
!1946 = !{!"0x95496dd0.w16.b0", !1947, i64 0}
!1947 = !{!"0x95496dd0.w32.b0", !1948, i64 0}
!1948 = !{!"0x95496dd0.w64.b0", !1949, i64 0}
!1949 = !{!"0x95496dd0.w128.b0", !1950, i64 0}
!1950 = !{!"0x95496dd0.w256.b0", !1951, i64 0}
!1951 = !{!"0x95496dd0.w512.b0", !1952, i64 0}
!1952 = !{!"0x95496dd0.w1024.b0", !1953, i64 0}
!1953 = !{!"int64", !1954, i64 0}
!1954 = !{!"0x95496dd0", !8, i64 0}
!1955 = !{!1956, !1956, i64 0}
!1956 = !{!"0x95496dd0.w1.b1", !1943, i64 0}
!1957 = !{!1958, !1958, i64 0}
!1958 = !{!"0x95496dd0.w1.b2", !1959, i64 0}
!1959 = !{!"0x95496dd0.w2.b2", !1944, i64 0}
!1960 = !{!1961, !1961, i64 0}
!1961 = !{!"0x95496dd0.w1.b3", !1959, i64 0}
!1962 = !{!1963, !1963, i64 0}
!1963 = !{!"0x95496dd0.w1.b4", !1964, i64 0}
!1964 = !{!"0x95496dd0.w2.b4", !1965, i64 0}
!1965 = !{!"0x95496dd0.w4.b4", !1945, i64 0}
!1966 = !{!1967, !1967, i64 0}
!1967 = !{!"0x9549af30.w1.b0", !1968, i64 0}
!1968 = !{!"0x9549af30.w2.b0", !1969, i64 0}
!1969 = !{!"0x9549af30.w4.b0", !1970, i64 0}
!1970 = !{!"0x9549af30.w8.b0", !1971, i64 0}
!1971 = !{!"0x9549af30.w16.b0", !1972, i64 0}
!1972 = !{!"0x9549af30.w32.b0", !1973, i64 0}
!1973 = !{!"0x9549af30.w64.b0", !1974, i64 0}
!1974 = !{!"0x9549af30.w128.b0", !1975, i64 0}
!1975 = !{!"0x9549af30.w256.b0", !1976, i64 0}
!1976 = !{!"0x9549af30.w512.b0", !1977, i64 0}
!1977 = !{!"0x9549af30.w1024.b0", !1978, i64 0}
!1978 = !{!"int64", !1979, i64 0}
!1979 = !{!"0x9549af30", !8, i64 0}
!1980 = !{!1981, !1981, i64 0}
!1981 = !{!"0x9549af30.w1.b1", !1968, i64 0}
!1982 = !{!1983, !1983, i64 0}
!1983 = !{!"0x9549af30.w1.b2", !1984, i64 0}
!1984 = !{!"0x9549af30.w2.b2", !1969, i64 0}
!1985 = !{!1986, !1986, i64 0}
!1986 = !{!"0x9549af30.w1.b3", !1984, i64 0}
!1987 = !{!1988, !1988, i64 0}
!1988 = !{!"0x9549af30.w1.b4", !1989, i64 0}
!1989 = !{!"0x9549af30.w2.b4", !1990, i64 0}
!1990 = !{!"0x9549af30.w4.b4", !1970, i64 0}
!1991 = !{!1992, !1992, i64 0}
!1992 = !{!"0x9549be40.w1.b0", !1993, i64 0}
!1993 = !{!"0x9549be40.w2.b0", !1994, i64 0}
!1994 = !{!"0x9549be40.w4.b0", !1995, i64 0}
!1995 = !{!"0x9549be40.w8.b0", !1996, i64 0}
!1996 = !{!"0x9549be40.w16.b0", !1997, i64 0}
!1997 = !{!"0x9549be40.w32.b0", !1998, i64 0}
!1998 = !{!"0x9549be40.w64.b0", !1999, i64 0}
!1999 = !{!"0x9549be40.w128.b0", !2000, i64 0}
!2000 = !{!"0x9549be40.w256.b0", !2001, i64 0}
!2001 = !{!"0x9549be40.w512.b0", !2002, i64 0}
!2002 = !{!"0x9549be40.w1024.b0", !2003, i64 0}
!2003 = !{!"int64", !2004, i64 0}
!2004 = !{!"0x9549be40", !8, i64 0}
!2005 = !{!2006, !2006, i64 0}
!2006 = !{!"0x9549be40.w1.b1", !1993, i64 0}
!2007 = !{!2008, !2008, i64 0}
!2008 = !{!"0x9549be40.w1.b2", !2009, i64 0}
!2009 = !{!"0x9549be40.w2.b2", !1994, i64 0}
!2010 = !{!2011, !2011, i64 0}
!2011 = !{!"0x9549be40.w1.b3", !2009, i64 0}
!2012 = !{!2013, !2013, i64 0}
!2013 = !{!"0x9549be40.w1.b4", !2014, i64 0}
!2014 = !{!"0x9549be40.w2.b4", !2015, i64 0}
!2015 = !{!"0x9549be40.w4.b4", !1995, i64 0}
!2016 = !{!2017, !2017, i64 0}
!2017 = !{!"float32", !2018, i64 0}
!2018 = !{!"0x936a78a0", !8, i64 0}
!2019 = !{!2020, !2020, i64 0}
!2020 = !{!"float32", !2021, i64 0}
!2021 = !{!"0x97731840", !8, i64 0}
!2022 = !{!2023, !2023, i64 0}
!2023 = !{!"float32", !2024, i64 0}
!2024 = !{!"0x99d3ff70", !8, i64 0}
!2025 = !{!2026, !2026, i64 0}
!2026 = !{!"float32", !2027, i64 0}
!2027 = !{!"0x95a004a0", !8, i64 0}
!2028 = !{!2029, !2029, i64 0}
!2029 = !{!"0x9548b390.w1.b0", !2030, i64 0}
!2030 = !{!"0x9548b390.w2.b0", !2031, i64 0}
!2031 = !{!"0x9548b390.w4.b0", !2032, i64 0}
!2032 = !{!"0x9548b390.w8.b0", !2033, i64 0}
!2033 = !{!"0x9548b390.w16.b0", !2034, i64 0}
!2034 = !{!"0x9548b390.w32.b0", !2035, i64 0}
!2035 = !{!"0x9548b390.w64.b0", !2036, i64 0}
!2036 = !{!"0x9548b390.w128.b0", !2037, i64 0}
!2037 = !{!"0x9548b390.w256.b0", !2038, i64 0}
!2038 = !{!"0x9548b390.w512.b0", !2039, i64 0}
!2039 = !{!"0x9548b390.w1024.b0", !2040, i64 0}
!2040 = !{!"int32", !2041, i64 0}
!2041 = !{!"0x9548b390", !8, i64 0}
!2042 = !{!2043, !2043, i64 0}
!2043 = !{!"0x9548b390.w1.b1", !2030, i64 0}
!2044 = !{!2045, !2045, i64 0}
!2045 = !{!"0x9548da70.w1.b0", !2046, i64 0}
!2046 = !{!"0x9548da70.w2.b0", !2047, i64 0}
!2047 = !{!"0x9548da70.w4.b0", !2048, i64 0}
!2048 = !{!"0x9548da70.w8.b0", !2049, i64 0}
!2049 = !{!"0x9548da70.w16.b0", !2050, i64 0}
!2050 = !{!"0x9548da70.w32.b0", !2051, i64 0}
!2051 = !{!"0x9548da70.w64.b0", !2052, i64 0}
!2052 = !{!"0x9548da70.w128.b0", !2053, i64 0}
!2053 = !{!"0x9548da70.w256.b0", !2054, i64 0}
!2054 = !{!"0x9548da70.w512.b0", !2055, i64 0}
!2055 = !{!"0x9548da70.w1024.b0", !2056, i64 0}
!2056 = !{!"int64", !2057, i64 0}
!2057 = !{!"0x9548da70", !8, i64 0}
!2058 = !{!2059, !2059, i64 0}
!2059 = !{!"0x9548da70.w1.b1", !2046, i64 0}
!2060 = !{!2061, !2061, i64 0}
!2061 = !{!"0x9548da70.w1.b2", !2062, i64 0}
!2062 = !{!"0x9548da70.w2.b2", !2047, i64 0}
!2063 = !{!2064, !2064, i64 0}
!2064 = !{!"0x9548da70.w1.b3", !2062, i64 0}
!2065 = !{!2066, !2066, i64 0}
!2066 = !{!"0x9548dfa0.w1.b0", !2067, i64 0}
!2067 = !{!"0x9548dfa0.w2.b0", !2068, i64 0}
!2068 = !{!"0x9548dfa0.w4.b0", !2069, i64 0}
!2069 = !{!"0x9548dfa0.w8.b0", !2070, i64 0}
!2070 = !{!"0x9548dfa0.w16.b0", !2071, i64 0}
!2071 = !{!"0x9548dfa0.w32.b0", !2072, i64 0}
!2072 = !{!"0x9548dfa0.w64.b0", !2073, i64 0}
!2073 = !{!"0x9548dfa0.w128.b0", !2074, i64 0}
!2074 = !{!"0x9548dfa0.w256.b0", !2075, i64 0}
!2075 = !{!"0x9548dfa0.w512.b0", !2076, i64 0}
!2076 = !{!"0x9548dfa0.w1024.b0", !2077, i64 0}
!2077 = !{!"int64", !2078, i64 0}
!2078 = !{!"0x9548dfa0", !8, i64 0}
!2079 = !{!2080, !2080, i64 0}
!2080 = !{!"0x9548dfa0.w1.b1", !2067, i64 0}
!2081 = !{!2082, !2082, i64 0}
!2082 = !{!"0x9548dfa0.w1.b2", !2083, i64 0}
!2083 = !{!"0x9548dfa0.w2.b2", !2068, i64 0}
!2084 = !{!2085, !2085, i64 0}
!2085 = !{!"0x9548dfa0.w1.b3", !2083, i64 0}
!2086 = !{!2087, !2087, i64 0}
!2087 = !{!"0x9548ffa0.w1.b0", !2088, i64 0}
!2088 = !{!"0x9548ffa0.w2.b0", !2089, i64 0}
!2089 = !{!"0x9548ffa0.w4.b0", !2090, i64 0}
!2090 = !{!"0x9548ffa0.w8.b0", !2091, i64 0}
!2091 = !{!"0x9548ffa0.w16.b0", !2092, i64 0}
!2092 = !{!"0x9548ffa0.w32.b0", !2093, i64 0}
!2093 = !{!"0x9548ffa0.w64.b0", !2094, i64 0}
!2094 = !{!"0x9548ffa0.w128.b0", !2095, i64 0}
!2095 = !{!"0x9548ffa0.w256.b0", !2096, i64 0}
!2096 = !{!"0x9548ffa0.w512.b0", !2097, i64 0}
!2097 = !{!"0x9548ffa0.w1024.b0", !2098, i64 0}
!2098 = !{!"int64", !2099, i64 0}
!2099 = !{!"0x9548ffa0", !8, i64 0}
!2100 = !{!2101, !2101, i64 0}
!2101 = !{!"0x9548ffa0.w1.b1", !2088, i64 0}
!2102 = !{!2103, !2103, i64 0}
!2103 = !{!"0x9548ffa0.w1.b2", !2104, i64 0}
!2104 = !{!"0x9548ffa0.w2.b2", !2089, i64 0}
!2105 = !{!2106, !2106, i64 0}
!2106 = !{!"0x9548ffa0.w1.b3", !2104, i64 0}
!2107 = !{!2108, !2108, i64 0}
!2108 = !{!"0x9548ffa0.w1.b4", !2109, i64 0}
!2109 = !{!"0x9548ffa0.w2.b4", !2110, i64 0}
!2110 = !{!"0x9548ffa0.w4.b4", !2090, i64 0}
!2111 = !{!2112, !2112, i64 0}
!2112 = !{!"0x954901a0.w1.b0", !2113, i64 0}
!2113 = !{!"0x954901a0.w2.b0", !2114, i64 0}
!2114 = !{!"0x954901a0.w4.b0", !2115, i64 0}
!2115 = !{!"0x954901a0.w8.b0", !2116, i64 0}
!2116 = !{!"0x954901a0.w16.b0", !2117, i64 0}
!2117 = !{!"0x954901a0.w32.b0", !2118, i64 0}
!2118 = !{!"0x954901a0.w64.b0", !2119, i64 0}
!2119 = !{!"0x954901a0.w128.b0", !2120, i64 0}
!2120 = !{!"0x954901a0.w256.b0", !2121, i64 0}
!2121 = !{!"0x954901a0.w512.b0", !2122, i64 0}
!2122 = !{!"0x954901a0.w1024.b0", !2123, i64 0}
!2123 = !{!"int64", !2124, i64 0}
!2124 = !{!"0x954901a0", !8, i64 0}
!2125 = !{!2126, !2126, i64 0}
!2126 = !{!"0x954901a0.w1.b1", !2113, i64 0}
!2127 = !{!2128, !2128, i64 0}
!2128 = !{!"0x954901a0.w1.b2", !2129, i64 0}
!2129 = !{!"0x954901a0.w2.b2", !2114, i64 0}
!2130 = !{!2131, !2131, i64 0}
!2131 = !{!"0x954901a0.w1.b3", !2129, i64 0}
!2132 = !{!2133, !2133, i64 0}
!2133 = !{!"0x954901a0.w1.b4", !2134, i64 0}
!2134 = !{!"0x954901a0.w2.b4", !2135, i64 0}
!2135 = !{!"0x954901a0.w4.b4", !2115, i64 0}
!2136 = !{!2137, !2137, i64 0}
!2137 = !{!"float32", !2138, i64 0}
!2138 = !{!"0xaa5bd4c0", !8, i64 0}
!2139 = !{!2140, !2140, i64 0}
!2140 = !{!"float32", !2141, i64 0}
!2141 = !{!"0xaa5b1570", !8, i64 0}
!2142 = !{!2143, !2143, i64 0}
!2143 = !{!"0x932dd850.w1.b0", !2144, i64 0}
!2144 = !{!"0x932dd850.w2.b0", !2145, i64 0}
!2145 = !{!"0x932dd850.w4.b0", !2146, i64 0}
!2146 = !{!"0x932dd850.w8.b0", !2147, i64 0}
!2147 = !{!"0x932dd850.w16.b0", !2148, i64 0}
!2148 = !{!"0x932dd850.w32.b0", !2149, i64 0}
!2149 = !{!"0x932dd850.w64.b0", !2150, i64 0}
!2150 = !{!"0x932dd850.w128.b0", !2151, i64 0}
!2151 = !{!"0x932dd850.w256.b0", !2152, i64 0}
!2152 = !{!"0x932dd850.w512.b0", !2153, i64 0}
!2153 = !{!"0x932dd850.w1024.b0", !2154, i64 0}
!2154 = !{!"int32", !2155, i64 0}
!2155 = !{!"0x932dd850", !8, i64 0}
!2156 = !{!2157, !2157, i64 0}
!2157 = !{!"0x932dd850.w1.b2", !2158, i64 0}
!2158 = !{!"0x932dd850.w2.b2", !2145, i64 0}
!2159 = !{!2160, !2160, i64 0}
!2160 = !{!"0x932dd850.w1.b3", !2158, i64 0}
!2161 = !{!2162, !2162, i64 0}
!2162 = !{!"0x932dd850.w1.b4", !2163, i64 0}
!2163 = !{!"0x932dd850.w2.b4", !2164, i64 0}
!2164 = !{!"0x932dd850.w4.b4", !2146, i64 0}
!2165 = !{!2166, !2166, i64 0}
!2166 = !{!"0x932dd850.w1.b1", !2144, i64 0}
!2167 = !{!2168, !2168, i64 0}
!2168 = !{!"0x932ebd50.w1.b0", !2169, i64 0}
!2169 = !{!"0x932ebd50.w2.b0", !2170, i64 0}
!2170 = !{!"0x932ebd50.w4.b0", !2171, i64 0}
!2171 = !{!"0x932ebd50.w8.b0", !2172, i64 0}
!2172 = !{!"0x932ebd50.w16.b0", !2173, i64 0}
!2173 = !{!"0x932ebd50.w32.b0", !2174, i64 0}
!2174 = !{!"0x932ebd50.w64.b0", !2175, i64 0}
!2175 = !{!"0x932ebd50.w128.b0", !2176, i64 0}
!2176 = !{!"0x932ebd50.w256.b0", !2177, i64 0}
!2177 = !{!"0x932ebd50.w512.b0", !2178, i64 0}
!2178 = !{!"0x932ebd50.w1024.b0", !2179, i64 0}
!2179 = !{!"int64", !2180, i64 0}
!2180 = !{!"0x932ebd50", !8, i64 0}
!2181 = !{!2182, !2182, i64 0}
!2182 = !{!"0x932ebd50.w1.b1", !2169, i64 0}
!2183 = !{!2184, !2184, i64 0}
!2184 = !{!"0x932ebd50.w1.b2", !2185, i64 0}
!2185 = !{!"0x932ebd50.w2.b2", !2170, i64 0}
!2186 = !{!2187, !2187, i64 0}
!2187 = !{!"0x932ebd50.w1.b3", !2185, i64 0}
!2188 = !{!2189, !2189, i64 0}
!2189 = !{!"0x932ebd50.w1.b4", !2190, i64 0}
!2190 = !{!"0x932ebd50.w2.b4", !2191, i64 0}
!2191 = !{!"0x932ebd50.w4.b4", !2171, i64 0}
!2192 = !{!2193, !2193, i64 0}
!2193 = !{!"0x932ebe90.w1.b0", !2194, i64 0}
!2194 = !{!"0x932ebe90.w2.b0", !2195, i64 0}
!2195 = !{!"0x932ebe90.w4.b0", !2196, i64 0}
!2196 = !{!"0x932ebe90.w8.b0", !2197, i64 0}
!2197 = !{!"0x932ebe90.w16.b0", !2198, i64 0}
!2198 = !{!"0x932ebe90.w32.b0", !2199, i64 0}
!2199 = !{!"0x932ebe90.w64.b0", !2200, i64 0}
!2200 = !{!"0x932ebe90.w128.b0", !2201, i64 0}
!2201 = !{!"0x932ebe90.w256.b0", !2202, i64 0}
!2202 = !{!"0x932ebe90.w512.b0", !2203, i64 0}
!2203 = !{!"0x932ebe90.w1024.b0", !2204, i64 0}
!2204 = !{!"int64", !2205, i64 0}
!2205 = !{!"0x932ebe90", !8, i64 0}
!2206 = !{!2207, !2207, i64 0}
!2207 = !{!"0x932ebe90.w1.b1", !2194, i64 0}
!2208 = !{!2209, !2209, i64 0}
!2209 = !{!"0x932ebe90.w1.b2", !2210, i64 0}
!2210 = !{!"0x932ebe90.w2.b2", !2195, i64 0}
!2211 = !{!2212, !2212, i64 0}
!2212 = !{!"0x932ebe90.w1.b3", !2210, i64 0}
!2213 = !{!2214, !2214, i64 0}
!2214 = !{!"0x932ebe90.w1.b4", !2215, i64 0}
!2215 = !{!"0x932ebe90.w2.b4", !2216, i64 0}
!2216 = !{!"0x932ebe90.w4.b4", !2196, i64 0}
!2217 = !{!2218, !2218, i64 0}
!2218 = !{!"0x932edf90.w1.b0", !2219, i64 0}
!2219 = !{!"0x932edf90.w2.b0", !2220, i64 0}
!2220 = !{!"0x932edf90.w4.b0", !2221, i64 0}
!2221 = !{!"0x932edf90.w8.b0", !2222, i64 0}
!2222 = !{!"0x932edf90.w16.b0", !2223, i64 0}
!2223 = !{!"0x932edf90.w32.b0", !2224, i64 0}
!2224 = !{!"0x932edf90.w64.b0", !2225, i64 0}
!2225 = !{!"0x932edf90.w128.b0", !2226, i64 0}
!2226 = !{!"0x932edf90.w256.b0", !2227, i64 0}
!2227 = !{!"0x932edf90.w512.b0", !2228, i64 0}
!2228 = !{!"0x932edf90.w1024.b0", !2229, i64 0}
!2229 = !{!"int64", !2230, i64 0}
!2230 = !{!"0x932edf90", !8, i64 0}
!2231 = !{!2232, !2232, i64 0}
!2232 = !{!"0x932edf90.w1.b1", !2219, i64 0}
!2233 = !{!2234, !2234, i64 0}
!2234 = !{!"0x932edf90.w1.b2", !2235, i64 0}
!2235 = !{!"0x932edf90.w2.b2", !2220, i64 0}
!2236 = !{!2237, !2237, i64 0}
!2237 = !{!"0x932edf90.w1.b3", !2235, i64 0}
!2238 = !{!2239, !2239, i64 0}
!2239 = !{!"0x932edf90.w1.b4", !2240, i64 0}
!2240 = !{!"0x932edf90.w2.b4", !2241, i64 0}
!2241 = !{!"0x932edf90.w4.b4", !2221, i64 0}
!2242 = !{!2243, !2243, i64 0}
!2243 = !{!"0x932edf90.w1.b5", !2240, i64 0}
!2244 = !{!2245, !2245, i64 0}
!2245 = !{!"0x932ee190.w1.b0", !2246, i64 0}
!2246 = !{!"0x932ee190.w2.b0", !2247, i64 0}
!2247 = !{!"0x932ee190.w4.b0", !2248, i64 0}
!2248 = !{!"0x932ee190.w8.b0", !2249, i64 0}
!2249 = !{!"0x932ee190.w16.b0", !2250, i64 0}
!2250 = !{!"0x932ee190.w32.b0", !2251, i64 0}
!2251 = !{!"0x932ee190.w64.b0", !2252, i64 0}
!2252 = !{!"0x932ee190.w128.b0", !2253, i64 0}
!2253 = !{!"0x932ee190.w256.b0", !2254, i64 0}
!2254 = !{!"0x932ee190.w512.b0", !2255, i64 0}
!2255 = !{!"0x932ee190.w1024.b0", !2256, i64 0}
!2256 = !{!"int64", !2257, i64 0}
!2257 = !{!"0x932ee190", !8, i64 0}
!2258 = !{!2259, !2259, i64 0}
!2259 = !{!"0x932ee190.w1.b1", !2246, i64 0}
!2260 = !{!2261, !2261, i64 0}
!2261 = !{!"0x932ee190.w1.b2", !2262, i64 0}
!2262 = !{!"0x932ee190.w2.b2", !2247, i64 0}
!2263 = !{!2264, !2264, i64 0}
!2264 = !{!"0x932ee190.w1.b3", !2262, i64 0}
!2265 = !{!2266, !2266, i64 0}
!2266 = !{!"0x932ee190.w1.b4", !2267, i64 0}
!2267 = !{!"0x932ee190.w2.b4", !2268, i64 0}
!2268 = !{!"0x932ee190.w4.b4", !2248, i64 0}
!2269 = !{!2270, !2270, i64 0}
!2270 = !{!"0x932ee190.w1.b5", !2267, i64 0}
!2271 = !{!2272, !2272, i64 0}
!2272 = !{!"0x932f0030.w1.b0", !2273, i64 0}
!2273 = !{!"0x932f0030.w2.b0", !2274, i64 0}
!2274 = !{!"0x932f0030.w4.b0", !2275, i64 0}
!2275 = !{!"0x932f0030.w8.b0", !2276, i64 0}
!2276 = !{!"0x932f0030.w16.b0", !2277, i64 0}
!2277 = !{!"0x932f0030.w32.b0", !2278, i64 0}
!2278 = !{!"0x932f0030.w64.b0", !2279, i64 0}
!2279 = !{!"0x932f0030.w128.b0", !2280, i64 0}
!2280 = !{!"0x932f0030.w256.b0", !2281, i64 0}
!2281 = !{!"0x932f0030.w512.b0", !2282, i64 0}
!2282 = !{!"0x932f0030.w1024.b0", !2283, i64 0}
!2283 = !{!"int64", !2284, i64 0}
!2284 = !{!"0x932f0030", !8, i64 0}
!2285 = !{!2286, !2286, i64 0}
!2286 = !{!"0x932f0030.w1.b1", !2273, i64 0}
!2287 = !{!2288, !2288, i64 0}
!2288 = !{!"0x932f0030.w1.b2", !2289, i64 0}
!2289 = !{!"0x932f0030.w2.b2", !2274, i64 0}
!2290 = !{!2291, !2291, i64 0}
!2291 = !{!"0x932f0030.w1.b3", !2289, i64 0}
!2292 = !{!2293, !2293, i64 0}
!2293 = !{!"0x932f0030.w1.b4", !2294, i64 0}
!2294 = !{!"0x932f0030.w2.b4", !2295, i64 0}
!2295 = !{!"0x932f0030.w4.b4", !2275, i64 0}
!2296 = !{!2297, !2297, i64 0}
!2297 = !{!"0x932ee490.w1.b0", !2298, i64 0}
!2298 = !{!"0x932ee490.w2.b0", !2299, i64 0}
!2299 = !{!"0x932ee490.w4.b0", !2300, i64 0}
!2300 = !{!"0x932ee490.w8.b0", !2301, i64 0}
!2301 = !{!"0x932ee490.w16.b0", !2302, i64 0}
!2302 = !{!"0x932ee490.w32.b0", !2303, i64 0}
!2303 = !{!"0x932ee490.w64.b0", !2304, i64 0}
!2304 = !{!"0x932ee490.w128.b0", !2305, i64 0}
!2305 = !{!"0x932ee490.w256.b0", !2306, i64 0}
!2306 = !{!"0x932ee490.w512.b0", !2307, i64 0}
!2307 = !{!"0x932ee490.w1024.b0", !2308, i64 0}
!2308 = !{!"int64", !2309, i64 0}
!2309 = !{!"0x932ee490", !8, i64 0}
!2310 = !{!2311, !2311, i64 0}
!2311 = !{!"0x932ee490.w1.b1", !2298, i64 0}
!2312 = !{!2313, !2313, i64 0}
!2313 = !{!"0x932ee490.w1.b2", !2314, i64 0}
!2314 = !{!"0x932ee490.w2.b2", !2299, i64 0}
!2315 = !{!2316, !2316, i64 0}
!2316 = !{!"0x932ee490.w1.b3", !2314, i64 0}
!2317 = !{!2318, !2318, i64 0}
!2318 = !{!"0x932ee490.w1.b4", !2319, i64 0}
!2319 = !{!"0x932ee490.w2.b4", !2320, i64 0}
!2320 = !{!"0x932ee490.w4.b4", !2300, i64 0}
!2321 = !{!2322, !2322, i64 0}
!2322 = !{!"0x932f25f0.w1.b0", !2323, i64 0}
!2323 = !{!"0x932f25f0.w2.b0", !2324, i64 0}
!2324 = !{!"0x932f25f0.w4.b0", !2325, i64 0}
!2325 = !{!"0x932f25f0.w8.b0", !2326, i64 0}
!2326 = !{!"0x932f25f0.w16.b0", !2327, i64 0}
!2327 = !{!"0x932f25f0.w32.b0", !2328, i64 0}
!2328 = !{!"0x932f25f0.w64.b0", !2329, i64 0}
!2329 = !{!"0x932f25f0.w128.b0", !2330, i64 0}
!2330 = !{!"0x932f25f0.w256.b0", !2331, i64 0}
!2331 = !{!"0x932f25f0.w512.b0", !2332, i64 0}
!2332 = !{!"0x932f25f0.w1024.b0", !2333, i64 0}
!2333 = !{!"int64", !2334, i64 0}
!2334 = !{!"0x932f25f0", !8, i64 0}
!2335 = !{!2336, !2336, i64 0}
!2336 = !{!"0x932f25f0.w1.b1", !2323, i64 0}
!2337 = !{!2338, !2338, i64 0}
!2338 = !{!"0x932f25f0.w1.b2", !2339, i64 0}
!2339 = !{!"0x932f25f0.w2.b2", !2324, i64 0}
!2340 = !{!2341, !2341, i64 0}
!2341 = !{!"0x932f25f0.w1.b3", !2339, i64 0}
!2342 = !{!2343, !2343, i64 0}
!2343 = !{!"0x932f25f0.w1.b4", !2344, i64 0}
!2344 = !{!"0x932f25f0.w2.b4", !2345, i64 0}
!2345 = !{!"0x932f25f0.w4.b4", !2325, i64 0}
!2346 = !{!2347, !2347, i64 0}
!2347 = !{!"0x932f3500.w1.b0", !2348, i64 0}
!2348 = !{!"0x932f3500.w2.b0", !2349, i64 0}
!2349 = !{!"0x932f3500.w4.b0", !2350, i64 0}
!2350 = !{!"0x932f3500.w8.b0", !2351, i64 0}
!2351 = !{!"0x932f3500.w16.b0", !2352, i64 0}
!2352 = !{!"0x932f3500.w32.b0", !2353, i64 0}
!2353 = !{!"0x932f3500.w64.b0", !2354, i64 0}
!2354 = !{!"0x932f3500.w128.b0", !2355, i64 0}
!2355 = !{!"0x932f3500.w256.b0", !2356, i64 0}
!2356 = !{!"0x932f3500.w512.b0", !2357, i64 0}
!2357 = !{!"0x932f3500.w1024.b0", !2358, i64 0}
!2358 = !{!"int64", !2359, i64 0}
!2359 = !{!"0x932f3500", !8, i64 0}
!2360 = !{!2361, !2361, i64 0}
!2361 = !{!"0x932f3500.w1.b1", !2348, i64 0}
!2362 = !{!2363, !2363, i64 0}
!2363 = !{!"0x932f3500.w1.b2", !2364, i64 0}
!2364 = !{!"0x932f3500.w2.b2", !2349, i64 0}
!2365 = !{!2366, !2366, i64 0}
!2366 = !{!"0x932f3500.w1.b3", !2364, i64 0}
!2367 = !{!2368, !2368, i64 0}
!2368 = !{!"0x932f3500.w1.b4", !2369, i64 0}
!2369 = !{!"0x932f3500.w2.b4", !2370, i64 0}
!2370 = !{!"0x932f3500.w4.b4", !2350, i64 0}
!2371 = !{!2372, !2372, i64 0}
!2372 = !{!"0x932f50b0.w1.b0", !2373, i64 0}
!2373 = !{!"0x932f50b0.w2.b0", !2374, i64 0}
!2374 = !{!"0x932f50b0.w4.b0", !2375, i64 0}
!2375 = !{!"0x932f50b0.w8.b0", !2376, i64 0}
!2376 = !{!"0x932f50b0.w16.b0", !2377, i64 0}
!2377 = !{!"0x932f50b0.w32.b0", !2378, i64 0}
!2378 = !{!"0x932f50b0.w64.b0", !2379, i64 0}
!2379 = !{!"0x932f50b0.w128.b0", !2380, i64 0}
!2380 = !{!"0x932f50b0.w256.b0", !2381, i64 0}
!2381 = !{!"0x932f50b0.w512.b0", !2382, i64 0}
!2382 = !{!"0x932f50b0.w1024.b0", !2383, i64 0}
!2383 = !{!"int64", !2384, i64 0}
!2384 = !{!"0x932f50b0", !8, i64 0}
!2385 = !{!2386, !2386, i64 0}
!2386 = !{!"0x932f50b0.w1.b1", !2373, i64 0}
!2387 = !{!2388, !2388, i64 0}
!2388 = !{!"0x932f50b0.w1.b2", !2389, i64 0}
!2389 = !{!"0x932f50b0.w2.b2", !2374, i64 0}
!2390 = !{!2391, !2391, i64 0}
!2391 = !{!"0x932f50b0.w1.b3", !2389, i64 0}
!2392 = !{!2393, !2393, i64 0}
!2393 = !{!"0x932f50b0.w1.b4", !2394, i64 0}
!2394 = !{!"0x932f50b0.w2.b4", !2395, i64 0}
!2395 = !{!"0x932f50b0.w4.b4", !2375, i64 0}
!2396 = !{!2397, !2397, i64 0}
!2397 = !{!"0x932f4e60.w1.b0", !2398, i64 0}
!2398 = !{!"0x932f4e60.w2.b0", !2399, i64 0}
!2399 = !{!"0x932f4e60.w4.b0", !2400, i64 0}
!2400 = !{!"0x932f4e60.w8.b0", !2401, i64 0}
!2401 = !{!"0x932f4e60.w16.b0", !2402, i64 0}
!2402 = !{!"0x932f4e60.w32.b0", !2403, i64 0}
!2403 = !{!"0x932f4e60.w64.b0", !2404, i64 0}
!2404 = !{!"0x932f4e60.w128.b0", !2405, i64 0}
!2405 = !{!"0x932f4e60.w256.b0", !2406, i64 0}
!2406 = !{!"0x932f4e60.w512.b0", !2407, i64 0}
!2407 = !{!"0x932f4e60.w1024.b0", !2408, i64 0}
!2408 = !{!"int64", !2409, i64 0}
!2409 = !{!"0x932f4e60", !8, i64 0}
!2410 = !{!2411, !2411, i64 0}
!2411 = !{!"0x932f4e60.w1.b1", !2398, i64 0}
!2412 = !{!2413, !2413, i64 0}
!2413 = !{!"0x932f4e60.w1.b2", !2414, i64 0}
!2414 = !{!"0x932f4e60.w2.b2", !2399, i64 0}
!2415 = !{!2416, !2416, i64 0}
!2416 = !{!"0x932f4e60.w1.b3", !2414, i64 0}
!2417 = !{!2418, !2418, i64 0}
!2418 = !{!"0x932f4e60.w1.b4", !2419, i64 0}
!2419 = !{!"0x932f4e60.w2.b4", !2420, i64 0}
!2420 = !{!"0x932f4e60.w4.b4", !2400, i64 0}
!2421 = !{!2422, !2422, i64 0}
!2422 = !{!"float32", !2423, i64 0}
!2423 = !{!"0xa8bbc500", !8, i64 0}
!2424 = !{!2425, !2425, i64 0}
!2425 = !{!"float32", !2426, i64 0}
!2426 = !{!"0xa8b725d0", !8, i64 0}
!2427 = !{!2428, !2428, i64 0}
!2428 = !{!"0x9559fe40.w8.b0", !2429, i64 0}
!2429 = !{!"0x9559fe40.w16.b0", !2430, i64 0}
!2430 = !{!"0x9559fe40.w32.b0", !2431, i64 0}
!2431 = !{!"0x9559fe40.w64.b0", !2432, i64 0}
!2432 = !{!"0x9559fe40.w128.b0", !2433, i64 0}
!2433 = !{!"0x9559fe40.w256.b0", !2434, i64 0}
!2434 = !{!"0x9559fe40.w512.b0", !2435, i64 0}
!2435 = !{!"0x9559fe40.w1024.b0", !2436, i64 0}
!2436 = !{!"float32", !2437, i64 0}
!2437 = !{!"0x9559fe40", !8, i64 0}
!2438 = !{!2439, !2439, i64 0}
!2439 = !{!"0x9559fe40.w8.b8", !2429, i64 0}
!2440 = !{!2441, !2441, i64 0}
!2441 = !{!"0x9559fe40.w8.b16", !2442, i64 0}
!2442 = !{!"0x9559fe40.w16.b16", !2430, i64 0}
!2443 = !{!2444, !2444, i64 0}
!2444 = !{!"0x9559fe40.w8.b24", !2442, i64 0}
!2445 = !{!2446, !2446, i64 0}
!2446 = !{!"0x9559fe40.w8.b32", !2447, i64 0}
!2447 = !{!"0x9559fe40.w16.b32", !2448, i64 0}
!2448 = !{!"0x9559fe40.w32.b32", !2431, i64 0}
!2449 = !{!2450, !2450, i64 0}
!2450 = !{!"0x9559fe40.w8.b40", !2447, i64 0}
!2451 = !{!2452, !2452, i64 0}
!2452 = !{!"0x9559fe40.w8.b48", !2453, i64 0}
!2453 = !{!"0x9559fe40.w16.b48", !2448, i64 0}
!2454 = !{!2455, !2455, i64 0}
!2455 = !{!"0x9559fe40.w8.b56", !2453, i64 0}
!2456 = !{!2457, !2457, i64 0}
!2457 = !{!"0x9559fe40.w8.b64", !2458, i64 0}
!2458 = !{!"0x9559fe40.w16.b64", !2459, i64 0}
!2459 = !{!"0x9559fe40.w32.b64", !2460, i64 0}
!2460 = !{!"0x9559fe40.w64.b64", !2432, i64 0}
!2461 = !{!2462, !2462, i64 0}
!2462 = !{!"0x9559fe40.w8.b72", !2458, i64 0}
!2463 = !{!2464, !2464, i64 0}
!2464 = !{!"0x9559fe40.w8.b80", !2465, i64 0}
!2465 = !{!"0x9559fe40.w16.b80", !2459, i64 0}
!2466 = !{!2467, !2467, i64 0}
!2467 = !{!"0x9559fe40.w8.b88", !2465, i64 0}
!2468 = !{!2469, !2469, i64 0}
!2469 = !{!"0x9559fe40.w8.b96", !2470, i64 0}
!2470 = !{!"0x9559fe40.w16.b96", !2471, i64 0}
!2471 = !{!"0x9559fe40.w32.b96", !2460, i64 0}
!2472 = !{!2473, !2473, i64 0}
!2473 = !{!"0x9559fe40.w8.b104", !2470, i64 0}
!2474 = !{!2475, !2475, i64 0}
!2475 = !{!"float32", !2476, i64 0}
!2476 = !{!"0x9e8f4080", !8, i64 0}
!2477 = !{!2478, !2478, i64 0}
!2478 = !{!"float32", !2479, i64 0}
!2479 = !{!"0xa8a06a00", !8, i64 0}
!2480 = !{!2481, !2481, i64 0}
!2481 = !{!"float32", !2482, i64 0}
!2482 = !{!"0x9f040520", !8, i64 0}
!2483 = !{!2436, !2436, i64 0}
!2484 = !{!2485, !2485, i64 0}
!2485 = !{!"0x932ec060.w1.b0", !2486, i64 0}
!2486 = !{!"0x932ec060.w2.b0", !2487, i64 0}
!2487 = !{!"0x932ec060.w4.b0", !2488, i64 0}
!2488 = !{!"0x932ec060.w8.b0", !2489, i64 0}
!2489 = !{!"0x932ec060.w16.b0", !2490, i64 0}
!2490 = !{!"0x932ec060.w32.b0", !2491, i64 0}
!2491 = !{!"0x932ec060.w64.b0", !2492, i64 0}
!2492 = !{!"0x932ec060.w128.b0", !2493, i64 0}
!2493 = !{!"0x932ec060.w256.b0", !2494, i64 0}
!2494 = !{!"0x932ec060.w512.b0", !2495, i64 0}
!2495 = !{!"0x932ec060.w1024.b0", !2496, i64 0}
!2496 = !{!"int32", !2497, i64 0}
!2497 = !{!"0x932ec060", !8, i64 0}
!2498 = !{!2499, !2499, i64 0}
!2499 = !{!"0x932ec060.w1.b2", !2500, i64 0}
!2500 = !{!"0x932ec060.w2.b2", !2487, i64 0}
!2501 = !{!2502, !2502, i64 0}
!2502 = !{!"0x932ec060.w1.b3", !2500, i64 0}
!2503 = !{!2504, !2504, i64 0}
!2504 = !{!"0x932ec060.w1.b4", !2505, i64 0}
!2505 = !{!"0x932ec060.w2.b4", !2506, i64 0}
!2506 = !{!"0x932ec060.w4.b4", !2488, i64 0}
!2507 = !{!2508, !2508, i64 0}
!2508 = !{!"0x932ec060.w1.b1", !2486, i64 0}
!2509 = !{!2510, !2510, i64 0}
!2510 = !{!"0x932f9f90.w1.b0", !2511, i64 0}
!2511 = !{!"0x932f9f90.w2.b0", !2512, i64 0}
!2512 = !{!"0x932f9f90.w4.b0", !2513, i64 0}
!2513 = !{!"0x932f9f90.w8.b0", !2514, i64 0}
!2514 = !{!"0x932f9f90.w16.b0", !2515, i64 0}
!2515 = !{!"0x932f9f90.w32.b0", !2516, i64 0}
!2516 = !{!"0x932f9f90.w64.b0", !2517, i64 0}
!2517 = !{!"0x932f9f90.w128.b0", !2518, i64 0}
!2518 = !{!"0x932f9f90.w256.b0", !2519, i64 0}
!2519 = !{!"0x932f9f90.w512.b0", !2520, i64 0}
!2520 = !{!"0x932f9f90.w1024.b0", !2521, i64 0}
!2521 = !{!"int64", !2522, i64 0}
!2522 = !{!"0x932f9f90", !8, i64 0}
!2523 = !{!2524, !2524, i64 0}
!2524 = !{!"0x932f9f90.w1.b1", !2511, i64 0}
!2525 = !{!2526, !2526, i64 0}
!2526 = !{!"0x932f9f90.w1.b2", !2527, i64 0}
!2527 = !{!"0x932f9f90.w2.b2", !2512, i64 0}
!2528 = !{!2529, !2529, i64 0}
!2529 = !{!"0x932f9f90.w1.b3", !2527, i64 0}
!2530 = !{!2531, !2531, i64 0}
!2531 = !{!"0x932f9f90.w1.b4", !2532, i64 0}
!2532 = !{!"0x932f9f90.w2.b4", !2533, i64 0}
!2533 = !{!"0x932f9f90.w4.b4", !2513, i64 0}
!2534 = !{!2535, !2535, i64 0}
!2535 = !{!"0x932fa0d0.w1.b0", !2536, i64 0}
!2536 = !{!"0x932fa0d0.w2.b0", !2537, i64 0}
!2537 = !{!"0x932fa0d0.w4.b0", !2538, i64 0}
!2538 = !{!"0x932fa0d0.w8.b0", !2539, i64 0}
!2539 = !{!"0x932fa0d0.w16.b0", !2540, i64 0}
!2540 = !{!"0x932fa0d0.w32.b0", !2541, i64 0}
!2541 = !{!"0x932fa0d0.w64.b0", !2542, i64 0}
!2542 = !{!"0x932fa0d0.w128.b0", !2543, i64 0}
!2543 = !{!"0x932fa0d0.w256.b0", !2544, i64 0}
!2544 = !{!"0x932fa0d0.w512.b0", !2545, i64 0}
!2545 = !{!"0x932fa0d0.w1024.b0", !2546, i64 0}
!2546 = !{!"int64", !2547, i64 0}
!2547 = !{!"0x932fa0d0", !8, i64 0}
!2548 = !{!2549, !2549, i64 0}
!2549 = !{!"0x932fa0d0.w1.b1", !2536, i64 0}
!2550 = !{!2551, !2551, i64 0}
!2551 = !{!"0x932fa0d0.w1.b2", !2552, i64 0}
!2552 = !{!"0x932fa0d0.w2.b2", !2537, i64 0}
!2553 = !{!2554, !2554, i64 0}
!2554 = !{!"0x932fa0d0.w1.b3", !2552, i64 0}
!2555 = !{!2556, !2556, i64 0}
!2556 = !{!"0x932fa0d0.w1.b4", !2557, i64 0}
!2557 = !{!"0x932fa0d0.w2.b4", !2558, i64 0}
!2558 = !{!"0x932fa0d0.w4.b4", !2538, i64 0}
!2559 = !{!2560, !2560, i64 0}
!2560 = !{!"0x95ac6650.w1.b0", !2561, i64 0}
!2561 = !{!"0x95ac6650.w2.b0", !2562, i64 0}
!2562 = !{!"0x95ac6650.w4.b0", !2563, i64 0}
!2563 = !{!"0x95ac6650.w8.b0", !2564, i64 0}
!2564 = !{!"0x95ac6650.w16.b0", !2565, i64 0}
!2565 = !{!"0x95ac6650.w32.b0", !2566, i64 0}
!2566 = !{!"0x95ac6650.w64.b0", !2567, i64 0}
!2567 = !{!"0x95ac6650.w128.b0", !2568, i64 0}
!2568 = !{!"0x95ac6650.w256.b0", !2569, i64 0}
!2569 = !{!"0x95ac6650.w512.b0", !2570, i64 0}
!2570 = !{!"0x95ac6650.w1024.b0", !2571, i64 0}
!2571 = !{!"int64", !2572, i64 0}
!2572 = !{!"0x95ac6650", !8, i64 0}
!2573 = !{!2574, !2574, i64 0}
!2574 = !{!"0x95ac6650.w1.b1", !2561, i64 0}
!2575 = !{!2576, !2576, i64 0}
!2576 = !{!"0x95ac6650.w1.b2", !2577, i64 0}
!2577 = !{!"0x95ac6650.w2.b2", !2562, i64 0}
!2578 = !{!2579, !2579, i64 0}
!2579 = !{!"0x95ac6650.w1.b3", !2577, i64 0}
!2580 = !{!2581, !2581, i64 0}
!2581 = !{!"0x95ac6650.w1.b4", !2582, i64 0}
!2582 = !{!"0x95ac6650.w2.b4", !2583, i64 0}
!2583 = !{!"0x95ac6650.w4.b4", !2563, i64 0}
!2584 = !{!2585, !2585, i64 0}
!2585 = !{!"0x95ac6650.w1.b5", !2582, i64 0}
!2586 = !{!2587, !2587, i64 0}
!2587 = !{!"0x95ac6850.w1.b0", !2588, i64 0}
!2588 = !{!"0x95ac6850.w2.b0", !2589, i64 0}
!2589 = !{!"0x95ac6850.w4.b0", !2590, i64 0}
!2590 = !{!"0x95ac6850.w8.b0", !2591, i64 0}
!2591 = !{!"0x95ac6850.w16.b0", !2592, i64 0}
!2592 = !{!"0x95ac6850.w32.b0", !2593, i64 0}
!2593 = !{!"0x95ac6850.w64.b0", !2594, i64 0}
!2594 = !{!"0x95ac6850.w128.b0", !2595, i64 0}
!2595 = !{!"0x95ac6850.w256.b0", !2596, i64 0}
!2596 = !{!"0x95ac6850.w512.b0", !2597, i64 0}
!2597 = !{!"0x95ac6850.w1024.b0", !2598, i64 0}
!2598 = !{!"int64", !2599, i64 0}
!2599 = !{!"0x95ac6850", !8, i64 0}
!2600 = !{!2601, !2601, i64 0}
!2601 = !{!"0x95ac6850.w1.b1", !2588, i64 0}
!2602 = !{!2603, !2603, i64 0}
!2603 = !{!"0x95ac6850.w1.b2", !2604, i64 0}
!2604 = !{!"0x95ac6850.w2.b2", !2589, i64 0}
!2605 = !{!2606, !2606, i64 0}
!2606 = !{!"0x95ac6850.w1.b3", !2604, i64 0}
!2607 = !{!2608, !2608, i64 0}
!2608 = !{!"0x95ac6850.w1.b4", !2609, i64 0}
!2609 = !{!"0x95ac6850.w2.b4", !2610, i64 0}
!2610 = !{!"0x95ac6850.w4.b4", !2590, i64 0}
!2611 = !{!2612, !2612, i64 0}
!2612 = !{!"0x95ac6850.w1.b5", !2609, i64 0}
!2613 = !{!2614, !2614, i64 0}
!2614 = !{!"0x95ac86f0.w1.b0", !2615, i64 0}
!2615 = !{!"0x95ac86f0.w2.b0", !2616, i64 0}
!2616 = !{!"0x95ac86f0.w4.b0", !2617, i64 0}
!2617 = !{!"0x95ac86f0.w8.b0", !2618, i64 0}
!2618 = !{!"0x95ac86f0.w16.b0", !2619, i64 0}
!2619 = !{!"0x95ac86f0.w32.b0", !2620, i64 0}
!2620 = !{!"0x95ac86f0.w64.b0", !2621, i64 0}
!2621 = !{!"0x95ac86f0.w128.b0", !2622, i64 0}
!2622 = !{!"0x95ac86f0.w256.b0", !2623, i64 0}
!2623 = !{!"0x95ac86f0.w512.b0", !2624, i64 0}
!2624 = !{!"0x95ac86f0.w1024.b0", !2625, i64 0}
!2625 = !{!"int64", !2626, i64 0}
!2626 = !{!"0x95ac86f0", !8, i64 0}
!2627 = !{!2628, !2628, i64 0}
!2628 = !{!"0x95ac86f0.w1.b1", !2615, i64 0}
!2629 = !{!2630, !2630, i64 0}
!2630 = !{!"0x95ac86f0.w1.b2", !2631, i64 0}
!2631 = !{!"0x95ac86f0.w2.b2", !2616, i64 0}
!2632 = !{!2633, !2633, i64 0}
!2633 = !{!"0x95ac86f0.w1.b3", !2631, i64 0}
!2634 = !{!2635, !2635, i64 0}
!2635 = !{!"0x95ac86f0.w1.b4", !2636, i64 0}
!2636 = !{!"0x95ac86f0.w2.b4", !2637, i64 0}
!2637 = !{!"0x95ac86f0.w4.b4", !2617, i64 0}
!2638 = !{!2639, !2639, i64 0}
!2639 = !{!"0x95ac6b50.w1.b0", !2640, i64 0}
!2640 = !{!"0x95ac6b50.w2.b0", !2641, i64 0}
!2641 = !{!"0x95ac6b50.w4.b0", !2642, i64 0}
!2642 = !{!"0x95ac6b50.w8.b0", !2643, i64 0}
!2643 = !{!"0x95ac6b50.w16.b0", !2644, i64 0}
!2644 = !{!"0x95ac6b50.w32.b0", !2645, i64 0}
!2645 = !{!"0x95ac6b50.w64.b0", !2646, i64 0}
!2646 = !{!"0x95ac6b50.w128.b0", !2647, i64 0}
!2647 = !{!"0x95ac6b50.w256.b0", !2648, i64 0}
!2648 = !{!"0x95ac6b50.w512.b0", !2649, i64 0}
!2649 = !{!"0x95ac6b50.w1024.b0", !2650, i64 0}
!2650 = !{!"int64", !2651, i64 0}
!2651 = !{!"0x95ac6b50", !8, i64 0}
!2652 = !{!2653, !2653, i64 0}
!2653 = !{!"0x95ac6b50.w1.b1", !2640, i64 0}
!2654 = !{!2655, !2655, i64 0}
!2655 = !{!"0x95ac6b50.w1.b2", !2656, i64 0}
!2656 = !{!"0x95ac6b50.w2.b2", !2641, i64 0}
!2657 = !{!2658, !2658, i64 0}
!2658 = !{!"0x95ac6b50.w1.b3", !2656, i64 0}
!2659 = !{!2660, !2660, i64 0}
!2660 = !{!"0x95ac6b50.w1.b4", !2661, i64 0}
!2661 = !{!"0x95ac6b50.w2.b4", !2662, i64 0}
!2662 = !{!"0x95ac6b50.w4.b4", !2642, i64 0}
!2663 = !{!2664, !2664, i64 0}
!2664 = !{!"0x95acacb0.w1.b0", !2665, i64 0}
!2665 = !{!"0x95acacb0.w2.b0", !2666, i64 0}
!2666 = !{!"0x95acacb0.w4.b0", !2667, i64 0}
!2667 = !{!"0x95acacb0.w8.b0", !2668, i64 0}
!2668 = !{!"0x95acacb0.w16.b0", !2669, i64 0}
!2669 = !{!"0x95acacb0.w32.b0", !2670, i64 0}
!2670 = !{!"0x95acacb0.w64.b0", !2671, i64 0}
!2671 = !{!"0x95acacb0.w128.b0", !2672, i64 0}
!2672 = !{!"0x95acacb0.w256.b0", !2673, i64 0}
!2673 = !{!"0x95acacb0.w512.b0", !2674, i64 0}
!2674 = !{!"0x95acacb0.w1024.b0", !2675, i64 0}
!2675 = !{!"int64", !2676, i64 0}
!2676 = !{!"0x95acacb0", !8, i64 0}
!2677 = !{!2678, !2678, i64 0}
!2678 = !{!"0x95acacb0.w1.b1", !2665, i64 0}
!2679 = !{!2680, !2680, i64 0}
!2680 = !{!"0x95acacb0.w1.b2", !2681, i64 0}
!2681 = !{!"0x95acacb0.w2.b2", !2666, i64 0}
!2682 = !{!2683, !2683, i64 0}
!2683 = !{!"0x95acacb0.w1.b3", !2681, i64 0}
!2684 = !{!2685, !2685, i64 0}
!2685 = !{!"0x95acacb0.w1.b4", !2686, i64 0}
!2686 = !{!"0x95acacb0.w2.b4", !2687, i64 0}
!2687 = !{!"0x95acacb0.w4.b4", !2667, i64 0}
!2688 = !{!2689, !2689, i64 0}
!2689 = !{!"0x95acbbc0.w1.b0", !2690, i64 0}
!2690 = !{!"0x95acbbc0.w2.b0", !2691, i64 0}
!2691 = !{!"0x95acbbc0.w4.b0", !2692, i64 0}
!2692 = !{!"0x95acbbc0.w8.b0", !2693, i64 0}
!2693 = !{!"0x95acbbc0.w16.b0", !2694, i64 0}
!2694 = !{!"0x95acbbc0.w32.b0", !2695, i64 0}
!2695 = !{!"0x95acbbc0.w64.b0", !2696, i64 0}
!2696 = !{!"0x95acbbc0.w128.b0", !2697, i64 0}
!2697 = !{!"0x95acbbc0.w256.b0", !2698, i64 0}
!2698 = !{!"0x95acbbc0.w512.b0", !2699, i64 0}
!2699 = !{!"0x95acbbc0.w1024.b0", !2700, i64 0}
!2700 = !{!"int64", !2701, i64 0}
!2701 = !{!"0x95acbbc0", !8, i64 0}
!2702 = !{!2703, !2703, i64 0}
!2703 = !{!"0x95acbbc0.w1.b1", !2690, i64 0}
!2704 = !{!2705, !2705, i64 0}
!2705 = !{!"0x95acbbc0.w1.b2", !2706, i64 0}
!2706 = !{!"0x95acbbc0.w2.b2", !2691, i64 0}
!2707 = !{!2708, !2708, i64 0}
!2708 = !{!"0x95acbbc0.w1.b3", !2706, i64 0}
!2709 = !{!2710, !2710, i64 0}
!2710 = !{!"0x95acbbc0.w1.b4", !2711, i64 0}
!2711 = !{!"0x95acbbc0.w2.b4", !2712, i64 0}
!2712 = !{!"0x95acbbc0.w4.b4", !2692, i64 0}
!2713 = !{!2714, !2714, i64 0}
!2714 = !{!"0x95acd770.w1.b0", !2715, i64 0}
!2715 = !{!"0x95acd770.w2.b0", !2716, i64 0}
!2716 = !{!"0x95acd770.w4.b0", !2717, i64 0}
!2717 = !{!"0x95acd770.w8.b0", !2718, i64 0}
!2718 = !{!"0x95acd770.w16.b0", !2719, i64 0}
!2719 = !{!"0x95acd770.w32.b0", !2720, i64 0}
!2720 = !{!"0x95acd770.w64.b0", !2721, i64 0}
!2721 = !{!"0x95acd770.w128.b0", !2722, i64 0}
!2722 = !{!"0x95acd770.w256.b0", !2723, i64 0}
!2723 = !{!"0x95acd770.w512.b0", !2724, i64 0}
!2724 = !{!"0x95acd770.w1024.b0", !2725, i64 0}
!2725 = !{!"int64", !2726, i64 0}
!2726 = !{!"0x95acd770", !8, i64 0}
!2727 = !{!2728, !2728, i64 0}
!2728 = !{!"0x95acd770.w1.b1", !2715, i64 0}
!2729 = !{!2730, !2730, i64 0}
!2730 = !{!"0x95acd770.w1.b2", !2731, i64 0}
!2731 = !{!"0x95acd770.w2.b2", !2716, i64 0}
!2732 = !{!2733, !2733, i64 0}
!2733 = !{!"0x95acd770.w1.b3", !2731, i64 0}
!2734 = !{!2735, !2735, i64 0}
!2735 = !{!"0x95acd770.w1.b4", !2736, i64 0}
!2736 = !{!"0x95acd770.w2.b4", !2737, i64 0}
!2737 = !{!"0x95acd770.w4.b4", !2717, i64 0}
!2738 = !{!2739, !2739, i64 0}
!2739 = !{!"0x95acd520.w1.b0", !2740, i64 0}
!2740 = !{!"0x95acd520.w2.b0", !2741, i64 0}
!2741 = !{!"0x95acd520.w4.b0", !2742, i64 0}
!2742 = !{!"0x95acd520.w8.b0", !2743, i64 0}
!2743 = !{!"0x95acd520.w16.b0", !2744, i64 0}
!2744 = !{!"0x95acd520.w32.b0", !2745, i64 0}
!2745 = !{!"0x95acd520.w64.b0", !2746, i64 0}
!2746 = !{!"0x95acd520.w128.b0", !2747, i64 0}
!2747 = !{!"0x95acd520.w256.b0", !2748, i64 0}
!2748 = !{!"0x95acd520.w512.b0", !2749, i64 0}
!2749 = !{!"0x95acd520.w1024.b0", !2750, i64 0}
!2750 = !{!"int64", !2751, i64 0}
!2751 = !{!"0x95acd520", !8, i64 0}
!2752 = !{!2753, !2753, i64 0}
!2753 = !{!"0x95acd520.w1.b1", !2740, i64 0}
!2754 = !{!2755, !2755, i64 0}
!2755 = !{!"0x95acd520.w1.b2", !2756, i64 0}
!2756 = !{!"0x95acd520.w2.b2", !2741, i64 0}
!2757 = !{!2758, !2758, i64 0}
!2758 = !{!"0x95acd520.w1.b3", !2756, i64 0}
!2759 = !{!2760, !2760, i64 0}
!2760 = !{!"0x95acd520.w1.b4", !2761, i64 0}
!2761 = !{!"0x95acd520.w2.b4", !2762, i64 0}
!2762 = !{!"0x95acd520.w4.b4", !2742, i64 0}
!2763 = !{!2764, !2764, i64 0}
!2764 = !{!"float32", !2765, i64 0}
!2765 = !{!"0x9f2f7f30", !8, i64 0}
!2766 = !{!2767, !2767, i64 0}
!2767 = !{!"float32", !2768, i64 0}
!2768 = !{!"0xab2b8e40", !8, i64 0}
!2769 = !{!2770, !2770, i64 0}
!2770 = !{!"float32", !2771, i64 0}
!2771 = !{!"0x9e0f9080", !8, i64 0}
!2772 = !{!2773, !2773, i64 0}
!2773 = !{!"float32", !2774, i64 0}
!2774 = !{!"0x9d5413d0", !8, i64 0}
!2775 = !{!2776, !2776, i64 0}
!2776 = !{!"float32", !2777, i64 0}
!2777 = !{!"0x93d0e510", !8, i64 0}
!2778 = !{!2779, !2779, i64 0}
!2779 = !{!"float32", !2780, i64 0}
!2780 = !{!"0x93d0e4c0", !8, i64 0}
!2781 = !{!2782, !2782, i64 0}
!2782 = !{!"0x932d8e20.w1.b0", !2783, i64 0}
!2783 = !{!"0x932d8e20.w2.b0", !2784, i64 0}
!2784 = !{!"0x932d8e20.w4.b0", !2785, i64 0}
!2785 = !{!"0x932d8e20.w8.b0", !2786, i64 0}
!2786 = !{!"0x932d8e20.w16.b0", !2787, i64 0}
!2787 = !{!"0x932d8e20.w32.b0", !2788, i64 0}
!2788 = !{!"0x932d8e20.w64.b0", !2789, i64 0}
!2789 = !{!"0x932d8e20.w128.b0", !2790, i64 0}
!2790 = !{!"0x932d8e20.w256.b0", !2791, i64 0}
!2791 = !{!"0x932d8e20.w512.b0", !2792, i64 0}
!2792 = !{!"0x932d8e20.w1024.b0", !2793, i64 0}
!2793 = !{!"int32", !2794, i64 0}
!2794 = !{!"0x932d8e20", !8, i64 0}
!2795 = !{!2796, !2796, i64 0}
!2796 = !{!"0x932d8e20.w1.b2", !2797, i64 0}
!2797 = !{!"0x932d8e20.w2.b2", !2784, i64 0}
!2798 = !{!2799, !2799, i64 0}
!2799 = !{!"0x932d8e20.w1.b3", !2797, i64 0}
!2800 = !{!2801, !2801, i64 0}
!2801 = !{!"0x932d8e20.w1.b4", !2802, i64 0}
!2802 = !{!"0x932d8e20.w2.b4", !2803, i64 0}
!2803 = !{!"0x932d8e20.w4.b4", !2785, i64 0}
!2804 = !{!2805, !2805, i64 0}
!2805 = !{!"0x932d8e20.w1.b1", !2783, i64 0}
!2806 = !{!2807, !2807, i64 0}
!2807 = !{!"0x932dcf40.w1.b0", !2808, i64 0}
!2808 = !{!"0x932dcf40.w2.b0", !2809, i64 0}
!2809 = !{!"0x932dcf40.w4.b0", !2810, i64 0}
!2810 = !{!"0x932dcf40.w8.b0", !2811, i64 0}
!2811 = !{!"0x932dcf40.w16.b0", !2812, i64 0}
!2812 = !{!"0x932dcf40.w32.b0", !2813, i64 0}
!2813 = !{!"0x932dcf40.w64.b0", !2814, i64 0}
!2814 = !{!"0x932dcf40.w128.b0", !2815, i64 0}
!2815 = !{!"0x932dcf40.w256.b0", !2816, i64 0}
!2816 = !{!"0x932dcf40.w512.b0", !2817, i64 0}
!2817 = !{!"0x932dcf40.w1024.b0", !2818, i64 0}
!2818 = !{!"int64", !2819, i64 0}
!2819 = !{!"0x932dcf40", !8, i64 0}
!2820 = !{!2821, !2821, i64 0}
!2821 = !{!"0x932dcf40.w1.b1", !2808, i64 0}
!2822 = !{!2823, !2823, i64 0}
!2823 = !{!"0x932dcf40.w1.b2", !2824, i64 0}
!2824 = !{!"0x932dcf40.w2.b2", !2809, i64 0}
!2825 = !{!2826, !2826, i64 0}
!2826 = !{!"0x932dcf40.w1.b3", !2824, i64 0}
!2827 = !{!2828, !2828, i64 0}
!2828 = !{!"0x932dcf40.w1.b4", !2829, i64 0}
!2829 = !{!"0x932dcf40.w2.b4", !2830, i64 0}
!2830 = !{!"0x932dcf40.w4.b4", !2810, i64 0}
!2831 = !{!2832, !2832, i64 0}
!2832 = !{!"0x932dd470.w1.b0", !2833, i64 0}
!2833 = !{!"0x932dd470.w2.b0", !2834, i64 0}
!2834 = !{!"0x932dd470.w4.b0", !2835, i64 0}
!2835 = !{!"0x932dd470.w8.b0", !2836, i64 0}
!2836 = !{!"0x932dd470.w16.b0", !2837, i64 0}
!2837 = !{!"0x932dd470.w32.b0", !2838, i64 0}
!2838 = !{!"0x932dd470.w64.b0", !2839, i64 0}
!2839 = !{!"0x932dd470.w128.b0", !2840, i64 0}
!2840 = !{!"0x932dd470.w256.b0", !2841, i64 0}
!2841 = !{!"0x932dd470.w512.b0", !2842, i64 0}
!2842 = !{!"0x932dd470.w1024.b0", !2843, i64 0}
!2843 = !{!"int64", !2844, i64 0}
!2844 = !{!"0x932dd470", !8, i64 0}
!2845 = !{!2846, !2846, i64 0}
!2846 = !{!"0x932dd470.w1.b1", !2833, i64 0}
!2847 = !{!2848, !2848, i64 0}
!2848 = !{!"0x932dd470.w1.b2", !2849, i64 0}
!2849 = !{!"0x932dd470.w2.b2", !2834, i64 0}
!2850 = !{!2851, !2851, i64 0}
!2851 = !{!"0x932dd470.w1.b3", !2849, i64 0}
!2852 = !{!2853, !2853, i64 0}
!2853 = !{!"0x932dd470.w1.b4", !2854, i64 0}
!2854 = !{!"0x932dd470.w2.b4", !2855, i64 0}
!2855 = !{!"0x932dd470.w4.b4", !2835, i64 0}
!2856 = !{!2857, !2857, i64 0}
!2857 = !{!"0x932df7b0.w1.b0", !2858, i64 0}
!2858 = !{!"0x932df7b0.w2.b0", !2859, i64 0}
!2859 = !{!"0x932df7b0.w4.b0", !2860, i64 0}
!2860 = !{!"0x932df7b0.w8.b0", !2861, i64 0}
!2861 = !{!"0x932df7b0.w16.b0", !2862, i64 0}
!2862 = !{!"0x932df7b0.w32.b0", !2863, i64 0}
!2863 = !{!"0x932df7b0.w64.b0", !2864, i64 0}
!2864 = !{!"0x932df7b0.w128.b0", !2865, i64 0}
!2865 = !{!"0x932df7b0.w256.b0", !2866, i64 0}
!2866 = !{!"0x932df7b0.w512.b0", !2867, i64 0}
!2867 = !{!"0x932df7b0.w1024.b0", !2868, i64 0}
!2868 = !{!"int64", !2869, i64 0}
!2869 = !{!"0x932df7b0", !8, i64 0}
!2870 = !{!2871, !2871, i64 0}
!2871 = !{!"0x932df7b0.w1.b1", !2858, i64 0}
!2872 = !{!2873, !2873, i64 0}
!2873 = !{!"0x932df7b0.w1.b2", !2874, i64 0}
!2874 = !{!"0x932df7b0.w2.b2", !2859, i64 0}
!2875 = !{!2876, !2876, i64 0}
!2876 = !{!"0x932df7b0.w1.b3", !2874, i64 0}
!2877 = !{!2878, !2878, i64 0}
!2878 = !{!"0x932df7b0.w1.b4", !2879, i64 0}
!2879 = !{!"0x932df7b0.w2.b4", !2880, i64 0}
!2880 = !{!"0x932df7b0.w4.b4", !2860, i64 0}
!2881 = !{!2882, !2882, i64 0}
!2882 = !{!"0x932df7b0.w1.b5", !2879, i64 0}
!2883 = !{!2884, !2884, i64 0}
!2884 = !{!"0x932df9b0.w1.b0", !2885, i64 0}
!2885 = !{!"0x932df9b0.w2.b0", !2886, i64 0}
!2886 = !{!"0x932df9b0.w4.b0", !2887, i64 0}
!2887 = !{!"0x932df9b0.w8.b0", !2888, i64 0}
!2888 = !{!"0x932df9b0.w16.b0", !2889, i64 0}
!2889 = !{!"0x932df9b0.w32.b0", !2890, i64 0}
!2890 = !{!"0x932df9b0.w64.b0", !2891, i64 0}
!2891 = !{!"0x932df9b0.w128.b0", !2892, i64 0}
!2892 = !{!"0x932df9b0.w256.b0", !2893, i64 0}
!2893 = !{!"0x932df9b0.w512.b0", !2894, i64 0}
!2894 = !{!"0x932df9b0.w1024.b0", !2895, i64 0}
!2895 = !{!"int64", !2896, i64 0}
!2896 = !{!"0x932df9b0", !8, i64 0}
!2897 = !{!2898, !2898, i64 0}
!2898 = !{!"0x932df9b0.w1.b1", !2885, i64 0}
!2899 = !{!2900, !2900, i64 0}
!2900 = !{!"0x932df9b0.w1.b2", !2901, i64 0}
!2901 = !{!"0x932df9b0.w2.b2", !2886, i64 0}
!2902 = !{!2903, !2903, i64 0}
!2903 = !{!"0x932df9b0.w1.b3", !2901, i64 0}
!2904 = !{!2905, !2905, i64 0}
!2905 = !{!"0x932df9b0.w1.b4", !2906, i64 0}
!2906 = !{!"0x932df9b0.w2.b4", !2907, i64 0}
!2907 = !{!"0x932df9b0.w4.b4", !2887, i64 0}
!2908 = !{!2909, !2909, i64 0}
!2909 = !{!"0x932df9b0.w1.b5", !2906, i64 0}
!2910 = !{!2911, !2911, i64 0}
!2911 = !{!"0x932e1850.w1.b0", !2912, i64 0}
!2912 = !{!"0x932e1850.w2.b0", !2913, i64 0}
!2913 = !{!"0x932e1850.w4.b0", !2914, i64 0}
!2914 = !{!"0x932e1850.w8.b0", !2915, i64 0}
!2915 = !{!"0x932e1850.w16.b0", !2916, i64 0}
!2916 = !{!"0x932e1850.w32.b0", !2917, i64 0}
!2917 = !{!"0x932e1850.w64.b0", !2918, i64 0}
!2918 = !{!"0x932e1850.w128.b0", !2919, i64 0}
!2919 = !{!"0x932e1850.w256.b0", !2920, i64 0}
!2920 = !{!"0x932e1850.w512.b0", !2921, i64 0}
!2921 = !{!"0x932e1850.w1024.b0", !2922, i64 0}
!2922 = !{!"int64", !2923, i64 0}
!2923 = !{!"0x932e1850", !8, i64 0}
!2924 = !{!2925, !2925, i64 0}
!2925 = !{!"0x932e1850.w1.b1", !2912, i64 0}
!2926 = !{!2927, !2927, i64 0}
!2927 = !{!"0x932e1850.w1.b2", !2928, i64 0}
!2928 = !{!"0x932e1850.w2.b2", !2913, i64 0}
!2929 = !{!2930, !2930, i64 0}
!2930 = !{!"0x932e1850.w1.b3", !2928, i64 0}
!2931 = !{!2932, !2932, i64 0}
!2932 = !{!"0x932e1850.w1.b4", !2933, i64 0}
!2933 = !{!"0x932e1850.w2.b4", !2934, i64 0}
!2934 = !{!"0x932e1850.w4.b4", !2914, i64 0}
!2935 = !{!2936, !2936, i64 0}
!2936 = !{!"0x932dfcb0.w1.b0", !2937, i64 0}
!2937 = !{!"0x932dfcb0.w2.b0", !2938, i64 0}
!2938 = !{!"0x932dfcb0.w4.b0", !2939, i64 0}
!2939 = !{!"0x932dfcb0.w8.b0", !2940, i64 0}
!2940 = !{!"0x932dfcb0.w16.b0", !2941, i64 0}
!2941 = !{!"0x932dfcb0.w32.b0", !2942, i64 0}
!2942 = !{!"0x932dfcb0.w64.b0", !2943, i64 0}
!2943 = !{!"0x932dfcb0.w128.b0", !2944, i64 0}
!2944 = !{!"0x932dfcb0.w256.b0", !2945, i64 0}
!2945 = !{!"0x932dfcb0.w512.b0", !2946, i64 0}
!2946 = !{!"0x932dfcb0.w1024.b0", !2947, i64 0}
!2947 = !{!"int64", !2948, i64 0}
!2948 = !{!"0x932dfcb0", !8, i64 0}
!2949 = !{!2950, !2950, i64 0}
!2950 = !{!"0x932dfcb0.w1.b1", !2937, i64 0}
!2951 = !{!2952, !2952, i64 0}
!2952 = !{!"0x932dfcb0.w1.b2", !2953, i64 0}
!2953 = !{!"0x932dfcb0.w2.b2", !2938, i64 0}
!2954 = !{!2955, !2955, i64 0}
!2955 = !{!"0x932dfcb0.w1.b3", !2953, i64 0}
!2956 = !{!2957, !2957, i64 0}
!2957 = !{!"0x932dfcb0.w1.b4", !2958, i64 0}
!2958 = !{!"0x932dfcb0.w2.b4", !2959, i64 0}
!2959 = !{!"0x932dfcb0.w4.b4", !2939, i64 0}
!2960 = !{!2961, !2961, i64 0}
!2961 = !{!"0x932e3e10.w1.b0", !2962, i64 0}
!2962 = !{!"0x932e3e10.w2.b0", !2963, i64 0}
!2963 = !{!"0x932e3e10.w4.b0", !2964, i64 0}
!2964 = !{!"0x932e3e10.w8.b0", !2965, i64 0}
!2965 = !{!"0x932e3e10.w16.b0", !2966, i64 0}
!2966 = !{!"0x932e3e10.w32.b0", !2967, i64 0}
!2967 = !{!"0x932e3e10.w64.b0", !2968, i64 0}
!2968 = !{!"0x932e3e10.w128.b0", !2969, i64 0}
!2969 = !{!"0x932e3e10.w256.b0", !2970, i64 0}
!2970 = !{!"0x932e3e10.w512.b0", !2971, i64 0}
!2971 = !{!"0x932e3e10.w1024.b0", !2972, i64 0}
!2972 = !{!"int64", !2973, i64 0}
!2973 = !{!"0x932e3e10", !8, i64 0}
!2974 = !{!2975, !2975, i64 0}
!2975 = !{!"0x932e3e10.w1.b1", !2962, i64 0}
!2976 = !{!2977, !2977, i64 0}
!2977 = !{!"0x932e3e10.w1.b2", !2978, i64 0}
!2978 = !{!"0x932e3e10.w2.b2", !2963, i64 0}
!2979 = !{!2980, !2980, i64 0}
!2980 = !{!"0x932e3e10.w1.b3", !2978, i64 0}
!2981 = !{!2982, !2982, i64 0}
!2982 = !{!"0x932e3e10.w1.b4", !2983, i64 0}
!2983 = !{!"0x932e3e10.w2.b4", !2984, i64 0}
!2984 = !{!"0x932e3e10.w4.b4", !2964, i64 0}
!2985 = !{!2986, !2986, i64 0}
!2986 = !{!"0x932e4d20.w1.b0", !2987, i64 0}
!2987 = !{!"0x932e4d20.w2.b0", !2988, i64 0}
!2988 = !{!"0x932e4d20.w4.b0", !2989, i64 0}
!2989 = !{!"0x932e4d20.w8.b0", !2990, i64 0}
!2990 = !{!"0x932e4d20.w16.b0", !2991, i64 0}
!2991 = !{!"0x932e4d20.w32.b0", !2992, i64 0}
!2992 = !{!"0x932e4d20.w64.b0", !2993, i64 0}
!2993 = !{!"0x932e4d20.w128.b0", !2994, i64 0}
!2994 = !{!"0x932e4d20.w256.b0", !2995, i64 0}
!2995 = !{!"0x932e4d20.w512.b0", !2996, i64 0}
!2996 = !{!"0x932e4d20.w1024.b0", !2997, i64 0}
!2997 = !{!"int64", !2998, i64 0}
!2998 = !{!"0x932e4d20", !8, i64 0}
!2999 = !{!3000, !3000, i64 0}
!3000 = !{!"0x932e4d20.w1.b1", !2987, i64 0}
!3001 = !{!3002, !3002, i64 0}
!3002 = !{!"0x932e4d20.w1.b2", !3003, i64 0}
!3003 = !{!"0x932e4d20.w2.b2", !2988, i64 0}
!3004 = !{!3005, !3005, i64 0}
!3005 = !{!"0x932e4d20.w1.b3", !3003, i64 0}
!3006 = !{!3007, !3007, i64 0}
!3007 = !{!"0x932e4d20.w1.b4", !3008, i64 0}
!3008 = !{!"0x932e4d20.w2.b4", !3009, i64 0}
!3009 = !{!"0x932e4d20.w4.b4", !2989, i64 0}
!3010 = !{!3011, !3011, i64 0}
!3011 = !{!"0x932e68d0.w1.b0", !3012, i64 0}
!3012 = !{!"0x932e68d0.w2.b0", !3013, i64 0}
!3013 = !{!"0x932e68d0.w4.b0", !3014, i64 0}
!3014 = !{!"0x932e68d0.w8.b0", !3015, i64 0}
!3015 = !{!"0x932e68d0.w16.b0", !3016, i64 0}
!3016 = !{!"0x932e68d0.w32.b0", !3017, i64 0}
!3017 = !{!"0x932e68d0.w64.b0", !3018, i64 0}
!3018 = !{!"0x932e68d0.w128.b0", !3019, i64 0}
!3019 = !{!"0x932e68d0.w256.b0", !3020, i64 0}
!3020 = !{!"0x932e68d0.w512.b0", !3021, i64 0}
!3021 = !{!"0x932e68d0.w1024.b0", !3022, i64 0}
!3022 = !{!"int64", !3023, i64 0}
!3023 = !{!"0x932e68d0", !8, i64 0}
!3024 = !{!3025, !3025, i64 0}
!3025 = !{!"0x932e68d0.w1.b1", !3012, i64 0}
!3026 = !{!3027, !3027, i64 0}
!3027 = !{!"0x932e68d0.w1.b2", !3028, i64 0}
!3028 = !{!"0x932e68d0.w2.b2", !3013, i64 0}
!3029 = !{!3030, !3030, i64 0}
!3030 = !{!"0x932e68d0.w1.b3", !3028, i64 0}
!3031 = !{!3032, !3032, i64 0}
!3032 = !{!"0x932e68d0.w1.b4", !3033, i64 0}
!3033 = !{!"0x932e68d0.w2.b4", !3034, i64 0}
!3034 = !{!"0x932e68d0.w4.b4", !3014, i64 0}
!3035 = !{!3036, !3036, i64 0}
!3036 = !{!"0x932e6680.w1.b0", !3037, i64 0}
!3037 = !{!"0x932e6680.w2.b0", !3038, i64 0}
!3038 = !{!"0x932e6680.w4.b0", !3039, i64 0}
!3039 = !{!"0x932e6680.w8.b0", !3040, i64 0}
!3040 = !{!"0x932e6680.w16.b0", !3041, i64 0}
!3041 = !{!"0x932e6680.w32.b0", !3042, i64 0}
!3042 = !{!"0x932e6680.w64.b0", !3043, i64 0}
!3043 = !{!"0x932e6680.w128.b0", !3044, i64 0}
!3044 = !{!"0x932e6680.w256.b0", !3045, i64 0}
!3045 = !{!"0x932e6680.w512.b0", !3046, i64 0}
!3046 = !{!"0x932e6680.w1024.b0", !3047, i64 0}
!3047 = !{!"int64", !3048, i64 0}
!3048 = !{!"0x932e6680", !8, i64 0}
!3049 = !{!3050, !3050, i64 0}
!3050 = !{!"0x932e6680.w1.b1", !3037, i64 0}
!3051 = !{!3052, !3052, i64 0}
!3052 = !{!"0x932e6680.w1.b2", !3053, i64 0}
!3053 = !{!"0x932e6680.w2.b2", !3038, i64 0}
!3054 = !{!3055, !3055, i64 0}
!3055 = !{!"0x932e6680.w1.b3", !3053, i64 0}
!3056 = !{!3057, !3057, i64 0}
!3057 = !{!"0x932e6680.w1.b4", !3058, i64 0}
!3058 = !{!"0x932e6680.w2.b4", !3059, i64 0}
!3059 = !{!"0x932e6680.w4.b4", !3039, i64 0}
!3060 = !{!3061, !3061, i64 0}
!3061 = !{!"float32", !3062, i64 0}
!3062 = !{!"0xa8aca2c0", !8, i64 0}
!3063 = !{!3064, !3064, i64 0}
!3064 = !{!"float32", !3065, i64 0}
!3065 = !{!"0xa89e9330", !8, i64 0}
!3066 = !{!3067, !3067, i64 0}
!3067 = !{!"float32", !3068, i64 0}
!3068 = !{!"0xa89e8b10", !8, i64 0}
!3069 = !{!3070, !3070, i64 0}
!3070 = !{!"float32", !3071, i64 0}
!3071 = !{!"0xa89e8ac0", !8, i64 0}
!3072 = !{!3073, !3073, i64 0}
!3073 = !{!"float32", !3074, i64 0}
!3074 = !{!"0xaa5fa610", !8, i64 0}
!3075 = !{!3076, !3076, i64 0}
!3076 = !{!"float32", !3077, i64 0}
!3077 = !{!"0xa8c03c20", !8, i64 0}
!3078 = !{!3079, !3079, i64 0}
!3079 = !{!"0x95502e90.w1.b0", !3080, i64 0}
!3080 = !{!"0x95502e90.w2.b0", !3081, i64 0}
!3081 = !{!"0x95502e90.w4.b0", !3082, i64 0}
!3082 = !{!"0x95502e90.w8.b0", !3083, i64 0}
!3083 = !{!"0x95502e90.w16.b0", !3084, i64 0}
!3084 = !{!"0x95502e90.w32.b0", !3085, i64 0}
!3085 = !{!"0x95502e90.w64.b0", !3086, i64 0}
!3086 = !{!"0x95502e90.w128.b0", !3087, i64 0}
!3087 = !{!"0x95502e90.w256.b0", !3088, i64 0}
!3088 = !{!"0x95502e90.w512.b0", !3089, i64 0}
!3089 = !{!"0x95502e90.w1024.b0", !3090, i64 0}
!3090 = !{!"int32", !3091, i64 0}
!3091 = !{!"0x95502e90", !8, i64 0}
!3092 = !{!3093, !3093, i64 0}
!3093 = !{!"0x95502e90.w1.b1", !3080, i64 0}
!3094 = !{!3095, !3095, i64 0}
!3095 = !{!"0x9550e5e0.w1.b0", !3096, i64 0}
!3096 = !{!"0x9550e5e0.w2.b0", !3097, i64 0}
!3097 = !{!"0x9550e5e0.w4.b0", !3098, i64 0}
!3098 = !{!"0x9550e5e0.w8.b0", !3099, i64 0}
!3099 = !{!"0x9550e5e0.w16.b0", !3100, i64 0}
!3100 = !{!"0x9550e5e0.w32.b0", !3101, i64 0}
!3101 = !{!"0x9550e5e0.w64.b0", !3102, i64 0}
!3102 = !{!"0x9550e5e0.w128.b0", !3103, i64 0}
!3103 = !{!"0x9550e5e0.w256.b0", !3104, i64 0}
!3104 = !{!"0x9550e5e0.w512.b0", !3105, i64 0}
!3105 = !{!"0x9550e5e0.w1024.b0", !3106, i64 0}
!3106 = !{!"int64", !3107, i64 0}
!3107 = !{!"0x9550e5e0", !8, i64 0}
!3108 = !{!3109, !3109, i64 0}
!3109 = !{!"0x9550e5e0.w1.b1", !3096, i64 0}
!3110 = !{!3111, !3111, i64 0}
!3111 = !{!"0x9550e5e0.w1.b2", !3112, i64 0}
!3112 = !{!"0x9550e5e0.w2.b2", !3097, i64 0}
!3113 = !{!3114, !3114, i64 0}
!3114 = !{!"0x9550e5e0.w1.b3", !3112, i64 0}
!3115 = !{!3116, !3116, i64 0}
!3116 = !{!"0x9550e5e0.w1.b4", !3117, i64 0}
!3117 = !{!"0x9550e5e0.w2.b4", !3118, i64 0}
!3118 = !{!"0x9550e5e0.w4.b4", !3098, i64 0}
!3119 = !{!3120, !3120, i64 0}
!3120 = !{!"0x9550e720.w1.b0", !3121, i64 0}
!3121 = !{!"0x9550e720.w2.b0", !3122, i64 0}
!3122 = !{!"0x9550e720.w4.b0", !3123, i64 0}
!3123 = !{!"0x9550e720.w8.b0", !3124, i64 0}
!3124 = !{!"0x9550e720.w16.b0", !3125, i64 0}
!3125 = !{!"0x9550e720.w32.b0", !3126, i64 0}
!3126 = !{!"0x9550e720.w64.b0", !3127, i64 0}
!3127 = !{!"0x9550e720.w128.b0", !3128, i64 0}
!3128 = !{!"0x9550e720.w256.b0", !3129, i64 0}
!3129 = !{!"0x9550e720.w512.b0", !3130, i64 0}
!3130 = !{!"0x9550e720.w1024.b0", !3131, i64 0}
!3131 = !{!"int64", !3132, i64 0}
!3132 = !{!"0x9550e720", !8, i64 0}
!3133 = !{!3134, !3134, i64 0}
!3134 = !{!"0x9550e720.w1.b1", !3121, i64 0}
!3135 = !{!3136, !3136, i64 0}
!3136 = !{!"0x9550e720.w1.b2", !3137, i64 0}
!3137 = !{!"0x9550e720.w2.b2", !3122, i64 0}
!3138 = !{!3139, !3139, i64 0}
!3139 = !{!"0x9550e720.w1.b3", !3137, i64 0}
!3140 = !{!3141, !3141, i64 0}
!3141 = !{!"0x9550e720.w1.b4", !3142, i64 0}
!3142 = !{!"0x9550e720.w2.b4", !3143, i64 0}
!3143 = !{!"0x9550e720.w4.b4", !3123, i64 0}
!3144 = !{!3145, !3145, i64 0}
!3145 = !{!"0x932d8920.w1.b0", !3146, i64 0}
!3146 = !{!"0x932d8920.w2.b0", !3147, i64 0}
!3147 = !{!"0x932d8920.w4.b0", !3148, i64 0}
!3148 = !{!"0x932d8920.w8.b0", !3149, i64 0}
!3149 = !{!"0x932d8920.w16.b0", !3150, i64 0}
!3150 = !{!"0x932d8920.w32.b0", !3151, i64 0}
!3151 = !{!"0x932d8920.w64.b0", !3152, i64 0}
!3152 = !{!"0x932d8920.w128.b0", !3153, i64 0}
!3153 = !{!"0x932d8920.w256.b0", !3154, i64 0}
!3154 = !{!"0x932d8920.w512.b0", !3155, i64 0}
!3155 = !{!"0x932d8920.w1024.b0", !3156, i64 0}
!3156 = !{!"int64", !3157, i64 0}
!3157 = !{!"0x932d8920", !8, i64 0}
!3158 = !{!3159, !3159, i64 0}
!3159 = !{!"0x932d8920.w1.b1", !3146, i64 0}
!3160 = !{!3161, !3161, i64 0}
!3161 = !{!"0x932d8920.w1.b2", !3162, i64 0}
!3162 = !{!"0x932d8920.w2.b2", !3147, i64 0}
!3163 = !{!3164, !3164, i64 0}
!3164 = !{!"0x932d8920.w1.b3", !3162, i64 0}
!3165 = !{!3166, !3166, i64 0}
!3166 = !{!"0x932d8920.w1.b4", !3167, i64 0}
!3167 = !{!"0x932d8920.w2.b4", !3168, i64 0}
!3168 = !{!"0x932d8920.w4.b4", !3148, i64 0}
!3169 = !{!3170, !3170, i64 0}
!3170 = !{!"0x932d8b20.w1.b0", !3171, i64 0}
!3171 = !{!"0x932d8b20.w2.b0", !3172, i64 0}
!3172 = !{!"0x932d8b20.w4.b0", !3173, i64 0}
!3173 = !{!"0x932d8b20.w8.b0", !3174, i64 0}
!3174 = !{!"0x932d8b20.w16.b0", !3175, i64 0}
!3175 = !{!"0x932d8b20.w32.b0", !3176, i64 0}
!3176 = !{!"0x932d8b20.w64.b0", !3177, i64 0}
!3177 = !{!"0x932d8b20.w128.b0", !3178, i64 0}
!3178 = !{!"0x932d8b20.w256.b0", !3179, i64 0}
!3179 = !{!"0x932d8b20.w512.b0", !3180, i64 0}
!3180 = !{!"0x932d8b20.w1024.b0", !3181, i64 0}
!3181 = !{!"int64", !3182, i64 0}
!3182 = !{!"0x932d8b20", !8, i64 0}
!3183 = !{!3184, !3184, i64 0}
!3184 = !{!"0x932d8b20.w1.b1", !3171, i64 0}
!3185 = !{!3186, !3186, i64 0}
!3186 = !{!"0x932d8b20.w1.b2", !3187, i64 0}
!3187 = !{!"0x932d8b20.w2.b2", !3172, i64 0}
!3188 = !{!3189, !3189, i64 0}
!3189 = !{!"0x932d8b20.w1.b3", !3187, i64 0}
!3190 = !{!3191, !3191, i64 0}
!3191 = !{!"0x932d8b20.w1.b4", !3192, i64 0}
!3192 = !{!"0x932d8b20.w2.b4", !3193, i64 0}
!3193 = !{!"0x932d8b20.w4.b4", !3173, i64 0}
!3194 = !{!3195, !3195, i64 0}
!3195 = !{!"float32", !3196, i64 0}
!3196 = !{!"0xaa5d94a0", !8, i64 0}
!3197 = !{!3198, !3198, i64 0}
!3198 = !{!"float32", !3199, i64 0}
!3199 = !{!"0xaa5d92c0", !8, i64 0}
!3200 = !{!3201, !3201, i64 0}
!3201 = !{!"0xab26d7d0.w1.b0", !3202, i64 0}
!3202 = !{!"0xab26d7d0.w2.b0", !3203, i64 0}
!3203 = !{!"0xab26d7d0.w4.b0", !3204, i64 0}
!3204 = !{!"0xab26d7d0.w8.b0", !3205, i64 0}
!3205 = !{!"0xab26d7d0.w16.b0", !3206, i64 0}
!3206 = !{!"0xab26d7d0.w32.b0", !3207, i64 0}
!3207 = !{!"0xab26d7d0.w64.b0", !3208, i64 0}
!3208 = !{!"0xab26d7d0.w128.b0", !3209, i64 0}
!3209 = !{!"0xab26d7d0.w256.b0", !3210, i64 0}
!3210 = !{!"0xab26d7d0.w512.b0", !3211, i64 0}
!3211 = !{!"0xab26d7d0.w1024.b0", !3212, i64 0}
!3212 = !{!"int32", !3213, i64 0}
!3213 = !{!"0xab26d7d0", !8, i64 0}
!3214 = !{!3215, !3215, i64 0}
!3215 = !{!"0xab26d7d0.w1.b2", !3216, i64 0}
!3216 = !{!"0xab26d7d0.w2.b2", !3203, i64 0}
!3217 = !{!3218, !3218, i64 0}
!3218 = !{!"0xab26d7d0.w1.b3", !3216, i64 0}
!3219 = !{!3220, !3220, i64 0}
!3220 = !{!"0xab26d7d0.w1.b1", !3202, i64 0}
!3221 = !{!3222, !3222, i64 0}
!3222 = !{!"0xab279080.w1.b0", !3223, i64 0}
!3223 = !{!"0xab279080.w2.b0", !3224, i64 0}
!3224 = !{!"0xab279080.w4.b0", !3225, i64 0}
!3225 = !{!"0xab279080.w8.b0", !3226, i64 0}
!3226 = !{!"0xab279080.w16.b0", !3227, i64 0}
!3227 = !{!"0xab279080.w32.b0", !3228, i64 0}
!3228 = !{!"0xab279080.w64.b0", !3229, i64 0}
!3229 = !{!"0xab279080.w128.b0", !3230, i64 0}
!3230 = !{!"0xab279080.w256.b0", !3231, i64 0}
!3231 = !{!"0xab279080.w512.b0", !3232, i64 0}
!3232 = !{!"0xab279080.w1024.b0", !3233, i64 0}
!3233 = !{!"int64", !3234, i64 0}
!3234 = !{!"0xab279080", !8, i64 0}
!3235 = !{!3236, !3236, i64 0}
!3236 = !{!"0xab279080.w1.b1", !3223, i64 0}
!3237 = !{!3238, !3238, i64 0}
!3238 = !{!"0xab279080.w1.b2", !3239, i64 0}
!3239 = !{!"0xab279080.w2.b2", !3224, i64 0}
!3240 = !{!3241, !3241, i64 0}
!3241 = !{!"0xab279080.w1.b3", !3239, i64 0}
!3242 = !{!3243, !3243, i64 0}
!3243 = !{!"0xab279080.w1.b4", !3244, i64 0}
!3244 = !{!"0xab279080.w2.b4", !3245, i64 0}
!3245 = !{!"0xab279080.w4.b4", !3225, i64 0}
!3246 = !{!3247, !3247, i64 0}
!3247 = !{!"0xab279280.w1.b0", !3248, i64 0}
!3248 = !{!"0xab279280.w2.b0", !3249, i64 0}
!3249 = !{!"0xab279280.w4.b0", !3250, i64 0}
!3250 = !{!"0xab279280.w8.b0", !3251, i64 0}
!3251 = !{!"0xab279280.w16.b0", !3252, i64 0}
!3252 = !{!"0xab279280.w32.b0", !3253, i64 0}
!3253 = !{!"0xab279280.w64.b0", !3254, i64 0}
!3254 = !{!"0xab279280.w128.b0", !3255, i64 0}
!3255 = !{!"0xab279280.w256.b0", !3256, i64 0}
!3256 = !{!"0xab279280.w512.b0", !3257, i64 0}
!3257 = !{!"0xab279280.w1024.b0", !3258, i64 0}
!3258 = !{!"int64", !3259, i64 0}
!3259 = !{!"0xab279280", !8, i64 0}
!3260 = !{!3261, !3261, i64 0}
!3261 = !{!"0xab279280.w1.b1", !3248, i64 0}
!3262 = !{!3263, !3263, i64 0}
!3263 = !{!"0xab279280.w1.b2", !3264, i64 0}
!3264 = !{!"0xab279280.w2.b2", !3249, i64 0}
!3265 = !{!3266, !3266, i64 0}
!3266 = !{!"0xab279280.w1.b3", !3264, i64 0}
!3267 = !{!3268, !3268, i64 0}
!3268 = !{!"0xab279280.w1.b4", !3269, i64 0}
!3269 = !{!"0xab279280.w2.b4", !3270, i64 0}
!3270 = !{!"0xab279280.w4.b4", !3250, i64 0}
!3271 = !{!3272, !3272, i64 0}
!3272 = !{!"0xab27b5c0.w1.b0", !3273, i64 0}
!3273 = !{!"0xab27b5c0.w2.b0", !3274, i64 0}
!3274 = !{!"0xab27b5c0.w4.b0", !3275, i64 0}
!3275 = !{!"0xab27b5c0.w8.b0", !3276, i64 0}
!3276 = !{!"0xab27b5c0.w16.b0", !3277, i64 0}
!3277 = !{!"0xab27b5c0.w32.b0", !3278, i64 0}
!3278 = !{!"0xab27b5c0.w64.b0", !3279, i64 0}
!3279 = !{!"0xab27b5c0.w128.b0", !3280, i64 0}
!3280 = !{!"0xab27b5c0.w256.b0", !3281, i64 0}
!3281 = !{!"0xab27b5c0.w512.b0", !3282, i64 0}
!3282 = !{!"0xab27b5c0.w1024.b0", !3283, i64 0}
!3283 = !{!"int64", !3284, i64 0}
!3284 = !{!"0xab27b5c0", !8, i64 0}
!3285 = !{!3286, !3286, i64 0}
!3286 = !{!"0xab27b5c0.w1.b1", !3273, i64 0}
!3287 = !{!3288, !3288, i64 0}
!3288 = !{!"0xab27b5c0.w1.b2", !3289, i64 0}
!3289 = !{!"0xab27b5c0.w2.b2", !3274, i64 0}
!3290 = !{!3291, !3291, i64 0}
!3291 = !{!"0xab27b5c0.w1.b3", !3289, i64 0}
!3292 = !{!3293, !3293, i64 0}
!3293 = !{!"0xab27b5c0.w1.b4", !3294, i64 0}
!3294 = !{!"0xab27b5c0.w2.b4", !3295, i64 0}
!3295 = !{!"0xab27b5c0.w4.b4", !3275, i64 0}
!3296 = !{!3297, !3297, i64 0}
!3297 = !{!"0xab27b5c0.w1.b5", !3294, i64 0}
!3298 = !{!3299, !3299, i64 0}
!3299 = !{!"0xab27b7c0.w1.b0", !3300, i64 0}
!3300 = !{!"0xab27b7c0.w2.b0", !3301, i64 0}
!3301 = !{!"0xab27b7c0.w4.b0", !3302, i64 0}
!3302 = !{!"0xab27b7c0.w8.b0", !3303, i64 0}
!3303 = !{!"0xab27b7c0.w16.b0", !3304, i64 0}
!3304 = !{!"0xab27b7c0.w32.b0", !3305, i64 0}
!3305 = !{!"0xab27b7c0.w64.b0", !3306, i64 0}
!3306 = !{!"0xab27b7c0.w128.b0", !3307, i64 0}
!3307 = !{!"0xab27b7c0.w256.b0", !3308, i64 0}
!3308 = !{!"0xab27b7c0.w512.b0", !3309, i64 0}
!3309 = !{!"0xab27b7c0.w1024.b0", !3310, i64 0}
!3310 = !{!"int64", !3311, i64 0}
!3311 = !{!"0xab27b7c0", !8, i64 0}
!3312 = !{!3313, !3313, i64 0}
!3313 = !{!"0xab27b7c0.w1.b1", !3300, i64 0}
!3314 = !{!3315, !3315, i64 0}
!3315 = !{!"0xab27b7c0.w1.b2", !3316, i64 0}
!3316 = !{!"0xab27b7c0.w2.b2", !3301, i64 0}
!3317 = !{!3318, !3318, i64 0}
!3318 = !{!"0xab27b7c0.w1.b3", !3316, i64 0}
!3319 = !{!3320, !3320, i64 0}
!3320 = !{!"0xab27b7c0.w1.b4", !3321, i64 0}
!3321 = !{!"0xab27b7c0.w2.b4", !3322, i64 0}
!3322 = !{!"0xab27b7c0.w4.b4", !3302, i64 0}
!3323 = !{!3324, !3324, i64 0}
!3324 = !{!"0xab27b7c0.w1.b5", !3321, i64 0}
!3325 = !{!3326, !3326, i64 0}
!3326 = !{!"0x954f0130.w1.b0", !3327, i64 0}
!3327 = !{!"0x954f0130.w2.b0", !3328, i64 0}
!3328 = !{!"0x954f0130.w4.b0", !3329, i64 0}
!3329 = !{!"0x954f0130.w8.b0", !3330, i64 0}
!3330 = !{!"0x954f0130.w16.b0", !3331, i64 0}
!3331 = !{!"0x954f0130.w32.b0", !3332, i64 0}
!3332 = !{!"0x954f0130.w64.b0", !3333, i64 0}
!3333 = !{!"0x954f0130.w128.b0", !3334, i64 0}
!3334 = !{!"0x954f0130.w256.b0", !3335, i64 0}
!3335 = !{!"0x954f0130.w512.b0", !3336, i64 0}
!3336 = !{!"0x954f0130.w1024.b0", !3337, i64 0}
!3337 = !{!"int64", !3338, i64 0}
!3338 = !{!"0x954f0130", !8, i64 0}
!3339 = !{!3340, !3340, i64 0}
!3340 = !{!"0x954f0130.w1.b1", !3327, i64 0}
!3341 = !{!3342, !3342, i64 0}
!3342 = !{!"0x954f0130.w1.b2", !3343, i64 0}
!3343 = !{!"0x954f0130.w2.b2", !3328, i64 0}
!3344 = !{!3345, !3345, i64 0}
!3345 = !{!"0x954f0130.w1.b3", !3343, i64 0}
!3346 = !{!3347, !3347, i64 0}
!3347 = !{!"0x954f0130.w1.b4", !3348, i64 0}
!3348 = !{!"0x954f0130.w2.b4", !3349, i64 0}
!3349 = !{!"0x954f0130.w4.b4", !3329, i64 0}
!3350 = !{!3351, !3351, i64 0}
!3351 = !{!"0xab27bac0.w1.b0", !3352, i64 0}
!3352 = !{!"0xab27bac0.w2.b0", !3353, i64 0}
!3353 = !{!"0xab27bac0.w4.b0", !3354, i64 0}
!3354 = !{!"0xab27bac0.w8.b0", !3355, i64 0}
!3355 = !{!"0xab27bac0.w16.b0", !3356, i64 0}
!3356 = !{!"0xab27bac0.w32.b0", !3357, i64 0}
!3357 = !{!"0xab27bac0.w64.b0", !3358, i64 0}
!3358 = !{!"0xab27bac0.w128.b0", !3359, i64 0}
!3359 = !{!"0xab27bac0.w256.b0", !3360, i64 0}
!3360 = !{!"0xab27bac0.w512.b0", !3361, i64 0}
!3361 = !{!"0xab27bac0.w1024.b0", !3362, i64 0}
!3362 = !{!"int64", !3363, i64 0}
!3363 = !{!"0xab27bac0", !8, i64 0}
!3364 = !{!3365, !3365, i64 0}
!3365 = !{!"0xab27bac0.w1.b1", !3352, i64 0}
!3366 = !{!3367, !3367, i64 0}
!3367 = !{!"0xab27bac0.w1.b2", !3368, i64 0}
!3368 = !{!"0xab27bac0.w2.b2", !3353, i64 0}
!3369 = !{!3370, !3370, i64 0}
!3370 = !{!"0xab27bac0.w1.b3", !3368, i64 0}
!3371 = !{!3372, !3372, i64 0}
!3372 = !{!"0xab27bac0.w1.b4", !3373, i64 0}
!3373 = !{!"0xab27bac0.w2.b4", !3374, i64 0}
!3374 = !{!"0xab27bac0.w4.b4", !3354, i64 0}
!3375 = !{!3376, !3376, i64 0}
!3376 = !{!"0x954f26f0.w1.b0", !3377, i64 0}
!3377 = !{!"0x954f26f0.w2.b0", !3378, i64 0}
!3378 = !{!"0x954f26f0.w4.b0", !3379, i64 0}
!3379 = !{!"0x954f26f0.w8.b0", !3380, i64 0}
!3380 = !{!"0x954f26f0.w16.b0", !3381, i64 0}
!3381 = !{!"0x954f26f0.w32.b0", !3382, i64 0}
!3382 = !{!"0x954f26f0.w64.b0", !3383, i64 0}
!3383 = !{!"0x954f26f0.w128.b0", !3384, i64 0}
!3384 = !{!"0x954f26f0.w256.b0", !3385, i64 0}
!3385 = !{!"0x954f26f0.w512.b0", !3386, i64 0}
!3386 = !{!"0x954f26f0.w1024.b0", !3387, i64 0}
!3387 = !{!"int64", !3388, i64 0}
!3388 = !{!"0x954f26f0", !8, i64 0}
!3389 = !{!3390, !3390, i64 0}
!3390 = !{!"0x954f26f0.w1.b1", !3377, i64 0}
!3391 = !{!3392, !3392, i64 0}
!3392 = !{!"0x954f26f0.w1.b2", !3393, i64 0}
!3393 = !{!"0x954f26f0.w2.b2", !3378, i64 0}
!3394 = !{!3395, !3395, i64 0}
!3395 = !{!"0x954f26f0.w1.b3", !3393, i64 0}
!3396 = !{!3397, !3397, i64 0}
!3397 = !{!"0x954f26f0.w1.b4", !3398, i64 0}
!3398 = !{!"0x954f26f0.w2.b4", !3399, i64 0}
!3399 = !{!"0x954f26f0.w4.b4", !3379, i64 0}
!3400 = !{!3401, !3401, i64 0}
!3401 = !{!"0x954f3600.w1.b0", !3402, i64 0}
!3402 = !{!"0x954f3600.w2.b0", !3403, i64 0}
!3403 = !{!"0x954f3600.w4.b0", !3404, i64 0}
!3404 = !{!"0x954f3600.w8.b0", !3405, i64 0}
!3405 = !{!"0x954f3600.w16.b0", !3406, i64 0}
!3406 = !{!"0x954f3600.w32.b0", !3407, i64 0}
!3407 = !{!"0x954f3600.w64.b0", !3408, i64 0}
!3408 = !{!"0x954f3600.w128.b0", !3409, i64 0}
!3409 = !{!"0x954f3600.w256.b0", !3410, i64 0}
!3410 = !{!"0x954f3600.w512.b0", !3411, i64 0}
!3411 = !{!"0x954f3600.w1024.b0", !3412, i64 0}
!3412 = !{!"int64", !3413, i64 0}
!3413 = !{!"0x954f3600", !8, i64 0}
!3414 = !{!3415, !3415, i64 0}
!3415 = !{!"0x954f3600.w1.b1", !3402, i64 0}
!3416 = !{!3417, !3417, i64 0}
!3417 = !{!"0x954f3600.w1.b2", !3418, i64 0}
!3418 = !{!"0x954f3600.w2.b2", !3403, i64 0}
!3419 = !{!3420, !3420, i64 0}
!3420 = !{!"0x954f3600.w1.b3", !3418, i64 0}
!3421 = !{!3422, !3422, i64 0}
!3422 = !{!"0x954f3600.w1.b4", !3423, i64 0}
!3423 = !{!"0x954f3600.w2.b4", !3424, i64 0}
!3424 = !{!"0x954f3600.w4.b4", !3404, i64 0}
!3425 = !{!3426, !3426, i64 0}
!3426 = !{!"float32", !3427, i64 0}
!3427 = !{!"0xa8a08590", !8, i64 0}
!3428 = !{!3429, !3429, i64 0}
!3429 = !{!"float32", !3430, i64 0}
!3430 = !{!"0xa8a08030", !8, i64 0}
!3431 = !{!3432, !3432, i64 0}
!3432 = !{!"float32", !3433, i64 0}
!3433 = !{!"0xa8a08470", !8, i64 0}
!3434 = !{!3435, !3435, i64 0}
!3435 = !{!"float32", !3436, i64 0}
!3436 = !{!"0xa8a08ea0", !8, i64 0}
!3437 = !{!3438, !3438, i64 0}
!3438 = !{!"float32", !3439, i64 0}
!3439 = !{!"0xa8a083e0", !8, i64 0}
!3440 = !{!3441, !3441, i64 0}
!3441 = !{!"0xa8a08f40.w8.b0", !3442, i64 0}
!3442 = !{!"0xa8a08f40.w16.b0", !3443, i64 0}
!3443 = !{!"0xa8a08f40.w32.b0", !3444, i64 0}
!3444 = !{!"0xa8a08f40.w64.b0", !3445, i64 0}
!3445 = !{!"0xa8a08f40.w128.b0", !3446, i64 0}
!3446 = !{!"0xa8a08f40.w256.b0", !3447, i64 0}
!3447 = !{!"0xa8a08f40.w512.b0", !3448, i64 0}
!3448 = !{!"0xa8a08f40.w1024.b0", !3449, i64 0}
!3449 = !{!"float32", !3450, i64 0}
!3450 = !{!"0xa8a08f40", !8, i64 0}
!3451 = !{!3452, !3452, i64 0}
!3452 = !{!"0xa8a08f40.w8.b8", !3442, i64 0}
!3453 = !{!3454, !3454, i64 0}
!3454 = !{!"0xa8a08f40.w8.b16", !3455, i64 0}
!3455 = !{!"0xa8a08f40.w16.b16", !3443, i64 0}
!3456 = !{!3457, !3457, i64 0}
!3457 = !{!"0xa8a08f40.w8.b24", !3455, i64 0}
!3458 = !{!3459, !3459, i64 0}
!3459 = !{!"0xa8a08f40.w8.b32", !3460, i64 0}
!3460 = !{!"0xa8a08f40.w16.b32", !3461, i64 0}
!3461 = !{!"0xa8a08f40.w32.b32", !3444, i64 0}
!3462 = !{!3463, !3463, i64 0}
!3463 = !{!"0xa8a08f40.w8.b40", !3460, i64 0}
!3464 = !{!3465, !3465, i64 0}
!3465 = !{!"0xa8a08f40.w8.b48", !3466, i64 0}
!3466 = !{!"0xa8a08f40.w16.b48", !3461, i64 0}
!3467 = !{!3468, !3468, i64 0}
!3468 = !{!"0xa8a08f40.w8.b56", !3466, i64 0}
!3469 = !{!3470, !3470, i64 0}
!3470 = !{!"0xa8a08f40.w8.b64", !3471, i64 0}
!3471 = !{!"0xa8a08f40.w16.b64", !3472, i64 0}
!3472 = !{!"0xa8a08f40.w32.b64", !3473, i64 0}
!3473 = !{!"0xa8a08f40.w64.b64", !3445, i64 0}
!3474 = !{!3475, !3475, i64 0}
!3475 = !{!"0xa8a08f40.w8.b72", !3471, i64 0}
!3476 = !{!3477, !3477, i64 0}
!3477 = !{!"0xa8a08f40.w8.b80", !3478, i64 0}
!3478 = !{!"0xa8a08f40.w16.b80", !3472, i64 0}
!3479 = !{!3480, !3480, i64 0}
!3480 = !{!"0xa8a08f40.w8.b88", !3478, i64 0}
!3481 = !{!3482, !3482, i64 0}
!3482 = !{!"0xa8a08f40.w8.b96", !3483, i64 0}
!3483 = !{!"0xa8a08f40.w16.b96", !3484, i64 0}
!3484 = !{!"0xa8a08f40.w32.b96", !3473, i64 0}
!3485 = !{!3486, !3486, i64 0}
!3486 = !{!"0xa8a08f40.w8.b104", !3483, i64 0}
!3487 = !{!3488, !3488, i64 0}
!3488 = !{!"float32", !3489, i64 0}
!3489 = !{!"0xa8a08500", !8, i64 0}
!3490 = !{!3491, !3491, i64 0}
!3491 = !{!"0xab279130.w1.b0", !3492, i64 0}
!3492 = !{!"0xab279130.w2.b0", !3493, i64 0}
!3493 = !{!"0xab279130.w4.b0", !3494, i64 0}
!3494 = !{!"0xab279130.w8.b0", !3495, i64 0}
!3495 = !{!"0xab279130.w16.b0", !3496, i64 0}
!3496 = !{!"0xab279130.w32.b0", !3497, i64 0}
!3497 = !{!"0xab279130.w64.b0", !3498, i64 0}
!3498 = !{!"0xab279130.w128.b0", !3499, i64 0}
!3499 = !{!"0xab279130.w256.b0", !3500, i64 0}
!3500 = !{!"0xab279130.w512.b0", !3501, i64 0}
!3501 = !{!"0xab279130.w1024.b0", !3502, i64 0}
!3502 = !{!"int32", !3503, i64 0}
!3503 = !{!"0xab279130", !8, i64 0}
!3504 = !{!3505, !3505, i64 0}
!3505 = !{!"0xab279130.w1.b1", !3492, i64 0}
!3506 = !{!3507, !3507, i64 0}
!3507 = !{!"0x954f7060.w1.b0", !3508, i64 0}
!3508 = !{!"0x954f7060.w2.b0", !3509, i64 0}
!3509 = !{!"0x954f7060.w4.b0", !3510, i64 0}
!3510 = !{!"0x954f7060.w8.b0", !3511, i64 0}
!3511 = !{!"0x954f7060.w16.b0", !3512, i64 0}
!3512 = !{!"0x954f7060.w32.b0", !3513, i64 0}
!3513 = !{!"0x954f7060.w64.b0", !3514, i64 0}
!3514 = !{!"0x954f7060.w128.b0", !3515, i64 0}
!3515 = !{!"0x954f7060.w256.b0", !3516, i64 0}
!3516 = !{!"0x954f7060.w512.b0", !3517, i64 0}
!3517 = !{!"0x954f7060.w1024.b0", !3518, i64 0}
!3518 = !{!"int64", !3519, i64 0}
!3519 = !{!"0x954f7060", !8, i64 0}
!3520 = !{!3521, !3521, i64 0}
!3521 = !{!"0x954f7060.w1.b1", !3508, i64 0}
!3522 = !{!3523, !3523, i64 0}
!3523 = !{!"0x954f7060.w1.b2", !3524, i64 0}
!3524 = !{!"0x954f7060.w2.b2", !3509, i64 0}
!3525 = !{!3526, !3526, i64 0}
!3526 = !{!"0x954f7060.w1.b3", !3524, i64 0}
!3527 = !{!3528, !3528, i64 0}
!3528 = !{!"0x954f7060.w1.b4", !3529, i64 0}
!3529 = !{!"0x954f7060.w2.b4", !3530, i64 0}
!3530 = !{!"0x954f7060.w4.b4", !3510, i64 0}
!3531 = !{!3532, !3532, i64 0}
!3532 = !{!"0x954f71a0.w1.b0", !3533, i64 0}
!3533 = !{!"0x954f71a0.w2.b0", !3534, i64 0}
!3534 = !{!"0x954f71a0.w4.b0", !3535, i64 0}
!3535 = !{!"0x954f71a0.w8.b0", !3536, i64 0}
!3536 = !{!"0x954f71a0.w16.b0", !3537, i64 0}
!3537 = !{!"0x954f71a0.w32.b0", !3538, i64 0}
!3538 = !{!"0x954f71a0.w64.b0", !3539, i64 0}
!3539 = !{!"0x954f71a0.w128.b0", !3540, i64 0}
!3540 = !{!"0x954f71a0.w256.b0", !3541, i64 0}
!3541 = !{!"0x954f71a0.w512.b0", !3542, i64 0}
!3542 = !{!"0x954f71a0.w1024.b0", !3543, i64 0}
!3543 = !{!"int64", !3544, i64 0}
!3544 = !{!"0x954f71a0", !8, i64 0}
!3545 = !{!3546, !3546, i64 0}
!3546 = !{!"0x954f71a0.w1.b1", !3533, i64 0}
!3547 = !{!3548, !3548, i64 0}
!3548 = !{!"0x954f71a0.w1.b2", !3549, i64 0}
!3549 = !{!"0x954f71a0.w2.b2", !3534, i64 0}
!3550 = !{!3551, !3551, i64 0}
!3551 = !{!"0x954f71a0.w1.b3", !3549, i64 0}
!3552 = !{!3553, !3553, i64 0}
!3553 = !{!"0x954f71a0.w1.b4", !3554, i64 0}
!3554 = !{!"0x954f71a0.w2.b4", !3555, i64 0}
!3555 = !{!"0x954f71a0.w4.b4", !3535, i64 0}
!3556 = !{!3557, !3557, i64 0}
!3557 = !{!"0x954f8e80.w1.b0", !3558, i64 0}
!3558 = !{!"0x954f8e80.w2.b0", !3559, i64 0}
!3559 = !{!"0x954f8e80.w4.b0", !3560, i64 0}
!3560 = !{!"0x954f8e80.w8.b0", !3561, i64 0}
!3561 = !{!"0x954f8e80.w16.b0", !3562, i64 0}
!3562 = !{!"0x954f8e80.w32.b0", !3563, i64 0}
!3563 = !{!"0x954f8e80.w64.b0", !3564, i64 0}
!3564 = !{!"0x954f8e80.w128.b0", !3565, i64 0}
!3565 = !{!"0x954f8e80.w256.b0", !3566, i64 0}
!3566 = !{!"0x954f8e80.w512.b0", !3567, i64 0}
!3567 = !{!"0x954f8e80.w1024.b0", !3568, i64 0}
!3568 = !{!"int64", !3569, i64 0}
!3569 = !{!"0x954f8e80", !8, i64 0}
!3570 = !{!3571, !3571, i64 0}
!3571 = !{!"0x954f8e80.w1.b1", !3558, i64 0}
!3572 = !{!3573, !3573, i64 0}
!3573 = !{!"0x954f8e80.w1.b2", !3574, i64 0}
!3574 = !{!"0x954f8e80.w2.b2", !3559, i64 0}
!3575 = !{!3576, !3576, i64 0}
!3576 = !{!"0x954f8e80.w1.b3", !3574, i64 0}
!3577 = !{!3578, !3578, i64 0}
!3578 = !{!"0x954f8e80.w1.b4", !3579, i64 0}
!3579 = !{!"0x954f8e80.w2.b4", !3580, i64 0}
!3580 = !{!"0x954f8e80.w4.b4", !3560, i64 0}
!3581 = !{!3582, !3582, i64 0}
!3582 = !{!"0x954f9080.w1.b0", !3583, i64 0}
!3583 = !{!"0x954f9080.w2.b0", !3584, i64 0}
!3584 = !{!"0x954f9080.w4.b0", !3585, i64 0}
!3585 = !{!"0x954f9080.w8.b0", !3586, i64 0}
!3586 = !{!"0x954f9080.w16.b0", !3587, i64 0}
!3587 = !{!"0x954f9080.w32.b0", !3588, i64 0}
!3588 = !{!"0x954f9080.w64.b0", !3589, i64 0}
!3589 = !{!"0x954f9080.w128.b0", !3590, i64 0}
!3590 = !{!"0x954f9080.w256.b0", !3591, i64 0}
!3591 = !{!"0x954f9080.w512.b0", !3592, i64 0}
!3592 = !{!"0x954f9080.w1024.b0", !3593, i64 0}
!3593 = !{!"int64", !3594, i64 0}
!3594 = !{!"0x954f9080", !8, i64 0}
!3595 = !{!3596, !3596, i64 0}
!3596 = !{!"0x954f9080.w1.b1", !3583, i64 0}
!3597 = !{!3598, !3598, i64 0}
!3598 = !{!"0x954f9080.w1.b2", !3599, i64 0}
!3599 = !{!"0x954f9080.w2.b2", !3584, i64 0}
!3600 = !{!3601, !3601, i64 0}
!3601 = !{!"0x954f9080.w1.b3", !3599, i64 0}
!3602 = !{!3603, !3603, i64 0}
!3603 = !{!"0x954f9080.w1.b4", !3604, i64 0}
!3604 = !{!"0x954f9080.w2.b4", !3605, i64 0}
!3605 = !{!"0x954f9080.w4.b4", !3585, i64 0}
!3606 = !{!3607, !3607, i64 0}
!3607 = !{!"float32", !3608, i64 0}
!3608 = !{!"0x9d007480", !8, i64 0}
!3609 = !{!3610, !3610, i64 0}
!3610 = !{!"float32", !3611, i64 0}
!3611 = !{!"0x91ab1680", !8, i64 0}
!3612 = !{!3613, !3613, i64 0}
!3613 = !{!"0xab2988d0.w1.b0", !3614, i64 0}
!3614 = !{!"0xab2988d0.w2.b0", !3615, i64 0}
!3615 = !{!"0xab2988d0.w4.b0", !3616, i64 0}
!3616 = !{!"0xab2988d0.w8.b0", !3617, i64 0}
!3617 = !{!"0xab2988d0.w16.b0", !3618, i64 0}
!3618 = !{!"0xab2988d0.w32.b0", !3619, i64 0}
!3619 = !{!"0xab2988d0.w64.b0", !3620, i64 0}
!3620 = !{!"0xab2988d0.w128.b0", !3621, i64 0}
!3621 = !{!"0xab2988d0.w256.b0", !3622, i64 0}
!3622 = !{!"0xab2988d0.w512.b0", !3623, i64 0}
!3623 = !{!"0xab2988d0.w1024.b0", !3624, i64 0}
!3624 = !{!"int32", !3625, i64 0}
!3625 = !{!"0xab2988d0", !8, i64 0}
!3626 = !{!3627, !3627, i64 0}
!3627 = !{!"0xab2988d0.w1.b2", !3628, i64 0}
!3628 = !{!"0xab2988d0.w2.b2", !3615, i64 0}
!3629 = !{!3630, !3630, i64 0}
!3630 = !{!"0xab2988d0.w1.b3", !3628, i64 0}
!3631 = !{!3632, !3632, i64 0}
!3632 = !{!"0xab2988d0.w1.b1", !3614, i64 0}
!3633 = !{!3634, !3634, i64 0}
!3634 = !{!"0xab29c420.w1.b0", !3635, i64 0}
!3635 = !{!"0xab29c420.w2.b0", !3636, i64 0}
!3636 = !{!"0xab29c420.w4.b0", !3637, i64 0}
!3637 = !{!"0xab29c420.w8.b0", !3638, i64 0}
!3638 = !{!"0xab29c420.w16.b0", !3639, i64 0}
!3639 = !{!"0xab29c420.w32.b0", !3640, i64 0}
!3640 = !{!"0xab29c420.w64.b0", !3641, i64 0}
!3641 = !{!"0xab29c420.w128.b0", !3642, i64 0}
!3642 = !{!"0xab29c420.w256.b0", !3643, i64 0}
!3643 = !{!"0xab29c420.w512.b0", !3644, i64 0}
!3644 = !{!"0xab29c420.w1024.b0", !3645, i64 0}
!3645 = !{!"int64", !3646, i64 0}
!3646 = !{!"0xab29c420", !8, i64 0}
!3647 = !{!3648, !3648, i64 0}
!3648 = !{!"0xab29c420.w1.b1", !3635, i64 0}
!3649 = !{!3650, !3650, i64 0}
!3650 = !{!"0xab29c420.w1.b2", !3651, i64 0}
!3651 = !{!"0xab29c420.w2.b2", !3636, i64 0}
!3652 = !{!3653, !3653, i64 0}
!3653 = !{!"0xab29c420.w1.b3", !3651, i64 0}
!3654 = !{!3655, !3655, i64 0}
!3655 = !{!"0xab29c420.w1.b4", !3656, i64 0}
!3656 = !{!"0xab29c420.w2.b4", !3657, i64 0}
!3657 = !{!"0xab29c420.w4.b4", !3637, i64 0}
!3658 = !{!3659, !3659, i64 0}
!3659 = !{!"0xab29c950.w1.b0", !3660, i64 0}
!3660 = !{!"0xab29c950.w2.b0", !3661, i64 0}
!3661 = !{!"0xab29c950.w4.b0", !3662, i64 0}
!3662 = !{!"0xab29c950.w8.b0", !3663, i64 0}
!3663 = !{!"0xab29c950.w16.b0", !3664, i64 0}
!3664 = !{!"0xab29c950.w32.b0", !3665, i64 0}
!3665 = !{!"0xab29c950.w64.b0", !3666, i64 0}
!3666 = !{!"0xab29c950.w128.b0", !3667, i64 0}
!3667 = !{!"0xab29c950.w256.b0", !3668, i64 0}
!3668 = !{!"0xab29c950.w512.b0", !3669, i64 0}
!3669 = !{!"0xab29c950.w1024.b0", !3670, i64 0}
!3670 = !{!"int64", !3671, i64 0}
!3671 = !{!"0xab29c950", !8, i64 0}
!3672 = !{!3673, !3673, i64 0}
!3673 = !{!"0xab29c950.w1.b1", !3660, i64 0}
!3674 = !{!3675, !3675, i64 0}
!3675 = !{!"0xab29c950.w1.b2", !3676, i64 0}
!3676 = !{!"0xab29c950.w2.b2", !3661, i64 0}
!3677 = !{!3678, !3678, i64 0}
!3678 = !{!"0xab29c950.w1.b3", !3676, i64 0}
!3679 = !{!3680, !3680, i64 0}
!3680 = !{!"0xab29c950.w1.b4", !3681, i64 0}
!3681 = !{!"0xab29c950.w2.b4", !3682, i64 0}
!3682 = !{!"0xab29c950.w4.b4", !3662, i64 0}
!3683 = !{!3684, !3684, i64 0}
!3684 = !{!"0xab29ec90.w1.b0", !3685, i64 0}
!3685 = !{!"0xab29ec90.w2.b0", !3686, i64 0}
!3686 = !{!"0xab29ec90.w4.b0", !3687, i64 0}
!3687 = !{!"0xab29ec90.w8.b0", !3688, i64 0}
!3688 = !{!"0xab29ec90.w16.b0", !3689, i64 0}
!3689 = !{!"0xab29ec90.w32.b0", !3690, i64 0}
!3690 = !{!"0xab29ec90.w64.b0", !3691, i64 0}
!3691 = !{!"0xab29ec90.w128.b0", !3692, i64 0}
!3692 = !{!"0xab29ec90.w256.b0", !3693, i64 0}
!3693 = !{!"0xab29ec90.w512.b0", !3694, i64 0}
!3694 = !{!"0xab29ec90.w1024.b0", !3695, i64 0}
!3695 = !{!"int64", !3696, i64 0}
!3696 = !{!"0xab29ec90", !8, i64 0}
!3697 = !{!3698, !3698, i64 0}
!3698 = !{!"0xab29ec90.w1.b1", !3685, i64 0}
!3699 = !{!3700, !3700, i64 0}
!3700 = !{!"0xab29ec90.w1.b2", !3701, i64 0}
!3701 = !{!"0xab29ec90.w2.b2", !3686, i64 0}
!3702 = !{!3703, !3703, i64 0}
!3703 = !{!"0xab29ec90.w1.b3", !3701, i64 0}
!3704 = !{!3705, !3705, i64 0}
!3705 = !{!"0xab29ec90.w1.b4", !3706, i64 0}
!3706 = !{!"0xab29ec90.w2.b4", !3707, i64 0}
!3707 = !{!"0xab29ec90.w4.b4", !3687, i64 0}
!3708 = !{!3709, !3709, i64 0}
!3709 = !{!"0xab29ec90.w1.b5", !3706, i64 0}
!3710 = !{!3711, !3711, i64 0}
!3711 = !{!"0xab29ee90.w1.b0", !3712, i64 0}
!3712 = !{!"0xab29ee90.w2.b0", !3713, i64 0}
!3713 = !{!"0xab29ee90.w4.b0", !3714, i64 0}
!3714 = !{!"0xab29ee90.w8.b0", !3715, i64 0}
!3715 = !{!"0xab29ee90.w16.b0", !3716, i64 0}
!3716 = !{!"0xab29ee90.w32.b0", !3717, i64 0}
!3717 = !{!"0xab29ee90.w64.b0", !3718, i64 0}
!3718 = !{!"0xab29ee90.w128.b0", !3719, i64 0}
!3719 = !{!"0xab29ee90.w256.b0", !3720, i64 0}
!3720 = !{!"0xab29ee90.w512.b0", !3721, i64 0}
!3721 = !{!"0xab29ee90.w1024.b0", !3722, i64 0}
!3722 = !{!"int64", !3723, i64 0}
!3723 = !{!"0xab29ee90", !8, i64 0}
!3724 = !{!3725, !3725, i64 0}
!3725 = !{!"0xab29ee90.w1.b1", !3712, i64 0}
!3726 = !{!3727, !3727, i64 0}
!3727 = !{!"0xab29ee90.w1.b2", !3728, i64 0}
!3728 = !{!"0xab29ee90.w2.b2", !3713, i64 0}
!3729 = !{!3730, !3730, i64 0}
!3730 = !{!"0xab29ee90.w1.b3", !3728, i64 0}
!3731 = !{!3732, !3732, i64 0}
!3732 = !{!"0xab29ee90.w1.b4", !3733, i64 0}
!3733 = !{!"0xab29ee90.w2.b4", !3734, i64 0}
!3734 = !{!"0xab29ee90.w4.b4", !3714, i64 0}
!3735 = !{!3736, !3736, i64 0}
!3736 = !{!"0xab29ee90.w1.b5", !3733, i64 0}
!3737 = !{!3738, !3738, i64 0}
!3738 = !{!"0xab2a0d30.w1.b0", !3739, i64 0}
!3739 = !{!"0xab2a0d30.w2.b0", !3740, i64 0}
!3740 = !{!"0xab2a0d30.w4.b0", !3741, i64 0}
!3741 = !{!"0xab2a0d30.w8.b0", !3742, i64 0}
!3742 = !{!"0xab2a0d30.w16.b0", !3743, i64 0}
!3743 = !{!"0xab2a0d30.w32.b0", !3744, i64 0}
!3744 = !{!"0xab2a0d30.w64.b0", !3745, i64 0}
!3745 = !{!"0xab2a0d30.w128.b0", !3746, i64 0}
!3746 = !{!"0xab2a0d30.w256.b0", !3747, i64 0}
!3747 = !{!"0xab2a0d30.w512.b0", !3748, i64 0}
!3748 = !{!"0xab2a0d30.w1024.b0", !3749, i64 0}
!3749 = !{!"int64", !3750, i64 0}
!3750 = !{!"0xab2a0d30", !8, i64 0}
!3751 = !{!3752, !3752, i64 0}
!3752 = !{!"0xab2a0d30.w1.b1", !3739, i64 0}
!3753 = !{!3754, !3754, i64 0}
!3754 = !{!"0xab2a0d30.w1.b2", !3755, i64 0}
!3755 = !{!"0xab2a0d30.w2.b2", !3740, i64 0}
!3756 = !{!3757, !3757, i64 0}
!3757 = !{!"0xab2a0d30.w1.b3", !3755, i64 0}
!3758 = !{!3759, !3759, i64 0}
!3759 = !{!"0xab2a0d30.w1.b4", !3760, i64 0}
!3760 = !{!"0xab2a0d30.w2.b4", !3761, i64 0}
!3761 = !{!"0xab2a0d30.w4.b4", !3741, i64 0}
!3762 = !{!3763, !3763, i64 0}
!3763 = !{!"0xab29f190.w1.b0", !3764, i64 0}
!3764 = !{!"0xab29f190.w2.b0", !3765, i64 0}
!3765 = !{!"0xab29f190.w4.b0", !3766, i64 0}
!3766 = !{!"0xab29f190.w8.b0", !3767, i64 0}
!3767 = !{!"0xab29f190.w16.b0", !3768, i64 0}
!3768 = !{!"0xab29f190.w32.b0", !3769, i64 0}
!3769 = !{!"0xab29f190.w64.b0", !3770, i64 0}
!3770 = !{!"0xab29f190.w128.b0", !3771, i64 0}
!3771 = !{!"0xab29f190.w256.b0", !3772, i64 0}
!3772 = !{!"0xab29f190.w512.b0", !3773, i64 0}
!3773 = !{!"0xab29f190.w1024.b0", !3774, i64 0}
!3774 = !{!"int64", !3775, i64 0}
!3775 = !{!"0xab29f190", !8, i64 0}
!3776 = !{!3777, !3777, i64 0}
!3777 = !{!"0xab29f190.w1.b1", !3764, i64 0}
!3778 = !{!3779, !3779, i64 0}
!3779 = !{!"0xab29f190.w1.b2", !3780, i64 0}
!3780 = !{!"0xab29f190.w2.b2", !3765, i64 0}
!3781 = !{!3782, !3782, i64 0}
!3782 = !{!"0xab29f190.w1.b3", !3780, i64 0}
!3783 = !{!3784, !3784, i64 0}
!3784 = !{!"0xab29f190.w1.b4", !3785, i64 0}
!3785 = !{!"0xab29f190.w2.b4", !3786, i64 0}
!3786 = !{!"0xab29f190.w4.b4", !3766, i64 0}
!3787 = !{!3788, !3788, i64 0}
!3788 = !{!"0xab2a32f0.w1.b0", !3789, i64 0}
!3789 = !{!"0xab2a32f0.w2.b0", !3790, i64 0}
!3790 = !{!"0xab2a32f0.w4.b0", !3791, i64 0}
!3791 = !{!"0xab2a32f0.w8.b0", !3792, i64 0}
!3792 = !{!"0xab2a32f0.w16.b0", !3793, i64 0}
!3793 = !{!"0xab2a32f0.w32.b0", !3794, i64 0}
!3794 = !{!"0xab2a32f0.w64.b0", !3795, i64 0}
!3795 = !{!"0xab2a32f0.w128.b0", !3796, i64 0}
!3796 = !{!"0xab2a32f0.w256.b0", !3797, i64 0}
!3797 = !{!"0xab2a32f0.w512.b0", !3798, i64 0}
!3798 = !{!"0xab2a32f0.w1024.b0", !3799, i64 0}
!3799 = !{!"int64", !3800, i64 0}
!3800 = !{!"0xab2a32f0", !8, i64 0}
!3801 = !{!3802, !3802, i64 0}
!3802 = !{!"0xab2a32f0.w1.b1", !3789, i64 0}
!3803 = !{!3804, !3804, i64 0}
!3804 = !{!"0xab2a32f0.w1.b2", !3805, i64 0}
!3805 = !{!"0xab2a32f0.w2.b2", !3790, i64 0}
!3806 = !{!3807, !3807, i64 0}
!3807 = !{!"0xab2a32f0.w1.b3", !3805, i64 0}
!3808 = !{!3809, !3809, i64 0}
!3809 = !{!"0xab2a32f0.w1.b4", !3810, i64 0}
!3810 = !{!"0xab2a32f0.w2.b4", !3811, i64 0}
!3811 = !{!"0xab2a32f0.w4.b4", !3791, i64 0}
!3812 = !{!3813, !3813, i64 0}
!3813 = !{!"0xab2a4200.w1.b0", !3814, i64 0}
!3814 = !{!"0xab2a4200.w2.b0", !3815, i64 0}
!3815 = !{!"0xab2a4200.w4.b0", !3816, i64 0}
!3816 = !{!"0xab2a4200.w8.b0", !3817, i64 0}
!3817 = !{!"0xab2a4200.w16.b0", !3818, i64 0}
!3818 = !{!"0xab2a4200.w32.b0", !3819, i64 0}
!3819 = !{!"0xab2a4200.w64.b0", !3820, i64 0}
!3820 = !{!"0xab2a4200.w128.b0", !3821, i64 0}
!3821 = !{!"0xab2a4200.w256.b0", !3822, i64 0}
!3822 = !{!"0xab2a4200.w512.b0", !3823, i64 0}
!3823 = !{!"0xab2a4200.w1024.b0", !3824, i64 0}
!3824 = !{!"int64", !3825, i64 0}
!3825 = !{!"0xab2a4200", !8, i64 0}
!3826 = !{!3827, !3827, i64 0}
!3827 = !{!"0xab2a4200.w1.b1", !3814, i64 0}
!3828 = !{!3829, !3829, i64 0}
!3829 = !{!"0xab2a4200.w1.b2", !3830, i64 0}
!3830 = !{!"0xab2a4200.w2.b2", !3815, i64 0}
!3831 = !{!3832, !3832, i64 0}
!3832 = !{!"0xab2a4200.w1.b3", !3830, i64 0}
!3833 = !{!3834, !3834, i64 0}
!3834 = !{!"0xab2a4200.w1.b4", !3835, i64 0}
!3835 = !{!"0xab2a4200.w2.b4", !3836, i64 0}
!3836 = !{!"0xab2a4200.w4.b4", !3816, i64 0}
!3837 = !{!3838, !3838, i64 0}
!3838 = !{!"float32", !3839, i64 0}
!3839 = !{!"0x9ee0f2f0", !8, i64 0}
!3840 = !{!3841, !3841, i64 0}
!3841 = !{!"float32", !3842, i64 0}
!3842 = !{!"0x9078c840", !8, i64 0}
!3843 = !{!3844, !3844, i64 0}
!3844 = !{!"float32", !3845, i64 0}
!3845 = !{!"0x90950480", !8, i64 0}
!3846 = !{!3847, !3847, i64 0}
!3847 = !{!"float32", !3848, i64 0}
!3848 = !{!"0x9d5084b0", !8, i64 0}
!3849 = !{!3850, !3850, i64 0}
!3850 = !{!"float32", !3851, i64 0}
!3851 = !{!"0x93d20530", !8, i64 0}
!3852 = !{!3853, !3853, i64 0}
!3853 = !{!"0xab29c620.w1.b0", !3854, i64 0}
!3854 = !{!"0xab29c620.w2.b0", !3855, i64 0}
!3855 = !{!"0xab29c620.w4.b0", !3856, i64 0}
!3856 = !{!"0xab29c620.w8.b0", !3857, i64 0}
!3857 = !{!"0xab29c620.w16.b0", !3858, i64 0}
!3858 = !{!"0xab29c620.w32.b0", !3859, i64 0}
!3859 = !{!"0xab29c620.w64.b0", !3860, i64 0}
!3860 = !{!"0xab29c620.w128.b0", !3861, i64 0}
!3861 = !{!"0xab29c620.w256.b0", !3862, i64 0}
!3862 = !{!"0xab29c620.w512.b0", !3863, i64 0}
!3863 = !{!"0xab29c620.w1024.b0", !3864, i64 0}
!3864 = !{!"int32", !3865, i64 0}
!3865 = !{!"0xab29c620", !8, i64 0}
!3866 = !{!3867, !3867, i64 0}
!3867 = !{!"0xab29c620.w1.b1", !3854, i64 0}
!3868 = !{!3869, !3869, i64 0}
!3869 = !{!"0xab2a7de0.w1.b0", !3870, i64 0}
!3870 = !{!"0xab2a7de0.w2.b0", !3871, i64 0}
!3871 = !{!"0xab2a7de0.w4.b0", !3872, i64 0}
!3872 = !{!"0xab2a7de0.w8.b0", !3873, i64 0}
!3873 = !{!"0xab2a7de0.w16.b0", !3874, i64 0}
!3874 = !{!"0xab2a7de0.w32.b0", !3875, i64 0}
!3875 = !{!"0xab2a7de0.w64.b0", !3876, i64 0}
!3876 = !{!"0xab2a7de0.w128.b0", !3877, i64 0}
!3877 = !{!"0xab2a7de0.w256.b0", !3878, i64 0}
!3878 = !{!"0xab2a7de0.w512.b0", !3879, i64 0}
!3879 = !{!"0xab2a7de0.w1024.b0", !3880, i64 0}
!3880 = !{!"int64", !3881, i64 0}
!3881 = !{!"0xab2a7de0", !8, i64 0}
!3882 = !{!3883, !3883, i64 0}
!3883 = !{!"0xab2a7de0.w1.b1", !3870, i64 0}
!3884 = !{!3885, !3885, i64 0}
!3885 = !{!"0xab2a7de0.w1.b2", !3886, i64 0}
!3886 = !{!"0xab2a7de0.w2.b2", !3871, i64 0}
!3887 = !{!3888, !3888, i64 0}
!3888 = !{!"0xab2a7de0.w1.b3", !3886, i64 0}
!3889 = !{!3890, !3890, i64 0}
!3890 = !{!"0xab2a7de0.w1.b4", !3891, i64 0}
!3891 = !{!"0xab2a7de0.w2.b4", !3892, i64 0}
!3892 = !{!"0xab2a7de0.w4.b4", !3872, i64 0}
!3893 = !{!3894, !3894, i64 0}
!3894 = !{!"0xab2a7f20.w1.b0", !3895, i64 0}
!3895 = !{!"0xab2a7f20.w2.b0", !3896, i64 0}
!3896 = !{!"0xab2a7f20.w4.b0", !3897, i64 0}
!3897 = !{!"0xab2a7f20.w8.b0", !3898, i64 0}
!3898 = !{!"0xab2a7f20.w16.b0", !3899, i64 0}
!3899 = !{!"0xab2a7f20.w32.b0", !3900, i64 0}
!3900 = !{!"0xab2a7f20.w64.b0", !3901, i64 0}
!3901 = !{!"0xab2a7f20.w128.b0", !3902, i64 0}
!3902 = !{!"0xab2a7f20.w256.b0", !3903, i64 0}
!3903 = !{!"0xab2a7f20.w512.b0", !3904, i64 0}
!3904 = !{!"0xab2a7f20.w1024.b0", !3905, i64 0}
!3905 = !{!"int64", !3906, i64 0}
!3906 = !{!"0xab2a7f20", !8, i64 0}
!3907 = !{!3908, !3908, i64 0}
!3908 = !{!"0xab2a7f20.w1.b1", !3895, i64 0}
!3909 = !{!3910, !3910, i64 0}
!3910 = !{!"0xab2a7f20.w1.b2", !3911, i64 0}
!3911 = !{!"0xab2a7f20.w2.b2", !3896, i64 0}
!3912 = !{!3913, !3913, i64 0}
!3913 = !{!"0xab2a7f20.w1.b3", !3911, i64 0}
!3914 = !{!3915, !3915, i64 0}
!3915 = !{!"0xab2a7f20.w1.b4", !3916, i64 0}
!3916 = !{!"0xab2a7f20.w2.b4", !3917, i64 0}
!3917 = !{!"0xab2a7f20.w4.b4", !3897, i64 0}
!3918 = !{!3919, !3919, i64 0}
!3919 = !{!"0x93c24fe0.w1.b0", !3920, i64 0}
!3920 = !{!"0x93c24fe0.w2.b0", !3921, i64 0}
!3921 = !{!"0x93c24fe0.w4.b0", !3922, i64 0}
!3922 = !{!"0x93c24fe0.w8.b0", !3923, i64 0}
!3923 = !{!"0x93c24fe0.w16.b0", !3924, i64 0}
!3924 = !{!"0x93c24fe0.w32.b0", !3925, i64 0}
!3925 = !{!"0x93c24fe0.w64.b0", !3926, i64 0}
!3926 = !{!"0x93c24fe0.w128.b0", !3927, i64 0}
!3927 = !{!"0x93c24fe0.w256.b0", !3928, i64 0}
!3928 = !{!"0x93c24fe0.w512.b0", !3929, i64 0}
!3929 = !{!"0x93c24fe0.w1024.b0", !3930, i64 0}
!3930 = !{!"int64", !3931, i64 0}
!3931 = !{!"0x93c24fe0", !8, i64 0}
!3932 = !{!3933, !3933, i64 0}
!3933 = !{!"0x93c24fe0.w1.b1", !3920, i64 0}
!3934 = !{!3935, !3935, i64 0}
!3935 = !{!"0x93c24fe0.w1.b2", !3936, i64 0}
!3936 = !{!"0x93c24fe0.w2.b2", !3921, i64 0}
!3937 = !{!3938, !3938, i64 0}
!3938 = !{!"0x93c24fe0.w1.b3", !3936, i64 0}
!3939 = !{!3940, !3940, i64 0}
!3940 = !{!"0x93c24fe0.w1.b4", !3941, i64 0}
!3941 = !{!"0x93c24fe0.w2.b4", !3942, i64 0}
!3942 = !{!"0x93c24fe0.w4.b4", !3922, i64 0}
!3943 = !{!3944, !3944, i64 0}
!3944 = !{!"0x93c251e0.w1.b0", !3945, i64 0}
!3945 = !{!"0x93c251e0.w2.b0", !3946, i64 0}
!3946 = !{!"0x93c251e0.w4.b0", !3947, i64 0}
!3947 = !{!"0x93c251e0.w8.b0", !3948, i64 0}
!3948 = !{!"0x93c251e0.w16.b0", !3949, i64 0}
!3949 = !{!"0x93c251e0.w32.b0", !3950, i64 0}
!3950 = !{!"0x93c251e0.w64.b0", !3951, i64 0}
!3951 = !{!"0x93c251e0.w128.b0", !3952, i64 0}
!3952 = !{!"0x93c251e0.w256.b0", !3953, i64 0}
!3953 = !{!"0x93c251e0.w512.b0", !3954, i64 0}
!3954 = !{!"0x93c251e0.w1024.b0", !3955, i64 0}
!3955 = !{!"int64", !3956, i64 0}
!3956 = !{!"0x93c251e0", !8, i64 0}
!3957 = !{!3958, !3958, i64 0}
!3958 = !{!"0x93c251e0.w1.b1", !3945, i64 0}
!3959 = !{!3960, !3960, i64 0}
!3960 = !{!"0x93c251e0.w1.b2", !3961, i64 0}
!3961 = !{!"0x93c251e0.w2.b2", !3946, i64 0}
!3962 = !{!3963, !3963, i64 0}
!3963 = !{!"0x93c251e0.w1.b3", !3961, i64 0}
!3964 = !{!3965, !3965, i64 0}
!3965 = !{!"0x93c251e0.w1.b4", !3966, i64 0}
!3966 = !{!"0x93c251e0.w2.b4", !3967, i64 0}
!3967 = !{!"0x93c251e0.w4.b4", !3947, i64 0}
!3968 = !{!3969, !3969, i64 0}
!3969 = !{!"float32", !3970, i64 0}
!3970 = !{!"0x9edd7280", !8, i64 0}
!3971 = !{!3972, !3972, i64 0}
!3972 = !{!"float32", !3973, i64 0}
!3973 = !{!"0x9e5c7500", !8, i64 0}
!3974 = !{!3975, !3975, i64 0}
!3975 = !{!"0x97851c30.w1.b0", !3976, i64 0}
!3976 = !{!"0x97851c30.w2.b0", !3977, i64 0}
!3977 = !{!"0x97851c30.w4.b0", !3978, i64 0}
!3978 = !{!"0x97851c30.w8.b0", !3979, i64 0}
!3979 = !{!"0x97851c30.w16.b0", !3980, i64 0}
!3980 = !{!"0x97851c30.w32.b0", !3981, i64 0}
!3981 = !{!"0x97851c30.w64.b0", !3982, i64 0}
!3982 = !{!"0x97851c30.w128.b0", !3983, i64 0}
!3983 = !{!"0x97851c30.w256.b0", !3984, i64 0}
!3984 = !{!"0x97851c30.w512.b0", !3985, i64 0}
!3985 = !{!"0x97851c30.w1024.b0", !3986, i64 0}
!3986 = !{!"int32", !3987, i64 0}
!3987 = !{!"0x97851c30", !8, i64 0}
!3988 = !{!3989, !3989, i64 0}
!3989 = !{!"0x97851c30.w1.b2", !3990, i64 0}
!3990 = !{!"0x97851c30.w2.b2", !3977, i64 0}
!3991 = !{!3992, !3992, i64 0}
!3992 = !{!"0x97851c30.w1.b3", !3990, i64 0}
!3993 = !{!3994, !3994, i64 0}
!3994 = !{!"0x97851c30.w1.b1", !3976, i64 0}
!3995 = !{!3996, !3996, i64 0}
!3996 = !{!"0xab26d5d0.w1.b0", !3997, i64 0}
!3997 = !{!"0xab26d5d0.w2.b0", !3998, i64 0}
!3998 = !{!"0xab26d5d0.w4.b0", !3999, i64 0}
!3999 = !{!"0xab26d5d0.w8.b0", !4000, i64 0}
!4000 = !{!"0xab26d5d0.w16.b0", !4001, i64 0}
!4001 = !{!"0xab26d5d0.w32.b0", !4002, i64 0}
!4002 = !{!"0xab26d5d0.w64.b0", !4003, i64 0}
!4003 = !{!"0xab26d5d0.w128.b0", !4004, i64 0}
!4004 = !{!"0xab26d5d0.w256.b0", !4005, i64 0}
!4005 = !{!"0xab26d5d0.w512.b0", !4006, i64 0}
!4006 = !{!"0xab26d5d0.w1024.b0", !4007, i64 0}
!4007 = !{!"int64", !4008, i64 0}
!4008 = !{!"0xab26d5d0", !8, i64 0}
!4009 = !{!4010, !4010, i64 0}
!4010 = !{!"0xab26d5d0.w1.b1", !3997, i64 0}
!4011 = !{!4012, !4012, i64 0}
!4012 = !{!"0xab26d5d0.w1.b2", !4013, i64 0}
!4013 = !{!"0xab26d5d0.w2.b2", !3998, i64 0}
!4014 = !{!4015, !4015, i64 0}
!4015 = !{!"0xab26d5d0.w1.b3", !4013, i64 0}
!4016 = !{!4017, !4017, i64 0}
!4017 = !{!"0xab26d5d0.w1.b4", !4018, i64 0}
!4018 = !{!"0xab26d5d0.w2.b4", !4019, i64 0}
!4019 = !{!"0xab26d5d0.w4.b4", !3999, i64 0}
!4020 = !{!4021, !4021, i64 0}
!4021 = !{!"0xab26db00.w1.b0", !4022, i64 0}
!4022 = !{!"0xab26db00.w2.b0", !4023, i64 0}
!4023 = !{!"0xab26db00.w4.b0", !4024, i64 0}
!4024 = !{!"0xab26db00.w8.b0", !4025, i64 0}
!4025 = !{!"0xab26db00.w16.b0", !4026, i64 0}
!4026 = !{!"0xab26db00.w32.b0", !4027, i64 0}
!4027 = !{!"0xab26db00.w64.b0", !4028, i64 0}
!4028 = !{!"0xab26db00.w128.b0", !4029, i64 0}
!4029 = !{!"0xab26db00.w256.b0", !4030, i64 0}
!4030 = !{!"0xab26db00.w512.b0", !4031, i64 0}
!4031 = !{!"0xab26db00.w1024.b0", !4032, i64 0}
!4032 = !{!"int64", !4033, i64 0}
!4033 = !{!"0xab26db00", !8, i64 0}
!4034 = !{!4035, !4035, i64 0}
!4035 = !{!"0xab26db00.w1.b1", !4022, i64 0}
!4036 = !{!4037, !4037, i64 0}
!4037 = !{!"0xab26db00.w1.b2", !4038, i64 0}
!4038 = !{!"0xab26db00.w2.b2", !4023, i64 0}
!4039 = !{!4040, !4040, i64 0}
!4040 = !{!"0xab26db00.w1.b3", !4038, i64 0}
!4041 = !{!4042, !4042, i64 0}
!4042 = !{!"0xab26db00.w1.b4", !4043, i64 0}
!4043 = !{!"0xab26db00.w2.b4", !4044, i64 0}
!4044 = !{!"0xab26db00.w4.b4", !4024, i64 0}
!4045 = !{!4046, !4046, i64 0}
!4046 = !{!"0xab26fe40.w1.b0", !4047, i64 0}
!4047 = !{!"0xab26fe40.w2.b0", !4048, i64 0}
!4048 = !{!"0xab26fe40.w4.b0", !4049, i64 0}
!4049 = !{!"0xab26fe40.w8.b0", !4050, i64 0}
!4050 = !{!"0xab26fe40.w16.b0", !4051, i64 0}
!4051 = !{!"0xab26fe40.w32.b0", !4052, i64 0}
!4052 = !{!"0xab26fe40.w64.b0", !4053, i64 0}
!4053 = !{!"0xab26fe40.w128.b0", !4054, i64 0}
!4054 = !{!"0xab26fe40.w256.b0", !4055, i64 0}
!4055 = !{!"0xab26fe40.w512.b0", !4056, i64 0}
!4056 = !{!"0xab26fe40.w1024.b0", !4057, i64 0}
!4057 = !{!"int64", !4058, i64 0}
!4058 = !{!"0xab26fe40", !8, i64 0}
!4059 = !{!4060, !4060, i64 0}
!4060 = !{!"0xab26fe40.w1.b1", !4047, i64 0}
!4061 = !{!4062, !4062, i64 0}
!4062 = !{!"0xab26fe40.w1.b2", !4063, i64 0}
!4063 = !{!"0xab26fe40.w2.b2", !4048, i64 0}
!4064 = !{!4065, !4065, i64 0}
!4065 = !{!"0xab26fe40.w1.b3", !4063, i64 0}
!4066 = !{!4067, !4067, i64 0}
!4067 = !{!"0xab26fe40.w1.b4", !4068, i64 0}
!4068 = !{!"0xab26fe40.w2.b4", !4069, i64 0}
!4069 = !{!"0xab26fe40.w4.b4", !4049, i64 0}
!4070 = !{!4071, !4071, i64 0}
!4071 = !{!"0xab26fe40.w1.b5", !4068, i64 0}
!4072 = !{!4073, !4073, i64 0}
!4073 = !{!"0xab270040.w1.b0", !4074, i64 0}
!4074 = !{!"0xab270040.w2.b0", !4075, i64 0}
!4075 = !{!"0xab270040.w4.b0", !4076, i64 0}
!4076 = !{!"0xab270040.w8.b0", !4077, i64 0}
!4077 = !{!"0xab270040.w16.b0", !4078, i64 0}
!4078 = !{!"0xab270040.w32.b0", !4079, i64 0}
!4079 = !{!"0xab270040.w64.b0", !4080, i64 0}
!4080 = !{!"0xab270040.w128.b0", !4081, i64 0}
!4081 = !{!"0xab270040.w256.b0", !4082, i64 0}
!4082 = !{!"0xab270040.w512.b0", !4083, i64 0}
!4083 = !{!"0xab270040.w1024.b0", !4084, i64 0}
!4084 = !{!"int64", !4085, i64 0}
!4085 = !{!"0xab270040", !8, i64 0}
!4086 = !{!4087, !4087, i64 0}
!4087 = !{!"0xab270040.w1.b1", !4074, i64 0}
!4088 = !{!4089, !4089, i64 0}
!4089 = !{!"0xab270040.w1.b2", !4090, i64 0}
!4090 = !{!"0xab270040.w2.b2", !4075, i64 0}
!4091 = !{!4092, !4092, i64 0}
!4092 = !{!"0xab270040.w1.b3", !4090, i64 0}
!4093 = !{!4094, !4094, i64 0}
!4094 = !{!"0xab270040.w1.b4", !4095, i64 0}
!4095 = !{!"0xab270040.w2.b4", !4096, i64 0}
!4096 = !{!"0xab270040.w4.b4", !4076, i64 0}
!4097 = !{!4098, !4098, i64 0}
!4098 = !{!"0xab270040.w1.b5", !4095, i64 0}
!4099 = !{!4100, !4100, i64 0}
!4100 = !{!"0xab271ee0.w1.b0", !4101, i64 0}
!4101 = !{!"0xab271ee0.w2.b0", !4102, i64 0}
!4102 = !{!"0xab271ee0.w4.b0", !4103, i64 0}
!4103 = !{!"0xab271ee0.w8.b0", !4104, i64 0}
!4104 = !{!"0xab271ee0.w16.b0", !4105, i64 0}
!4105 = !{!"0xab271ee0.w32.b0", !4106, i64 0}
!4106 = !{!"0xab271ee0.w64.b0", !4107, i64 0}
!4107 = !{!"0xab271ee0.w128.b0", !4108, i64 0}
!4108 = !{!"0xab271ee0.w256.b0", !4109, i64 0}
!4109 = !{!"0xab271ee0.w512.b0", !4110, i64 0}
!4110 = !{!"0xab271ee0.w1024.b0", !4111, i64 0}
!4111 = !{!"int64", !4112, i64 0}
!4112 = !{!"0xab271ee0", !8, i64 0}
!4113 = !{!4114, !4114, i64 0}
!4114 = !{!"0xab271ee0.w1.b1", !4101, i64 0}
!4115 = !{!4116, !4116, i64 0}
!4116 = !{!"0xab271ee0.w1.b2", !4117, i64 0}
!4117 = !{!"0xab271ee0.w2.b2", !4102, i64 0}
!4118 = !{!4119, !4119, i64 0}
!4119 = !{!"0xab271ee0.w1.b3", !4117, i64 0}
!4120 = !{!4121, !4121, i64 0}
!4121 = !{!"0xab271ee0.w1.b4", !4122, i64 0}
!4122 = !{!"0xab271ee0.w2.b4", !4123, i64 0}
!4123 = !{!"0xab271ee0.w4.b4", !4103, i64 0}
!4124 = !{!4125, !4125, i64 0}
!4125 = !{!"0xab270340.w1.b0", !4126, i64 0}
!4126 = !{!"0xab270340.w2.b0", !4127, i64 0}
!4127 = !{!"0xab270340.w4.b0", !4128, i64 0}
!4128 = !{!"0xab270340.w8.b0", !4129, i64 0}
!4129 = !{!"0xab270340.w16.b0", !4130, i64 0}
!4130 = !{!"0xab270340.w32.b0", !4131, i64 0}
!4131 = !{!"0xab270340.w64.b0", !4132, i64 0}
!4132 = !{!"0xab270340.w128.b0", !4133, i64 0}
!4133 = !{!"0xab270340.w256.b0", !4134, i64 0}
!4134 = !{!"0xab270340.w512.b0", !4135, i64 0}
!4135 = !{!"0xab270340.w1024.b0", !4136, i64 0}
!4136 = !{!"int64", !4137, i64 0}
!4137 = !{!"0xab270340", !8, i64 0}
!4138 = !{!4139, !4139, i64 0}
!4139 = !{!"0xab270340.w1.b1", !4126, i64 0}
!4140 = !{!4141, !4141, i64 0}
!4141 = !{!"0xab270340.w1.b2", !4142, i64 0}
!4142 = !{!"0xab270340.w2.b2", !4127, i64 0}
!4143 = !{!4144, !4144, i64 0}
!4144 = !{!"0xab270340.w1.b3", !4142, i64 0}
!4145 = !{!4146, !4146, i64 0}
!4146 = !{!"0xab270340.w1.b4", !4147, i64 0}
!4147 = !{!"0xab270340.w2.b4", !4148, i64 0}
!4148 = !{!"0xab270340.w4.b4", !4128, i64 0}
!4149 = !{!4150, !4150, i64 0}
!4150 = !{!"0xab2744a0.w1.b0", !4151, i64 0}
!4151 = !{!"0xab2744a0.w2.b0", !4152, i64 0}
!4152 = !{!"0xab2744a0.w4.b0", !4153, i64 0}
!4153 = !{!"0xab2744a0.w8.b0", !4154, i64 0}
!4154 = !{!"0xab2744a0.w16.b0", !4155, i64 0}
!4155 = !{!"0xab2744a0.w32.b0", !4156, i64 0}
!4156 = !{!"0xab2744a0.w64.b0", !4157, i64 0}
!4157 = !{!"0xab2744a0.w128.b0", !4158, i64 0}
!4158 = !{!"0xab2744a0.w256.b0", !4159, i64 0}
!4159 = !{!"0xab2744a0.w512.b0", !4160, i64 0}
!4160 = !{!"0xab2744a0.w1024.b0", !4161, i64 0}
!4161 = !{!"int64", !4162, i64 0}
!4162 = !{!"0xab2744a0", !8, i64 0}
!4163 = !{!4164, !4164, i64 0}
!4164 = !{!"0xab2744a0.w1.b1", !4151, i64 0}
!4165 = !{!4166, !4166, i64 0}
!4166 = !{!"0xab2744a0.w1.b2", !4167, i64 0}
!4167 = !{!"0xab2744a0.w2.b2", !4152, i64 0}
!4168 = !{!4169, !4169, i64 0}
!4169 = !{!"0xab2744a0.w1.b3", !4167, i64 0}
!4170 = !{!4171, !4171, i64 0}
!4171 = !{!"0xab2744a0.w1.b4", !4172, i64 0}
!4172 = !{!"0xab2744a0.w2.b4", !4173, i64 0}
!4173 = !{!"0xab2744a0.w4.b4", !4153, i64 0}
!4174 = !{!4175, !4175, i64 0}
!4175 = !{!"0xab2753b0.w1.b0", !4176, i64 0}
!4176 = !{!"0xab2753b0.w2.b0", !4177, i64 0}
!4177 = !{!"0xab2753b0.w4.b0", !4178, i64 0}
!4178 = !{!"0xab2753b0.w8.b0", !4179, i64 0}
!4179 = !{!"0xab2753b0.w16.b0", !4180, i64 0}
!4180 = !{!"0xab2753b0.w32.b0", !4181, i64 0}
!4181 = !{!"0xab2753b0.w64.b0", !4182, i64 0}
!4182 = !{!"0xab2753b0.w128.b0", !4183, i64 0}
!4183 = !{!"0xab2753b0.w256.b0", !4184, i64 0}
!4184 = !{!"0xab2753b0.w512.b0", !4185, i64 0}
!4185 = !{!"0xab2753b0.w1024.b0", !4186, i64 0}
!4186 = !{!"int64", !4187, i64 0}
!4187 = !{!"0xab2753b0", !8, i64 0}
!4188 = !{!4189, !4189, i64 0}
!4189 = !{!"0xab2753b0.w1.b1", !4176, i64 0}
!4190 = !{!4191, !4191, i64 0}
!4191 = !{!"0xab2753b0.w1.b2", !4192, i64 0}
!4192 = !{!"0xab2753b0.w2.b2", !4177, i64 0}
!4193 = !{!4194, !4194, i64 0}
!4194 = !{!"0xab2753b0.w1.b3", !4192, i64 0}
!4195 = !{!4196, !4196, i64 0}
!4196 = !{!"0xab2753b0.w1.b4", !4197, i64 0}
!4197 = !{!"0xab2753b0.w2.b4", !4198, i64 0}
!4198 = !{!"0xab2753b0.w4.b4", !4178, i64 0}
!4199 = !{!4200, !4200, i64 0}
!4200 = !{!"float32", !4201, i64 0}
!4201 = !{!"0xab221bb0", !8, i64 0}
!4202 = !{!4203, !4203, i64 0}
!4203 = !{!"float32", !4204, i64 0}
!4204 = !{!"0xaa5e5c60", !8, i64 0}
!4205 = !{!4206, !4206, i64 0}
!4206 = !{!"float32", !4207, i64 0}
!4207 = !{!"0xaa5db210", !8, i64 0}
!4208 = !{!4209, !4209, i64 0}
!4209 = !{!"float32", !4210, i64 0}
!4210 = !{!"0xaa5db170", !8, i64 0}
!4211 = !{!4212, !4212, i64 0}
!4212 = !{!"float32", !4213, i64 0}
!4213 = !{!"0xab2229c0", !8, i64 0}
!4214 = !{!4215, !4215, i64 0}
!4215 = !{!"0x95ad3d00.w1.b0", !4216, i64 0}
!4216 = !{!"0x95ad3d00.w2.b0", !4217, i64 0}
!4217 = !{!"0x95ad3d00.w4.b0", !4218, i64 0}
!4218 = !{!"0x95ad3d00.w8.b0", !4219, i64 0}
!4219 = !{!"0x95ad3d00.w16.b0", !4220, i64 0}
!4220 = !{!"0x95ad3d00.w32.b0", !4221, i64 0}
!4221 = !{!"0x95ad3d00.w64.b0", !4222, i64 0}
!4222 = !{!"0x95ad3d00.w128.b0", !4223, i64 0}
!4223 = !{!"0x95ad3d00.w256.b0", !4224, i64 0}
!4224 = !{!"0x95ad3d00.w512.b0", !4225, i64 0}
!4225 = !{!"0x95ad3d00.w1024.b0", !4226, i64 0}
!4226 = !{!"int32", !4227, i64 0}
!4227 = !{!"0x95ad3d00", !8, i64 0}
!4228 = !{!4229, !4229, i64 0}
!4229 = !{!"0x95ad3d00.w1.b2", !4230, i64 0}
!4230 = !{!"0x95ad3d00.w2.b2", !4217, i64 0}
!4231 = !{!4232, !4232, i64 0}
!4232 = !{!"0x95ad3d00.w1.b3", !4230, i64 0}
!4233 = !{!4234, !4234, i64 0}
!4234 = !{!"0x95ad3d00.w1.b1", !4216, i64 0}
!4235 = !{!4236, !4236, i64 0}
!4236 = !{!"0x95ad77c0.w1.b0", !4237, i64 0}
!4237 = !{!"0x95ad77c0.w2.b0", !4238, i64 0}
!4238 = !{!"0x95ad77c0.w4.b0", !4239, i64 0}
!4239 = !{!"0x95ad77c0.w8.b0", !4240, i64 0}
!4240 = !{!"0x95ad77c0.w16.b0", !4241, i64 0}
!4241 = !{!"0x95ad77c0.w32.b0", !4242, i64 0}
!4242 = !{!"0x95ad77c0.w64.b0", !4243, i64 0}
!4243 = !{!"0x95ad77c0.w128.b0", !4244, i64 0}
!4244 = !{!"0x95ad77c0.w256.b0", !4245, i64 0}
!4245 = !{!"0x95ad77c0.w512.b0", !4246, i64 0}
!4246 = !{!"0x95ad77c0.w1024.b0", !4247, i64 0}
!4247 = !{!"int64", !4248, i64 0}
!4248 = !{!"0x95ad77c0", !8, i64 0}
!4249 = !{!4250, !4250, i64 0}
!4250 = !{!"0x95ad77c0.w1.b1", !4237, i64 0}
!4251 = !{!4252, !4252, i64 0}
!4252 = !{!"0x95ad7cf0.w1.b0", !4253, i64 0}
!4253 = !{!"0x95ad7cf0.w2.b0", !4254, i64 0}
!4254 = !{!"0x95ad7cf0.w4.b0", !4255, i64 0}
!4255 = !{!"0x95ad7cf0.w8.b0", !4256, i64 0}
!4256 = !{!"0x95ad7cf0.w16.b0", !4257, i64 0}
!4257 = !{!"0x95ad7cf0.w32.b0", !4258, i64 0}
!4258 = !{!"0x95ad7cf0.w64.b0", !4259, i64 0}
!4259 = !{!"0x95ad7cf0.w128.b0", !4260, i64 0}
!4260 = !{!"0x95ad7cf0.w256.b0", !4261, i64 0}
!4261 = !{!"0x95ad7cf0.w512.b0", !4262, i64 0}
!4262 = !{!"0x95ad7cf0.w1024.b0", !4263, i64 0}
!4263 = !{!"int64", !4264, i64 0}
!4264 = !{!"0x95ad7cf0", !8, i64 0}
!4265 = !{!4266, !4266, i64 0}
!4266 = !{!"0x95ad7cf0.w1.b1", !4253, i64 0}
!4267 = !{!4268, !4268, i64 0}
!4268 = !{!"0x95ad89f0.w1.b0", !4269, i64 0}
!4269 = !{!"0x95ad89f0.w2.b0", !4270, i64 0}
!4270 = !{!"0x95ad89f0.w4.b0", !4271, i64 0}
!4271 = !{!"0x95ad89f0.w8.b0", !4272, i64 0}
!4272 = !{!"0x95ad89f0.w16.b0", !4273, i64 0}
!4273 = !{!"0x95ad89f0.w32.b0", !4274, i64 0}
!4274 = !{!"0x95ad89f0.w64.b0", !4275, i64 0}
!4275 = !{!"0x95ad89f0.w128.b0", !4276, i64 0}
!4276 = !{!"0x95ad89f0.w256.b0", !4277, i64 0}
!4277 = !{!"0x95ad89f0.w512.b0", !4278, i64 0}
!4278 = !{!"0x95ad89f0.w1024.b0", !4279, i64 0}
!4279 = !{!"int64", !4280, i64 0}
!4280 = !{!"0x95ad89f0", !8, i64 0}
!4281 = !{!4282, !4282, i64 0}
!4282 = !{!"0x95ad89f0.w1.b1", !4269, i64 0}
!4283 = !{!4284, !4284, i64 0}
!4284 = !{!"0x95ad9870.w1.b0", !4285, i64 0}
!4285 = !{!"0x95ad9870.w2.b0", !4286, i64 0}
!4286 = !{!"0x95ad9870.w4.b0", !4287, i64 0}
!4287 = !{!"0x95ad9870.w8.b0", !4288, i64 0}
!4288 = !{!"0x95ad9870.w16.b0", !4289, i64 0}
!4289 = !{!"0x95ad9870.w32.b0", !4290, i64 0}
!4290 = !{!"0x95ad9870.w64.b0", !4291, i64 0}
!4291 = !{!"0x95ad9870.w128.b0", !4292, i64 0}
!4292 = !{!"0x95ad9870.w256.b0", !4293, i64 0}
!4293 = !{!"0x95ad9870.w512.b0", !4294, i64 0}
!4294 = !{!"0x95ad9870.w1024.b0", !4295, i64 0}
!4295 = !{!"int64", !4296, i64 0}
!4296 = !{!"0x95ad9870", !8, i64 0}
!4297 = !{!4298, !4298, i64 0}
!4298 = !{!"0x95ad9870.w1.b1", !4285, i64 0}
!4299 = !{!4300, !4300, i64 0}
!4300 = !{!"0x95adaa10.w1.b0", !4301, i64 0}
!4301 = !{!"0x95adaa10.w2.b0", !4302, i64 0}
!4302 = !{!"0x95adaa10.w4.b0", !4303, i64 0}
!4303 = !{!"0x95adaa10.w8.b0", !4304, i64 0}
!4304 = !{!"0x95adaa10.w16.b0", !4305, i64 0}
!4305 = !{!"0x95adaa10.w32.b0", !4306, i64 0}
!4306 = !{!"0x95adaa10.w64.b0", !4307, i64 0}
!4307 = !{!"0x95adaa10.w128.b0", !4308, i64 0}
!4308 = !{!"0x95adaa10.w256.b0", !4309, i64 0}
!4309 = !{!"0x95adaa10.w512.b0", !4310, i64 0}
!4310 = !{!"0x95adaa10.w1024.b0", !4311, i64 0}
!4311 = !{!"int64", !4312, i64 0}
!4312 = !{!"0x95adaa10", !8, i64 0}
!4313 = !{!4314, !4314, i64 0}
!4314 = !{!"0x95ad9b70.w1.b0", !4315, i64 0}
!4315 = !{!"0x95ad9b70.w2.b0", !4316, i64 0}
!4316 = !{!"0x95ad9b70.w4.b0", !4317, i64 0}
!4317 = !{!"0x95ad9b70.w8.b0", !4318, i64 0}
!4318 = !{!"0x95ad9b70.w16.b0", !4319, i64 0}
!4319 = !{!"0x95ad9b70.w32.b0", !4320, i64 0}
!4320 = !{!"0x95ad9b70.w64.b0", !4321, i64 0}
!4321 = !{!"0x95ad9b70.w128.b0", !4322, i64 0}
!4322 = !{!"0x95ad9b70.w256.b0", !4323, i64 0}
!4323 = !{!"0x95ad9b70.w512.b0", !4324, i64 0}
!4324 = !{!"0x95ad9b70.w1024.b0", !4325, i64 0}
!4325 = !{!"int64", !4326, i64 0}
!4326 = !{!"0x95ad9b70", !8, i64 0}
!4327 = !{!4328, !4328, i64 0}
!4328 = !{!"0x95adc2d0.w1.b0", !4329, i64 0}
!4329 = !{!"0x95adc2d0.w2.b0", !4330, i64 0}
!4330 = !{!"0x95adc2d0.w4.b0", !4331, i64 0}
!4331 = !{!"0x95adc2d0.w8.b0", !4332, i64 0}
!4332 = !{!"0x95adc2d0.w16.b0", !4333, i64 0}
!4333 = !{!"0x95adc2d0.w32.b0", !4334, i64 0}
!4334 = !{!"0x95adc2d0.w64.b0", !4335, i64 0}
!4335 = !{!"0x95adc2d0.w128.b0", !4336, i64 0}
!4336 = !{!"0x95adc2d0.w256.b0", !4337, i64 0}
!4337 = !{!"0x95adc2d0.w512.b0", !4338, i64 0}
!4338 = !{!"0x95adc2d0.w1024.b0", !4339, i64 0}
!4339 = !{!"int64", !4340, i64 0}
!4340 = !{!"0x95adc2d0", !8, i64 0}
!4341 = !{!4342, !4342, i64 0}
!4342 = !{!"0x95adc2d0.w1.b1", !4329, i64 0}
!4343 = !{!4344, !4344, i64 0}
!4344 = !{!"0x95add1e0.w1.b0", !4345, i64 0}
!4345 = !{!"0x95add1e0.w2.b0", !4346, i64 0}
!4346 = !{!"0x95add1e0.w4.b0", !4347, i64 0}
!4347 = !{!"0x95add1e0.w8.b0", !4348, i64 0}
!4348 = !{!"0x95add1e0.w16.b0", !4349, i64 0}
!4349 = !{!"0x95add1e0.w32.b0", !4350, i64 0}
!4350 = !{!"0x95add1e0.w64.b0", !4351, i64 0}
!4351 = !{!"0x95add1e0.w128.b0", !4352, i64 0}
!4352 = !{!"0x95add1e0.w256.b0", !4353, i64 0}
!4353 = !{!"0x95add1e0.w512.b0", !4354, i64 0}
!4354 = !{!"0x95add1e0.w1024.b0", !4355, i64 0}
!4355 = !{!"int64", !4356, i64 0}
!4356 = !{!"0x95add1e0", !8, i64 0}
!4357 = !{!4358, !4358, i64 0}
!4358 = !{!"0x95add1e0.w1.b1", !4345, i64 0}
!4359 = !{!4360, !4360, i64 0}
!4360 = !{!"float32", !4361, i64 0}
!4361 = !{!"0x93d22020", !8, i64 0}
!4362 = !{!4363, !4363, i64 0}
!4363 = !{!"float32", !4364, i64 0}
!4364 = !{!"0x9e964060", !8, i64 0}
!4365 = !{!4366, !4366, i64 0}
!4366 = !{!"float32", !4367, i64 0}
!4367 = !{!"0xa8aac130", !8, i64 0}
!4368 = distinct !{!4368, !4369}
!4369 = !{!"llvm.loop.isvectorized", i32 1}
!4370 = !{!4371, !4371, i64 0}
!4371 = !{!"float32", !4372, i64 0}
!4372 = !{!"0x9303c8f0", !8, i64 0}
!4373 = !{!4374, !4374, i64 0}
!4374 = !{!"float32", !4375, i64 0}
!4375 = !{!"0x9303d0b0", !8, i64 0}
!4376 = !{!4377, !4377, i64 0}
!4377 = !{!"0x95ad79c0.w1.b0", !4378, i64 0}
!4378 = !{!"0x95ad79c0.w2.b0", !4379, i64 0}
!4379 = !{!"0x95ad79c0.w4.b0", !4380, i64 0}
!4380 = !{!"0x95ad79c0.w8.b0", !4381, i64 0}
!4381 = !{!"0x95ad79c0.w16.b0", !4382, i64 0}
!4382 = !{!"0x95ad79c0.w32.b0", !4383, i64 0}
!4383 = !{!"0x95ad79c0.w64.b0", !4384, i64 0}
!4384 = !{!"0x95ad79c0.w128.b0", !4385, i64 0}
!4385 = !{!"0x95ad79c0.w256.b0", !4386, i64 0}
!4386 = !{!"0x95ad79c0.w512.b0", !4387, i64 0}
!4387 = !{!"0x95ad79c0.w1024.b0", !4388, i64 0}
!4388 = !{!"int32", !4389, i64 0}
!4389 = !{!"0x95ad79c0", !8, i64 0}
!4390 = !{!4391, !4391, i64 0}
!4391 = !{!"0x95ad79c0.w1.b2", !4392, i64 0}
!4392 = !{!"0x95ad79c0.w2.b2", !4379, i64 0}
!4393 = !{!4394, !4394, i64 0}
!4394 = !{!"0x95ad79c0.w1.b3", !4392, i64 0}
!4395 = !{!4396, !4396, i64 0}
!4396 = !{!"0x95ad79c0.w1.b1", !4378, i64 0}
!4397 = !{!4398, !4398, i64 0}
!4398 = !{!"0x95ae02e0.w1.b0", !4399, i64 0}
!4399 = !{!"0x95ae02e0.w2.b0", !4400, i64 0}
!4400 = !{!"0x95ae02e0.w4.b0", !4401, i64 0}
!4401 = !{!"0x95ae02e0.w8.b0", !4402, i64 0}
!4402 = !{!"0x95ae02e0.w16.b0", !4403, i64 0}
!4403 = !{!"0x95ae02e0.w32.b0", !4404, i64 0}
!4404 = !{!"0x95ae02e0.w64.b0", !4405, i64 0}
!4405 = !{!"0x95ae02e0.w128.b0", !4406, i64 0}
!4406 = !{!"0x95ae02e0.w256.b0", !4407, i64 0}
!4407 = !{!"0x95ae02e0.w512.b0", !4408, i64 0}
!4408 = !{!"0x95ae02e0.w1024.b0", !4409, i64 0}
!4409 = !{!"int64", !4410, i64 0}
!4410 = !{!"0x95ae02e0", !8, i64 0}
!4411 = !{!4412, !4412, i64 0}
!4412 = !{!"0x95ae02e0.w1.b1", !4399, i64 0}
!4413 = !{!4414, !4414, i64 0}
!4414 = !{!"0x95ae02e0.w1.b2", !4415, i64 0}
!4415 = !{!"0x95ae02e0.w2.b2", !4400, i64 0}
!4416 = !{!4417, !4417, i64 0}
!4417 = !{!"0x95ae02e0.w1.b3", !4415, i64 0}
!4418 = !{!4419, !4419, i64 0}
!4419 = !{!"0x95ae02e0.w1.b4", !4420, i64 0}
!4420 = !{!"0x95ae02e0.w2.b4", !4421, i64 0}
!4421 = !{!"0x95ae02e0.w4.b4", !4401, i64 0}
!4422 = !{!4423, !4423, i64 0}
!4423 = !{!"0x95ae0810.w1.b0", !4424, i64 0}
!4424 = !{!"0x95ae0810.w2.b0", !4425, i64 0}
!4425 = !{!"0x95ae0810.w4.b0", !4426, i64 0}
!4426 = !{!"0x95ae0810.w8.b0", !4427, i64 0}
!4427 = !{!"0x95ae0810.w16.b0", !4428, i64 0}
!4428 = !{!"0x95ae0810.w32.b0", !4429, i64 0}
!4429 = !{!"0x95ae0810.w64.b0", !4430, i64 0}
!4430 = !{!"0x95ae0810.w128.b0", !4431, i64 0}
!4431 = !{!"0x95ae0810.w256.b0", !4432, i64 0}
!4432 = !{!"0x95ae0810.w512.b0", !4433, i64 0}
!4433 = !{!"0x95ae0810.w1024.b0", !4434, i64 0}
!4434 = !{!"int64", !4435, i64 0}
!4435 = !{!"0x95ae0810", !8, i64 0}
!4436 = !{!4437, !4437, i64 0}
!4437 = !{!"0x95ae0810.w1.b1", !4424, i64 0}
!4438 = !{!4439, !4439, i64 0}
!4439 = !{!"0x95ae0810.w1.b2", !4440, i64 0}
!4440 = !{!"0x95ae0810.w2.b2", !4425, i64 0}
!4441 = !{!4442, !4442, i64 0}
!4442 = !{!"0x95ae0810.w1.b3", !4440, i64 0}
!4443 = !{!4444, !4444, i64 0}
!4444 = !{!"0x95ae0810.w1.b4", !4445, i64 0}
!4445 = !{!"0x95ae0810.w2.b4", !4446, i64 0}
!4446 = !{!"0x95ae0810.w4.b4", !4426, i64 0}
!4447 = !{!4448, !4448, i64 0}
!4448 = !{!"0x95ae2b50.w1.b0", !4449, i64 0}
!4449 = !{!"0x95ae2b50.w2.b0", !4450, i64 0}
!4450 = !{!"0x95ae2b50.w4.b0", !4451, i64 0}
!4451 = !{!"0x95ae2b50.w8.b0", !4452, i64 0}
!4452 = !{!"0x95ae2b50.w16.b0", !4453, i64 0}
!4453 = !{!"0x95ae2b50.w32.b0", !4454, i64 0}
!4454 = !{!"0x95ae2b50.w64.b0", !4455, i64 0}
!4455 = !{!"0x95ae2b50.w128.b0", !4456, i64 0}
!4456 = !{!"0x95ae2b50.w256.b0", !4457, i64 0}
!4457 = !{!"0x95ae2b50.w512.b0", !4458, i64 0}
!4458 = !{!"0x95ae2b50.w1024.b0", !4459, i64 0}
!4459 = !{!"int64", !4460, i64 0}
!4460 = !{!"0x95ae2b50", !8, i64 0}
!4461 = !{!4462, !4462, i64 0}
!4462 = !{!"0x95ae2b50.w1.b1", !4449, i64 0}
!4463 = !{!4464, !4464, i64 0}
!4464 = !{!"0x95ae2b50.w1.b2", !4465, i64 0}
!4465 = !{!"0x95ae2b50.w2.b2", !4450, i64 0}
!4466 = !{!4467, !4467, i64 0}
!4467 = !{!"0x95ae2b50.w1.b3", !4465, i64 0}
!4468 = !{!4469, !4469, i64 0}
!4469 = !{!"0x95ae2b50.w1.b4", !4470, i64 0}
!4470 = !{!"0x95ae2b50.w2.b4", !4471, i64 0}
!4471 = !{!"0x95ae2b50.w4.b4", !4451, i64 0}
!4472 = !{!4473, !4473, i64 0}
!4473 = !{!"0x95ae2b50.w1.b5", !4470, i64 0}
!4474 = !{!4475, !4475, i64 0}
!4475 = !{!"0x95ae2d50.w1.b0", !4476, i64 0}
!4476 = !{!"0x95ae2d50.w2.b0", !4477, i64 0}
!4477 = !{!"0x95ae2d50.w4.b0", !4478, i64 0}
!4478 = !{!"0x95ae2d50.w8.b0", !4479, i64 0}
!4479 = !{!"0x95ae2d50.w16.b0", !4480, i64 0}
!4480 = !{!"0x95ae2d50.w32.b0", !4481, i64 0}
!4481 = !{!"0x95ae2d50.w64.b0", !4482, i64 0}
!4482 = !{!"0x95ae2d50.w128.b0", !4483, i64 0}
!4483 = !{!"0x95ae2d50.w256.b0", !4484, i64 0}
!4484 = !{!"0x95ae2d50.w512.b0", !4485, i64 0}
!4485 = !{!"0x95ae2d50.w1024.b0", !4486, i64 0}
!4486 = !{!"int64", !4487, i64 0}
!4487 = !{!"0x95ae2d50", !8, i64 0}
!4488 = !{!4489, !4489, i64 0}
!4489 = !{!"0x95ae2d50.w1.b1", !4476, i64 0}
!4490 = !{!4491, !4491, i64 0}
!4491 = !{!"0x95ae2d50.w1.b2", !4492, i64 0}
!4492 = !{!"0x95ae2d50.w2.b2", !4477, i64 0}
!4493 = !{!4494, !4494, i64 0}
!4494 = !{!"0x95ae2d50.w1.b3", !4492, i64 0}
!4495 = !{!4496, !4496, i64 0}
!4496 = !{!"0x95ae2d50.w1.b4", !4497, i64 0}
!4497 = !{!"0x95ae2d50.w2.b4", !4498, i64 0}
!4498 = !{!"0x95ae2d50.w4.b4", !4478, i64 0}
!4499 = !{!4500, !4500, i64 0}
!4500 = !{!"0x95ae2d50.w1.b5", !4497, i64 0}
!4501 = !{!4502, !4502, i64 0}
!4502 = !{!"0x95ae4bf0.w1.b0", !4503, i64 0}
!4503 = !{!"0x95ae4bf0.w2.b0", !4504, i64 0}
!4504 = !{!"0x95ae4bf0.w4.b0", !4505, i64 0}
!4505 = !{!"0x95ae4bf0.w8.b0", !4506, i64 0}
!4506 = !{!"0x95ae4bf0.w16.b0", !4507, i64 0}
!4507 = !{!"0x95ae4bf0.w32.b0", !4508, i64 0}
!4508 = !{!"0x95ae4bf0.w64.b0", !4509, i64 0}
!4509 = !{!"0x95ae4bf0.w128.b0", !4510, i64 0}
!4510 = !{!"0x95ae4bf0.w256.b0", !4511, i64 0}
!4511 = !{!"0x95ae4bf0.w512.b0", !4512, i64 0}
!4512 = !{!"0x95ae4bf0.w1024.b0", !4513, i64 0}
!4513 = !{!"int64", !4514, i64 0}
!4514 = !{!"0x95ae4bf0", !8, i64 0}
!4515 = !{!4516, !4516, i64 0}
!4516 = !{!"0x95ae4bf0.w1.b1", !4503, i64 0}
!4517 = !{!4518, !4518, i64 0}
!4518 = !{!"0x95ae4bf0.w1.b2", !4519, i64 0}
!4519 = !{!"0x95ae4bf0.w2.b2", !4504, i64 0}
!4520 = !{!4521, !4521, i64 0}
!4521 = !{!"0x95ae4bf0.w1.b3", !4519, i64 0}
!4522 = !{!4523, !4523, i64 0}
!4523 = !{!"0x95ae4bf0.w1.b4", !4524, i64 0}
!4524 = !{!"0x95ae4bf0.w2.b4", !4525, i64 0}
!4525 = !{!"0x95ae4bf0.w4.b4", !4505, i64 0}
!4526 = !{!4527, !4527, i64 0}
!4527 = !{!"0x95ae3050.w1.b0", !4528, i64 0}
!4528 = !{!"0x95ae3050.w2.b0", !4529, i64 0}
!4529 = !{!"0x95ae3050.w4.b0", !4530, i64 0}
!4530 = !{!"0x95ae3050.w8.b0", !4531, i64 0}
!4531 = !{!"0x95ae3050.w16.b0", !4532, i64 0}
!4532 = !{!"0x95ae3050.w32.b0", !4533, i64 0}
!4533 = !{!"0x95ae3050.w64.b0", !4534, i64 0}
!4534 = !{!"0x95ae3050.w128.b0", !4535, i64 0}
!4535 = !{!"0x95ae3050.w256.b0", !4536, i64 0}
!4536 = !{!"0x95ae3050.w512.b0", !4537, i64 0}
!4537 = !{!"0x95ae3050.w1024.b0", !4538, i64 0}
!4538 = !{!"int64", !4539, i64 0}
!4539 = !{!"0x95ae3050", !8, i64 0}
!4540 = !{!4541, !4541, i64 0}
!4541 = !{!"0x95ae3050.w1.b1", !4528, i64 0}
!4542 = !{!4543, !4543, i64 0}
!4543 = !{!"0x95ae3050.w1.b2", !4544, i64 0}
!4544 = !{!"0x95ae3050.w2.b2", !4529, i64 0}
!4545 = !{!4546, !4546, i64 0}
!4546 = !{!"0x95ae3050.w1.b3", !4544, i64 0}
!4547 = !{!4548, !4548, i64 0}
!4548 = !{!"0x95ae3050.w1.b4", !4549, i64 0}
!4549 = !{!"0x95ae3050.w2.b4", !4550, i64 0}
!4550 = !{!"0x95ae3050.w4.b4", !4530, i64 0}
!4551 = !{!4552, !4552, i64 0}
!4552 = !{!"0x95ae71b0.w1.b0", !4553, i64 0}
!4553 = !{!"0x95ae71b0.w2.b0", !4554, i64 0}
!4554 = !{!"0x95ae71b0.w4.b0", !4555, i64 0}
!4555 = !{!"0x95ae71b0.w8.b0", !4556, i64 0}
!4556 = !{!"0x95ae71b0.w16.b0", !4557, i64 0}
!4557 = !{!"0x95ae71b0.w32.b0", !4558, i64 0}
!4558 = !{!"0x95ae71b0.w64.b0", !4559, i64 0}
!4559 = !{!"0x95ae71b0.w128.b0", !4560, i64 0}
!4560 = !{!"0x95ae71b0.w256.b0", !4561, i64 0}
!4561 = !{!"0x95ae71b0.w512.b0", !4562, i64 0}
!4562 = !{!"0x95ae71b0.w1024.b0", !4563, i64 0}
!4563 = !{!"int64", !4564, i64 0}
!4564 = !{!"0x95ae71b0", !8, i64 0}
!4565 = !{!4566, !4566, i64 0}
!4566 = !{!"0x95ae71b0.w1.b1", !4553, i64 0}
!4567 = !{!4568, !4568, i64 0}
!4568 = !{!"0x95ae71b0.w1.b2", !4569, i64 0}
!4569 = !{!"0x95ae71b0.w2.b2", !4554, i64 0}
!4570 = !{!4571, !4571, i64 0}
!4571 = !{!"0x95ae71b0.w1.b3", !4569, i64 0}
!4572 = !{!4573, !4573, i64 0}
!4573 = !{!"0x95ae71b0.w1.b4", !4574, i64 0}
!4574 = !{!"0x95ae71b0.w2.b4", !4575, i64 0}
!4575 = !{!"0x95ae71b0.w4.b4", !4555, i64 0}
!4576 = !{!4577, !4577, i64 0}
!4577 = !{!"0x95ae80c0.w1.b0", !4578, i64 0}
!4578 = !{!"0x95ae80c0.w2.b0", !4579, i64 0}
!4579 = !{!"0x95ae80c0.w4.b0", !4580, i64 0}
!4580 = !{!"0x95ae80c0.w8.b0", !4581, i64 0}
!4581 = !{!"0x95ae80c0.w16.b0", !4582, i64 0}
!4582 = !{!"0x95ae80c0.w32.b0", !4583, i64 0}
!4583 = !{!"0x95ae80c0.w64.b0", !4584, i64 0}
!4584 = !{!"0x95ae80c0.w128.b0", !4585, i64 0}
!4585 = !{!"0x95ae80c0.w256.b0", !4586, i64 0}
!4586 = !{!"0x95ae80c0.w512.b0", !4587, i64 0}
!4587 = !{!"0x95ae80c0.w1024.b0", !4588, i64 0}
!4588 = !{!"int64", !4589, i64 0}
!4589 = !{!"0x95ae80c0", !8, i64 0}
!4590 = !{!4591, !4591, i64 0}
!4591 = !{!"0x95ae80c0.w1.b1", !4578, i64 0}
!4592 = !{!4593, !4593, i64 0}
!4593 = !{!"0x95ae80c0.w1.b2", !4594, i64 0}
!4594 = !{!"0x95ae80c0.w2.b2", !4579, i64 0}
!4595 = !{!4596, !4596, i64 0}
!4596 = !{!"0x95ae80c0.w1.b3", !4594, i64 0}
!4597 = !{!4598, !4598, i64 0}
!4598 = !{!"0x95ae80c0.w1.b4", !4599, i64 0}
!4599 = !{!"0x95ae80c0.w2.b4", !4600, i64 0}
!4600 = !{!"0x95ae80c0.w4.b4", !4580, i64 0}
!4601 = !{!4602, !4602, i64 0}
!4602 = !{!"float32", !4603, i64 0}
!4603 = !{!"0x93e376e0", !8, i64 0}
!4604 = !{!4605, !4605, i64 0}
!4605 = !{!"float32", !4606, i64 0}
!4606 = !{!"0x93e37a80", !8, i64 0}
!4607 = !{!4608, !4608, i64 0}
!4608 = !{!"float32", !4609, i64 0}
!4609 = !{!"0x93e379e0", !8, i64 0}
!4610 = !{!4611, !4611, i64 0}
!4611 = !{!"float32", !4612, i64 0}
!4612 = !{!"0x93e37990", !8, i64 0}
!4613 = !{!4614, !4614, i64 0}
!4614 = !{!"float32", !4615, i64 0}
!4615 = !{!"0x93e37a30", !8, i64 0}
!4616 = !{!4617, !4617, i64 0}
!4617 = !{!"0x954f7110.w1.b0", !4618, i64 0}
!4618 = !{!"0x954f7110.w2.b0", !4619, i64 0}
!4619 = !{!"0x954f7110.w4.b0", !4620, i64 0}
!4620 = !{!"0x954f7110.w8.b0", !4621, i64 0}
!4621 = !{!"0x954f7110.w16.b0", !4622, i64 0}
!4622 = !{!"0x954f7110.w32.b0", !4623, i64 0}
!4623 = !{!"0x954f7110.w64.b0", !4624, i64 0}
!4624 = !{!"0x954f7110.w128.b0", !4625, i64 0}
!4625 = !{!"0x954f7110.w256.b0", !4626, i64 0}
!4626 = !{!"0x954f7110.w512.b0", !4627, i64 0}
!4627 = !{!"0x954f7110.w1024.b0", !4628, i64 0}
!4628 = !{!"int32", !4629, i64 0}
!4629 = !{!"0x954f7110", !8, i64 0}
!4630 = !{!4631, !4631, i64 0}
!4631 = !{!"0x954f7110.w1.b1", !4618, i64 0}
!4632 = !{!4633, !4633, i64 0}
!4633 = !{!"0x954fc390.w1.b0", !4634, i64 0}
!4634 = !{!"0x954fc390.w2.b0", !4635, i64 0}
!4635 = !{!"0x954fc390.w4.b0", !4636, i64 0}
!4636 = !{!"0x954fc390.w8.b0", !4637, i64 0}
!4637 = !{!"0x954fc390.w16.b0", !4638, i64 0}
!4638 = !{!"0x954fc390.w32.b0", !4639, i64 0}
!4639 = !{!"0x954fc390.w64.b0", !4640, i64 0}
!4640 = !{!"0x954fc390.w128.b0", !4641, i64 0}
!4641 = !{!"0x954fc390.w256.b0", !4642, i64 0}
!4642 = !{!"0x954fc390.w512.b0", !4643, i64 0}
!4643 = !{!"0x954fc390.w1024.b0", !4644, i64 0}
!4644 = !{!"int64", !4645, i64 0}
!4645 = !{!"0x954fc390", !8, i64 0}
!4646 = !{!4647, !4647, i64 0}
!4647 = !{!"0x954fc390.w1.b1", !4634, i64 0}
!4648 = !{!4649, !4649, i64 0}
!4649 = !{!"0x954fc390.w1.b2", !4650, i64 0}
!4650 = !{!"0x954fc390.w2.b2", !4635, i64 0}
!4651 = !{!4652, !4652, i64 0}
!4652 = !{!"0x954fc390.w1.b3", !4650, i64 0}
!4653 = !{!4654, !4654, i64 0}
!4654 = !{!"0x954fc390.w1.b4", !4655, i64 0}
!4655 = !{!"0x954fc390.w2.b4", !4656, i64 0}
!4656 = !{!"0x954fc390.w4.b4", !4636, i64 0}
!4657 = !{!4658, !4658, i64 0}
!4658 = !{!"0x954fc8c0.w1.b0", !4659, i64 0}
!4659 = !{!"0x954fc8c0.w2.b0", !4660, i64 0}
!4660 = !{!"0x954fc8c0.w4.b0", !4661, i64 0}
!4661 = !{!"0x954fc8c0.w8.b0", !4662, i64 0}
!4662 = !{!"0x954fc8c0.w16.b0", !4663, i64 0}
!4663 = !{!"0x954fc8c0.w32.b0", !4664, i64 0}
!4664 = !{!"0x954fc8c0.w64.b0", !4665, i64 0}
!4665 = !{!"0x954fc8c0.w128.b0", !4666, i64 0}
!4666 = !{!"0x954fc8c0.w256.b0", !4667, i64 0}
!4667 = !{!"0x954fc8c0.w512.b0", !4668, i64 0}
!4668 = !{!"0x954fc8c0.w1024.b0", !4669, i64 0}
!4669 = !{!"int64", !4670, i64 0}
!4670 = !{!"0x954fc8c0", !8, i64 0}
!4671 = !{!4672, !4672, i64 0}
!4672 = !{!"0x954fc8c0.w1.b1", !4659, i64 0}
!4673 = !{!4674, !4674, i64 0}
!4674 = !{!"0x954fc8c0.w1.b2", !4675, i64 0}
!4675 = !{!"0x954fc8c0.w2.b2", !4660, i64 0}
!4676 = !{!4677, !4677, i64 0}
!4677 = !{!"0x954fc8c0.w1.b3", !4675, i64 0}
!4678 = !{!4679, !4679, i64 0}
!4679 = !{!"0x954fc8c0.w1.b4", !4680, i64 0}
!4680 = !{!"0x954fc8c0.w2.b4", !4681, i64 0}
!4681 = !{!"0x954fc8c0.w4.b4", !4661, i64 0}
!4682 = !{!4683, !4683, i64 0}
!4683 = !{!"0x954fec00.w1.b0", !4684, i64 0}
!4684 = !{!"0x954fec00.w2.b0", !4685, i64 0}
!4685 = !{!"0x954fec00.w4.b0", !4686, i64 0}
!4686 = !{!"0x954fec00.w8.b0", !4687, i64 0}
!4687 = !{!"0x954fec00.w16.b0", !4688, i64 0}
!4688 = !{!"0x954fec00.w32.b0", !4689, i64 0}
!4689 = !{!"0x954fec00.w64.b0", !4690, i64 0}
!4690 = !{!"0x954fec00.w128.b0", !4691, i64 0}
!4691 = !{!"0x954fec00.w256.b0", !4692, i64 0}
!4692 = !{!"0x954fec00.w512.b0", !4693, i64 0}
!4693 = !{!"0x954fec00.w1024.b0", !4694, i64 0}
!4694 = !{!"int64", !4695, i64 0}
!4695 = !{!"0x954fec00", !8, i64 0}
!4696 = !{!4697, !4697, i64 0}
!4697 = !{!"0x954fec00.w1.b1", !4684, i64 0}
!4698 = !{!4699, !4699, i64 0}
!4699 = !{!"0x954fec00.w1.b2", !4700, i64 0}
!4700 = !{!"0x954fec00.w2.b2", !4685, i64 0}
!4701 = !{!4702, !4702, i64 0}
!4702 = !{!"0x954fec00.w1.b3", !4700, i64 0}
!4703 = !{!4704, !4704, i64 0}
!4704 = !{!"0x954fec00.w1.b4", !4705, i64 0}
!4705 = !{!"0x954fec00.w2.b4", !4706, i64 0}
!4706 = !{!"0x954fec00.w4.b4", !4686, i64 0}
!4707 = !{!4708, !4708, i64 0}
!4708 = !{!"0x954fee00.w1.b0", !4709, i64 0}
!4709 = !{!"0x954fee00.w2.b0", !4710, i64 0}
!4710 = !{!"0x954fee00.w4.b0", !4711, i64 0}
!4711 = !{!"0x954fee00.w8.b0", !4712, i64 0}
!4712 = !{!"0x954fee00.w16.b0", !4713, i64 0}
!4713 = !{!"0x954fee00.w32.b0", !4714, i64 0}
!4714 = !{!"0x954fee00.w64.b0", !4715, i64 0}
!4715 = !{!"0x954fee00.w128.b0", !4716, i64 0}
!4716 = !{!"0x954fee00.w256.b0", !4717, i64 0}
!4717 = !{!"0x954fee00.w512.b0", !4718, i64 0}
!4718 = !{!"0x954fee00.w1024.b0", !4719, i64 0}
!4719 = !{!"int64", !4720, i64 0}
!4720 = !{!"0x954fee00", !8, i64 0}
!4721 = !{!4722, !4722, i64 0}
!4722 = !{!"0x954fee00.w1.b1", !4709, i64 0}
!4723 = !{!4724, !4724, i64 0}
!4724 = !{!"0x954fee00.w1.b2", !4725, i64 0}
!4725 = !{!"0x954fee00.w2.b2", !4710, i64 0}
!4726 = !{!4727, !4727, i64 0}
!4727 = !{!"0x954fee00.w1.b3", !4725, i64 0}
!4728 = !{!4729, !4729, i64 0}
!4729 = !{!"0x954fee00.w1.b4", !4730, i64 0}
!4730 = !{!"0x954fee00.w2.b4", !4731, i64 0}
!4731 = !{!"0x954fee00.w4.b4", !4711, i64 0}
!4732 = !{!4733, !4733, i64 0}
!4733 = !{!"float32", !4734, i64 0}
!4734 = !{!"0x9f041160", !8, i64 0}
!4735 = !{!4736, !4736, i64 0}
!4736 = !{!"float32", !4737, i64 0}
!4737 = !{!"0xa89e87f0", !8, i64 0}
!4738 = !{!4739, !4739, i64 0}
!4739 = !{!"0x954ff100.w1.b0", !4740, i64 0}
!4740 = !{!"0x954ff100.w2.b0", !4741, i64 0}
!4741 = !{!"0x954ff100.w4.b0", !4742, i64 0}
!4742 = !{!"0x954ff100.w8.b0", !4743, i64 0}
!4743 = !{!"0x954ff100.w16.b0", !4744, i64 0}
!4744 = !{!"0x954ff100.w32.b0", !4745, i64 0}
!4745 = !{!"0x954ff100.w64.b0", !4746, i64 0}
!4746 = !{!"0x954ff100.w128.b0", !4747, i64 0}
!4747 = !{!"0x954ff100.w256.b0", !4748, i64 0}
!4748 = !{!"0x954ff100.w512.b0", !4749, i64 0}
!4749 = !{!"0x954ff100.w1024.b0", !4750, i64 0}
!4750 = !{!"int32", !4751, i64 0}
!4751 = !{!"0x954ff100", !8, i64 0}
!4752 = !{!4753, !4753, i64 0}
!4753 = !{!"0x954ff100.w1.b2", !4754, i64 0}
!4754 = !{!"0x954ff100.w2.b2", !4741, i64 0}
!4755 = !{!4756, !4756, i64 0}
!4756 = !{!"0x954ff100.w1.b3", !4754, i64 0}
!4757 = !{!4758, !4758, i64 0}
!4758 = !{!"0x954ff100.w1.b1", !4740, i64 0}
!4759 = !{!4760, !4760, i64 0}
!4760 = !{!"0x95502c90.w1.b0", !4761, i64 0}
!4761 = !{!"0x95502c90.w2.b0", !4762, i64 0}
!4762 = !{!"0x95502c90.w4.b0", !4763, i64 0}
!4763 = !{!"0x95502c90.w8.b0", !4764, i64 0}
!4764 = !{!"0x95502c90.w16.b0", !4765, i64 0}
!4765 = !{!"0x95502c90.w32.b0", !4766, i64 0}
!4766 = !{!"0x95502c90.w64.b0", !4767, i64 0}
!4767 = !{!"0x95502c90.w128.b0", !4768, i64 0}
!4768 = !{!"0x95502c90.w256.b0", !4769, i64 0}
!4769 = !{!"0x95502c90.w512.b0", !4770, i64 0}
!4770 = !{!"0x95502c90.w1024.b0", !4771, i64 0}
!4771 = !{!"int64", !4772, i64 0}
!4772 = !{!"0x95502c90", !8, i64 0}
!4773 = !{!4774, !4774, i64 0}
!4774 = !{!"0x95502c90.w1.b1", !4761, i64 0}
!4775 = !{!4776, !4776, i64 0}
!4776 = !{!"0x95502c90.w1.b2", !4777, i64 0}
!4777 = !{!"0x95502c90.w2.b2", !4762, i64 0}
!4778 = !{!4779, !4779, i64 0}
!4779 = !{!"0x95502c90.w1.b3", !4777, i64 0}
!4780 = !{!4781, !4781, i64 0}
!4781 = !{!"0x95502c90.w1.b4", !4782, i64 0}
!4782 = !{!"0x95502c90.w2.b4", !4783, i64 0}
!4783 = !{!"0x95502c90.w4.b4", !4763, i64 0}
!4784 = !{!4785, !4785, i64 0}
!4785 = !{!"0x955031c0.w1.b0", !4786, i64 0}
!4786 = !{!"0x955031c0.w2.b0", !4787, i64 0}
!4787 = !{!"0x955031c0.w4.b0", !4788, i64 0}
!4788 = !{!"0x955031c0.w8.b0", !4789, i64 0}
!4789 = !{!"0x955031c0.w16.b0", !4790, i64 0}
!4790 = !{!"0x955031c0.w32.b0", !4791, i64 0}
!4791 = !{!"0x955031c0.w64.b0", !4792, i64 0}
!4792 = !{!"0x955031c0.w128.b0", !4793, i64 0}
!4793 = !{!"0x955031c0.w256.b0", !4794, i64 0}
!4794 = !{!"0x955031c0.w512.b0", !4795, i64 0}
!4795 = !{!"0x955031c0.w1024.b0", !4796, i64 0}
!4796 = !{!"int64", !4797, i64 0}
!4797 = !{!"0x955031c0", !8, i64 0}
!4798 = !{!4799, !4799, i64 0}
!4799 = !{!"0x955031c0.w1.b1", !4786, i64 0}
!4800 = !{!4801, !4801, i64 0}
!4801 = !{!"0x955031c0.w1.b2", !4802, i64 0}
!4802 = !{!"0x955031c0.w2.b2", !4787, i64 0}
!4803 = !{!4804, !4804, i64 0}
!4804 = !{!"0x955031c0.w1.b3", !4802, i64 0}
!4805 = !{!4806, !4806, i64 0}
!4806 = !{!"0x955031c0.w1.b4", !4807, i64 0}
!4807 = !{!"0x955031c0.w2.b4", !4808, i64 0}
!4808 = !{!"0x955031c0.w4.b4", !4788, i64 0}
!4809 = !{!4810, !4810, i64 0}
!4810 = !{!"0x95505500.w1.b0", !4811, i64 0}
!4811 = !{!"0x95505500.w2.b0", !4812, i64 0}
!4812 = !{!"0x95505500.w4.b0", !4813, i64 0}
!4813 = !{!"0x95505500.w8.b0", !4814, i64 0}
!4814 = !{!"0x95505500.w16.b0", !4815, i64 0}
!4815 = !{!"0x95505500.w32.b0", !4816, i64 0}
!4816 = !{!"0x95505500.w64.b0", !4817, i64 0}
!4817 = !{!"0x95505500.w128.b0", !4818, i64 0}
!4818 = !{!"0x95505500.w256.b0", !4819, i64 0}
!4819 = !{!"0x95505500.w512.b0", !4820, i64 0}
!4820 = !{!"0x95505500.w1024.b0", !4821, i64 0}
!4821 = !{!"int64", !4822, i64 0}
!4822 = !{!"0x95505500", !8, i64 0}
!4823 = !{!4824, !4824, i64 0}
!4824 = !{!"0x95505500.w1.b1", !4811, i64 0}
!4825 = !{!4826, !4826, i64 0}
!4826 = !{!"0x95505500.w1.b2", !4827, i64 0}
!4827 = !{!"0x95505500.w2.b2", !4812, i64 0}
!4828 = !{!4829, !4829, i64 0}
!4829 = !{!"0x95505500.w1.b3", !4827, i64 0}
!4830 = !{!4831, !4831, i64 0}
!4831 = !{!"0x95505500.w1.b4", !4832, i64 0}
!4832 = !{!"0x95505500.w2.b4", !4833, i64 0}
!4833 = !{!"0x95505500.w4.b4", !4813, i64 0}
!4834 = !{!4835, !4835, i64 0}
!4835 = !{!"0x95505500.w1.b5", !4832, i64 0}
!4836 = !{!4837, !4837, i64 0}
!4837 = !{!"0x95505700.w1.b0", !4838, i64 0}
!4838 = !{!"0x95505700.w2.b0", !4839, i64 0}
!4839 = !{!"0x95505700.w4.b0", !4840, i64 0}
!4840 = !{!"0x95505700.w8.b0", !4841, i64 0}
!4841 = !{!"0x95505700.w16.b0", !4842, i64 0}
!4842 = !{!"0x95505700.w32.b0", !4843, i64 0}
!4843 = !{!"0x95505700.w64.b0", !4844, i64 0}
!4844 = !{!"0x95505700.w128.b0", !4845, i64 0}
!4845 = !{!"0x95505700.w256.b0", !4846, i64 0}
!4846 = !{!"0x95505700.w512.b0", !4847, i64 0}
!4847 = !{!"0x95505700.w1024.b0", !4848, i64 0}
!4848 = !{!"int64", !4849, i64 0}
!4849 = !{!"0x95505700", !8, i64 0}
!4850 = !{!4851, !4851, i64 0}
!4851 = !{!"0x95505700.w1.b1", !4838, i64 0}
!4852 = !{!4853, !4853, i64 0}
!4853 = !{!"0x95505700.w1.b2", !4854, i64 0}
!4854 = !{!"0x95505700.w2.b2", !4839, i64 0}
!4855 = !{!4856, !4856, i64 0}
!4856 = !{!"0x95505700.w1.b3", !4854, i64 0}
!4857 = !{!4858, !4858, i64 0}
!4858 = !{!"0x95505700.w1.b4", !4859, i64 0}
!4859 = !{!"0x95505700.w2.b4", !4860, i64 0}
!4860 = !{!"0x95505700.w4.b4", !4840, i64 0}
!4861 = !{!4862, !4862, i64 0}
!4862 = !{!"0x95505700.w1.b5", !4859, i64 0}
!4863 = !{!4864, !4864, i64 0}
!4864 = !{!"0x955075a0.w1.b0", !4865, i64 0}
!4865 = !{!"0x955075a0.w2.b0", !4866, i64 0}
!4866 = !{!"0x955075a0.w4.b0", !4867, i64 0}
!4867 = !{!"0x955075a0.w8.b0", !4868, i64 0}
!4868 = !{!"0x955075a0.w16.b0", !4869, i64 0}
!4869 = !{!"0x955075a0.w32.b0", !4870, i64 0}
!4870 = !{!"0x955075a0.w64.b0", !4871, i64 0}
!4871 = !{!"0x955075a0.w128.b0", !4872, i64 0}
!4872 = !{!"0x955075a0.w256.b0", !4873, i64 0}
!4873 = !{!"0x955075a0.w512.b0", !4874, i64 0}
!4874 = !{!"0x955075a0.w1024.b0", !4875, i64 0}
!4875 = !{!"int64", !4876, i64 0}
!4876 = !{!"0x955075a0", !8, i64 0}
!4877 = !{!4878, !4878, i64 0}
!4878 = !{!"0x955075a0.w1.b1", !4865, i64 0}
!4879 = !{!4880, !4880, i64 0}
!4880 = !{!"0x955075a0.w1.b2", !4881, i64 0}
!4881 = !{!"0x955075a0.w2.b2", !4866, i64 0}
!4882 = !{!4883, !4883, i64 0}
!4883 = !{!"0x955075a0.w1.b3", !4881, i64 0}
!4884 = !{!4885, !4885, i64 0}
!4885 = !{!"0x955075a0.w1.b4", !4886, i64 0}
!4886 = !{!"0x955075a0.w2.b4", !4887, i64 0}
!4887 = !{!"0x955075a0.w4.b4", !4867, i64 0}
!4888 = !{!4889, !4889, i64 0}
!4889 = !{!"0x95505a00.w1.b0", !4890, i64 0}
!4890 = !{!"0x95505a00.w2.b0", !4891, i64 0}
!4891 = !{!"0x95505a00.w4.b0", !4892, i64 0}
!4892 = !{!"0x95505a00.w8.b0", !4893, i64 0}
!4893 = !{!"0x95505a00.w16.b0", !4894, i64 0}
!4894 = !{!"0x95505a00.w32.b0", !4895, i64 0}
!4895 = !{!"0x95505a00.w64.b0", !4896, i64 0}
!4896 = !{!"0x95505a00.w128.b0", !4897, i64 0}
!4897 = !{!"0x95505a00.w256.b0", !4898, i64 0}
!4898 = !{!"0x95505a00.w512.b0", !4899, i64 0}
!4899 = !{!"0x95505a00.w1024.b0", !4900, i64 0}
!4900 = !{!"int64", !4901, i64 0}
!4901 = !{!"0x95505a00", !8, i64 0}
!4902 = !{!4903, !4903, i64 0}
!4903 = !{!"0x95505a00.w1.b1", !4890, i64 0}
!4904 = !{!4905, !4905, i64 0}
!4905 = !{!"0x95505a00.w1.b2", !4906, i64 0}
!4906 = !{!"0x95505a00.w2.b2", !4891, i64 0}
!4907 = !{!4908, !4908, i64 0}
!4908 = !{!"0x95505a00.w1.b3", !4906, i64 0}
!4909 = !{!4910, !4910, i64 0}
!4910 = !{!"0x95505a00.w1.b4", !4911, i64 0}
!4911 = !{!"0x95505a00.w2.b4", !4912, i64 0}
!4912 = !{!"0x95505a00.w4.b4", !4892, i64 0}
!4913 = !{!4914, !4914, i64 0}
!4914 = !{!"0x95509b60.w1.b0", !4915, i64 0}
!4915 = !{!"0x95509b60.w2.b0", !4916, i64 0}
!4916 = !{!"0x95509b60.w4.b0", !4917, i64 0}
!4917 = !{!"0x95509b60.w8.b0", !4918, i64 0}
!4918 = !{!"0x95509b60.w16.b0", !4919, i64 0}
!4919 = !{!"0x95509b60.w32.b0", !4920, i64 0}
!4920 = !{!"0x95509b60.w64.b0", !4921, i64 0}
!4921 = !{!"0x95509b60.w128.b0", !4922, i64 0}
!4922 = !{!"0x95509b60.w256.b0", !4923, i64 0}
!4923 = !{!"0x95509b60.w512.b0", !4924, i64 0}
!4924 = !{!"0x95509b60.w1024.b0", !4925, i64 0}
!4925 = !{!"int64", !4926, i64 0}
!4926 = !{!"0x95509b60", !8, i64 0}
!4927 = !{!4928, !4928, i64 0}
!4928 = !{!"0x95509b60.w1.b1", !4915, i64 0}
!4929 = !{!4930, !4930, i64 0}
!4930 = !{!"0x95509b60.w1.b2", !4931, i64 0}
!4931 = !{!"0x95509b60.w2.b2", !4916, i64 0}
!4932 = !{!4933, !4933, i64 0}
!4933 = !{!"0x95509b60.w1.b3", !4931, i64 0}
!4934 = !{!4935, !4935, i64 0}
!4935 = !{!"0x95509b60.w1.b4", !4936, i64 0}
!4936 = !{!"0x95509b60.w2.b4", !4937, i64 0}
!4937 = !{!"0x95509b60.w4.b4", !4917, i64 0}
!4938 = !{!4939, !4939, i64 0}
!4939 = !{!"0x9550aa70.w1.b0", !4940, i64 0}
!4940 = !{!"0x9550aa70.w2.b0", !4941, i64 0}
!4941 = !{!"0x9550aa70.w4.b0", !4942, i64 0}
!4942 = !{!"0x9550aa70.w8.b0", !4943, i64 0}
!4943 = !{!"0x9550aa70.w16.b0", !4944, i64 0}
!4944 = !{!"0x9550aa70.w32.b0", !4945, i64 0}
!4945 = !{!"0x9550aa70.w64.b0", !4946, i64 0}
!4946 = !{!"0x9550aa70.w128.b0", !4947, i64 0}
!4947 = !{!"0x9550aa70.w256.b0", !4948, i64 0}
!4948 = !{!"0x9550aa70.w512.b0", !4949, i64 0}
!4949 = !{!"0x9550aa70.w1024.b0", !4950, i64 0}
!4950 = !{!"int64", !4951, i64 0}
!4951 = !{!"0x9550aa70", !8, i64 0}
!4952 = !{!4953, !4953, i64 0}
!4953 = !{!"0x9550aa70.w1.b1", !4940, i64 0}
!4954 = !{!4955, !4955, i64 0}
!4955 = !{!"0x9550aa70.w1.b2", !4956, i64 0}
!4956 = !{!"0x9550aa70.w2.b2", !4941, i64 0}
!4957 = !{!4958, !4958, i64 0}
!4958 = !{!"0x9550aa70.w1.b3", !4956, i64 0}
!4959 = !{!4960, !4960, i64 0}
!4960 = !{!"0x9550aa70.w1.b4", !4961, i64 0}
!4961 = !{!"0x9550aa70.w2.b4", !4962, i64 0}
!4962 = !{!"0x9550aa70.w4.b4", !4942, i64 0}
!4963 = !{!4964, !4964, i64 0}
!4964 = !{!"float32", !4965, i64 0}
!4965 = !{!"0x99da1170", !8, i64 0}
!4966 = !{!4967, !4967, i64 0}
!4967 = !{!"float32", !4968, i64 0}
!4968 = !{!"0x9d8939f0", !8, i64 0}
!4969 = !{!4970, !4970, i64 0}
!4970 = !{!"float32", !4971, i64 0}
!4971 = !{!"0x9d500fb0", !8, i64 0}
!4972 = !{!4973, !4973, i64 0}
!4973 = !{!"float32", !4974, i64 0}
!4974 = !{!"0x9d500f60", !8, i64 0}
!4975 = !{!4976, !4976, i64 0}
!4976 = !{!"float32", !4977, i64 0}
!4977 = !{!"0x9d8939a0", !8, i64 0}
!4978 = !{!4979, !4979, i64 0}
!4979 = !{!"0x954a0980.w1.b0", !4980, i64 0}
!4980 = !{!"0x954a0980.w2.b0", !4981, i64 0}
!4981 = !{!"0x954a0980.w4.b0", !4982, i64 0}
!4982 = !{!"0x954a0980.w8.b0", !4983, i64 0}
!4983 = !{!"0x954a0980.w16.b0", !4984, i64 0}
!4984 = !{!"0x954a0980.w32.b0", !4985, i64 0}
!4985 = !{!"0x954a0980.w64.b0", !4986, i64 0}
!4986 = !{!"0x954a0980.w128.b0", !4987, i64 0}
!4987 = !{!"0x954a0980.w256.b0", !4988, i64 0}
!4988 = !{!"0x954a0980.w512.b0", !4989, i64 0}
!4989 = !{!"0x954a0980.w1024.b0", !4990, i64 0}
!4990 = !{!"int32", !4991, i64 0}
!4991 = !{!"0x954a0980", !8, i64 0}
!4992 = !{!4993, !4993, i64 0}
!4993 = !{!"0x954a0980.w1.b2", !4994, i64 0}
!4994 = !{!"0x954a0980.w2.b2", !4981, i64 0}
!4995 = !{!4996, !4996, i64 0}
!4996 = !{!"0x954a0980.w1.b3", !4994, i64 0}
!4997 = !{!4998, !4998, i64 0}
!4998 = !{!"0x954a0980.w1.b1", !4980, i64 0}
!4999 = !{!5000, !5000, i64 0}
!5000 = !{!"0xab280470.w1.b0", !5001, i64 0}
!5001 = !{!"0xab280470.w2.b0", !5002, i64 0}
!5002 = !{!"0xab280470.w4.b0", !5003, i64 0}
!5003 = !{!"0xab280470.w8.b0", !5004, i64 0}
!5004 = !{!"0xab280470.w16.b0", !5005, i64 0}
!5005 = !{!"0xab280470.w32.b0", !5006, i64 0}
!5006 = !{!"0xab280470.w64.b0", !5007, i64 0}
!5007 = !{!"0xab280470.w128.b0", !5008, i64 0}
!5008 = !{!"0xab280470.w256.b0", !5009, i64 0}
!5009 = !{!"0xab280470.w512.b0", !5010, i64 0}
!5010 = !{!"0xab280470.w1024.b0", !5011, i64 0}
!5011 = !{!"int64", !5012, i64 0}
!5012 = !{!"0xab280470", !8, i64 0}
!5013 = !{!5014, !5014, i64 0}
!5014 = !{!"0xab280470.w1.b1", !5001, i64 0}
!5015 = !{!5016, !5016, i64 0}
!5016 = !{!"0xab280470.w1.b2", !5017, i64 0}
!5017 = !{!"0xab280470.w2.b2", !5002, i64 0}
!5018 = !{!5019, !5019, i64 0}
!5019 = !{!"0xab280470.w1.b3", !5017, i64 0}
!5020 = !{!5021, !5021, i64 0}
!5021 = !{!"0xab280470.w1.b4", !5022, i64 0}
!5022 = !{!"0xab280470.w2.b4", !5023, i64 0}
!5023 = !{!"0xab280470.w4.b4", !5003, i64 0}
!5024 = !{!5025, !5025, i64 0}
!5025 = !{!"0xab2805b0.w1.b0", !5026, i64 0}
!5026 = !{!"0xab2805b0.w2.b0", !5027, i64 0}
!5027 = !{!"0xab2805b0.w4.b0", !5028, i64 0}
!5028 = !{!"0xab2805b0.w8.b0", !5029, i64 0}
!5029 = !{!"0xab2805b0.w16.b0", !5030, i64 0}
!5030 = !{!"0xab2805b0.w32.b0", !5031, i64 0}
!5031 = !{!"0xab2805b0.w64.b0", !5032, i64 0}
!5032 = !{!"0xab2805b0.w128.b0", !5033, i64 0}
!5033 = !{!"0xab2805b0.w256.b0", !5034, i64 0}
!5034 = !{!"0xab2805b0.w512.b0", !5035, i64 0}
!5035 = !{!"0xab2805b0.w1024.b0", !5036, i64 0}
!5036 = !{!"int64", !5037, i64 0}
!5037 = !{!"0xab2805b0", !8, i64 0}
!5038 = !{!5039, !5039, i64 0}
!5039 = !{!"0xab2805b0.w1.b1", !5026, i64 0}
!5040 = !{!5041, !5041, i64 0}
!5041 = !{!"0xab2805b0.w1.b2", !5042, i64 0}
!5042 = !{!"0xab2805b0.w2.b2", !5027, i64 0}
!5043 = !{!5044, !5044, i64 0}
!5044 = !{!"0xab2805b0.w1.b3", !5042, i64 0}
!5045 = !{!5046, !5046, i64 0}
!5046 = !{!"0xab2805b0.w1.b4", !5047, i64 0}
!5047 = !{!"0xab2805b0.w2.b4", !5048, i64 0}
!5048 = !{!"0xab2805b0.w4.b4", !5028, i64 0}
!5049 = !{!5050, !5050, i64 0}
!5050 = !{!"0xab282320.w1.b0", !5051, i64 0}
!5051 = !{!"0xab282320.w2.b0", !5052, i64 0}
!5052 = !{!"0xab282320.w4.b0", !5053, i64 0}
!5053 = !{!"0xab282320.w8.b0", !5054, i64 0}
!5054 = !{!"0xab282320.w16.b0", !5055, i64 0}
!5055 = !{!"0xab282320.w32.b0", !5056, i64 0}
!5056 = !{!"0xab282320.w64.b0", !5057, i64 0}
!5057 = !{!"0xab282320.w128.b0", !5058, i64 0}
!5058 = !{!"0xab282320.w256.b0", !5059, i64 0}
!5059 = !{!"0xab282320.w512.b0", !5060, i64 0}
!5060 = !{!"0xab282320.w1024.b0", !5061, i64 0}
!5061 = !{!"int64", !5062, i64 0}
!5062 = !{!"0xab282320", !8, i64 0}
!5063 = !{!5064, !5064, i64 0}
!5064 = !{!"0xab282320.w1.b1", !5051, i64 0}
!5065 = !{!5066, !5066, i64 0}
!5066 = !{!"0xab282320.w1.b2", !5067, i64 0}
!5067 = !{!"0xab282320.w2.b2", !5052, i64 0}
!5068 = !{!5069, !5069, i64 0}
!5069 = !{!"0xab282320.w1.b3", !5067, i64 0}
!5070 = !{!5071, !5071, i64 0}
!5071 = !{!"0xab282320.w1.b4", !5072, i64 0}
!5072 = !{!"0xab282320.w2.b4", !5073, i64 0}
!5073 = !{!"0xab282320.w4.b4", !5053, i64 0}
!5074 = !{!5075, !5075, i64 0}
!5075 = !{!"0xab282320.w1.b5", !5072, i64 0}
!5076 = !{!5077, !5077, i64 0}
!5077 = !{!"0xab282520.w1.b0", !5078, i64 0}
!5078 = !{!"0xab282520.w2.b0", !5079, i64 0}
!5079 = !{!"0xab282520.w4.b0", !5080, i64 0}
!5080 = !{!"0xab282520.w8.b0", !5081, i64 0}
!5081 = !{!"0xab282520.w16.b0", !5082, i64 0}
!5082 = !{!"0xab282520.w32.b0", !5083, i64 0}
!5083 = !{!"0xab282520.w64.b0", !5084, i64 0}
!5084 = !{!"0xab282520.w128.b0", !5085, i64 0}
!5085 = !{!"0xab282520.w256.b0", !5086, i64 0}
!5086 = !{!"0xab282520.w512.b0", !5087, i64 0}
!5087 = !{!"0xab282520.w1024.b0", !5088, i64 0}
!5088 = !{!"int64", !5089, i64 0}
!5089 = !{!"0xab282520", !8, i64 0}
!5090 = !{!5091, !5091, i64 0}
!5091 = !{!"0xab282520.w1.b1", !5078, i64 0}
!5092 = !{!5093, !5093, i64 0}
!5093 = !{!"0xab282520.w1.b2", !5094, i64 0}
!5094 = !{!"0xab282520.w2.b2", !5079, i64 0}
!5095 = !{!5096, !5096, i64 0}
!5096 = !{!"0xab282520.w1.b3", !5094, i64 0}
!5097 = !{!5098, !5098, i64 0}
!5098 = !{!"0xab282520.w1.b4", !5099, i64 0}
!5099 = !{!"0xab282520.w2.b4", !5100, i64 0}
!5100 = !{!"0xab282520.w4.b4", !5080, i64 0}
!5101 = !{!5102, !5102, i64 0}
!5102 = !{!"0xab282520.w1.b5", !5099, i64 0}
!5103 = !{!5104, !5104, i64 0}
!5104 = !{!"0xab2843c0.w1.b0", !5105, i64 0}
!5105 = !{!"0xab2843c0.w2.b0", !5106, i64 0}
!5106 = !{!"0xab2843c0.w4.b0", !5107, i64 0}
!5107 = !{!"0xab2843c0.w8.b0", !5108, i64 0}
!5108 = !{!"0xab2843c0.w16.b0", !5109, i64 0}
!5109 = !{!"0xab2843c0.w32.b0", !5110, i64 0}
!5110 = !{!"0xab2843c0.w64.b0", !5111, i64 0}
!5111 = !{!"0xab2843c0.w128.b0", !5112, i64 0}
!5112 = !{!"0xab2843c0.w256.b0", !5113, i64 0}
!5113 = !{!"0xab2843c0.w512.b0", !5114, i64 0}
!5114 = !{!"0xab2843c0.w1024.b0", !5115, i64 0}
!5115 = !{!"int64", !5116, i64 0}
!5116 = !{!"0xab2843c0", !8, i64 0}
!5117 = !{!5118, !5118, i64 0}
!5118 = !{!"0xab2843c0.w1.b1", !5105, i64 0}
!5119 = !{!5120, !5120, i64 0}
!5120 = !{!"0xab2843c0.w1.b2", !5121, i64 0}
!5121 = !{!"0xab2843c0.w2.b2", !5106, i64 0}
!5122 = !{!5123, !5123, i64 0}
!5123 = !{!"0xab2843c0.w1.b3", !5121, i64 0}
!5124 = !{!5125, !5125, i64 0}
!5125 = !{!"0xab2843c0.w1.b4", !5126, i64 0}
!5126 = !{!"0xab2843c0.w2.b4", !5127, i64 0}
!5127 = !{!"0xab2843c0.w4.b4", !5107, i64 0}
!5128 = !{!5129, !5129, i64 0}
!5129 = !{!"0xab282820.w1.b0", !5130, i64 0}
!5130 = !{!"0xab282820.w2.b0", !5131, i64 0}
!5131 = !{!"0xab282820.w4.b0", !5132, i64 0}
!5132 = !{!"0xab282820.w8.b0", !5133, i64 0}
!5133 = !{!"0xab282820.w16.b0", !5134, i64 0}
!5134 = !{!"0xab282820.w32.b0", !5135, i64 0}
!5135 = !{!"0xab282820.w64.b0", !5136, i64 0}
!5136 = !{!"0xab282820.w128.b0", !5137, i64 0}
!5137 = !{!"0xab282820.w256.b0", !5138, i64 0}
!5138 = !{!"0xab282820.w512.b0", !5139, i64 0}
!5139 = !{!"0xab282820.w1024.b0", !5140, i64 0}
!5140 = !{!"int64", !5141, i64 0}
!5141 = !{!"0xab282820", !8, i64 0}
!5142 = !{!5143, !5143, i64 0}
!5143 = !{!"0xab282820.w1.b1", !5130, i64 0}
!5144 = !{!5145, !5145, i64 0}
!5145 = !{!"0xab282820.w1.b2", !5146, i64 0}
!5146 = !{!"0xab282820.w2.b2", !5131, i64 0}
!5147 = !{!5148, !5148, i64 0}
!5148 = !{!"0xab282820.w1.b3", !5146, i64 0}
!5149 = !{!5150, !5150, i64 0}
!5150 = !{!"0xab282820.w1.b4", !5151, i64 0}
!5151 = !{!"0xab282820.w2.b4", !5152, i64 0}
!5152 = !{!"0xab282820.w4.b4", !5132, i64 0}
!5153 = !{!5154, !5154, i64 0}
!5154 = !{!"0xab286980.w1.b0", !5155, i64 0}
!5155 = !{!"0xab286980.w2.b0", !5156, i64 0}
!5156 = !{!"0xab286980.w4.b0", !5157, i64 0}
!5157 = !{!"0xab286980.w8.b0", !5158, i64 0}
!5158 = !{!"0xab286980.w16.b0", !5159, i64 0}
!5159 = !{!"0xab286980.w32.b0", !5160, i64 0}
!5160 = !{!"0xab286980.w64.b0", !5161, i64 0}
!5161 = !{!"0xab286980.w128.b0", !5162, i64 0}
!5162 = !{!"0xab286980.w256.b0", !5163, i64 0}
!5163 = !{!"0xab286980.w512.b0", !5164, i64 0}
!5164 = !{!"0xab286980.w1024.b0", !5165, i64 0}
!5165 = !{!"int64", !5166, i64 0}
!5166 = !{!"0xab286980", !8, i64 0}
!5167 = !{!5168, !5168, i64 0}
!5168 = !{!"0xab286980.w1.b1", !5155, i64 0}
!5169 = !{!5170, !5170, i64 0}
!5170 = !{!"0xab286980.w1.b2", !5171, i64 0}
!5171 = !{!"0xab286980.w2.b2", !5156, i64 0}
!5172 = !{!5173, !5173, i64 0}
!5173 = !{!"0xab286980.w1.b3", !5171, i64 0}
!5174 = !{!5175, !5175, i64 0}
!5175 = !{!"0xab286980.w1.b4", !5176, i64 0}
!5176 = !{!"0xab286980.w2.b4", !5177, i64 0}
!5177 = !{!"0xab286980.w4.b4", !5157, i64 0}
!5178 = !{!5179, !5179, i64 0}
!5179 = !{!"0xab287890.w1.b0", !5180, i64 0}
!5180 = !{!"0xab287890.w2.b0", !5181, i64 0}
!5181 = !{!"0xab287890.w4.b0", !5182, i64 0}
!5182 = !{!"0xab287890.w8.b0", !5183, i64 0}
!5183 = !{!"0xab287890.w16.b0", !5184, i64 0}
!5184 = !{!"0xab287890.w32.b0", !5185, i64 0}
!5185 = !{!"0xab287890.w64.b0", !5186, i64 0}
!5186 = !{!"0xab287890.w128.b0", !5187, i64 0}
!5187 = !{!"0xab287890.w256.b0", !5188, i64 0}
!5188 = !{!"0xab287890.w512.b0", !5189, i64 0}
!5189 = !{!"0xab287890.w1024.b0", !5190, i64 0}
!5190 = !{!"int64", !5191, i64 0}
!5191 = !{!"0xab287890", !8, i64 0}
!5192 = !{!5193, !5193, i64 0}
!5193 = !{!"0xab287890.w1.b1", !5180, i64 0}
!5194 = !{!5195, !5195, i64 0}
!5195 = !{!"0xab287890.w1.b2", !5196, i64 0}
!5196 = !{!"0xab287890.w2.b2", !5181, i64 0}
!5197 = !{!5198, !5198, i64 0}
!5198 = !{!"0xab287890.w1.b3", !5196, i64 0}
!5199 = !{!5200, !5200, i64 0}
!5200 = !{!"0xab287890.w1.b4", !5201, i64 0}
!5201 = !{!"0xab287890.w2.b4", !5202, i64 0}
!5202 = !{!"0xab287890.w4.b4", !5182, i64 0}
!5203 = !{!5204, !5204, i64 0}
!5204 = !{!"float32", !5205, i64 0}
!5205 = !{!"0x9f0c97e0", !8, i64 0}
!5206 = !{!5207, !5207, i64 0}
!5207 = !{!"float32", !5208, i64 0}
!5208 = !{!"0x91b9fd50", !8, i64 0}
!5209 = !{!5210, !5210, i64 0}
!5210 = !{!"float32", !5211, i64 0}
!5211 = !{!"0x9039eaa0", !8, i64 0}
!5212 = !{!5213, !5213, i64 0}
!5213 = !{!"float32", !5214, i64 0}
!5214 = !{!"0x92fe5190", !8, i64 0}
!5215 = !{!5216, !5216, i64 0}
!5216 = !{!"float32", !5217, i64 0}
!5217 = !{!"0x9d12cdd0", !8, i64 0}
!5218 = !{!5219, !5219, i64 0}
!5219 = !{!"0xab280520.w1.b0", !5220, i64 0}
!5220 = !{!"0xab280520.w2.b0", !5221, i64 0}
!5221 = !{!"0xab280520.w4.b0", !5222, i64 0}
!5222 = !{!"0xab280520.w8.b0", !5223, i64 0}
!5223 = !{!"0xab280520.w16.b0", !5224, i64 0}
!5224 = !{!"0xab280520.w32.b0", !5225, i64 0}
!5225 = !{!"0xab280520.w64.b0", !5226, i64 0}
!5226 = !{!"0xab280520.w128.b0", !5227, i64 0}
!5227 = !{!"0xab280520.w256.b0", !5228, i64 0}
!5228 = !{!"0xab280520.w512.b0", !5229, i64 0}
!5229 = !{!"0xab280520.w1024.b0", !5230, i64 0}
!5230 = !{!"int32", !5231, i64 0}
!5231 = !{!"0xab280520", !8, i64 0}
!5232 = !{!5233, !5233, i64 0}
!5233 = !{!"0xab280520.w1.b2", !5234, i64 0}
!5234 = !{!"0xab280520.w2.b2", !5221, i64 0}
!5235 = !{!5236, !5236, i64 0}
!5236 = !{!"0xab280520.w1.b3", !5234, i64 0}
!5237 = !{!5238, !5238, i64 0}
!5238 = !{!"0xab280520.w1.b1", !5220, i64 0}
!5239 = !{!5240, !5240, i64 0}
!5240 = !{!"0xab28b260.w1.b0", !5241, i64 0}
!5241 = !{!"0xab28b260.w2.b0", !5242, i64 0}
!5242 = !{!"0xab28b260.w4.b0", !5243, i64 0}
!5243 = !{!"0xab28b260.w8.b0", !5244, i64 0}
!5244 = !{!"0xab28b260.w16.b0", !5245, i64 0}
!5245 = !{!"0xab28b260.w32.b0", !5246, i64 0}
!5246 = !{!"0xab28b260.w64.b0", !5247, i64 0}
!5247 = !{!"0xab28b260.w128.b0", !5248, i64 0}
!5248 = !{!"0xab28b260.w256.b0", !5249, i64 0}
!5249 = !{!"0xab28b260.w512.b0", !5250, i64 0}
!5250 = !{!"0xab28b260.w1024.b0", !5251, i64 0}
!5251 = !{!"int64", !5252, i64 0}
!5252 = !{!"0xab28b260", !8, i64 0}
!5253 = !{!5254, !5254, i64 0}
!5254 = !{!"0xab28b260.w1.b1", !5241, i64 0}
!5255 = !{!5256, !5256, i64 0}
!5256 = !{!"0xab28b260.w1.b2", !5257, i64 0}
!5257 = !{!"0xab28b260.w2.b2", !5242, i64 0}
!5258 = !{!5259, !5259, i64 0}
!5259 = !{!"0xab28b260.w1.b3", !5257, i64 0}
!5260 = !{!5261, !5261, i64 0}
!5261 = !{!"0xab28b260.w1.b4", !5262, i64 0}
!5262 = !{!"0xab28b260.w2.b4", !5263, i64 0}
!5263 = !{!"0xab28b260.w4.b4", !5243, i64 0}
!5264 = !{!5265, !5265, i64 0}
!5265 = !{!"0xab28b490.w1.b0", !5266, i64 0}
!5266 = !{!"0xab28b490.w2.b0", !5267, i64 0}
!5267 = !{!"0xab28b490.w4.b0", !5268, i64 0}
!5268 = !{!"0xab28b490.w8.b0", !5269, i64 0}
!5269 = !{!"0xab28b490.w16.b0", !5270, i64 0}
!5270 = !{!"0xab28b490.w32.b0", !5271, i64 0}
!5271 = !{!"0xab28b490.w64.b0", !5272, i64 0}
!5272 = !{!"0xab28b490.w128.b0", !5273, i64 0}
!5273 = !{!"0xab28b490.w256.b0", !5274, i64 0}
!5274 = !{!"0xab28b490.w512.b0", !5275, i64 0}
!5275 = !{!"0xab28b490.w1024.b0", !5276, i64 0}
!5276 = !{!"int64", !5277, i64 0}
!5277 = !{!"0xab28b490", !8, i64 0}
!5278 = !{!5279, !5279, i64 0}
!5279 = !{!"0xab28b490.w1.b1", !5266, i64 0}
!5280 = !{!5281, !5281, i64 0}
!5281 = !{!"0xab28b490.w1.b2", !5282, i64 0}
!5282 = !{!"0xab28b490.w2.b2", !5267, i64 0}
!5283 = !{!5284, !5284, i64 0}
!5284 = !{!"0xab28b490.w1.b3", !5282, i64 0}
!5285 = !{!5286, !5286, i64 0}
!5286 = !{!"0xab28b490.w1.b4", !5287, i64 0}
!5287 = !{!"0xab28b490.w2.b4", !5288, i64 0}
!5288 = !{!"0xab28b490.w4.b4", !5268, i64 0}
!5289 = !{!5290, !5290, i64 0}
!5290 = !{!"0xab28d7d0.w1.b0", !5291, i64 0}
!5291 = !{!"0xab28d7d0.w2.b0", !5292, i64 0}
!5292 = !{!"0xab28d7d0.w4.b0", !5293, i64 0}
!5293 = !{!"0xab28d7d0.w8.b0", !5294, i64 0}
!5294 = !{!"0xab28d7d0.w16.b0", !5295, i64 0}
!5295 = !{!"0xab28d7d0.w32.b0", !5296, i64 0}
!5296 = !{!"0xab28d7d0.w64.b0", !5297, i64 0}
!5297 = !{!"0xab28d7d0.w128.b0", !5298, i64 0}
!5298 = !{!"0xab28d7d0.w256.b0", !5299, i64 0}
!5299 = !{!"0xab28d7d0.w512.b0", !5300, i64 0}
!5300 = !{!"0xab28d7d0.w1024.b0", !5301, i64 0}
!5301 = !{!"int64", !5302, i64 0}
!5302 = !{!"0xab28d7d0", !8, i64 0}
!5303 = !{!5304, !5304, i64 0}
!5304 = !{!"0xab28d7d0.w1.b1", !5291, i64 0}
!5305 = !{!5306, !5306, i64 0}
!5306 = !{!"0xab28d7d0.w1.b2", !5307, i64 0}
!5307 = !{!"0xab28d7d0.w2.b2", !5292, i64 0}
!5308 = !{!5309, !5309, i64 0}
!5309 = !{!"0xab28d7d0.w1.b3", !5307, i64 0}
!5310 = !{!5311, !5311, i64 0}
!5311 = !{!"0xab28d7d0.w1.b4", !5312, i64 0}
!5312 = !{!"0xab28d7d0.w2.b4", !5313, i64 0}
!5313 = !{!"0xab28d7d0.w4.b4", !5293, i64 0}
!5314 = !{!5315, !5315, i64 0}
!5315 = !{!"0xab28d7d0.w1.b5", !5312, i64 0}
!5316 = !{!5317, !5317, i64 0}
!5317 = !{!"0xab28d9d0.w1.b0", !5318, i64 0}
!5318 = !{!"0xab28d9d0.w2.b0", !5319, i64 0}
!5319 = !{!"0xab28d9d0.w4.b0", !5320, i64 0}
!5320 = !{!"0xab28d9d0.w8.b0", !5321, i64 0}
!5321 = !{!"0xab28d9d0.w16.b0", !5322, i64 0}
!5322 = !{!"0xab28d9d0.w32.b0", !5323, i64 0}
!5323 = !{!"0xab28d9d0.w64.b0", !5324, i64 0}
!5324 = !{!"0xab28d9d0.w128.b0", !5325, i64 0}
!5325 = !{!"0xab28d9d0.w256.b0", !5326, i64 0}
!5326 = !{!"0xab28d9d0.w512.b0", !5327, i64 0}
!5327 = !{!"0xab28d9d0.w1024.b0", !5328, i64 0}
!5328 = !{!"int64", !5329, i64 0}
!5329 = !{!"0xab28d9d0", !8, i64 0}
!5330 = !{!5331, !5331, i64 0}
!5331 = !{!"0xab28d9d0.w1.b1", !5318, i64 0}
!5332 = !{!5333, !5333, i64 0}
!5333 = !{!"0xab28d9d0.w1.b2", !5334, i64 0}
!5334 = !{!"0xab28d9d0.w2.b2", !5319, i64 0}
!5335 = !{!5336, !5336, i64 0}
!5336 = !{!"0xab28d9d0.w1.b3", !5334, i64 0}
!5337 = !{!5338, !5338, i64 0}
!5338 = !{!"0xab28d9d0.w1.b4", !5339, i64 0}
!5339 = !{!"0xab28d9d0.w2.b4", !5340, i64 0}
!5340 = !{!"0xab28d9d0.w4.b4", !5320, i64 0}
!5341 = !{!5342, !5342, i64 0}
!5342 = !{!"0xab28d9d0.w1.b5", !5339, i64 0}
!5343 = !{!5344, !5344, i64 0}
!5344 = !{!"0xab28f870.w1.b0", !5345, i64 0}
!5345 = !{!"0xab28f870.w2.b0", !5346, i64 0}
!5346 = !{!"0xab28f870.w4.b0", !5347, i64 0}
!5347 = !{!"0xab28f870.w8.b0", !5348, i64 0}
!5348 = !{!"0xab28f870.w16.b0", !5349, i64 0}
!5349 = !{!"0xab28f870.w32.b0", !5350, i64 0}
!5350 = !{!"0xab28f870.w64.b0", !5351, i64 0}
!5351 = !{!"0xab28f870.w128.b0", !5352, i64 0}
!5352 = !{!"0xab28f870.w256.b0", !5353, i64 0}
!5353 = !{!"0xab28f870.w512.b0", !5354, i64 0}
!5354 = !{!"0xab28f870.w1024.b0", !5355, i64 0}
!5355 = !{!"int64", !5356, i64 0}
!5356 = !{!"0xab28f870", !8, i64 0}
!5357 = !{!5358, !5358, i64 0}
!5358 = !{!"0xab28f870.w1.b1", !5345, i64 0}
!5359 = !{!5360, !5360, i64 0}
!5360 = !{!"0xab28f870.w1.b2", !5361, i64 0}
!5361 = !{!"0xab28f870.w2.b2", !5346, i64 0}
!5362 = !{!5363, !5363, i64 0}
!5363 = !{!"0xab28f870.w1.b3", !5361, i64 0}
!5364 = !{!5365, !5365, i64 0}
!5365 = !{!"0xab28f870.w1.b4", !5366, i64 0}
!5366 = !{!"0xab28f870.w2.b4", !5367, i64 0}
!5367 = !{!"0xab28f870.w4.b4", !5347, i64 0}
!5368 = !{!5369, !5369, i64 0}
!5369 = !{!"0xab28dcd0.w1.b0", !5370, i64 0}
!5370 = !{!"0xab28dcd0.w2.b0", !5371, i64 0}
!5371 = !{!"0xab28dcd0.w4.b0", !5372, i64 0}
!5372 = !{!"0xab28dcd0.w8.b0", !5373, i64 0}
!5373 = !{!"0xab28dcd0.w16.b0", !5374, i64 0}
!5374 = !{!"0xab28dcd0.w32.b0", !5375, i64 0}
!5375 = !{!"0xab28dcd0.w64.b0", !5376, i64 0}
!5376 = !{!"0xab28dcd0.w128.b0", !5377, i64 0}
!5377 = !{!"0xab28dcd0.w256.b0", !5378, i64 0}
!5378 = !{!"0xab28dcd0.w512.b0", !5379, i64 0}
!5379 = !{!"0xab28dcd0.w1024.b0", !5380, i64 0}
!5380 = !{!"int64", !5381, i64 0}
!5381 = !{!"0xab28dcd0", !8, i64 0}
!5382 = !{!5383, !5383, i64 0}
!5383 = !{!"0xab28dcd0.w1.b1", !5370, i64 0}
!5384 = !{!5385, !5385, i64 0}
!5385 = !{!"0xab28dcd0.w1.b2", !5386, i64 0}
!5386 = !{!"0xab28dcd0.w2.b2", !5371, i64 0}
!5387 = !{!5388, !5388, i64 0}
!5388 = !{!"0xab28dcd0.w1.b3", !5386, i64 0}
!5389 = !{!5390, !5390, i64 0}
!5390 = !{!"0xab28dcd0.w1.b4", !5391, i64 0}
!5391 = !{!"0xab28dcd0.w2.b4", !5392, i64 0}
!5392 = !{!"0xab28dcd0.w4.b4", !5372, i64 0}
!5393 = !{!5394, !5394, i64 0}
!5394 = !{!"0xab291e30.w1.b0", !5395, i64 0}
!5395 = !{!"0xab291e30.w2.b0", !5396, i64 0}
!5396 = !{!"0xab291e30.w4.b0", !5397, i64 0}
!5397 = !{!"0xab291e30.w8.b0", !5398, i64 0}
!5398 = !{!"0xab291e30.w16.b0", !5399, i64 0}
!5399 = !{!"0xab291e30.w32.b0", !5400, i64 0}
!5400 = !{!"0xab291e30.w64.b0", !5401, i64 0}
!5401 = !{!"0xab291e30.w128.b0", !5402, i64 0}
!5402 = !{!"0xab291e30.w256.b0", !5403, i64 0}
!5403 = !{!"0xab291e30.w512.b0", !5404, i64 0}
!5404 = !{!"0xab291e30.w1024.b0", !5405, i64 0}
!5405 = !{!"int64", !5406, i64 0}
!5406 = !{!"0xab291e30", !8, i64 0}
!5407 = !{!5408, !5408, i64 0}
!5408 = !{!"0xab291e30.w1.b1", !5395, i64 0}
!5409 = !{!5410, !5410, i64 0}
!5410 = !{!"0xab291e30.w1.b2", !5411, i64 0}
!5411 = !{!"0xab291e30.w2.b2", !5396, i64 0}
!5412 = !{!5413, !5413, i64 0}
!5413 = !{!"0xab291e30.w1.b3", !5411, i64 0}
!5414 = !{!5415, !5415, i64 0}
!5415 = !{!"0xab291e30.w1.b4", !5416, i64 0}
!5416 = !{!"0xab291e30.w2.b4", !5417, i64 0}
!5417 = !{!"0xab291e30.w4.b4", !5397, i64 0}
!5418 = !{!5419, !5419, i64 0}
!5419 = !{!"0xab292d40.w1.b0", !5420, i64 0}
!5420 = !{!"0xab292d40.w2.b0", !5421, i64 0}
!5421 = !{!"0xab292d40.w4.b0", !5422, i64 0}
!5422 = !{!"0xab292d40.w8.b0", !5423, i64 0}
!5423 = !{!"0xab292d40.w16.b0", !5424, i64 0}
!5424 = !{!"0xab292d40.w32.b0", !5425, i64 0}
!5425 = !{!"0xab292d40.w64.b0", !5426, i64 0}
!5426 = !{!"0xab292d40.w128.b0", !5427, i64 0}
!5427 = !{!"0xab292d40.w256.b0", !5428, i64 0}
!5428 = !{!"0xab292d40.w512.b0", !5429, i64 0}
!5429 = !{!"0xab292d40.w1024.b0", !5430, i64 0}
!5430 = !{!"int64", !5431, i64 0}
!5431 = !{!"0xab292d40", !8, i64 0}
!5432 = !{!5433, !5433, i64 0}
!5433 = !{!"0xab292d40.w1.b1", !5420, i64 0}
!5434 = !{!5435, !5435, i64 0}
!5435 = !{!"0xab292d40.w1.b2", !5436, i64 0}
!5436 = !{!"0xab292d40.w2.b2", !5421, i64 0}
!5437 = !{!5438, !5438, i64 0}
!5438 = !{!"0xab292d40.w1.b3", !5436, i64 0}
!5439 = !{!5440, !5440, i64 0}
!5440 = !{!"0xab292d40.w1.b4", !5441, i64 0}
!5441 = !{!"0xab292d40.w2.b4", !5442, i64 0}
!5442 = !{!"0xab292d40.w4.b4", !5422, i64 0}
!5443 = !{!5444, !5444, i64 0}
!5444 = !{!"float32", !5445, i64 0}
!5445 = !{!"0x95a13a40", !8, i64 0}
!5446 = !{!5447, !5447, i64 0}
!5447 = !{!"float32", !5448, i64 0}
!5448 = !{!"0x95a0d7a0", !8, i64 0}
!5449 = !{!5450, !5450, i64 0}
!5450 = !{!"float32", !5451, i64 0}
!5451 = !{!"0x95a0dc20", !8, i64 0}
!5452 = !{!5453, !5453, i64 0}
!5453 = !{!"float32", !5454, i64 0}
!5454 = !{!"0x95a0eaf0", !8, i64 0}
!5455 = !{!5456, !5456, i64 0}
!5456 = !{!"0xab28b310.w1.b0", !5457, i64 0}
!5457 = !{!"0xab28b310.w2.b0", !5458, i64 0}
!5458 = !{!"0xab28b310.w4.b0", !5459, i64 0}
!5459 = !{!"0xab28b310.w8.b0", !5460, i64 0}
!5460 = !{!"0xab28b310.w16.b0", !5461, i64 0}
!5461 = !{!"0xab28b310.w32.b0", !5462, i64 0}
!5462 = !{!"0xab28b310.w64.b0", !5463, i64 0}
!5463 = !{!"0xab28b310.w128.b0", !5464, i64 0}
!5464 = !{!"0xab28b310.w256.b0", !5465, i64 0}
!5465 = !{!"0xab28b310.w512.b0", !5466, i64 0}
!5466 = !{!"0xab28b310.w1024.b0", !5467, i64 0}
!5467 = !{!"int32", !5468, i64 0}
!5468 = !{!"0xab28b310", !8, i64 0}
!5469 = !{!5470, !5470, i64 0}
!5470 = !{!"0xab28b310.w1.b1", !5457, i64 0}
!5471 = !{!5472, !5472, i64 0}
!5472 = !{!"0xab296610.w1.b0", !5473, i64 0}
!5473 = !{!"0xab296610.w2.b0", !5474, i64 0}
!5474 = !{!"0xab296610.w4.b0", !5475, i64 0}
!5475 = !{!"0xab296610.w8.b0", !5476, i64 0}
!5476 = !{!"0xab296610.w16.b0", !5477, i64 0}
!5477 = !{!"0xab296610.w32.b0", !5478, i64 0}
!5478 = !{!"0xab296610.w64.b0", !5479, i64 0}
!5479 = !{!"0xab296610.w128.b0", !5480, i64 0}
!5480 = !{!"0xab296610.w256.b0", !5481, i64 0}
!5481 = !{!"0xab296610.w512.b0", !5482, i64 0}
!5482 = !{!"0xab296610.w1024.b0", !5483, i64 0}
!5483 = !{!"int64", !5484, i64 0}
!5484 = !{!"0xab296610", !8, i64 0}
!5485 = !{!5486, !5486, i64 0}
!5486 = !{!"0xab296610.w1.b1", !5473, i64 0}
!5487 = !{!5488, !5488, i64 0}
!5488 = !{!"0xab296610.w1.b2", !5489, i64 0}
!5489 = !{!"0xab296610.w2.b2", !5474, i64 0}
!5490 = !{!5491, !5491, i64 0}
!5491 = !{!"0xab296610.w1.b3", !5489, i64 0}
!5492 = !{!5493, !5493, i64 0}
!5493 = !{!"0xab296610.w1.b4", !5494, i64 0}
!5494 = !{!"0xab296610.w2.b4", !5495, i64 0}
!5495 = !{!"0xab296610.w4.b4", !5475, i64 0}
!5496 = !{!5497, !5497, i64 0}
!5497 = !{!"0xab296750.w1.b0", !5498, i64 0}
!5498 = !{!"0xab296750.w2.b0", !5499, i64 0}
!5499 = !{!"0xab296750.w4.b0", !5500, i64 0}
!5500 = !{!"0xab296750.w8.b0", !5501, i64 0}
!5501 = !{!"0xab296750.w16.b0", !5502, i64 0}
!5502 = !{!"0xab296750.w32.b0", !5503, i64 0}
!5503 = !{!"0xab296750.w64.b0", !5504, i64 0}
!5504 = !{!"0xab296750.w128.b0", !5505, i64 0}
!5505 = !{!"0xab296750.w256.b0", !5506, i64 0}
!5506 = !{!"0xab296750.w512.b0", !5507, i64 0}
!5507 = !{!"0xab296750.w1024.b0", !5508, i64 0}
!5508 = !{!"int64", !5509, i64 0}
!5509 = !{!"0xab296750", !8, i64 0}
!5510 = !{!5511, !5511, i64 0}
!5511 = !{!"0xab296750.w1.b1", !5498, i64 0}
!5512 = !{!5513, !5513, i64 0}
!5513 = !{!"0xab296750.w1.b2", !5514, i64 0}
!5514 = !{!"0xab296750.w2.b2", !5499, i64 0}
!5515 = !{!5516, !5516, i64 0}
!5516 = !{!"0xab296750.w1.b3", !5514, i64 0}
!5517 = !{!5518, !5518, i64 0}
!5518 = !{!"0xab296750.w1.b4", !5519, i64 0}
!5519 = !{!"0xab296750.w2.b4", !5520, i64 0}
!5520 = !{!"0xab296750.w4.b4", !5500, i64 0}
!5521 = !{!5522, !5522, i64 0}
!5522 = !{!"0xab2983d0.w1.b0", !5523, i64 0}
!5523 = !{!"0xab2983d0.w2.b0", !5524, i64 0}
!5524 = !{!"0xab2983d0.w4.b0", !5525, i64 0}
!5525 = !{!"0xab2983d0.w8.b0", !5526, i64 0}
!5526 = !{!"0xab2983d0.w16.b0", !5527, i64 0}
!5527 = !{!"0xab2983d0.w32.b0", !5528, i64 0}
!5528 = !{!"0xab2983d0.w64.b0", !5529, i64 0}
!5529 = !{!"0xab2983d0.w128.b0", !5530, i64 0}
!5530 = !{!"0xab2983d0.w256.b0", !5531, i64 0}
!5531 = !{!"0xab2983d0.w512.b0", !5532, i64 0}
!5532 = !{!"0xab2983d0.w1024.b0", !5533, i64 0}
!5533 = !{!"int64", !5534, i64 0}
!5534 = !{!"0xab2983d0", !8, i64 0}
!5535 = !{!5536, !5536, i64 0}
!5536 = !{!"0xab2983d0.w1.b1", !5523, i64 0}
!5537 = !{!5538, !5538, i64 0}
!5538 = !{!"0xab2983d0.w1.b2", !5539, i64 0}
!5539 = !{!"0xab2983d0.w2.b2", !5524, i64 0}
!5540 = !{!5541, !5541, i64 0}
!5541 = !{!"0xab2983d0.w1.b3", !5539, i64 0}
!5542 = !{!5543, !5543, i64 0}
!5543 = !{!"0xab2983d0.w1.b4", !5544, i64 0}
!5544 = !{!"0xab2983d0.w2.b4", !5545, i64 0}
!5545 = !{!"0xab2983d0.w4.b4", !5525, i64 0}
!5546 = !{!5547, !5547, i64 0}
!5547 = !{!"0xab2985d0.w1.b0", !5548, i64 0}
!5548 = !{!"0xab2985d0.w2.b0", !5549, i64 0}
!5549 = !{!"0xab2985d0.w4.b0", !5550, i64 0}
!5550 = !{!"0xab2985d0.w8.b0", !5551, i64 0}
!5551 = !{!"0xab2985d0.w16.b0", !5552, i64 0}
!5552 = !{!"0xab2985d0.w32.b0", !5553, i64 0}
!5553 = !{!"0xab2985d0.w64.b0", !5554, i64 0}
!5554 = !{!"0xab2985d0.w128.b0", !5555, i64 0}
!5555 = !{!"0xab2985d0.w256.b0", !5556, i64 0}
!5556 = !{!"0xab2985d0.w512.b0", !5557, i64 0}
!5557 = !{!"0xab2985d0.w1024.b0", !5558, i64 0}
!5558 = !{!"int64", !5559, i64 0}
!5559 = !{!"0xab2985d0", !8, i64 0}
!5560 = !{!5561, !5561, i64 0}
!5561 = !{!"0xab2985d0.w1.b1", !5548, i64 0}
!5562 = !{!5563, !5563, i64 0}
!5563 = !{!"0xab2985d0.w1.b2", !5564, i64 0}
!5564 = !{!"0xab2985d0.w2.b2", !5549, i64 0}
!5565 = !{!5566, !5566, i64 0}
!5566 = !{!"0xab2985d0.w1.b3", !5564, i64 0}
!5567 = !{!5568, !5568, i64 0}
!5568 = !{!"0xab2985d0.w1.b4", !5569, i64 0}
!5569 = !{!"0xab2985d0.w2.b4", !5570, i64 0}
!5570 = !{!"0xab2985d0.w4.b4", !5550, i64 0}
!5571 = !{!5572, !5572, i64 0}
!5572 = !{!"float32", !5573, i64 0}
!5573 = !{!"0x91ba02d0", !8, i64 0}
!5574 = !{!5575, !5575, i64 0}
!5575 = !{!"float32", !5576, i64 0}
!5576 = !{!"0x936b0d80", !8, i64 0}
!5577 = !{!5578, !5578, i64 0}
!5578 = !{!"0x93c254e0.w1.b0", !5579, i64 0}
!5579 = !{!"0x93c254e0.w2.b0", !5580, i64 0}
!5580 = !{!"0x93c254e0.w4.b0", !5581, i64 0}
!5581 = !{!"0x93c254e0.w8.b0", !5582, i64 0}
!5582 = !{!"0x93c254e0.w16.b0", !5583, i64 0}
!5583 = !{!"0x93c254e0.w32.b0", !5584, i64 0}
!5584 = !{!"0x93c254e0.w64.b0", !5585, i64 0}
!5585 = !{!"0x93c254e0.w128.b0", !5586, i64 0}
!5586 = !{!"0x93c254e0.w256.b0", !5587, i64 0}
!5587 = !{!"0x93c254e0.w512.b0", !5588, i64 0}
!5588 = !{!"0x93c254e0.w1024.b0", !5589, i64 0}
!5589 = !{!"int32", !5590, i64 0}
!5590 = !{!"0x93c254e0", !8, i64 0}
!5591 = !{!5592, !5592, i64 0}
!5592 = !{!"0x93c254e0.w1.b2", !5593, i64 0}
!5593 = !{!"0x93c254e0.w2.b2", !5580, i64 0}
!5594 = !{!5595, !5595, i64 0}
!5595 = !{!"0x93c254e0.w1.b3", !5593, i64 0}
!5596 = !{!5597, !5597, i64 0}
!5597 = !{!"0x93c254e0.w1.b1", !5579, i64 0}
!5598 = !{!5599, !5599, i64 0}
!5599 = !{!"0x93c29020.w1.b0", !5600, i64 0}
!5600 = !{!"0x93c29020.w2.b0", !5601, i64 0}
!5601 = !{!"0x93c29020.w4.b0", !5602, i64 0}
!5602 = !{!"0x93c29020.w8.b0", !5603, i64 0}
!5603 = !{!"0x93c29020.w16.b0", !5604, i64 0}
!5604 = !{!"0x93c29020.w32.b0", !5605, i64 0}
!5605 = !{!"0x93c29020.w64.b0", !5606, i64 0}
!5606 = !{!"0x93c29020.w128.b0", !5607, i64 0}
!5607 = !{!"0x93c29020.w256.b0", !5608, i64 0}
!5608 = !{!"0x93c29020.w512.b0", !5609, i64 0}
!5609 = !{!"0x93c29020.w1024.b0", !5610, i64 0}
!5610 = !{!"int64", !5611, i64 0}
!5611 = !{!"0x93c29020", !8, i64 0}
!5612 = !{!5613, !5613, i64 0}
!5613 = !{!"0x93c29020.w1.b1", !5600, i64 0}
!5614 = !{!5615, !5615, i64 0}
!5615 = !{!"0x93c29020.w1.b2", !5616, i64 0}
!5616 = !{!"0x93c29020.w2.b2", !5601, i64 0}
!5617 = !{!5618, !5618, i64 0}
!5618 = !{!"0x93c29020.w1.b3", !5616, i64 0}
!5619 = !{!5620, !5620, i64 0}
!5620 = !{!"0x93c29020.w1.b4", !5621, i64 0}
!5621 = !{!"0x93c29020.w2.b4", !5622, i64 0}
!5622 = !{!"0x93c29020.w4.b4", !5602, i64 0}
!5623 = !{!5624, !5624, i64 0}
!5624 = !{!"0x93c29550.w1.b0", !5625, i64 0}
!5625 = !{!"0x93c29550.w2.b0", !5626, i64 0}
!5626 = !{!"0x93c29550.w4.b0", !5627, i64 0}
!5627 = !{!"0x93c29550.w8.b0", !5628, i64 0}
!5628 = !{!"0x93c29550.w16.b0", !5629, i64 0}
!5629 = !{!"0x93c29550.w32.b0", !5630, i64 0}
!5630 = !{!"0x93c29550.w64.b0", !5631, i64 0}
!5631 = !{!"0x93c29550.w128.b0", !5632, i64 0}
!5632 = !{!"0x93c29550.w256.b0", !5633, i64 0}
!5633 = !{!"0x93c29550.w512.b0", !5634, i64 0}
!5634 = !{!"0x93c29550.w1024.b0", !5635, i64 0}
!5635 = !{!"int64", !5636, i64 0}
!5636 = !{!"0x93c29550", !8, i64 0}
!5637 = !{!5638, !5638, i64 0}
!5638 = !{!"0x93c29550.w1.b1", !5625, i64 0}
!5639 = !{!5640, !5640, i64 0}
!5640 = !{!"0x93c29550.w1.b2", !5641, i64 0}
!5641 = !{!"0x93c29550.w2.b2", !5626, i64 0}
!5642 = !{!5643, !5643, i64 0}
!5643 = !{!"0x93c29550.w1.b3", !5641, i64 0}
!5644 = !{!5645, !5645, i64 0}
!5645 = !{!"0x93c29550.w1.b4", !5646, i64 0}
!5646 = !{!"0x93c29550.w2.b4", !5647, i64 0}
!5647 = !{!"0x93c29550.w4.b4", !5627, i64 0}
!5648 = !{!5649, !5649, i64 0}
!5649 = !{!"0x93c2b890.w1.b0", !5650, i64 0}
!5650 = !{!"0x93c2b890.w2.b0", !5651, i64 0}
!5651 = !{!"0x93c2b890.w4.b0", !5652, i64 0}
!5652 = !{!"0x93c2b890.w8.b0", !5653, i64 0}
!5653 = !{!"0x93c2b890.w16.b0", !5654, i64 0}
!5654 = !{!"0x93c2b890.w32.b0", !5655, i64 0}
!5655 = !{!"0x93c2b890.w64.b0", !5656, i64 0}
!5656 = !{!"0x93c2b890.w128.b0", !5657, i64 0}
!5657 = !{!"0x93c2b890.w256.b0", !5658, i64 0}
!5658 = !{!"0x93c2b890.w512.b0", !5659, i64 0}
!5659 = !{!"0x93c2b890.w1024.b0", !5660, i64 0}
!5660 = !{!"int64", !5661, i64 0}
!5661 = !{!"0x93c2b890", !8, i64 0}
!5662 = !{!5663, !5663, i64 0}
!5663 = !{!"0x93c2b890.w1.b1", !5650, i64 0}
!5664 = !{!5665, !5665, i64 0}
!5665 = !{!"0x93c2b890.w1.b2", !5666, i64 0}
!5666 = !{!"0x93c2b890.w2.b2", !5651, i64 0}
!5667 = !{!5668, !5668, i64 0}
!5668 = !{!"0x93c2b890.w1.b3", !5666, i64 0}
!5669 = !{!5670, !5670, i64 0}
!5670 = !{!"0x93c2b890.w1.b4", !5671, i64 0}
!5671 = !{!"0x93c2b890.w2.b4", !5672, i64 0}
!5672 = !{!"0x93c2b890.w4.b4", !5652, i64 0}
!5673 = !{!5674, !5674, i64 0}
!5674 = !{!"0x93c2b890.w1.b5", !5671, i64 0}
!5675 = !{!5676, !5676, i64 0}
!5676 = !{!"0x93c2ba90.w1.b0", !5677, i64 0}
!5677 = !{!"0x93c2ba90.w2.b0", !5678, i64 0}
!5678 = !{!"0x93c2ba90.w4.b0", !5679, i64 0}
!5679 = !{!"0x93c2ba90.w8.b0", !5680, i64 0}
!5680 = !{!"0x93c2ba90.w16.b0", !5681, i64 0}
!5681 = !{!"0x93c2ba90.w32.b0", !5682, i64 0}
!5682 = !{!"0x93c2ba90.w64.b0", !5683, i64 0}
!5683 = !{!"0x93c2ba90.w128.b0", !5684, i64 0}
!5684 = !{!"0x93c2ba90.w256.b0", !5685, i64 0}
!5685 = !{!"0x93c2ba90.w512.b0", !5686, i64 0}
!5686 = !{!"0x93c2ba90.w1024.b0", !5687, i64 0}
!5687 = !{!"int64", !5688, i64 0}
!5688 = !{!"0x93c2ba90", !8, i64 0}
!5689 = !{!5690, !5690, i64 0}
!5690 = !{!"0x93c2ba90.w1.b1", !5677, i64 0}
!5691 = !{!5692, !5692, i64 0}
!5692 = !{!"0x93c2ba90.w1.b2", !5693, i64 0}
!5693 = !{!"0x93c2ba90.w2.b2", !5678, i64 0}
!5694 = !{!5695, !5695, i64 0}
!5695 = !{!"0x93c2ba90.w1.b3", !5693, i64 0}
!5696 = !{!5697, !5697, i64 0}
!5697 = !{!"0x93c2ba90.w1.b4", !5698, i64 0}
!5698 = !{!"0x93c2ba90.w2.b4", !5699, i64 0}
!5699 = !{!"0x93c2ba90.w4.b4", !5679, i64 0}
!5700 = !{!5701, !5701, i64 0}
!5701 = !{!"0x93c2ba90.w1.b5", !5698, i64 0}
!5702 = !{!5703, !5703, i64 0}
!5703 = !{!"0x93c2d930.w1.b0", !5704, i64 0}
!5704 = !{!"0x93c2d930.w2.b0", !5705, i64 0}
!5705 = !{!"0x93c2d930.w4.b0", !5706, i64 0}
!5706 = !{!"0x93c2d930.w8.b0", !5707, i64 0}
!5707 = !{!"0x93c2d930.w16.b0", !5708, i64 0}
!5708 = !{!"0x93c2d930.w32.b0", !5709, i64 0}
!5709 = !{!"0x93c2d930.w64.b0", !5710, i64 0}
!5710 = !{!"0x93c2d930.w128.b0", !5711, i64 0}
!5711 = !{!"0x93c2d930.w256.b0", !5712, i64 0}
!5712 = !{!"0x93c2d930.w512.b0", !5713, i64 0}
!5713 = !{!"0x93c2d930.w1024.b0", !5714, i64 0}
!5714 = !{!"int64", !5715, i64 0}
!5715 = !{!"0x93c2d930", !8, i64 0}
!5716 = !{!5717, !5717, i64 0}
!5717 = !{!"0x93c2d930.w1.b1", !5704, i64 0}
!5718 = !{!5719, !5719, i64 0}
!5719 = !{!"0x93c2d930.w1.b2", !5720, i64 0}
!5720 = !{!"0x93c2d930.w2.b2", !5705, i64 0}
!5721 = !{!5722, !5722, i64 0}
!5722 = !{!"0x93c2d930.w1.b3", !5720, i64 0}
!5723 = !{!5724, !5724, i64 0}
!5724 = !{!"0x93c2d930.w1.b4", !5725, i64 0}
!5725 = !{!"0x93c2d930.w2.b4", !5726, i64 0}
!5726 = !{!"0x93c2d930.w4.b4", !5706, i64 0}
!5727 = !{!5728, !5728, i64 0}
!5728 = !{!"0x93c2bd90.w1.b0", !5729, i64 0}
!5729 = !{!"0x93c2bd90.w2.b0", !5730, i64 0}
!5730 = !{!"0x93c2bd90.w4.b0", !5731, i64 0}
!5731 = !{!"0x93c2bd90.w8.b0", !5732, i64 0}
!5732 = !{!"0x93c2bd90.w16.b0", !5733, i64 0}
!5733 = !{!"0x93c2bd90.w32.b0", !5734, i64 0}
!5734 = !{!"0x93c2bd90.w64.b0", !5735, i64 0}
!5735 = !{!"0x93c2bd90.w128.b0", !5736, i64 0}
!5736 = !{!"0x93c2bd90.w256.b0", !5737, i64 0}
!5737 = !{!"0x93c2bd90.w512.b0", !5738, i64 0}
!5738 = !{!"0x93c2bd90.w1024.b0", !5739, i64 0}
!5739 = !{!"int64", !5740, i64 0}
!5740 = !{!"0x93c2bd90", !8, i64 0}
!5741 = !{!5742, !5742, i64 0}
!5742 = !{!"0x93c2bd90.w1.b1", !5729, i64 0}
!5743 = !{!5744, !5744, i64 0}
!5744 = !{!"0x93c2bd90.w1.b2", !5745, i64 0}
!5745 = !{!"0x93c2bd90.w2.b2", !5730, i64 0}
!5746 = !{!5747, !5747, i64 0}
!5747 = !{!"0x93c2bd90.w1.b3", !5745, i64 0}
!5748 = !{!5749, !5749, i64 0}
!5749 = !{!"0x93c2bd90.w1.b4", !5750, i64 0}
!5750 = !{!"0x93c2bd90.w2.b4", !5751, i64 0}
!5751 = !{!"0x93c2bd90.w4.b4", !5731, i64 0}
!5752 = !{!5753, !5753, i64 0}
!5753 = !{!"0x93c2fef0.w1.b0", !5754, i64 0}
!5754 = !{!"0x93c2fef0.w2.b0", !5755, i64 0}
!5755 = !{!"0x93c2fef0.w4.b0", !5756, i64 0}
!5756 = !{!"0x93c2fef0.w8.b0", !5757, i64 0}
!5757 = !{!"0x93c2fef0.w16.b0", !5758, i64 0}
!5758 = !{!"0x93c2fef0.w32.b0", !5759, i64 0}
!5759 = !{!"0x93c2fef0.w64.b0", !5760, i64 0}
!5760 = !{!"0x93c2fef0.w128.b0", !5761, i64 0}
!5761 = !{!"0x93c2fef0.w256.b0", !5762, i64 0}
!5762 = !{!"0x93c2fef0.w512.b0", !5763, i64 0}
!5763 = !{!"0x93c2fef0.w1024.b0", !5764, i64 0}
!5764 = !{!"int64", !5765, i64 0}
!5765 = !{!"0x93c2fef0", !8, i64 0}
!5766 = !{!5767, !5767, i64 0}
!5767 = !{!"0x93c2fef0.w1.b1", !5754, i64 0}
!5768 = !{!5769, !5769, i64 0}
!5769 = !{!"0x93c2fef0.w1.b2", !5770, i64 0}
!5770 = !{!"0x93c2fef0.w2.b2", !5755, i64 0}
!5771 = !{!5772, !5772, i64 0}
!5772 = !{!"0x93c2fef0.w1.b3", !5770, i64 0}
!5773 = !{!5774, !5774, i64 0}
!5774 = !{!"0x93c2fef0.w1.b4", !5775, i64 0}
!5775 = !{!"0x93c2fef0.w2.b4", !5776, i64 0}
!5776 = !{!"0x93c2fef0.w4.b4", !5756, i64 0}
!5777 = !{!5778, !5778, i64 0}
!5778 = !{!"0x93c30e00.w1.b0", !5779, i64 0}
!5779 = !{!"0x93c30e00.w2.b0", !5780, i64 0}
!5780 = !{!"0x93c30e00.w4.b0", !5781, i64 0}
!5781 = !{!"0x93c30e00.w8.b0", !5782, i64 0}
!5782 = !{!"0x93c30e00.w16.b0", !5783, i64 0}
!5783 = !{!"0x93c30e00.w32.b0", !5784, i64 0}
!5784 = !{!"0x93c30e00.w64.b0", !5785, i64 0}
!5785 = !{!"0x93c30e00.w128.b0", !5786, i64 0}
!5786 = !{!"0x93c30e00.w256.b0", !5787, i64 0}
!5787 = !{!"0x93c30e00.w512.b0", !5788, i64 0}
!5788 = !{!"0x93c30e00.w1024.b0", !5789, i64 0}
!5789 = !{!"int64", !5790, i64 0}
!5790 = !{!"0x93c30e00", !8, i64 0}
!5791 = !{!5792, !5792, i64 0}
!5792 = !{!"0x93c30e00.w1.b1", !5779, i64 0}
!5793 = !{!5794, !5794, i64 0}
!5794 = !{!"0x93c30e00.w1.b2", !5795, i64 0}
!5795 = !{!"0x93c30e00.w2.b2", !5780, i64 0}
!5796 = !{!5797, !5797, i64 0}
!5797 = !{!"0x93c30e00.w1.b3", !5795, i64 0}
!5798 = !{!5799, !5799, i64 0}
!5799 = !{!"0x93c30e00.w1.b4", !5800, i64 0}
!5800 = !{!"0x93c30e00.w2.b4", !5801, i64 0}
!5801 = !{!"0x93c30e00.w4.b4", !5781, i64 0}
!5802 = !{!5803, !5803, i64 0}
!5803 = !{!"float32", !5804, i64 0}
!5804 = !{!"0x95b47a40", !8, i64 0}
!5805 = !{!5806, !5806, i64 0}
!5806 = !{!"float32", !5807, i64 0}
!5807 = !{!"0x95b41920", !8, i64 0}
!5808 = !{!5809, !5809, i64 0}
!5809 = !{!"float32", !5810, i64 0}
!5810 = !{!"0x95b41da0", !8, i64 0}
!5811 = !{!5812, !5812, i64 0}
!5812 = !{!"float32", !5813, i64 0}
!5813 = !{!"0x95b41b00", !8, i64 0}
!5814 = !{!5815, !5815, i64 0}
!5815 = !{!"0x93c29220.w1.b0", !5816, i64 0}
!5816 = !{!"0x93c29220.w2.b0", !5817, i64 0}
!5817 = !{!"0x93c29220.w4.b0", !5818, i64 0}
!5818 = !{!"0x93c29220.w8.b0", !5819, i64 0}
!5819 = !{!"0x93c29220.w16.b0", !5820, i64 0}
!5820 = !{!"0x93c29220.w32.b0", !5821, i64 0}
!5821 = !{!"0x93c29220.w64.b0", !5822, i64 0}
!5822 = !{!"0x93c29220.w128.b0", !5823, i64 0}
!5823 = !{!"0x93c29220.w256.b0", !5824, i64 0}
!5824 = !{!"0x93c29220.w512.b0", !5825, i64 0}
!5825 = !{!"0x93c29220.w1024.b0", !5826, i64 0}
!5826 = !{!"int32", !5827, i64 0}
!5827 = !{!"0x93c29220", !8, i64 0}
!5828 = !{!5829, !5829, i64 0}
!5829 = !{!"0x93c29220.w1.b1", !5816, i64 0}
!5830 = !{!5831, !5831, i64 0}
!5831 = !{!"0x93c34830.w1.b0", !5832, i64 0}
!5832 = !{!"0x93c34830.w2.b0", !5833, i64 0}
!5833 = !{!"0x93c34830.w4.b0", !5834, i64 0}
!5834 = !{!"0x93c34830.w8.b0", !5835, i64 0}
!5835 = !{!"0x93c34830.w16.b0", !5836, i64 0}
!5836 = !{!"0x93c34830.w32.b0", !5837, i64 0}
!5837 = !{!"0x93c34830.w64.b0", !5838, i64 0}
!5838 = !{!"0x93c34830.w128.b0", !5839, i64 0}
!5839 = !{!"0x93c34830.w256.b0", !5840, i64 0}
!5840 = !{!"0x93c34830.w512.b0", !5841, i64 0}
!5841 = !{!"0x93c34830.w1024.b0", !5842, i64 0}
!5842 = !{!"int64", !5843, i64 0}
!5843 = !{!"0x93c34830", !8, i64 0}
!5844 = !{!5845, !5845, i64 0}
!5845 = !{!"0x93c34830.w1.b1", !5832, i64 0}
!5846 = !{!5847, !5847, i64 0}
!5847 = !{!"0x93c34830.w1.b2", !5848, i64 0}
!5848 = !{!"0x93c34830.w2.b2", !5833, i64 0}
!5849 = !{!5850, !5850, i64 0}
!5850 = !{!"0x93c34830.w1.b3", !5848, i64 0}
!5851 = !{!5852, !5852, i64 0}
!5852 = !{!"0x93c34830.w1.b4", !5853, i64 0}
!5853 = !{!"0x93c34830.w2.b4", !5854, i64 0}
!5854 = !{!"0x93c34830.w4.b4", !5834, i64 0}
!5855 = !{!5856, !5856, i64 0}
!5856 = !{!"0x93c34970.w1.b0", !5857, i64 0}
!5857 = !{!"0x93c34970.w2.b0", !5858, i64 0}
!5858 = !{!"0x93c34970.w4.b0", !5859, i64 0}
!5859 = !{!"0x93c34970.w8.b0", !5860, i64 0}
!5860 = !{!"0x93c34970.w16.b0", !5861, i64 0}
!5861 = !{!"0x93c34970.w32.b0", !5862, i64 0}
!5862 = !{!"0x93c34970.w64.b0", !5863, i64 0}
!5863 = !{!"0x93c34970.w128.b0", !5864, i64 0}
!5864 = !{!"0x93c34970.w256.b0", !5865, i64 0}
!5865 = !{!"0x93c34970.w512.b0", !5866, i64 0}
!5866 = !{!"0x93c34970.w1024.b0", !5867, i64 0}
!5867 = !{!"int64", !5868, i64 0}
!5868 = !{!"0x93c34970", !8, i64 0}
!5869 = !{!5870, !5870, i64 0}
!5870 = !{!"0x93c34970.w1.b1", !5857, i64 0}
!5871 = !{!5872, !5872, i64 0}
!5872 = !{!"0x93c34970.w1.b2", !5873, i64 0}
!5873 = !{!"0x93c34970.w2.b2", !5858, i64 0}
!5874 = !{!5875, !5875, i64 0}
!5875 = !{!"0x93c34970.w1.b3", !5873, i64 0}
!5876 = !{!5877, !5877, i64 0}
!5877 = !{!"0x93c34970.w1.b4", !5878, i64 0}
!5878 = !{!"0x93c34970.w2.b4", !5879, i64 0}
!5879 = !{!"0x93c34970.w4.b4", !5859, i64 0}
!5880 = !{!5881, !5881, i64 0}
!5881 = !{!"0x93c365f0.w1.b0", !5882, i64 0}
!5882 = !{!"0x93c365f0.w2.b0", !5883, i64 0}
!5883 = !{!"0x93c365f0.w4.b0", !5884, i64 0}
!5884 = !{!"0x93c365f0.w8.b0", !5885, i64 0}
!5885 = !{!"0x93c365f0.w16.b0", !5886, i64 0}
!5886 = !{!"0x93c365f0.w32.b0", !5887, i64 0}
!5887 = !{!"0x93c365f0.w64.b0", !5888, i64 0}
!5888 = !{!"0x93c365f0.w128.b0", !5889, i64 0}
!5889 = !{!"0x93c365f0.w256.b0", !5890, i64 0}
!5890 = !{!"0x93c365f0.w512.b0", !5891, i64 0}
!5891 = !{!"0x93c365f0.w1024.b0", !5892, i64 0}
!5892 = !{!"int64", !5893, i64 0}
!5893 = !{!"0x93c365f0", !8, i64 0}
!5894 = !{!5895, !5895, i64 0}
!5895 = !{!"0x93c365f0.w1.b1", !5882, i64 0}
!5896 = !{!5897, !5897, i64 0}
!5897 = !{!"0x93c365f0.w1.b2", !5898, i64 0}
!5898 = !{!"0x93c365f0.w2.b2", !5883, i64 0}
!5899 = !{!5900, !5900, i64 0}
!5900 = !{!"0x93c365f0.w1.b3", !5898, i64 0}
!5901 = !{!5902, !5902, i64 0}
!5902 = !{!"0x93c365f0.w1.b4", !5903, i64 0}
!5903 = !{!"0x93c365f0.w2.b4", !5904, i64 0}
!5904 = !{!"0x93c365f0.w4.b4", !5884, i64 0}
!5905 = !{!5906, !5906, i64 0}
!5906 = !{!"0x93c367f0.w1.b0", !5907, i64 0}
!5907 = !{!"0x93c367f0.w2.b0", !5908, i64 0}
!5908 = !{!"0x93c367f0.w4.b0", !5909, i64 0}
!5909 = !{!"0x93c367f0.w8.b0", !5910, i64 0}
!5910 = !{!"0x93c367f0.w16.b0", !5911, i64 0}
!5911 = !{!"0x93c367f0.w32.b0", !5912, i64 0}
!5912 = !{!"0x93c367f0.w64.b0", !5913, i64 0}
!5913 = !{!"0x93c367f0.w128.b0", !5914, i64 0}
!5914 = !{!"0x93c367f0.w256.b0", !5915, i64 0}
!5915 = !{!"0x93c367f0.w512.b0", !5916, i64 0}
!5916 = !{!"0x93c367f0.w1024.b0", !5917, i64 0}
!5917 = !{!"int64", !5918, i64 0}
!5918 = !{!"0x93c367f0", !8, i64 0}
!5919 = !{!5920, !5920, i64 0}
!5920 = !{!"0x93c367f0.w1.b1", !5907, i64 0}
!5921 = !{!5922, !5922, i64 0}
!5922 = !{!"0x93c367f0.w1.b2", !5923, i64 0}
!5923 = !{!"0x93c367f0.w2.b2", !5908, i64 0}
!5924 = !{!5925, !5925, i64 0}
!5925 = !{!"0x93c367f0.w1.b3", !5923, i64 0}
!5926 = !{!5927, !5927, i64 0}
!5927 = !{!"0x93c367f0.w1.b4", !5928, i64 0}
!5928 = !{!"0x93c367f0.w2.b4", !5929, i64 0}
!5929 = !{!"0x93c367f0.w4.b4", !5909, i64 0}
!5930 = !{!5931, !5931, i64 0}
!5931 = !{!"float32", !5932, i64 0}
!5932 = !{!"0xab219ff0", !8, i64 0}
!5933 = !{!5934, !5934, i64 0}
!5934 = !{!"float32", !5935, i64 0}
!5935 = !{!"0xab265360", !8, i64 0}
!5936 = !{!5937, !5937, i64 0}
!5937 = !{!"0x93c36af0.w1.b0", !5938, i64 0}
!5938 = !{!"0x93c36af0.w2.b0", !5939, i64 0}
!5939 = !{!"0x93c36af0.w4.b0", !5940, i64 0}
!5940 = !{!"0x93c36af0.w8.b0", !5941, i64 0}
!5941 = !{!"0x93c36af0.w16.b0", !5942, i64 0}
!5942 = !{!"0x93c36af0.w32.b0", !5943, i64 0}
!5943 = !{!"0x93c36af0.w64.b0", !5944, i64 0}
!5944 = !{!"0x93c36af0.w128.b0", !5945, i64 0}
!5945 = !{!"0x93c36af0.w256.b0", !5946, i64 0}
!5946 = !{!"0x93c36af0.w512.b0", !5947, i64 0}
!5947 = !{!"0x93c36af0.w1024.b0", !5948, i64 0}
!5948 = !{!"int32", !5949, i64 0}
!5949 = !{!"0x93c36af0", !8, i64 0}
!5950 = !{!5951, !5951, i64 0}
!5951 = !{!"0x93c36af0.w1.b2", !5952, i64 0}
!5952 = !{!"0x93c36af0.w2.b2", !5939, i64 0}
!5953 = !{!5954, !5954, i64 0}
!5954 = !{!"0x93c36af0.w1.b3", !5952, i64 0}
!5955 = !{!5956, !5956, i64 0}
!5956 = !{!"0x93c36af0.w1.b1", !5938, i64 0}
!5957 = !{!5958, !5958, i64 0}
!5958 = !{!"0x93c3a630.w1.b0", !5959, i64 0}
!5959 = !{!"0x93c3a630.w2.b0", !5960, i64 0}
!5960 = !{!"0x93c3a630.w4.b0", !5961, i64 0}
!5961 = !{!"0x93c3a630.w8.b0", !5962, i64 0}
!5962 = !{!"0x93c3a630.w16.b0", !5963, i64 0}
!5963 = !{!"0x93c3a630.w32.b0", !5964, i64 0}
!5964 = !{!"0x93c3a630.w64.b0", !5965, i64 0}
!5965 = !{!"0x93c3a630.w128.b0", !5966, i64 0}
!5966 = !{!"0x93c3a630.w256.b0", !5967, i64 0}
!5967 = !{!"0x93c3a630.w512.b0", !5968, i64 0}
!5968 = !{!"0x93c3a630.w1024.b0", !5969, i64 0}
!5969 = !{!"int64", !5970, i64 0}
!5970 = !{!"0x93c3a630", !8, i64 0}
!5971 = !{!5972, !5972, i64 0}
!5972 = !{!"0x93c3a630.w1.b1", !5959, i64 0}
!5973 = !{!5974, !5974, i64 0}
!5974 = !{!"0x93c3a630.w1.b2", !5975, i64 0}
!5975 = !{!"0x93c3a630.w2.b2", !5960, i64 0}
!5976 = !{!5977, !5977, i64 0}
!5977 = !{!"0x93c3a630.w1.b3", !5975, i64 0}
!5978 = !{!5979, !5979, i64 0}
!5979 = !{!"0x93c3a630.w1.b4", !5980, i64 0}
!5980 = !{!"0x93c3a630.w2.b4", !5981, i64 0}
!5981 = !{!"0x93c3a630.w4.b4", !5961, i64 0}
!5982 = !{!5983, !5983, i64 0}
!5983 = !{!"0x93c3ab60.w1.b0", !5984, i64 0}
!5984 = !{!"0x93c3ab60.w2.b0", !5985, i64 0}
!5985 = !{!"0x93c3ab60.w4.b0", !5986, i64 0}
!5986 = !{!"0x93c3ab60.w8.b0", !5987, i64 0}
!5987 = !{!"0x93c3ab60.w16.b0", !5988, i64 0}
!5988 = !{!"0x93c3ab60.w32.b0", !5989, i64 0}
!5989 = !{!"0x93c3ab60.w64.b0", !5990, i64 0}
!5990 = !{!"0x93c3ab60.w128.b0", !5991, i64 0}
!5991 = !{!"0x93c3ab60.w256.b0", !5992, i64 0}
!5992 = !{!"0x93c3ab60.w512.b0", !5993, i64 0}
!5993 = !{!"0x93c3ab60.w1024.b0", !5994, i64 0}
!5994 = !{!"int64", !5995, i64 0}
!5995 = !{!"0x93c3ab60", !8, i64 0}
!5996 = !{!5997, !5997, i64 0}
!5997 = !{!"0x93c3ab60.w1.b1", !5984, i64 0}
!5998 = !{!5999, !5999, i64 0}
!5999 = !{!"0x93c3ab60.w1.b2", !6000, i64 0}
!6000 = !{!"0x93c3ab60.w2.b2", !5985, i64 0}
!6001 = !{!6002, !6002, i64 0}
!6002 = !{!"0x93c3ab60.w1.b3", !6000, i64 0}
!6003 = !{!6004, !6004, i64 0}
!6004 = !{!"0x93c3ab60.w1.b4", !6005, i64 0}
!6005 = !{!"0x93c3ab60.w2.b4", !6006, i64 0}
!6006 = !{!"0x93c3ab60.w4.b4", !5986, i64 0}
!6007 = !{!6008, !6008, i64 0}
!6008 = !{!"0x93c3cea0.w1.b0", !6009, i64 0}
!6009 = !{!"0x93c3cea0.w2.b0", !6010, i64 0}
!6010 = !{!"0x93c3cea0.w4.b0", !6011, i64 0}
!6011 = !{!"0x93c3cea0.w8.b0", !6012, i64 0}
!6012 = !{!"0x93c3cea0.w16.b0", !6013, i64 0}
!6013 = !{!"0x93c3cea0.w32.b0", !6014, i64 0}
!6014 = !{!"0x93c3cea0.w64.b0", !6015, i64 0}
!6015 = !{!"0x93c3cea0.w128.b0", !6016, i64 0}
!6016 = !{!"0x93c3cea0.w256.b0", !6017, i64 0}
!6017 = !{!"0x93c3cea0.w512.b0", !6018, i64 0}
!6018 = !{!"0x93c3cea0.w1024.b0", !6019, i64 0}
!6019 = !{!"int64", !6020, i64 0}
!6020 = !{!"0x93c3cea0", !8, i64 0}
!6021 = !{!6022, !6022, i64 0}
!6022 = !{!"0x93c3cea0.w1.b1", !6009, i64 0}
!6023 = !{!6024, !6024, i64 0}
!6024 = !{!"0x93c3cea0.w1.b2", !6025, i64 0}
!6025 = !{!"0x93c3cea0.w2.b2", !6010, i64 0}
!6026 = !{!6027, !6027, i64 0}
!6027 = !{!"0x93c3cea0.w1.b3", !6025, i64 0}
!6028 = !{!6029, !6029, i64 0}
!6029 = !{!"0x93c3cea0.w1.b4", !6030, i64 0}
!6030 = !{!"0x93c3cea0.w2.b4", !6031, i64 0}
!6031 = !{!"0x93c3cea0.w4.b4", !6011, i64 0}
!6032 = !{!6033, !6033, i64 0}
!6033 = !{!"0x93c3cea0.w1.b5", !6030, i64 0}
!6034 = !{!6035, !6035, i64 0}
!6035 = !{!"0x93c3d0a0.w1.b0", !6036, i64 0}
!6036 = !{!"0x93c3d0a0.w2.b0", !6037, i64 0}
!6037 = !{!"0x93c3d0a0.w4.b0", !6038, i64 0}
!6038 = !{!"0x93c3d0a0.w8.b0", !6039, i64 0}
!6039 = !{!"0x93c3d0a0.w16.b0", !6040, i64 0}
!6040 = !{!"0x93c3d0a0.w32.b0", !6041, i64 0}
!6041 = !{!"0x93c3d0a0.w64.b0", !6042, i64 0}
!6042 = !{!"0x93c3d0a0.w128.b0", !6043, i64 0}
!6043 = !{!"0x93c3d0a0.w256.b0", !6044, i64 0}
!6044 = !{!"0x93c3d0a0.w512.b0", !6045, i64 0}
!6045 = !{!"0x93c3d0a0.w1024.b0", !6046, i64 0}
!6046 = !{!"int64", !6047, i64 0}
!6047 = !{!"0x93c3d0a0", !8, i64 0}
!6048 = !{!6049, !6049, i64 0}
!6049 = !{!"0x93c3d0a0.w1.b1", !6036, i64 0}
!6050 = !{!6051, !6051, i64 0}
!6051 = !{!"0x93c3d0a0.w1.b2", !6052, i64 0}
!6052 = !{!"0x93c3d0a0.w2.b2", !6037, i64 0}
!6053 = !{!6054, !6054, i64 0}
!6054 = !{!"0x93c3d0a0.w1.b3", !6052, i64 0}
!6055 = !{!6056, !6056, i64 0}
!6056 = !{!"0x93c3d0a0.w1.b4", !6057, i64 0}
!6057 = !{!"0x93c3d0a0.w2.b4", !6058, i64 0}
!6058 = !{!"0x93c3d0a0.w4.b4", !6038, i64 0}
!6059 = !{!6060, !6060, i64 0}
!6060 = !{!"0x93c3d0a0.w1.b5", !6057, i64 0}
!6061 = !{!6062, !6062, i64 0}
!6062 = !{!"0x93c3ef40.w1.b0", !6063, i64 0}
!6063 = !{!"0x93c3ef40.w2.b0", !6064, i64 0}
!6064 = !{!"0x93c3ef40.w4.b0", !6065, i64 0}
!6065 = !{!"0x93c3ef40.w8.b0", !6066, i64 0}
!6066 = !{!"0x93c3ef40.w16.b0", !6067, i64 0}
!6067 = !{!"0x93c3ef40.w32.b0", !6068, i64 0}
!6068 = !{!"0x93c3ef40.w64.b0", !6069, i64 0}
!6069 = !{!"0x93c3ef40.w128.b0", !6070, i64 0}
!6070 = !{!"0x93c3ef40.w256.b0", !6071, i64 0}
!6071 = !{!"0x93c3ef40.w512.b0", !6072, i64 0}
!6072 = !{!"0x93c3ef40.w1024.b0", !6073, i64 0}
!6073 = !{!"int64", !6074, i64 0}
!6074 = !{!"0x93c3ef40", !8, i64 0}
!6075 = !{!6076, !6076, i64 0}
!6076 = !{!"0x93c3ef40.w1.b1", !6063, i64 0}
!6077 = !{!6078, !6078, i64 0}
!6078 = !{!"0x93c3ef40.w1.b2", !6079, i64 0}
!6079 = !{!"0x93c3ef40.w2.b2", !6064, i64 0}
!6080 = !{!6081, !6081, i64 0}
!6081 = !{!"0x93c3ef40.w1.b3", !6079, i64 0}
!6082 = !{!6083, !6083, i64 0}
!6083 = !{!"0x93c3ef40.w1.b4", !6084, i64 0}
!6084 = !{!"0x93c3ef40.w2.b4", !6085, i64 0}
!6085 = !{!"0x93c3ef40.w4.b4", !6065, i64 0}
!6086 = !{!6087, !6087, i64 0}
!6087 = !{!"0x93c3d3a0.w1.b0", !6088, i64 0}
!6088 = !{!"0x93c3d3a0.w2.b0", !6089, i64 0}
!6089 = !{!"0x93c3d3a0.w4.b0", !6090, i64 0}
!6090 = !{!"0x93c3d3a0.w8.b0", !6091, i64 0}
!6091 = !{!"0x93c3d3a0.w16.b0", !6092, i64 0}
!6092 = !{!"0x93c3d3a0.w32.b0", !6093, i64 0}
!6093 = !{!"0x93c3d3a0.w64.b0", !6094, i64 0}
!6094 = !{!"0x93c3d3a0.w128.b0", !6095, i64 0}
!6095 = !{!"0x93c3d3a0.w256.b0", !6096, i64 0}
!6096 = !{!"0x93c3d3a0.w512.b0", !6097, i64 0}
!6097 = !{!"0x93c3d3a0.w1024.b0", !6098, i64 0}
!6098 = !{!"int64", !6099, i64 0}
!6099 = !{!"0x93c3d3a0", !8, i64 0}
!6100 = !{!6101, !6101, i64 0}
!6101 = !{!"0x93c3d3a0.w1.b1", !6088, i64 0}
!6102 = !{!6103, !6103, i64 0}
!6103 = !{!"0x93c3d3a0.w1.b2", !6104, i64 0}
!6104 = !{!"0x93c3d3a0.w2.b2", !6089, i64 0}
!6105 = !{!6106, !6106, i64 0}
!6106 = !{!"0x93c3d3a0.w1.b3", !6104, i64 0}
!6107 = !{!6108, !6108, i64 0}
!6108 = !{!"0x93c3d3a0.w1.b4", !6109, i64 0}
!6109 = !{!"0x93c3d3a0.w2.b4", !6110, i64 0}
!6110 = !{!"0x93c3d3a0.w4.b4", !6090, i64 0}
!6111 = !{!6112, !6112, i64 0}
!6112 = !{!"0x93c41500.w1.b0", !6113, i64 0}
!6113 = !{!"0x93c41500.w2.b0", !6114, i64 0}
!6114 = !{!"0x93c41500.w4.b0", !6115, i64 0}
!6115 = !{!"0x93c41500.w8.b0", !6116, i64 0}
!6116 = !{!"0x93c41500.w16.b0", !6117, i64 0}
!6117 = !{!"0x93c41500.w32.b0", !6118, i64 0}
!6118 = !{!"0x93c41500.w64.b0", !6119, i64 0}
!6119 = !{!"0x93c41500.w128.b0", !6120, i64 0}
!6120 = !{!"0x93c41500.w256.b0", !6121, i64 0}
!6121 = !{!"0x93c41500.w512.b0", !6122, i64 0}
!6122 = !{!"0x93c41500.w1024.b0", !6123, i64 0}
!6123 = !{!"int64", !6124, i64 0}
!6124 = !{!"0x93c41500", !8, i64 0}
!6125 = !{!6126, !6126, i64 0}
!6126 = !{!"0x93c41500.w1.b1", !6113, i64 0}
!6127 = !{!6128, !6128, i64 0}
!6128 = !{!"0x93c41500.w1.b2", !6129, i64 0}
!6129 = !{!"0x93c41500.w2.b2", !6114, i64 0}
!6130 = !{!6131, !6131, i64 0}
!6131 = !{!"0x93c41500.w1.b3", !6129, i64 0}
!6132 = !{!6133, !6133, i64 0}
!6133 = !{!"0x93c41500.w1.b4", !6134, i64 0}
!6134 = !{!"0x93c41500.w2.b4", !6135, i64 0}
!6135 = !{!"0x93c41500.w4.b4", !6115, i64 0}
!6136 = !{!6137, !6137, i64 0}
!6137 = !{!"0x93c42410.w1.b0", !6138, i64 0}
!6138 = !{!"0x93c42410.w2.b0", !6139, i64 0}
!6139 = !{!"0x93c42410.w4.b0", !6140, i64 0}
!6140 = !{!"0x93c42410.w8.b0", !6141, i64 0}
!6141 = !{!"0x93c42410.w16.b0", !6142, i64 0}
!6142 = !{!"0x93c42410.w32.b0", !6143, i64 0}
!6143 = !{!"0x93c42410.w64.b0", !6144, i64 0}
!6144 = !{!"0x93c42410.w128.b0", !6145, i64 0}
!6145 = !{!"0x93c42410.w256.b0", !6146, i64 0}
!6146 = !{!"0x93c42410.w512.b0", !6147, i64 0}
!6147 = !{!"0x93c42410.w1024.b0", !6148, i64 0}
!6148 = !{!"int64", !6149, i64 0}
!6149 = !{!"0x93c42410", !8, i64 0}
!6150 = !{!6151, !6151, i64 0}
!6151 = !{!"0x93c42410.w1.b1", !6138, i64 0}
!6152 = !{!6153, !6153, i64 0}
!6153 = !{!"0x93c42410.w1.b2", !6154, i64 0}
!6154 = !{!"0x93c42410.w2.b2", !6139, i64 0}
!6155 = !{!6156, !6156, i64 0}
!6156 = !{!"0x93c42410.w1.b3", !6154, i64 0}
!6157 = !{!6158, !6158, i64 0}
!6158 = !{!"0x93c42410.w1.b4", !6159, i64 0}
!6159 = !{!"0x93c42410.w2.b4", !6160, i64 0}
!6160 = !{!"0x93c42410.w4.b4", !6140, i64 0}
!6161 = !{!6162, !6162, i64 0}
!6162 = !{!"float32", !6163, i64 0}
!6163 = !{!"0xab216440", !8, i64 0}
!6164 = !{!6165, !6165, i64 0}
!6165 = !{!"float32", !6166, i64 0}
!6166 = !{!"0xab21d650", !8, i64 0}
!6167 = !{!6168, !6168, i64 0}
!6168 = !{!"float32", !6169, i64 0}
!6169 = !{!"0xab2171c0", !8, i64 0}
!6170 = !{!6171, !6171, i64 0}
!6171 = !{!"float32", !6172, i64 0}
!6172 = !{!"0xab21c390", !8, i64 0}
!6173 = !{!6174, !6174, i64 0}
!6174 = !{!"float32", !6175, i64 0}
!6175 = !{!"0xab215fc0", !8, i64 0}
!6176 = !{!6177, !6177, i64 0}
!6177 = !{!"0x93c3a830.w1.b0", !6178, i64 0}
!6178 = !{!"0x93c3a830.w2.b0", !6179, i64 0}
!6179 = !{!"0x93c3a830.w4.b0", !6180, i64 0}
!6180 = !{!"0x93c3a830.w8.b0", !6181, i64 0}
!6181 = !{!"0x93c3a830.w16.b0", !6182, i64 0}
!6182 = !{!"0x93c3a830.w32.b0", !6183, i64 0}
!6183 = !{!"0x93c3a830.w64.b0", !6184, i64 0}
!6184 = !{!"0x93c3a830.w128.b0", !6185, i64 0}
!6185 = !{!"0x93c3a830.w256.b0", !6186, i64 0}
!6186 = !{!"0x93c3a830.w512.b0", !6187, i64 0}
!6187 = !{!"0x93c3a830.w1024.b0", !6188, i64 0}
!6188 = !{!"int32", !6189, i64 0}
!6189 = !{!"0x93c3a830", !8, i64 0}
!6190 = !{!6191, !6191, i64 0}
!6191 = !{!"0x93c3a830.w1.b1", !6178, i64 0}
!6192 = !{!6193, !6193, i64 0}
!6193 = !{!"0x93c45f20.w1.b0", !6194, i64 0}
!6194 = !{!"0x93c45f20.w2.b0", !6195, i64 0}
!6195 = !{!"0x93c45f20.w4.b0", !6196, i64 0}
!6196 = !{!"0x93c45f20.w8.b0", !6197, i64 0}
!6197 = !{!"0x93c45f20.w16.b0", !6198, i64 0}
!6198 = !{!"0x93c45f20.w32.b0", !6199, i64 0}
!6199 = !{!"0x93c45f20.w64.b0", !6200, i64 0}
!6200 = !{!"0x93c45f20.w128.b0", !6201, i64 0}
!6201 = !{!"0x93c45f20.w256.b0", !6202, i64 0}
!6202 = !{!"0x93c45f20.w512.b0", !6203, i64 0}
!6203 = !{!"0x93c45f20.w1024.b0", !6204, i64 0}
!6204 = !{!"int64", !6205, i64 0}
!6205 = !{!"0x93c45f20", !8, i64 0}
!6206 = !{!6207, !6207, i64 0}
!6207 = !{!"0x93c45f20.w1.b1", !6194, i64 0}
!6208 = !{!6209, !6209, i64 0}
!6209 = !{!"0x93c45f20.w1.b2", !6210, i64 0}
!6210 = !{!"0x93c45f20.w2.b2", !6195, i64 0}
!6211 = !{!6212, !6212, i64 0}
!6212 = !{!"0x93c45f20.w1.b3", !6210, i64 0}
!6213 = !{!6214, !6214, i64 0}
!6214 = !{!"0x93c45f20.w1.b4", !6215, i64 0}
!6215 = !{!"0x93c45f20.w2.b4", !6216, i64 0}
!6216 = !{!"0x93c45f20.w4.b4", !6196, i64 0}
!6217 = !{!6218, !6218, i64 0}
!6218 = !{!"0x93c46060.w1.b0", !6219, i64 0}
!6219 = !{!"0x93c46060.w2.b0", !6220, i64 0}
!6220 = !{!"0x93c46060.w4.b0", !6221, i64 0}
!6221 = !{!"0x93c46060.w8.b0", !6222, i64 0}
!6222 = !{!"0x93c46060.w16.b0", !6223, i64 0}
!6223 = !{!"0x93c46060.w32.b0", !6224, i64 0}
!6224 = !{!"0x93c46060.w64.b0", !6225, i64 0}
!6225 = !{!"0x93c46060.w128.b0", !6226, i64 0}
!6226 = !{!"0x93c46060.w256.b0", !6227, i64 0}
!6227 = !{!"0x93c46060.w512.b0", !6228, i64 0}
!6228 = !{!"0x93c46060.w1024.b0", !6229, i64 0}
!6229 = !{!"int64", !6230, i64 0}
!6230 = !{!"0x93c46060", !8, i64 0}
!6231 = !{!6232, !6232, i64 0}
!6232 = !{!"0x93c46060.w1.b1", !6219, i64 0}
!6233 = !{!6234, !6234, i64 0}
!6234 = !{!"0x93c46060.w1.b2", !6235, i64 0}
!6235 = !{!"0x93c46060.w2.b2", !6220, i64 0}
!6236 = !{!6237, !6237, i64 0}
!6237 = !{!"0x93c46060.w1.b3", !6235, i64 0}
!6238 = !{!6239, !6239, i64 0}
!6239 = !{!"0x93c46060.w1.b4", !6240, i64 0}
!6240 = !{!"0x93c46060.w2.b4", !6241, i64 0}
!6241 = !{!"0x93c46060.w4.b4", !6221, i64 0}
!6242 = !{!6243, !6243, i64 0}
!6243 = !{!"0x93c47ce0.w1.b0", !6244, i64 0}
!6244 = !{!"0x93c47ce0.w2.b0", !6245, i64 0}
!6245 = !{!"0x93c47ce0.w4.b0", !6246, i64 0}
!6246 = !{!"0x93c47ce0.w8.b0", !6247, i64 0}
!6247 = !{!"0x93c47ce0.w16.b0", !6248, i64 0}
!6248 = !{!"0x93c47ce0.w32.b0", !6249, i64 0}
!6249 = !{!"0x93c47ce0.w64.b0", !6250, i64 0}
!6250 = !{!"0x93c47ce0.w128.b0", !6251, i64 0}
!6251 = !{!"0x93c47ce0.w256.b0", !6252, i64 0}
!6252 = !{!"0x93c47ce0.w512.b0", !6253, i64 0}
!6253 = !{!"0x93c47ce0.w1024.b0", !6254, i64 0}
!6254 = !{!"int64", !6255, i64 0}
!6255 = !{!"0x93c47ce0", !8, i64 0}
!6256 = !{!6257, !6257, i64 0}
!6257 = !{!"0x93c47ce0.w1.b1", !6244, i64 0}
!6258 = !{!6259, !6259, i64 0}
!6259 = !{!"0x93c47ce0.w1.b2", !6260, i64 0}
!6260 = !{!"0x93c47ce0.w2.b2", !6245, i64 0}
!6261 = !{!6262, !6262, i64 0}
!6262 = !{!"0x93c47ce0.w1.b3", !6260, i64 0}
!6263 = !{!6264, !6264, i64 0}
!6264 = !{!"0x93c47ce0.w1.b4", !6265, i64 0}
!6265 = !{!"0x93c47ce0.w2.b4", !6266, i64 0}
!6266 = !{!"0x93c47ce0.w4.b4", !6246, i64 0}
!6267 = !{!6268, !6268, i64 0}
!6268 = !{!"0x93c47ee0.w1.b0", !6269, i64 0}
!6269 = !{!"0x93c47ee0.w2.b0", !6270, i64 0}
!6270 = !{!"0x93c47ee0.w4.b0", !6271, i64 0}
!6271 = !{!"0x93c47ee0.w8.b0", !6272, i64 0}
!6272 = !{!"0x93c47ee0.w16.b0", !6273, i64 0}
!6273 = !{!"0x93c47ee0.w32.b0", !6274, i64 0}
!6274 = !{!"0x93c47ee0.w64.b0", !6275, i64 0}
!6275 = !{!"0x93c47ee0.w128.b0", !6276, i64 0}
!6276 = !{!"0x93c47ee0.w256.b0", !6277, i64 0}
!6277 = !{!"0x93c47ee0.w512.b0", !6278, i64 0}
!6278 = !{!"0x93c47ee0.w1024.b0", !6279, i64 0}
!6279 = !{!"int64", !6280, i64 0}
!6280 = !{!"0x93c47ee0", !8, i64 0}
!6281 = !{!6282, !6282, i64 0}
!6282 = !{!"0x93c47ee0.w1.b1", !6269, i64 0}
!6283 = !{!6284, !6284, i64 0}
!6284 = !{!"0x93c47ee0.w1.b2", !6285, i64 0}
!6285 = !{!"0x93c47ee0.w2.b2", !6270, i64 0}
!6286 = !{!6287, !6287, i64 0}
!6287 = !{!"0x93c47ee0.w1.b3", !6285, i64 0}
!6288 = !{!6289, !6289, i64 0}
!6289 = !{!"0x93c47ee0.w1.b4", !6290, i64 0}
!6290 = !{!"0x93c47ee0.w2.b4", !6291, i64 0}
!6291 = !{!"0x93c47ee0.w4.b4", !6271, i64 0}
!6292 = !{!6293, !6293, i64 0}
!6293 = !{!"float32", !6294, i64 0}
!6294 = !{!"0x9e6a6500", !8, i64 0}
!6295 = !{!6296, !6296, i64 0}
!6296 = !{!"float32", !6297, i64 0}
!6297 = !{!"0x99d4e5b0", !8, i64 0}
!6298 = !{!6299, !6299, i64 0}
!6299 = !{!"0x93c481e0.w1.b0", !6300, i64 0}
!6300 = !{!"0x93c481e0.w2.b0", !6301, i64 0}
!6301 = !{!"0x93c481e0.w4.b0", !6302, i64 0}
!6302 = !{!"0x93c481e0.w8.b0", !6303, i64 0}
!6303 = !{!"0x93c481e0.w16.b0", !6304, i64 0}
!6304 = !{!"0x93c481e0.w32.b0", !6305, i64 0}
!6305 = !{!"0x93c481e0.w64.b0", !6306, i64 0}
!6306 = !{!"0x93c481e0.w128.b0", !6307, i64 0}
!6307 = !{!"0x93c481e0.w256.b0", !6308, i64 0}
!6308 = !{!"0x93c481e0.w512.b0", !6309, i64 0}
!6309 = !{!"0x93c481e0.w1024.b0", !6310, i64 0}
!6310 = !{!"int32", !6311, i64 0}
!6311 = !{!"0x93c481e0", !8, i64 0}
!6312 = !{!6313, !6313, i64 0}
!6313 = !{!"0x93c481e0.w1.b2", !6314, i64 0}
!6314 = !{!"0x93c481e0.w2.b2", !6301, i64 0}
!6315 = !{!6316, !6316, i64 0}
!6316 = !{!"0x93c481e0.w1.b3", !6314, i64 0}
!6317 = !{!6318, !6318, i64 0}
!6318 = !{!"0x93c481e0.w1.b1", !6300, i64 0}
!6319 = !{!6320, !6320, i64 0}
!6320 = !{!"0x93c4bd70.w1.b0", !6321, i64 0}
!6321 = !{!"0x93c4bd70.w2.b0", !6322, i64 0}
!6322 = !{!"0x93c4bd70.w4.b0", !6323, i64 0}
!6323 = !{!"0x93c4bd70.w8.b0", !6324, i64 0}
!6324 = !{!"0x93c4bd70.w16.b0", !6325, i64 0}
!6325 = !{!"0x93c4bd70.w32.b0", !6326, i64 0}
!6326 = !{!"0x93c4bd70.w64.b0", !6327, i64 0}
!6327 = !{!"0x93c4bd70.w128.b0", !6328, i64 0}
!6328 = !{!"0x93c4bd70.w256.b0", !6329, i64 0}
!6329 = !{!"0x93c4bd70.w512.b0", !6330, i64 0}
!6330 = !{!"0x93c4bd70.w1024.b0", !6331, i64 0}
!6331 = !{!"int64", !6332, i64 0}
!6332 = !{!"0x93c4bd70", !8, i64 0}
!6333 = !{!6334, !6334, i64 0}
!6334 = !{!"0x93c4bd70.w1.b1", !6321, i64 0}
!6335 = !{!6336, !6336, i64 0}
!6336 = !{!"0x93c4bd70.w1.b2", !6337, i64 0}
!6337 = !{!"0x93c4bd70.w2.b2", !6322, i64 0}
!6338 = !{!6339, !6339, i64 0}
!6339 = !{!"0x93c4bd70.w1.b3", !6337, i64 0}
!6340 = !{!6341, !6341, i64 0}
!6341 = !{!"0x93c4bd70.w1.b4", !6342, i64 0}
!6342 = !{!"0x93c4bd70.w2.b4", !6343, i64 0}
!6343 = !{!"0x93c4bd70.w4.b4", !6323, i64 0}
!6344 = !{!6345, !6345, i64 0}
!6345 = !{!"0x93c4c2a0.w1.b0", !6346, i64 0}
!6346 = !{!"0x93c4c2a0.w2.b0", !6347, i64 0}
!6347 = !{!"0x93c4c2a0.w4.b0", !6348, i64 0}
!6348 = !{!"0x93c4c2a0.w8.b0", !6349, i64 0}
!6349 = !{!"0x93c4c2a0.w16.b0", !6350, i64 0}
!6350 = !{!"0x93c4c2a0.w32.b0", !6351, i64 0}
!6351 = !{!"0x93c4c2a0.w64.b0", !6352, i64 0}
!6352 = !{!"0x93c4c2a0.w128.b0", !6353, i64 0}
!6353 = !{!"0x93c4c2a0.w256.b0", !6354, i64 0}
!6354 = !{!"0x93c4c2a0.w512.b0", !6355, i64 0}
!6355 = !{!"0x93c4c2a0.w1024.b0", !6356, i64 0}
!6356 = !{!"int64", !6357, i64 0}
!6357 = !{!"0x93c4c2a0", !8, i64 0}
!6358 = !{!6359, !6359, i64 0}
!6359 = !{!"0x93c4c2a0.w1.b1", !6346, i64 0}
!6360 = !{!6361, !6361, i64 0}
!6361 = !{!"0x93c4c2a0.w1.b2", !6362, i64 0}
!6362 = !{!"0x93c4c2a0.w2.b2", !6347, i64 0}
!6363 = !{!6364, !6364, i64 0}
!6364 = !{!"0x93c4c2a0.w1.b3", !6362, i64 0}
!6365 = !{!6366, !6366, i64 0}
!6366 = !{!"0x93c4c2a0.w1.b4", !6367, i64 0}
!6367 = !{!"0x93c4c2a0.w2.b4", !6368, i64 0}
!6368 = !{!"0x93c4c2a0.w4.b4", !6348, i64 0}
!6369 = !{!6370, !6370, i64 0}
!6370 = !{!"0x93c4e5e0.w1.b0", !6371, i64 0}
!6371 = !{!"0x93c4e5e0.w2.b0", !6372, i64 0}
!6372 = !{!"0x93c4e5e0.w4.b0", !6373, i64 0}
!6373 = !{!"0x93c4e5e0.w8.b0", !6374, i64 0}
!6374 = !{!"0x93c4e5e0.w16.b0", !6375, i64 0}
!6375 = !{!"0x93c4e5e0.w32.b0", !6376, i64 0}
!6376 = !{!"0x93c4e5e0.w64.b0", !6377, i64 0}
!6377 = !{!"0x93c4e5e0.w128.b0", !6378, i64 0}
!6378 = !{!"0x93c4e5e0.w256.b0", !6379, i64 0}
!6379 = !{!"0x93c4e5e0.w512.b0", !6380, i64 0}
!6380 = !{!"0x93c4e5e0.w1024.b0", !6381, i64 0}
!6381 = !{!"int64", !6382, i64 0}
!6382 = !{!"0x93c4e5e0", !8, i64 0}
!6383 = !{!6384, !6384, i64 0}
!6384 = !{!"0x93c4e5e0.w1.b1", !6371, i64 0}
!6385 = !{!6386, !6386, i64 0}
!6386 = !{!"0x93c4e5e0.w1.b2", !6387, i64 0}
!6387 = !{!"0x93c4e5e0.w2.b2", !6372, i64 0}
!6388 = !{!6389, !6389, i64 0}
!6389 = !{!"0x93c4e5e0.w1.b3", !6387, i64 0}
!6390 = !{!6391, !6391, i64 0}
!6391 = !{!"0x93c4e5e0.w1.b4", !6392, i64 0}
!6392 = !{!"0x93c4e5e0.w2.b4", !6393, i64 0}
!6393 = !{!"0x93c4e5e0.w4.b4", !6373, i64 0}
!6394 = !{!6395, !6395, i64 0}
!6395 = !{!"0x93c4e5e0.w1.b5", !6392, i64 0}
!6396 = !{!6397, !6397, i64 0}
!6397 = !{!"0x93c4e7e0.w1.b0", !6398, i64 0}
!6398 = !{!"0x93c4e7e0.w2.b0", !6399, i64 0}
!6399 = !{!"0x93c4e7e0.w4.b0", !6400, i64 0}
!6400 = !{!"0x93c4e7e0.w8.b0", !6401, i64 0}
!6401 = !{!"0x93c4e7e0.w16.b0", !6402, i64 0}
!6402 = !{!"0x93c4e7e0.w32.b0", !6403, i64 0}
!6403 = !{!"0x93c4e7e0.w64.b0", !6404, i64 0}
!6404 = !{!"0x93c4e7e0.w128.b0", !6405, i64 0}
!6405 = !{!"0x93c4e7e0.w256.b0", !6406, i64 0}
!6406 = !{!"0x93c4e7e0.w512.b0", !6407, i64 0}
!6407 = !{!"0x93c4e7e0.w1024.b0", !6408, i64 0}
!6408 = !{!"int64", !6409, i64 0}
!6409 = !{!"0x93c4e7e0", !8, i64 0}
!6410 = !{!6411, !6411, i64 0}
!6411 = !{!"0x93c4e7e0.w1.b1", !6398, i64 0}
!6412 = !{!6413, !6413, i64 0}
!6413 = !{!"0x93c4e7e0.w1.b2", !6414, i64 0}
!6414 = !{!"0x93c4e7e0.w2.b2", !6399, i64 0}
!6415 = !{!6416, !6416, i64 0}
!6416 = !{!"0x93c4e7e0.w1.b3", !6414, i64 0}
!6417 = !{!6418, !6418, i64 0}
!6418 = !{!"0x93c4e7e0.w1.b4", !6419, i64 0}
!6419 = !{!"0x93c4e7e0.w2.b4", !6420, i64 0}
!6420 = !{!"0x93c4e7e0.w4.b4", !6400, i64 0}
!6421 = !{!6422, !6422, i64 0}
!6422 = !{!"0x93c4e7e0.w1.b5", !6419, i64 0}
!6423 = !{!6424, !6424, i64 0}
!6424 = !{!"0x93c50680.w1.b0", !6425, i64 0}
!6425 = !{!"0x93c50680.w2.b0", !6426, i64 0}
!6426 = !{!"0x93c50680.w4.b0", !6427, i64 0}
!6427 = !{!"0x93c50680.w8.b0", !6428, i64 0}
!6428 = !{!"0x93c50680.w16.b0", !6429, i64 0}
!6429 = !{!"0x93c50680.w32.b0", !6430, i64 0}
!6430 = !{!"0x93c50680.w64.b0", !6431, i64 0}
!6431 = !{!"0x93c50680.w128.b0", !6432, i64 0}
!6432 = !{!"0x93c50680.w256.b0", !6433, i64 0}
!6433 = !{!"0x93c50680.w512.b0", !6434, i64 0}
!6434 = !{!"0x93c50680.w1024.b0", !6435, i64 0}
!6435 = !{!"int64", !6436, i64 0}
!6436 = !{!"0x93c50680", !8, i64 0}
!6437 = !{!6438, !6438, i64 0}
!6438 = !{!"0x93c50680.w1.b1", !6425, i64 0}
!6439 = !{!6440, !6440, i64 0}
!6440 = !{!"0x93c50680.w1.b2", !6441, i64 0}
!6441 = !{!"0x93c50680.w2.b2", !6426, i64 0}
!6442 = !{!6443, !6443, i64 0}
!6443 = !{!"0x93c50680.w1.b3", !6441, i64 0}
!6444 = !{!6445, !6445, i64 0}
!6445 = !{!"0x93c50680.w1.b4", !6446, i64 0}
!6446 = !{!"0x93c50680.w2.b4", !6447, i64 0}
!6447 = !{!"0x93c50680.w4.b4", !6427, i64 0}
!6448 = !{!6449, !6449, i64 0}
!6449 = !{!"0x93c4eae0.w1.b0", !6450, i64 0}
!6450 = !{!"0x93c4eae0.w2.b0", !6451, i64 0}
!6451 = !{!"0x93c4eae0.w4.b0", !6452, i64 0}
!6452 = !{!"0x93c4eae0.w8.b0", !6453, i64 0}
!6453 = !{!"0x93c4eae0.w16.b0", !6454, i64 0}
!6454 = !{!"0x93c4eae0.w32.b0", !6455, i64 0}
!6455 = !{!"0x93c4eae0.w64.b0", !6456, i64 0}
!6456 = !{!"0x93c4eae0.w128.b0", !6457, i64 0}
!6457 = !{!"0x93c4eae0.w256.b0", !6458, i64 0}
!6458 = !{!"0x93c4eae0.w512.b0", !6459, i64 0}
!6459 = !{!"0x93c4eae0.w1024.b0", !6460, i64 0}
!6460 = !{!"int64", !6461, i64 0}
!6461 = !{!"0x93c4eae0", !8, i64 0}
!6462 = !{!6463, !6463, i64 0}
!6463 = !{!"0x93c4eae0.w1.b1", !6450, i64 0}
!6464 = !{!6465, !6465, i64 0}
!6465 = !{!"0x93c4eae0.w1.b2", !6466, i64 0}
!6466 = !{!"0x93c4eae0.w2.b2", !6451, i64 0}
!6467 = !{!6468, !6468, i64 0}
!6468 = !{!"0x93c4eae0.w1.b3", !6466, i64 0}
!6469 = !{!6470, !6470, i64 0}
!6470 = !{!"0x93c4eae0.w1.b4", !6471, i64 0}
!6471 = !{!"0x93c4eae0.w2.b4", !6472, i64 0}
!6472 = !{!"0x93c4eae0.w4.b4", !6452, i64 0}
!6473 = !{!6474, !6474, i64 0}
!6474 = !{!"0x93c52c40.w1.b0", !6475, i64 0}
!6475 = !{!"0x93c52c40.w2.b0", !6476, i64 0}
!6476 = !{!"0x93c52c40.w4.b0", !6477, i64 0}
!6477 = !{!"0x93c52c40.w8.b0", !6478, i64 0}
!6478 = !{!"0x93c52c40.w16.b0", !6479, i64 0}
!6479 = !{!"0x93c52c40.w32.b0", !6480, i64 0}
!6480 = !{!"0x93c52c40.w64.b0", !6481, i64 0}
!6481 = !{!"0x93c52c40.w128.b0", !6482, i64 0}
!6482 = !{!"0x93c52c40.w256.b0", !6483, i64 0}
!6483 = !{!"0x93c52c40.w512.b0", !6484, i64 0}
!6484 = !{!"0x93c52c40.w1024.b0", !6485, i64 0}
!6485 = !{!"int64", !6486, i64 0}
!6486 = !{!"0x93c52c40", !8, i64 0}
!6487 = !{!6488, !6488, i64 0}
!6488 = !{!"0x93c52c40.w1.b1", !6475, i64 0}
!6489 = !{!6490, !6490, i64 0}
!6490 = !{!"0x93c52c40.w1.b2", !6491, i64 0}
!6491 = !{!"0x93c52c40.w2.b2", !6476, i64 0}
!6492 = !{!6493, !6493, i64 0}
!6493 = !{!"0x93c52c40.w1.b3", !6491, i64 0}
!6494 = !{!6495, !6495, i64 0}
!6495 = !{!"0x93c52c40.w1.b4", !6496, i64 0}
!6496 = !{!"0x93c52c40.w2.b4", !6497, i64 0}
!6497 = !{!"0x93c52c40.w4.b4", !6477, i64 0}
!6498 = !{!6499, !6499, i64 0}
!6499 = !{!"0x93c53b50.w1.b0", !6500, i64 0}
!6500 = !{!"0x93c53b50.w2.b0", !6501, i64 0}
!6501 = !{!"0x93c53b50.w4.b0", !6502, i64 0}
!6502 = !{!"0x93c53b50.w8.b0", !6503, i64 0}
!6503 = !{!"0x93c53b50.w16.b0", !6504, i64 0}
!6504 = !{!"0x93c53b50.w32.b0", !6505, i64 0}
!6505 = !{!"0x93c53b50.w64.b0", !6506, i64 0}
!6506 = !{!"0x93c53b50.w128.b0", !6507, i64 0}
!6507 = !{!"0x93c53b50.w256.b0", !6508, i64 0}
!6508 = !{!"0x93c53b50.w512.b0", !6509, i64 0}
!6509 = !{!"0x93c53b50.w1024.b0", !6510, i64 0}
!6510 = !{!"int64", !6511, i64 0}
!6511 = !{!"0x93c53b50", !8, i64 0}
!6512 = !{!6513, !6513, i64 0}
!6513 = !{!"0x93c53b50.w1.b1", !6500, i64 0}
!6514 = !{!6515, !6515, i64 0}
!6515 = !{!"0x93c53b50.w1.b2", !6516, i64 0}
!6516 = !{!"0x93c53b50.w2.b2", !6501, i64 0}
!6517 = !{!6518, !6518, i64 0}
!6518 = !{!"0x93c53b50.w1.b3", !6516, i64 0}
!6519 = !{!6520, !6520, i64 0}
!6520 = !{!"0x93c53b50.w1.b4", !6521, i64 0}
!6521 = !{!"0x93c53b50.w2.b4", !6522, i64 0}
!6522 = !{!"0x93c53b50.w4.b4", !6502, i64 0}
!6523 = !{!6524, !6524, i64 0}
!6524 = !{!"float32", !6525, i64 0}
!6525 = !{!"0x9e7ebc10", !8, i64 0}
!6526 = !{!6527, !6527, i64 0}
!6527 = !{!"float32", !6528, i64 0}
!6528 = !{!"0x93c94160", !8, i64 0}
!6529 = !{!6530, !6530, i64 0}
!6530 = !{!"float32", !6531, i64 0}
!6531 = !{!"0x9d904e20", !8, i64 0}
!6532 = !{!6533, !6533, i64 0}
!6533 = !{!"float32", !6534, i64 0}
!6534 = !{!"0x9d904d80", !8, i64 0}
!6535 = !{!6536, !6536, i64 0}
!6536 = !{!"float32", !6537, i64 0}
!6537 = !{!"0xa8c8c110", !8, i64 0}
!6538 = !{!6539, !6539, i64 0}
!6539 = !{!"0x93c4bf70.w1.b0", !6540, i64 0}
!6540 = !{!"0x93c4bf70.w2.b0", !6541, i64 0}
!6541 = !{!"0x93c4bf70.w4.b0", !6542, i64 0}
!6542 = !{!"0x93c4bf70.w8.b0", !6543, i64 0}
!6543 = !{!"0x93c4bf70.w16.b0", !6544, i64 0}
!6544 = !{!"0x93c4bf70.w32.b0", !6545, i64 0}
!6545 = !{!"0x93c4bf70.w64.b0", !6546, i64 0}
!6546 = !{!"0x93c4bf70.w128.b0", !6547, i64 0}
!6547 = !{!"0x93c4bf70.w256.b0", !6548, i64 0}
!6548 = !{!"0x93c4bf70.w512.b0", !6549, i64 0}
!6549 = !{!"0x93c4bf70.w1024.b0", !6550, i64 0}
!6550 = !{!"int32", !6551, i64 0}
!6551 = !{!"0x93c4bf70", !8, i64 0}
!6552 = !{!6553, !6553, i64 0}
!6553 = !{!"0x93c4bf70.w1.b2", !6554, i64 0}
!6554 = !{!"0x93c4bf70.w2.b2", !6541, i64 0}
!6555 = !{!6556, !6556, i64 0}
!6556 = !{!"0x93c4bf70.w1.b3", !6554, i64 0}
!6557 = !{!6558, !6558, i64 0}
!6558 = !{!"0x93c4bf70.w1.b1", !6540, i64 0}
!6559 = !{!6560, !6560, i64 0}
!6560 = !{!"0x93c57a40.w1.b0", !6561, i64 0}
!6561 = !{!"0x93c57a40.w2.b0", !6562, i64 0}
!6562 = !{!"0x93c57a40.w4.b0", !6563, i64 0}
!6563 = !{!"0x93c57a40.w8.b0", !6564, i64 0}
!6564 = !{!"0x93c57a40.w16.b0", !6565, i64 0}
!6565 = !{!"0x93c57a40.w32.b0", !6566, i64 0}
!6566 = !{!"0x93c57a40.w64.b0", !6567, i64 0}
!6567 = !{!"0x93c57a40.w128.b0", !6568, i64 0}
!6568 = !{!"0x93c57a40.w256.b0", !6569, i64 0}
!6569 = !{!"0x93c57a40.w512.b0", !6570, i64 0}
!6570 = !{!"0x93c57a40.w1024.b0", !6571, i64 0}
!6571 = !{!"int64", !6572, i64 0}
!6572 = !{!"0x93c57a40", !8, i64 0}
!6573 = !{!6574, !6574, i64 0}
!6574 = !{!"0x93c57a40.w1.b1", !6561, i64 0}
!6575 = !{!6576, !6576, i64 0}
!6576 = !{!"0x93c57a40.w1.b2", !6577, i64 0}
!6577 = !{!"0x93c57a40.w2.b2", !6562, i64 0}
!6578 = !{!6579, !6579, i64 0}
!6579 = !{!"0x93c57a40.w1.b3", !6577, i64 0}
!6580 = !{!6581, !6581, i64 0}
!6581 = !{!"0x93c57a40.w1.b4", !6582, i64 0}
!6582 = !{!"0x93c57a40.w2.b4", !6583, i64 0}
!6583 = !{!"0x93c57a40.w4.b4", !6563, i64 0}
!6584 = !{!6585, !6585, i64 0}
!6585 = !{!"0x93c57c40.w1.b0", !6586, i64 0}
!6586 = !{!"0x93c57c40.w2.b0", !6587, i64 0}
!6587 = !{!"0x93c57c40.w4.b0", !6588, i64 0}
!6588 = !{!"0x93c57c40.w8.b0", !6589, i64 0}
!6589 = !{!"0x93c57c40.w16.b0", !6590, i64 0}
!6590 = !{!"0x93c57c40.w32.b0", !6591, i64 0}
!6591 = !{!"0x93c57c40.w64.b0", !6592, i64 0}
!6592 = !{!"0x93c57c40.w128.b0", !6593, i64 0}
!6593 = !{!"0x93c57c40.w256.b0", !6594, i64 0}
!6594 = !{!"0x93c57c40.w512.b0", !6595, i64 0}
!6595 = !{!"0x93c57c40.w1024.b0", !6596, i64 0}
!6596 = !{!"int64", !6597, i64 0}
!6597 = !{!"0x93c57c40", !8, i64 0}
!6598 = !{!6599, !6599, i64 0}
!6599 = !{!"0x93c57c40.w1.b1", !6586, i64 0}
!6600 = !{!6601, !6601, i64 0}
!6601 = !{!"0x93c57c40.w1.b2", !6602, i64 0}
!6602 = !{!"0x93c57c40.w2.b2", !6587, i64 0}
!6603 = !{!6604, !6604, i64 0}
!6604 = !{!"0x93c57c40.w1.b3", !6602, i64 0}
!6605 = !{!6606, !6606, i64 0}
!6606 = !{!"0x93c57c40.w1.b4", !6607, i64 0}
!6607 = !{!"0x93c57c40.w2.b4", !6608, i64 0}
!6608 = !{!"0x93c57c40.w4.b4", !6588, i64 0}
!6609 = !{!6610, !6610, i64 0}
!6610 = !{!"0x93c59f80.w1.b0", !6611, i64 0}
!6611 = !{!"0x93c59f80.w2.b0", !6612, i64 0}
!6612 = !{!"0x93c59f80.w4.b0", !6613, i64 0}
!6613 = !{!"0x93c59f80.w8.b0", !6614, i64 0}
!6614 = !{!"0x93c59f80.w16.b0", !6615, i64 0}
!6615 = !{!"0x93c59f80.w32.b0", !6616, i64 0}
!6616 = !{!"0x93c59f80.w64.b0", !6617, i64 0}
!6617 = !{!"0x93c59f80.w128.b0", !6618, i64 0}
!6618 = !{!"0x93c59f80.w256.b0", !6619, i64 0}
!6619 = !{!"0x93c59f80.w512.b0", !6620, i64 0}
!6620 = !{!"0x93c59f80.w1024.b0", !6621, i64 0}
!6621 = !{!"int64", !6622, i64 0}
!6622 = !{!"0x93c59f80", !8, i64 0}
!6623 = !{!6624, !6624, i64 0}
!6624 = !{!"0x93c59f80.w1.b1", !6611, i64 0}
!6625 = !{!6626, !6626, i64 0}
!6626 = !{!"0x93c59f80.w1.b2", !6627, i64 0}
!6627 = !{!"0x93c59f80.w2.b2", !6612, i64 0}
!6628 = !{!6629, !6629, i64 0}
!6629 = !{!"0x93c59f80.w1.b3", !6627, i64 0}
!6630 = !{!6631, !6631, i64 0}
!6631 = !{!"0x93c59f80.w1.b4", !6632, i64 0}
!6632 = !{!"0x93c59f80.w2.b4", !6633, i64 0}
!6633 = !{!"0x93c59f80.w4.b4", !6613, i64 0}
!6634 = !{!6635, !6635, i64 0}
!6635 = !{!"0x93c59f80.w1.b5", !6632, i64 0}
!6636 = !{!6637, !6637, i64 0}
!6637 = !{!"0x93c5a180.w1.b0", !6638, i64 0}
!6638 = !{!"0x93c5a180.w2.b0", !6639, i64 0}
!6639 = !{!"0x93c5a180.w4.b0", !6640, i64 0}
!6640 = !{!"0x93c5a180.w8.b0", !6641, i64 0}
!6641 = !{!"0x93c5a180.w16.b0", !6642, i64 0}
!6642 = !{!"0x93c5a180.w32.b0", !6643, i64 0}
!6643 = !{!"0x93c5a180.w64.b0", !6644, i64 0}
!6644 = !{!"0x93c5a180.w128.b0", !6645, i64 0}
!6645 = !{!"0x93c5a180.w256.b0", !6646, i64 0}
!6646 = !{!"0x93c5a180.w512.b0", !6647, i64 0}
!6647 = !{!"0x93c5a180.w1024.b0", !6648, i64 0}
!6648 = !{!"int64", !6649, i64 0}
!6649 = !{!"0x93c5a180", !8, i64 0}
!6650 = !{!6651, !6651, i64 0}
!6651 = !{!"0x93c5a180.w1.b1", !6638, i64 0}
!6652 = !{!6653, !6653, i64 0}
!6653 = !{!"0x93c5a180.w1.b2", !6654, i64 0}
!6654 = !{!"0x93c5a180.w2.b2", !6639, i64 0}
!6655 = !{!6656, !6656, i64 0}
!6656 = !{!"0x93c5a180.w1.b3", !6654, i64 0}
!6657 = !{!6658, !6658, i64 0}
!6658 = !{!"0x93c5a180.w1.b4", !6659, i64 0}
!6659 = !{!"0x93c5a180.w2.b4", !6660, i64 0}
!6660 = !{!"0x93c5a180.w4.b4", !6640, i64 0}
!6661 = !{!6662, !6662, i64 0}
!6662 = !{!"0x93c5a180.w1.b5", !6659, i64 0}
!6663 = !{!6664, !6664, i64 0}
!6664 = !{!"0x93c5c020.w1.b0", !6665, i64 0}
!6665 = !{!"0x93c5c020.w2.b0", !6666, i64 0}
!6666 = !{!"0x93c5c020.w4.b0", !6667, i64 0}
!6667 = !{!"0x93c5c020.w8.b0", !6668, i64 0}
!6668 = !{!"0x93c5c020.w16.b0", !6669, i64 0}
!6669 = !{!"0x93c5c020.w32.b0", !6670, i64 0}
!6670 = !{!"0x93c5c020.w64.b0", !6671, i64 0}
!6671 = !{!"0x93c5c020.w128.b0", !6672, i64 0}
!6672 = !{!"0x93c5c020.w256.b0", !6673, i64 0}
!6673 = !{!"0x93c5c020.w512.b0", !6674, i64 0}
!6674 = !{!"0x93c5c020.w1024.b0", !6675, i64 0}
!6675 = !{!"int64", !6676, i64 0}
!6676 = !{!"0x93c5c020", !8, i64 0}
!6677 = !{!6678, !6678, i64 0}
!6678 = !{!"0x93c5c020.w1.b1", !6665, i64 0}
!6679 = !{!6680, !6680, i64 0}
!6680 = !{!"0x93c5c020.w1.b2", !6681, i64 0}
!6681 = !{!"0x93c5c020.w2.b2", !6666, i64 0}
!6682 = !{!6683, !6683, i64 0}
!6683 = !{!"0x93c5c020.w1.b3", !6681, i64 0}
!6684 = !{!6685, !6685, i64 0}
!6685 = !{!"0x93c5c020.w1.b4", !6686, i64 0}
!6686 = !{!"0x93c5c020.w2.b4", !6687, i64 0}
!6687 = !{!"0x93c5c020.w4.b4", !6667, i64 0}
!6688 = !{!6689, !6689, i64 0}
!6689 = !{!"0x93c5a480.w1.b0", !6690, i64 0}
!6690 = !{!"0x93c5a480.w2.b0", !6691, i64 0}
!6691 = !{!"0x93c5a480.w4.b0", !6692, i64 0}
!6692 = !{!"0x93c5a480.w8.b0", !6693, i64 0}
!6693 = !{!"0x93c5a480.w16.b0", !6694, i64 0}
!6694 = !{!"0x93c5a480.w32.b0", !6695, i64 0}
!6695 = !{!"0x93c5a480.w64.b0", !6696, i64 0}
!6696 = !{!"0x93c5a480.w128.b0", !6697, i64 0}
!6697 = !{!"0x93c5a480.w256.b0", !6698, i64 0}
!6698 = !{!"0x93c5a480.w512.b0", !6699, i64 0}
!6699 = !{!"0x93c5a480.w1024.b0", !6700, i64 0}
!6700 = !{!"int64", !6701, i64 0}
!6701 = !{!"0x93c5a480", !8, i64 0}
!6702 = !{!6703, !6703, i64 0}
!6703 = !{!"0x93c5a480.w1.b1", !6690, i64 0}
!6704 = !{!6705, !6705, i64 0}
!6705 = !{!"0x93c5a480.w1.b2", !6706, i64 0}
!6706 = !{!"0x93c5a480.w2.b2", !6691, i64 0}
!6707 = !{!6708, !6708, i64 0}
!6708 = !{!"0x93c5a480.w1.b3", !6706, i64 0}
!6709 = !{!6710, !6710, i64 0}
!6710 = !{!"0x93c5a480.w1.b4", !6711, i64 0}
!6711 = !{!"0x93c5a480.w2.b4", !6712, i64 0}
!6712 = !{!"0x93c5a480.w4.b4", !6692, i64 0}
!6713 = !{!6714, !6714, i64 0}
!6714 = !{!"0x93c5e5e0.w1.b0", !6715, i64 0}
!6715 = !{!"0x93c5e5e0.w2.b0", !6716, i64 0}
!6716 = !{!"0x93c5e5e0.w4.b0", !6717, i64 0}
!6717 = !{!"0x93c5e5e0.w8.b0", !6718, i64 0}
!6718 = !{!"0x93c5e5e0.w16.b0", !6719, i64 0}
!6719 = !{!"0x93c5e5e0.w32.b0", !6720, i64 0}
!6720 = !{!"0x93c5e5e0.w64.b0", !6721, i64 0}
!6721 = !{!"0x93c5e5e0.w128.b0", !6722, i64 0}
!6722 = !{!"0x93c5e5e0.w256.b0", !6723, i64 0}
!6723 = !{!"0x93c5e5e0.w512.b0", !6724, i64 0}
!6724 = !{!"0x93c5e5e0.w1024.b0", !6725, i64 0}
!6725 = !{!"int64", !6726, i64 0}
!6726 = !{!"0x93c5e5e0", !8, i64 0}
!6727 = !{!6728, !6728, i64 0}
!6728 = !{!"0x93c5e5e0.w1.b1", !6715, i64 0}
!6729 = !{!6730, !6730, i64 0}
!6730 = !{!"0x93c5e5e0.w1.b2", !6731, i64 0}
!6731 = !{!"0x93c5e5e0.w2.b2", !6716, i64 0}
!6732 = !{!6733, !6733, i64 0}
!6733 = !{!"0x93c5e5e0.w1.b3", !6731, i64 0}
!6734 = !{!6735, !6735, i64 0}
!6735 = !{!"0x93c5e5e0.w1.b4", !6736, i64 0}
!6736 = !{!"0x93c5e5e0.w2.b4", !6737, i64 0}
!6737 = !{!"0x93c5e5e0.w4.b4", !6717, i64 0}
!6738 = !{!6739, !6739, i64 0}
!6739 = !{!"0x93c5f4f0.w1.b0", !6740, i64 0}
!6740 = !{!"0x93c5f4f0.w2.b0", !6741, i64 0}
!6741 = !{!"0x93c5f4f0.w4.b0", !6742, i64 0}
!6742 = !{!"0x93c5f4f0.w8.b0", !6743, i64 0}
!6743 = !{!"0x93c5f4f0.w16.b0", !6744, i64 0}
!6744 = !{!"0x93c5f4f0.w32.b0", !6745, i64 0}
!6745 = !{!"0x93c5f4f0.w64.b0", !6746, i64 0}
!6746 = !{!"0x93c5f4f0.w128.b0", !6747, i64 0}
!6747 = !{!"0x93c5f4f0.w256.b0", !6748, i64 0}
!6748 = !{!"0x93c5f4f0.w512.b0", !6749, i64 0}
!6749 = !{!"0x93c5f4f0.w1024.b0", !6750, i64 0}
!6750 = !{!"int64", !6751, i64 0}
!6751 = !{!"0x93c5f4f0", !8, i64 0}
!6752 = !{!6753, !6753, i64 0}
!6753 = !{!"0x93c5f4f0.w1.b1", !6740, i64 0}
!6754 = !{!6755, !6755, i64 0}
!6755 = !{!"0x93c5f4f0.w1.b2", !6756, i64 0}
!6756 = !{!"0x93c5f4f0.w2.b2", !6741, i64 0}
!6757 = !{!6758, !6758, i64 0}
!6758 = !{!"0x93c5f4f0.w1.b3", !6756, i64 0}
!6759 = !{!6760, !6760, i64 0}
!6760 = !{!"0x93c5f4f0.w1.b4", !6761, i64 0}
!6761 = !{!"0x93c5f4f0.w2.b4", !6762, i64 0}
!6762 = !{!"0x93c5f4f0.w4.b4", !6742, i64 0}
!6763 = !{!6764, !6764, i64 0}
!6764 = !{!"float32", !6765, i64 0}
!6765 = !{!"0xa8bfc9c0", !8, i64 0}
!6766 = !{!6767, !6767, i64 0}
!6767 = !{!"float32", !6768, i64 0}
!6768 = !{!"0xaa5bef70", !8, i64 0}
!6769 = !{!6770, !6770, i64 0}
!6770 = !{!"float32", !6771, i64 0}
!6771 = !{!"0xaa5bf3b0", !8, i64 0}
!6772 = !{!6773, !6773, i64 0}
!6773 = !{!"0xa8bfd370.w16.b0", !6774, i64 0}
!6774 = !{!"0xa8bfd370.w32.b0", !6775, i64 0}
!6775 = !{!"0xa8bfd370.w64.b0", !6776, i64 0}
!6776 = !{!"0xa8bfd370.w128.b0", !6777, i64 0}
!6777 = !{!"0xa8bfd370.w256.b0", !6778, i64 0}
!6778 = !{!"0xa8bfd370.w512.b0", !6779, i64 0}
!6779 = !{!"0xa8bfd370.w1024.b0", !6780, i64 0}
!6780 = !{!"float32", !6781, i64 0}
!6781 = !{!"0xa8bfd370", !8, i64 0}
!6782 = !{!6783, !6783, i64 0}
!6783 = !{!"0xa8bfd370.w16.b16", !6774, i64 0}
!6784 = !{!6785, !6785, i64 0}
!6785 = !{!"0xa8bfd370.w16.b32", !6786, i64 0}
!6786 = !{!"0xa8bfd370.w32.b32", !6775, i64 0}
!6787 = !{!6788, !6788, i64 0}
!6788 = !{!"0xa8bfd370.w16.b48", !6786, i64 0}
!6789 = !{!6790, !6790, i64 0}
!6790 = !{!"float32", !6791, i64 0}
!6791 = !{!"0xa8bfc930", !8, i64 0}
!6792 = !{!6793, !6793, i64 0}
!6793 = !{!"float32", !6794, i64 0}
!6794 = !{!"0xa8bfd2d0", !8, i64 0}
!6795 = !{!6796, !6796, i64 0}
!6796 = !{!"float32", !6797, i64 0}
!6797 = !{!"0xaa5bf320", !8, i64 0}
!6798 = !{!6799, !6799, i64 0}
!6799 = !{!"0x93c57af0.w1.b0", !6800, i64 0}
!6800 = !{!"0x93c57af0.w2.b0", !6801, i64 0}
!6801 = !{!"0x93c57af0.w4.b0", !6802, i64 0}
!6802 = !{!"0x93c57af0.w8.b0", !6803, i64 0}
!6803 = !{!"0x93c57af0.w16.b0", !6804, i64 0}
!6804 = !{!"0x93c57af0.w32.b0", !6805, i64 0}
!6805 = !{!"0x93c57af0.w64.b0", !6806, i64 0}
!6806 = !{!"0x93c57af0.w128.b0", !6807, i64 0}
!6807 = !{!"0x93c57af0.w256.b0", !6808, i64 0}
!6808 = !{!"0x93c57af0.w512.b0", !6809, i64 0}
!6809 = !{!"0x93c57af0.w1024.b0", !6810, i64 0}
!6810 = !{!"int32", !6811, i64 0}
!6811 = !{!"0x93c57af0", !8, i64 0}
!6812 = !{!6813, !6813, i64 0}
!6813 = !{!"0x93c57af0.w1.b2", !6814, i64 0}
!6814 = !{!"0x93c57af0.w2.b2", !6801, i64 0}
!6815 = !{!6816, !6816, i64 0}
!6816 = !{!"0x93c57af0.w1.b3", !6814, i64 0}
!6817 = !{!6818, !6818, i64 0}
!6818 = !{!"0x93c57af0.w1.b1", !6800, i64 0}
!6819 = !{!6820, !6820, i64 0}
!6820 = !{!"0x908b71e0.w1.b0", !6821, i64 0}
!6821 = !{!"0x908b71e0.w2.b0", !6822, i64 0}
!6822 = !{!"0x908b71e0.w4.b0", !6823, i64 0}
!6823 = !{!"0x908b71e0.w8.b0", !6824, i64 0}
!6824 = !{!"0x908b71e0.w16.b0", !6825, i64 0}
!6825 = !{!"0x908b71e0.w32.b0", !6826, i64 0}
!6826 = !{!"0x908b71e0.w64.b0", !6827, i64 0}
!6827 = !{!"0x908b71e0.w128.b0", !6828, i64 0}
!6828 = !{!"0x908b71e0.w256.b0", !6829, i64 0}
!6829 = !{!"0x908b71e0.w512.b0", !6830, i64 0}
!6830 = !{!"0x908b71e0.w1024.b0", !6831, i64 0}
!6831 = !{!"int64", !6832, i64 0}
!6832 = !{!"0x908b71e0", !8, i64 0}
!6833 = !{!6834, !6834, i64 0}
!6834 = !{!"0x908b71e0.w1.b1", !6821, i64 0}
!6835 = !{!6836, !6836, i64 0}
!6836 = !{!"0x908b71e0.w1.b2", !6837, i64 0}
!6837 = !{!"0x908b71e0.w2.b2", !6822, i64 0}
!6838 = !{!6839, !6839, i64 0}
!6839 = !{!"0x908b71e0.w1.b3", !6837, i64 0}
!6840 = !{!6841, !6841, i64 0}
!6841 = !{!"0x908b71e0.w1.b4", !6842, i64 0}
!6842 = !{!"0x908b71e0.w2.b4", !6843, i64 0}
!6843 = !{!"0x908b71e0.w4.b4", !6823, i64 0}
!6844 = !{!6845, !6845, i64 0}
!6845 = !{!"0x908b73e0.w1.b0", !6846, i64 0}
!6846 = !{!"0x908b73e0.w2.b0", !6847, i64 0}
!6847 = !{!"0x908b73e0.w4.b0", !6848, i64 0}
!6848 = !{!"0x908b73e0.w8.b0", !6849, i64 0}
!6849 = !{!"0x908b73e0.w16.b0", !6850, i64 0}
!6850 = !{!"0x908b73e0.w32.b0", !6851, i64 0}
!6851 = !{!"0x908b73e0.w64.b0", !6852, i64 0}
!6852 = !{!"0x908b73e0.w128.b0", !6853, i64 0}
!6853 = !{!"0x908b73e0.w256.b0", !6854, i64 0}
!6854 = !{!"0x908b73e0.w512.b0", !6855, i64 0}
!6855 = !{!"0x908b73e0.w1024.b0", !6856, i64 0}
!6856 = !{!"int64", !6857, i64 0}
!6857 = !{!"0x908b73e0", !8, i64 0}
!6858 = !{!6859, !6859, i64 0}
!6859 = !{!"0x908b73e0.w1.b1", !6846, i64 0}
!6860 = !{!6861, !6861, i64 0}
!6861 = !{!"0x908b73e0.w1.b2", !6862, i64 0}
!6862 = !{!"0x908b73e0.w2.b2", !6847, i64 0}
!6863 = !{!6864, !6864, i64 0}
!6864 = !{!"0x908b73e0.w1.b3", !6862, i64 0}
!6865 = !{!6866, !6866, i64 0}
!6866 = !{!"0x908b73e0.w1.b4", !6867, i64 0}
!6867 = !{!"0x908b73e0.w2.b4", !6868, i64 0}
!6868 = !{!"0x908b73e0.w4.b4", !6848, i64 0}
!6869 = !{!6870, !6870, i64 0}
!6870 = !{!"0x908b9720.w1.b0", !6871, i64 0}
!6871 = !{!"0x908b9720.w2.b0", !6872, i64 0}
!6872 = !{!"0x908b9720.w4.b0", !6873, i64 0}
!6873 = !{!"0x908b9720.w8.b0", !6874, i64 0}
!6874 = !{!"0x908b9720.w16.b0", !6875, i64 0}
!6875 = !{!"0x908b9720.w32.b0", !6876, i64 0}
!6876 = !{!"0x908b9720.w64.b0", !6877, i64 0}
!6877 = !{!"0x908b9720.w128.b0", !6878, i64 0}
!6878 = !{!"0x908b9720.w256.b0", !6879, i64 0}
!6879 = !{!"0x908b9720.w512.b0", !6880, i64 0}
!6880 = !{!"0x908b9720.w1024.b0", !6881, i64 0}
!6881 = !{!"int64", !6882, i64 0}
!6882 = !{!"0x908b9720", !8, i64 0}
!6883 = !{!6884, !6884, i64 0}
!6884 = !{!"0x908b9720.w1.b1", !6871, i64 0}
!6885 = !{!6886, !6886, i64 0}
!6886 = !{!"0x908b9720.w1.b2", !6887, i64 0}
!6887 = !{!"0x908b9720.w2.b2", !6872, i64 0}
!6888 = !{!6889, !6889, i64 0}
!6889 = !{!"0x908b9720.w1.b3", !6887, i64 0}
!6890 = !{!6891, !6891, i64 0}
!6891 = !{!"0x908b9720.w1.b4", !6892, i64 0}
!6892 = !{!"0x908b9720.w2.b4", !6893, i64 0}
!6893 = !{!"0x908b9720.w4.b4", !6873, i64 0}
!6894 = !{!6895, !6895, i64 0}
!6895 = !{!"0x908b9720.w1.b5", !6892, i64 0}
!6896 = !{!6897, !6897, i64 0}
!6897 = !{!"0x908b9920.w1.b0", !6898, i64 0}
!6898 = !{!"0x908b9920.w2.b0", !6899, i64 0}
!6899 = !{!"0x908b9920.w4.b0", !6900, i64 0}
!6900 = !{!"0x908b9920.w8.b0", !6901, i64 0}
!6901 = !{!"0x908b9920.w16.b0", !6902, i64 0}
!6902 = !{!"0x908b9920.w32.b0", !6903, i64 0}
!6903 = !{!"0x908b9920.w64.b0", !6904, i64 0}
!6904 = !{!"0x908b9920.w128.b0", !6905, i64 0}
!6905 = !{!"0x908b9920.w256.b0", !6906, i64 0}
!6906 = !{!"0x908b9920.w512.b0", !6907, i64 0}
!6907 = !{!"0x908b9920.w1024.b0", !6908, i64 0}
!6908 = !{!"int64", !6909, i64 0}
!6909 = !{!"0x908b9920", !8, i64 0}
!6910 = !{!6911, !6911, i64 0}
!6911 = !{!"0x908b9920.w1.b1", !6898, i64 0}
!6912 = !{!6913, !6913, i64 0}
!6913 = !{!"0x908b9920.w1.b2", !6914, i64 0}
!6914 = !{!"0x908b9920.w2.b2", !6899, i64 0}
!6915 = !{!6916, !6916, i64 0}
!6916 = !{!"0x908b9920.w1.b3", !6914, i64 0}
!6917 = !{!6918, !6918, i64 0}
!6918 = !{!"0x908b9920.w1.b4", !6919, i64 0}
!6919 = !{!"0x908b9920.w2.b4", !6920, i64 0}
!6920 = !{!"0x908b9920.w4.b4", !6900, i64 0}
!6921 = !{!6922, !6922, i64 0}
!6922 = !{!"0x908b9920.w1.b5", !6919, i64 0}
!6923 = !{!6924, !6924, i64 0}
!6924 = !{!"0x908bb7c0.w1.b0", !6925, i64 0}
!6925 = !{!"0x908bb7c0.w2.b0", !6926, i64 0}
!6926 = !{!"0x908bb7c0.w4.b0", !6927, i64 0}
!6927 = !{!"0x908bb7c0.w8.b0", !6928, i64 0}
!6928 = !{!"0x908bb7c0.w16.b0", !6929, i64 0}
!6929 = !{!"0x908bb7c0.w32.b0", !6930, i64 0}
!6930 = !{!"0x908bb7c0.w64.b0", !6931, i64 0}
!6931 = !{!"0x908bb7c0.w128.b0", !6932, i64 0}
!6932 = !{!"0x908bb7c0.w256.b0", !6933, i64 0}
!6933 = !{!"0x908bb7c0.w512.b0", !6934, i64 0}
!6934 = !{!"0x908bb7c0.w1024.b0", !6935, i64 0}
!6935 = !{!"int64", !6936, i64 0}
!6936 = !{!"0x908bb7c0", !8, i64 0}
!6937 = !{!6938, !6938, i64 0}
!6938 = !{!"0x908bb7c0.w1.b1", !6925, i64 0}
!6939 = !{!6940, !6940, i64 0}
!6940 = !{!"0x908bb7c0.w1.b2", !6941, i64 0}
!6941 = !{!"0x908bb7c0.w2.b2", !6926, i64 0}
!6942 = !{!6943, !6943, i64 0}
!6943 = !{!"0x908bb7c0.w1.b3", !6941, i64 0}
!6944 = !{!6945, !6945, i64 0}
!6945 = !{!"0x908bb7c0.w1.b4", !6946, i64 0}
!6946 = !{!"0x908bb7c0.w2.b4", !6947, i64 0}
!6947 = !{!"0x908bb7c0.w4.b4", !6927, i64 0}
!6948 = !{!6949, !6949, i64 0}
!6949 = !{!"0x908b9c20.w1.b0", !6950, i64 0}
!6950 = !{!"0x908b9c20.w2.b0", !6951, i64 0}
!6951 = !{!"0x908b9c20.w4.b0", !6952, i64 0}
!6952 = !{!"0x908b9c20.w8.b0", !6953, i64 0}
!6953 = !{!"0x908b9c20.w16.b0", !6954, i64 0}
!6954 = !{!"0x908b9c20.w32.b0", !6955, i64 0}
!6955 = !{!"0x908b9c20.w64.b0", !6956, i64 0}
!6956 = !{!"0x908b9c20.w128.b0", !6957, i64 0}
!6957 = !{!"0x908b9c20.w256.b0", !6958, i64 0}
!6958 = !{!"0x908b9c20.w512.b0", !6959, i64 0}
!6959 = !{!"0x908b9c20.w1024.b0", !6960, i64 0}
!6960 = !{!"int64", !6961, i64 0}
!6961 = !{!"0x908b9c20", !8, i64 0}
!6962 = !{!6963, !6963, i64 0}
!6963 = !{!"0x908b9c20.w1.b1", !6950, i64 0}
!6964 = !{!6965, !6965, i64 0}
!6965 = !{!"0x908b9c20.w1.b2", !6966, i64 0}
!6966 = !{!"0x908b9c20.w2.b2", !6951, i64 0}
!6967 = !{!6968, !6968, i64 0}
!6968 = !{!"0x908b9c20.w1.b3", !6966, i64 0}
!6969 = !{!6970, !6970, i64 0}
!6970 = !{!"0x908b9c20.w1.b4", !6971, i64 0}
!6971 = !{!"0x908b9c20.w2.b4", !6972, i64 0}
!6972 = !{!"0x908b9c20.w4.b4", !6952, i64 0}
!6973 = !{!6974, !6974, i64 0}
!6974 = !{!"0x908bdd80.w1.b0", !6975, i64 0}
!6975 = !{!"0x908bdd80.w2.b0", !6976, i64 0}
!6976 = !{!"0x908bdd80.w4.b0", !6977, i64 0}
!6977 = !{!"0x908bdd80.w8.b0", !6978, i64 0}
!6978 = !{!"0x908bdd80.w16.b0", !6979, i64 0}
!6979 = !{!"0x908bdd80.w32.b0", !6980, i64 0}
!6980 = !{!"0x908bdd80.w64.b0", !6981, i64 0}
!6981 = !{!"0x908bdd80.w128.b0", !6982, i64 0}
!6982 = !{!"0x908bdd80.w256.b0", !6983, i64 0}
!6983 = !{!"0x908bdd80.w512.b0", !6984, i64 0}
!6984 = !{!"0x908bdd80.w1024.b0", !6985, i64 0}
!6985 = !{!"int64", !6986, i64 0}
!6986 = !{!"0x908bdd80", !8, i64 0}
!6987 = !{!6988, !6988, i64 0}
!6988 = !{!"0x908bdd80.w1.b1", !6975, i64 0}
!6989 = !{!6990, !6990, i64 0}
!6990 = !{!"0x908bdd80.w1.b2", !6991, i64 0}
!6991 = !{!"0x908bdd80.w2.b2", !6976, i64 0}
!6992 = !{!6993, !6993, i64 0}
!6993 = !{!"0x908bdd80.w1.b3", !6991, i64 0}
!6994 = !{!6995, !6995, i64 0}
!6995 = !{!"0x908bdd80.w1.b4", !6996, i64 0}
!6996 = !{!"0x908bdd80.w2.b4", !6997, i64 0}
!6997 = !{!"0x908bdd80.w4.b4", !6977, i64 0}
!6998 = !{!6999, !6999, i64 0}
!6999 = !{!"0x908bec90.w1.b0", !7000, i64 0}
!7000 = !{!"0x908bec90.w2.b0", !7001, i64 0}
!7001 = !{!"0x908bec90.w4.b0", !7002, i64 0}
!7002 = !{!"0x908bec90.w8.b0", !7003, i64 0}
!7003 = !{!"0x908bec90.w16.b0", !7004, i64 0}
!7004 = !{!"0x908bec90.w32.b0", !7005, i64 0}
!7005 = !{!"0x908bec90.w64.b0", !7006, i64 0}
!7006 = !{!"0x908bec90.w128.b0", !7007, i64 0}
!7007 = !{!"0x908bec90.w256.b0", !7008, i64 0}
!7008 = !{!"0x908bec90.w512.b0", !7009, i64 0}
!7009 = !{!"0x908bec90.w1024.b0", !7010, i64 0}
!7010 = !{!"int64", !7011, i64 0}
!7011 = !{!"0x908bec90", !8, i64 0}
!7012 = !{!7013, !7013, i64 0}
!7013 = !{!"0x908bec90.w1.b1", !7000, i64 0}
!7014 = !{!7015, !7015, i64 0}
!7015 = !{!"0x908bec90.w1.b2", !7016, i64 0}
!7016 = !{!"0x908bec90.w2.b2", !7001, i64 0}
!7017 = !{!7018, !7018, i64 0}
!7018 = !{!"0x908bec90.w1.b3", !7016, i64 0}
!7019 = !{!7020, !7020, i64 0}
!7020 = !{!"0x908bec90.w1.b4", !7021, i64 0}
!7021 = !{!"0x908bec90.w2.b4", !7022, i64 0}
!7022 = !{!"0x908bec90.w4.b4", !7002, i64 0}
!7023 = !{!7024, !7024, i64 0}
!7024 = !{!"float32", !7025, i64 0}
!7025 = !{!"0x9d0a8750", !8, i64 0}
!7026 = !{!7027, !7027, i64 0}
!7027 = !{!"float32", !7028, i64 0}
!7028 = !{!"0x9f12f310", !8, i64 0}
!7029 = !{!7030, !7030, i64 0}
!7030 = !{!"float32", !7031, i64 0}
!7031 = !{!"0x99d11d80", !8, i64 0}
!7032 = !{!7033, !7033, i64 0}
!7033 = !{!"float32", !7034, i64 0}
!7034 = !{!"0x99cfbe70", !8, i64 0}
!7035 = !{!7036, !7036, i64 0}
!7036 = !{!"float32", !7037, i64 0}
!7037 = !{!"0x936891b0", !8, i64 0}
!7038 = !{!7039, !7039, i64 0}
!7039 = !{!"0x908b7290.w1.b0", !7040, i64 0}
!7040 = !{!"0x908b7290.w2.b0", !7041, i64 0}
!7041 = !{!"0x908b7290.w4.b0", !7042, i64 0}
!7042 = !{!"0x908b7290.w8.b0", !7043, i64 0}
!7043 = !{!"0x908b7290.w16.b0", !7044, i64 0}
!7044 = !{!"0x908b7290.w32.b0", !7045, i64 0}
!7045 = !{!"0x908b7290.w64.b0", !7046, i64 0}
!7046 = !{!"0x908b7290.w128.b0", !7047, i64 0}
!7047 = !{!"0x908b7290.w256.b0", !7048, i64 0}
!7048 = !{!"0x908b7290.w512.b0", !7049, i64 0}
!7049 = !{!"0x908b7290.w1024.b0", !7050, i64 0}
!7050 = !{!"int32", !7051, i64 0}
!7051 = !{!"0x908b7290", !8, i64 0}
!7052 = !{!7053, !7053, i64 0}
!7053 = !{!"0x908b7290.w1.b2", !7054, i64 0}
!7054 = !{!"0x908b7290.w2.b2", !7041, i64 0}
!7055 = !{!7056, !7056, i64 0}
!7056 = !{!"0x908b7290.w1.b3", !7054, i64 0}
!7057 = !{!7058, !7058, i64 0}
!7058 = !{!"0x908b7290.w1.b1", !7040, i64 0}
!7059 = !{!7060, !7060, i64 0}
!7060 = !{!"0x908c2870.w1.b0", !7061, i64 0}
!7061 = !{!"0x908c2870.w2.b0", !7062, i64 0}
!7062 = !{!"0x908c2870.w4.b0", !7063, i64 0}
!7063 = !{!"0x908c2870.w8.b0", !7064, i64 0}
!7064 = !{!"0x908c2870.w16.b0", !7065, i64 0}
!7065 = !{!"0x908c2870.w32.b0", !7066, i64 0}
!7066 = !{!"0x908c2870.w64.b0", !7067, i64 0}
!7067 = !{!"0x908c2870.w128.b0", !7068, i64 0}
!7068 = !{!"0x908c2870.w256.b0", !7069, i64 0}
!7069 = !{!"0x908c2870.w512.b0", !7070, i64 0}
!7070 = !{!"0x908c2870.w1024.b0", !7071, i64 0}
!7071 = !{!"int64", !7072, i64 0}
!7072 = !{!"0x908c2870", !8, i64 0}
!7073 = !{!7074, !7074, i64 0}
!7074 = !{!"0x908c2870.w1.b1", !7061, i64 0}
!7075 = !{!7076, !7076, i64 0}
!7076 = !{!"0x908c2870.w1.b2", !7077, i64 0}
!7077 = !{!"0x908c2870.w2.b2", !7062, i64 0}
!7078 = !{!7079, !7079, i64 0}
!7079 = !{!"0x908c2870.w1.b3", !7077, i64 0}
!7080 = !{!7081, !7081, i64 0}
!7081 = !{!"0x908c2870.w1.b4", !7082, i64 0}
!7082 = !{!"0x908c2870.w2.b4", !7083, i64 0}
!7083 = !{!"0x908c2870.w4.b4", !7063, i64 0}
!7084 = !{!7085, !7085, i64 0}
!7085 = !{!"0x908c2aa0.w1.b0", !7086, i64 0}
!7086 = !{!"0x908c2aa0.w2.b0", !7087, i64 0}
!7087 = !{!"0x908c2aa0.w4.b0", !7088, i64 0}
!7088 = !{!"0x908c2aa0.w8.b0", !7089, i64 0}
!7089 = !{!"0x908c2aa0.w16.b0", !7090, i64 0}
!7090 = !{!"0x908c2aa0.w32.b0", !7091, i64 0}
!7091 = !{!"0x908c2aa0.w64.b0", !7092, i64 0}
!7092 = !{!"0x908c2aa0.w128.b0", !7093, i64 0}
!7093 = !{!"0x908c2aa0.w256.b0", !7094, i64 0}
!7094 = !{!"0x908c2aa0.w512.b0", !7095, i64 0}
!7095 = !{!"0x908c2aa0.w1024.b0", !7096, i64 0}
!7096 = !{!"int64", !7097, i64 0}
!7097 = !{!"0x908c2aa0", !8, i64 0}
!7098 = !{!7099, !7099, i64 0}
!7099 = !{!"0x908c2aa0.w1.b1", !7086, i64 0}
!7100 = !{!7101, !7101, i64 0}
!7101 = !{!"0x908c2aa0.w1.b2", !7102, i64 0}
!7102 = !{!"0x908c2aa0.w2.b2", !7087, i64 0}
!7103 = !{!7104, !7104, i64 0}
!7104 = !{!"0x908c2aa0.w1.b3", !7102, i64 0}
!7105 = !{!7106, !7106, i64 0}
!7106 = !{!"0x908c2aa0.w1.b4", !7107, i64 0}
!7107 = !{!"0x908c2aa0.w2.b4", !7108, i64 0}
!7108 = !{!"0x908c2aa0.w4.b4", !7088, i64 0}
!7109 = !{!7110, !7110, i64 0}
!7110 = !{!"0x908c4de0.w1.b0", !7111, i64 0}
!7111 = !{!"0x908c4de0.w2.b0", !7112, i64 0}
!7112 = !{!"0x908c4de0.w4.b0", !7113, i64 0}
!7113 = !{!"0x908c4de0.w8.b0", !7114, i64 0}
!7114 = !{!"0x908c4de0.w16.b0", !7115, i64 0}
!7115 = !{!"0x908c4de0.w32.b0", !7116, i64 0}
!7116 = !{!"0x908c4de0.w64.b0", !7117, i64 0}
!7117 = !{!"0x908c4de0.w128.b0", !7118, i64 0}
!7118 = !{!"0x908c4de0.w256.b0", !7119, i64 0}
!7119 = !{!"0x908c4de0.w512.b0", !7120, i64 0}
!7120 = !{!"0x908c4de0.w1024.b0", !7121, i64 0}
!7121 = !{!"int64", !7122, i64 0}
!7122 = !{!"0x908c4de0", !8, i64 0}
!7123 = !{!7124, !7124, i64 0}
!7124 = !{!"0x908c4de0.w1.b1", !7111, i64 0}
!7125 = !{!7126, !7126, i64 0}
!7126 = !{!"0x908c4de0.w1.b2", !7127, i64 0}
!7127 = !{!"0x908c4de0.w2.b2", !7112, i64 0}
!7128 = !{!7129, !7129, i64 0}
!7129 = !{!"0x908c4de0.w1.b3", !7127, i64 0}
!7130 = !{!7131, !7131, i64 0}
!7131 = !{!"0x908c4de0.w1.b4", !7132, i64 0}
!7132 = !{!"0x908c4de0.w2.b4", !7133, i64 0}
!7133 = !{!"0x908c4de0.w4.b4", !7113, i64 0}
!7134 = !{!7135, !7135, i64 0}
!7135 = !{!"0x908c4de0.w1.b5", !7132, i64 0}
!7136 = !{!7137, !7137, i64 0}
!7137 = !{!"0x908c4fe0.w1.b0", !7138, i64 0}
!7138 = !{!"0x908c4fe0.w2.b0", !7139, i64 0}
!7139 = !{!"0x908c4fe0.w4.b0", !7140, i64 0}
!7140 = !{!"0x908c4fe0.w8.b0", !7141, i64 0}
!7141 = !{!"0x908c4fe0.w16.b0", !7142, i64 0}
!7142 = !{!"0x908c4fe0.w32.b0", !7143, i64 0}
!7143 = !{!"0x908c4fe0.w64.b0", !7144, i64 0}
!7144 = !{!"0x908c4fe0.w128.b0", !7145, i64 0}
!7145 = !{!"0x908c4fe0.w256.b0", !7146, i64 0}
!7146 = !{!"0x908c4fe0.w512.b0", !7147, i64 0}
!7147 = !{!"0x908c4fe0.w1024.b0", !7148, i64 0}
!7148 = !{!"int64", !7149, i64 0}
!7149 = !{!"0x908c4fe0", !8, i64 0}
!7150 = !{!7151, !7151, i64 0}
!7151 = !{!"0x908c4fe0.w1.b1", !7138, i64 0}
!7152 = !{!7153, !7153, i64 0}
!7153 = !{!"0x908c4fe0.w1.b2", !7154, i64 0}
!7154 = !{!"0x908c4fe0.w2.b2", !7139, i64 0}
!7155 = !{!7156, !7156, i64 0}
!7156 = !{!"0x908c4fe0.w1.b3", !7154, i64 0}
!7157 = !{!7158, !7158, i64 0}
!7158 = !{!"0x908c4fe0.w1.b4", !7159, i64 0}
!7159 = !{!"0x908c4fe0.w2.b4", !7160, i64 0}
!7160 = !{!"0x908c4fe0.w4.b4", !7140, i64 0}
!7161 = !{!7162, !7162, i64 0}
!7162 = !{!"0x908c4fe0.w1.b5", !7159, i64 0}
!7163 = !{!7164, !7164, i64 0}
!7164 = !{!"0x908c6e80.w1.b0", !7165, i64 0}
!7165 = !{!"0x908c6e80.w2.b0", !7166, i64 0}
!7166 = !{!"0x908c6e80.w4.b0", !7167, i64 0}
!7167 = !{!"0x908c6e80.w8.b0", !7168, i64 0}
!7168 = !{!"0x908c6e80.w16.b0", !7169, i64 0}
!7169 = !{!"0x908c6e80.w32.b0", !7170, i64 0}
!7170 = !{!"0x908c6e80.w64.b0", !7171, i64 0}
!7171 = !{!"0x908c6e80.w128.b0", !7172, i64 0}
!7172 = !{!"0x908c6e80.w256.b0", !7173, i64 0}
!7173 = !{!"0x908c6e80.w512.b0", !7174, i64 0}
!7174 = !{!"0x908c6e80.w1024.b0", !7175, i64 0}
!7175 = !{!"int64", !7176, i64 0}
!7176 = !{!"0x908c6e80", !8, i64 0}
!7177 = !{!7178, !7178, i64 0}
!7178 = !{!"0x908c6e80.w1.b1", !7165, i64 0}
!7179 = !{!7180, !7180, i64 0}
!7180 = !{!"0x908c6e80.w1.b2", !7181, i64 0}
!7181 = !{!"0x908c6e80.w2.b2", !7166, i64 0}
!7182 = !{!7183, !7183, i64 0}
!7183 = !{!"0x908c6e80.w1.b3", !7181, i64 0}
!7184 = !{!7185, !7185, i64 0}
!7185 = !{!"0x908c6e80.w1.b4", !7186, i64 0}
!7186 = !{!"0x908c6e80.w2.b4", !7187, i64 0}
!7187 = !{!"0x908c6e80.w4.b4", !7167, i64 0}
!7188 = !{!7189, !7189, i64 0}
!7189 = !{!"0x908c52e0.w1.b0", !7190, i64 0}
!7190 = !{!"0x908c52e0.w2.b0", !7191, i64 0}
!7191 = !{!"0x908c52e0.w4.b0", !7192, i64 0}
!7192 = !{!"0x908c52e0.w8.b0", !7193, i64 0}
!7193 = !{!"0x908c52e0.w16.b0", !7194, i64 0}
!7194 = !{!"0x908c52e0.w32.b0", !7195, i64 0}
!7195 = !{!"0x908c52e0.w64.b0", !7196, i64 0}
!7196 = !{!"0x908c52e0.w128.b0", !7197, i64 0}
!7197 = !{!"0x908c52e0.w256.b0", !7198, i64 0}
!7198 = !{!"0x908c52e0.w512.b0", !7199, i64 0}
!7199 = !{!"0x908c52e0.w1024.b0", !7200, i64 0}
!7200 = !{!"int64", !7201, i64 0}
!7201 = !{!"0x908c52e0", !8, i64 0}
!7202 = !{!7203, !7203, i64 0}
!7203 = !{!"0x908c52e0.w1.b1", !7190, i64 0}
!7204 = !{!7205, !7205, i64 0}
!7205 = !{!"0x908c52e0.w1.b2", !7206, i64 0}
!7206 = !{!"0x908c52e0.w2.b2", !7191, i64 0}
!7207 = !{!7208, !7208, i64 0}
!7208 = !{!"0x908c52e0.w1.b3", !7206, i64 0}
!7209 = !{!7210, !7210, i64 0}
!7210 = !{!"0x908c52e0.w1.b4", !7211, i64 0}
!7211 = !{!"0x908c52e0.w2.b4", !7212, i64 0}
!7212 = !{!"0x908c52e0.w4.b4", !7192, i64 0}
!7213 = !{!7214, !7214, i64 0}
!7214 = !{!"0x908c9440.w1.b0", !7215, i64 0}
!7215 = !{!"0x908c9440.w2.b0", !7216, i64 0}
!7216 = !{!"0x908c9440.w4.b0", !7217, i64 0}
!7217 = !{!"0x908c9440.w8.b0", !7218, i64 0}
!7218 = !{!"0x908c9440.w16.b0", !7219, i64 0}
!7219 = !{!"0x908c9440.w32.b0", !7220, i64 0}
!7220 = !{!"0x908c9440.w64.b0", !7221, i64 0}
!7221 = !{!"0x908c9440.w128.b0", !7222, i64 0}
!7222 = !{!"0x908c9440.w256.b0", !7223, i64 0}
!7223 = !{!"0x908c9440.w512.b0", !7224, i64 0}
!7224 = !{!"0x908c9440.w1024.b0", !7225, i64 0}
!7225 = !{!"int64", !7226, i64 0}
!7226 = !{!"0x908c9440", !8, i64 0}
!7227 = !{!7228, !7228, i64 0}
!7228 = !{!"0x908c9440.w1.b1", !7215, i64 0}
!7229 = !{!7230, !7230, i64 0}
!7230 = !{!"0x908c9440.w1.b2", !7231, i64 0}
!7231 = !{!"0x908c9440.w2.b2", !7216, i64 0}
!7232 = !{!7233, !7233, i64 0}
!7233 = !{!"0x908c9440.w1.b3", !7231, i64 0}
!7234 = !{!7235, !7235, i64 0}
!7235 = !{!"0x908c9440.w1.b4", !7236, i64 0}
!7236 = !{!"0x908c9440.w2.b4", !7237, i64 0}
!7237 = !{!"0x908c9440.w4.b4", !7217, i64 0}
!7238 = !{!7239, !7239, i64 0}
!7239 = !{!"0x908ca350.w1.b0", !7240, i64 0}
!7240 = !{!"0x908ca350.w2.b0", !7241, i64 0}
!7241 = !{!"0x908ca350.w4.b0", !7242, i64 0}
!7242 = !{!"0x908ca350.w8.b0", !7243, i64 0}
!7243 = !{!"0x908ca350.w16.b0", !7244, i64 0}
!7244 = !{!"0x908ca350.w32.b0", !7245, i64 0}
!7245 = !{!"0x908ca350.w64.b0", !7246, i64 0}
!7246 = !{!"0x908ca350.w128.b0", !7247, i64 0}
!7247 = !{!"0x908ca350.w256.b0", !7248, i64 0}
!7248 = !{!"0x908ca350.w512.b0", !7249, i64 0}
!7249 = !{!"0x908ca350.w1024.b0", !7250, i64 0}
!7250 = !{!"int64", !7251, i64 0}
!7251 = !{!"0x908ca350", !8, i64 0}
!7252 = !{!7253, !7253, i64 0}
!7253 = !{!"0x908ca350.w1.b1", !7240, i64 0}
!7254 = !{!7255, !7255, i64 0}
!7255 = !{!"0x908ca350.w1.b2", !7256, i64 0}
!7256 = !{!"0x908ca350.w2.b2", !7241, i64 0}
!7257 = !{!7258, !7258, i64 0}
!7258 = !{!"0x908ca350.w1.b3", !7256, i64 0}
!7259 = !{!7260, !7260, i64 0}
!7260 = !{!"0x908ca350.w1.b4", !7261, i64 0}
!7261 = !{!"0x908ca350.w2.b4", !7262, i64 0}
!7262 = !{!"0x908ca350.w4.b4", !7242, i64 0}
!7263 = !{!7264, !7264, i64 0}
!7264 = !{!"float32", !7265, i64 0}
!7265 = !{!"0xab268ad0", !8, i64 0}
!7266 = !{!7267, !7267, i64 0}
!7267 = !{!"float32", !7268, i64 0}
!7268 = !{!"0xab2b0d30", !8, i64 0}
!7269 = !{!7270, !7270, i64 0}
!7270 = !{!"float32", !7271, i64 0}
!7271 = !{!"0x903aee40", !8, i64 0}
!7272 = !{!7273, !7273, i64 0}
!7273 = !{!"float32", !7274, i64 0}
!7274 = !{!"0xab268650", !8, i64 0}
!7275 = !{!7276, !7276, i64 0}
!7276 = !{!"float32", !7277, i64 0}
!7277 = !{!"0xab268b20", !8, i64 0}
!7278 = !{!7279, !7279, i64 0}
!7279 = !{!"0x908c2920.w1.b0", !7280, i64 0}
!7280 = !{!"0x908c2920.w2.b0", !7281, i64 0}
!7281 = !{!"0x908c2920.w4.b0", !7282, i64 0}
!7282 = !{!"0x908c2920.w8.b0", !7283, i64 0}
!7283 = !{!"0x908c2920.w16.b0", !7284, i64 0}
!7284 = !{!"0x908c2920.w32.b0", !7285, i64 0}
!7285 = !{!"0x908c2920.w64.b0", !7286, i64 0}
!7286 = !{!"0x908c2920.w128.b0", !7287, i64 0}
!7287 = !{!"0x908c2920.w256.b0", !7288, i64 0}
!7288 = !{!"0x908c2920.w512.b0", !7289, i64 0}
!7289 = !{!"0x908c2920.w1024.b0", !7290, i64 0}
!7290 = !{!"int32", !7291, i64 0}
!7291 = !{!"0x908c2920", !8, i64 0}
!7292 = !{!7293, !7293, i64 0}
!7293 = !{!"0x908c2920.w1.b2", !7294, i64 0}
!7294 = !{!"0x908c2920.w2.b2", !7281, i64 0}
!7295 = !{!7296, !7296, i64 0}
!7296 = !{!"0x908c2920.w1.b3", !7294, i64 0}
!7297 = !{!7298, !7298, i64 0}
!7298 = !{!"0x908c2920.w1.b1", !7280, i64 0}
!7299 = !{!7300, !7300, i64 0}
!7300 = !{!"0x908ce0b0.w1.b0", !7301, i64 0}
!7301 = !{!"0x908ce0b0.w2.b0", !7302, i64 0}
!7302 = !{!"0x908ce0b0.w4.b0", !7303, i64 0}
!7303 = !{!"0x908ce0b0.w8.b0", !7304, i64 0}
!7304 = !{!"0x908ce0b0.w16.b0", !7305, i64 0}
!7305 = !{!"0x908ce0b0.w32.b0", !7306, i64 0}
!7306 = !{!"0x908ce0b0.w64.b0", !7307, i64 0}
!7307 = !{!"0x908ce0b0.w128.b0", !7308, i64 0}
!7308 = !{!"0x908ce0b0.w256.b0", !7309, i64 0}
!7309 = !{!"0x908ce0b0.w512.b0", !7310, i64 0}
!7310 = !{!"0x908ce0b0.w1024.b0", !7311, i64 0}
!7311 = !{!"int64", !7312, i64 0}
!7312 = !{!"0x908ce0b0", !8, i64 0}
!7313 = !{!7314, !7314, i64 0}
!7314 = !{!"0x908ce0b0.w1.b1", !7301, i64 0}
!7315 = !{!7316, !7316, i64 0}
!7316 = !{!"0x908ce0b0.w1.b2", !7317, i64 0}
!7317 = !{!"0x908ce0b0.w2.b2", !7302, i64 0}
!7318 = !{!7319, !7319, i64 0}
!7319 = !{!"0x908ce0b0.w1.b3", !7317, i64 0}
!7320 = !{!7321, !7321, i64 0}
!7321 = !{!"0x908ce0b0.w1.b4", !7322, i64 0}
!7322 = !{!"0x908ce0b0.w2.b4", !7323, i64 0}
!7323 = !{!"0x908ce0b0.w4.b4", !7303, i64 0}
!7324 = !{!7325, !7325, i64 0}
!7325 = !{!"0x908ce280.w1.b0", !7326, i64 0}
!7326 = !{!"0x908ce280.w2.b0", !7327, i64 0}
!7327 = !{!"0x908ce280.w4.b0", !7328, i64 0}
!7328 = !{!"0x908ce280.w8.b0", !7329, i64 0}
!7329 = !{!"0x908ce280.w16.b0", !7330, i64 0}
!7330 = !{!"0x908ce280.w32.b0", !7331, i64 0}
!7331 = !{!"0x908ce280.w64.b0", !7332, i64 0}
!7332 = !{!"0x908ce280.w128.b0", !7333, i64 0}
!7333 = !{!"0x908ce280.w256.b0", !7334, i64 0}
!7334 = !{!"0x908ce280.w512.b0", !7335, i64 0}
!7335 = !{!"0x908ce280.w1024.b0", !7336, i64 0}
!7336 = !{!"int64", !7337, i64 0}
!7337 = !{!"0x908ce280", !8, i64 0}
!7338 = !{!7339, !7339, i64 0}
!7339 = !{!"0x908ce280.w1.b1", !7326, i64 0}
!7340 = !{!7341, !7341, i64 0}
!7341 = !{!"0x908ce280.w1.b2", !7342, i64 0}
!7342 = !{!"0x908ce280.w2.b2", !7327, i64 0}
!7343 = !{!7344, !7344, i64 0}
!7344 = !{!"0x908ce280.w1.b3", !7342, i64 0}
!7345 = !{!7346, !7346, i64 0}
!7346 = !{!"0x908ce280.w1.b4", !7347, i64 0}
!7347 = !{!"0x908ce280.w2.b4", !7348, i64 0}
!7348 = !{!"0x908ce280.w4.b4", !7328, i64 0}
!7349 = !{!7350, !7350, i64 0}
!7350 = !{!"0x908d05c0.w1.b0", !7351, i64 0}
!7351 = !{!"0x908d05c0.w2.b0", !7352, i64 0}
!7352 = !{!"0x908d05c0.w4.b0", !7353, i64 0}
!7353 = !{!"0x908d05c0.w8.b0", !7354, i64 0}
!7354 = !{!"0x908d05c0.w16.b0", !7355, i64 0}
!7355 = !{!"0x908d05c0.w32.b0", !7356, i64 0}
!7356 = !{!"0x908d05c0.w64.b0", !7357, i64 0}
!7357 = !{!"0x908d05c0.w128.b0", !7358, i64 0}
!7358 = !{!"0x908d05c0.w256.b0", !7359, i64 0}
!7359 = !{!"0x908d05c0.w512.b0", !7360, i64 0}
!7360 = !{!"0x908d05c0.w1024.b0", !7361, i64 0}
!7361 = !{!"int64", !7362, i64 0}
!7362 = !{!"0x908d05c0", !8, i64 0}
!7363 = !{!7364, !7364, i64 0}
!7364 = !{!"0x908d05c0.w1.b1", !7351, i64 0}
!7365 = !{!7366, !7366, i64 0}
!7366 = !{!"0x908d05c0.w1.b2", !7367, i64 0}
!7367 = !{!"0x908d05c0.w2.b2", !7352, i64 0}
!7368 = !{!7369, !7369, i64 0}
!7369 = !{!"0x908d05c0.w1.b3", !7367, i64 0}
!7370 = !{!7371, !7371, i64 0}
!7371 = !{!"0x908d05c0.w1.b4", !7372, i64 0}
!7372 = !{!"0x908d05c0.w2.b4", !7373, i64 0}
!7373 = !{!"0x908d05c0.w4.b4", !7353, i64 0}
!7374 = !{!7375, !7375, i64 0}
!7375 = !{!"0x908d05c0.w1.b5", !7372, i64 0}
!7376 = !{!7377, !7377, i64 0}
!7377 = !{!"0x908d07c0.w1.b0", !7378, i64 0}
!7378 = !{!"0x908d07c0.w2.b0", !7379, i64 0}
!7379 = !{!"0x908d07c0.w4.b0", !7380, i64 0}
!7380 = !{!"0x908d07c0.w8.b0", !7381, i64 0}
!7381 = !{!"0x908d07c0.w16.b0", !7382, i64 0}
!7382 = !{!"0x908d07c0.w32.b0", !7383, i64 0}
!7383 = !{!"0x908d07c0.w64.b0", !7384, i64 0}
!7384 = !{!"0x908d07c0.w128.b0", !7385, i64 0}
!7385 = !{!"0x908d07c0.w256.b0", !7386, i64 0}
!7386 = !{!"0x908d07c0.w512.b0", !7387, i64 0}
!7387 = !{!"0x908d07c0.w1024.b0", !7388, i64 0}
!7388 = !{!"int64", !7389, i64 0}
!7389 = !{!"0x908d07c0", !8, i64 0}
!7390 = !{!7391, !7391, i64 0}
!7391 = !{!"0x908d07c0.w1.b1", !7378, i64 0}
!7392 = !{!7393, !7393, i64 0}
!7393 = !{!"0x908d07c0.w1.b2", !7394, i64 0}
!7394 = !{!"0x908d07c0.w2.b2", !7379, i64 0}
!7395 = !{!7396, !7396, i64 0}
!7396 = !{!"0x908d07c0.w1.b3", !7394, i64 0}
!7397 = !{!7398, !7398, i64 0}
!7398 = !{!"0x908d07c0.w1.b4", !7399, i64 0}
!7399 = !{!"0x908d07c0.w2.b4", !7400, i64 0}
!7400 = !{!"0x908d07c0.w4.b4", !7380, i64 0}
!7401 = !{!7402, !7402, i64 0}
!7402 = !{!"0x908d07c0.w1.b5", !7399, i64 0}
!7403 = !{!7404, !7404, i64 0}
!7404 = !{!"0x908d2660.w1.b0", !7405, i64 0}
!7405 = !{!"0x908d2660.w2.b0", !7406, i64 0}
!7406 = !{!"0x908d2660.w4.b0", !7407, i64 0}
!7407 = !{!"0x908d2660.w8.b0", !7408, i64 0}
!7408 = !{!"0x908d2660.w16.b0", !7409, i64 0}
!7409 = !{!"0x908d2660.w32.b0", !7410, i64 0}
!7410 = !{!"0x908d2660.w64.b0", !7411, i64 0}
!7411 = !{!"0x908d2660.w128.b0", !7412, i64 0}
!7412 = !{!"0x908d2660.w256.b0", !7413, i64 0}
!7413 = !{!"0x908d2660.w512.b0", !7414, i64 0}
!7414 = !{!"0x908d2660.w1024.b0", !7415, i64 0}
!7415 = !{!"int64", !7416, i64 0}
!7416 = !{!"0x908d2660", !8, i64 0}
!7417 = !{!7418, !7418, i64 0}
!7418 = !{!"0x908d2660.w1.b1", !7405, i64 0}
!7419 = !{!7420, !7420, i64 0}
!7420 = !{!"0x908d2660.w1.b2", !7421, i64 0}
!7421 = !{!"0x908d2660.w2.b2", !7406, i64 0}
!7422 = !{!7423, !7423, i64 0}
!7423 = !{!"0x908d2660.w1.b3", !7421, i64 0}
!7424 = !{!7425, !7425, i64 0}
!7425 = !{!"0x908d2660.w1.b4", !7426, i64 0}
!7426 = !{!"0x908d2660.w2.b4", !7427, i64 0}
!7427 = !{!"0x908d2660.w4.b4", !7407, i64 0}
!7428 = !{!7429, !7429, i64 0}
!7429 = !{!"0x908d0ac0.w1.b0", !7430, i64 0}
!7430 = !{!"0x908d0ac0.w2.b0", !7431, i64 0}
!7431 = !{!"0x908d0ac0.w4.b0", !7432, i64 0}
!7432 = !{!"0x908d0ac0.w8.b0", !7433, i64 0}
!7433 = !{!"0x908d0ac0.w16.b0", !7434, i64 0}
!7434 = !{!"0x908d0ac0.w32.b0", !7435, i64 0}
!7435 = !{!"0x908d0ac0.w64.b0", !7436, i64 0}
!7436 = !{!"0x908d0ac0.w128.b0", !7437, i64 0}
!7437 = !{!"0x908d0ac0.w256.b0", !7438, i64 0}
!7438 = !{!"0x908d0ac0.w512.b0", !7439, i64 0}
!7439 = !{!"0x908d0ac0.w1024.b0", !7440, i64 0}
!7440 = !{!"int64", !7441, i64 0}
!7441 = !{!"0x908d0ac0", !8, i64 0}
!7442 = !{!7443, !7443, i64 0}
!7443 = !{!"0x908d0ac0.w1.b1", !7430, i64 0}
!7444 = !{!7445, !7445, i64 0}
!7445 = !{!"0x908d0ac0.w1.b2", !7446, i64 0}
!7446 = !{!"0x908d0ac0.w2.b2", !7431, i64 0}
!7447 = !{!7448, !7448, i64 0}
!7448 = !{!"0x908d0ac0.w1.b3", !7446, i64 0}
!7449 = !{!7450, !7450, i64 0}
!7450 = !{!"0x908d0ac0.w1.b4", !7451, i64 0}
!7451 = !{!"0x908d0ac0.w2.b4", !7452, i64 0}
!7452 = !{!"0x908d0ac0.w4.b4", !7432, i64 0}
!7453 = !{!7454, !7454, i64 0}
!7454 = !{!"0x908d4c20.w1.b0", !7455, i64 0}
!7455 = !{!"0x908d4c20.w2.b0", !7456, i64 0}
!7456 = !{!"0x908d4c20.w4.b0", !7457, i64 0}
!7457 = !{!"0x908d4c20.w8.b0", !7458, i64 0}
!7458 = !{!"0x908d4c20.w16.b0", !7459, i64 0}
!7459 = !{!"0x908d4c20.w32.b0", !7460, i64 0}
!7460 = !{!"0x908d4c20.w64.b0", !7461, i64 0}
!7461 = !{!"0x908d4c20.w128.b0", !7462, i64 0}
!7462 = !{!"0x908d4c20.w256.b0", !7463, i64 0}
!7463 = !{!"0x908d4c20.w512.b0", !7464, i64 0}
!7464 = !{!"0x908d4c20.w1024.b0", !7465, i64 0}
!7465 = !{!"int64", !7466, i64 0}
!7466 = !{!"0x908d4c20", !8, i64 0}
!7467 = !{!7468, !7468, i64 0}
!7468 = !{!"0x908d4c20.w1.b1", !7455, i64 0}
!7469 = !{!7470, !7470, i64 0}
!7470 = !{!"0x908d4c20.w1.b2", !7471, i64 0}
!7471 = !{!"0x908d4c20.w2.b2", !7456, i64 0}
!7472 = !{!7473, !7473, i64 0}
!7473 = !{!"0x908d4c20.w1.b3", !7471, i64 0}
!7474 = !{!7475, !7475, i64 0}
!7475 = !{!"0x908d4c20.w1.b4", !7476, i64 0}
!7476 = !{!"0x908d4c20.w2.b4", !7477, i64 0}
!7477 = !{!"0x908d4c20.w4.b4", !7457, i64 0}
!7478 = !{!7479, !7479, i64 0}
!7479 = !{!"0x908d5b30.w1.b0", !7480, i64 0}
!7480 = !{!"0x908d5b30.w2.b0", !7481, i64 0}
!7481 = !{!"0x908d5b30.w4.b0", !7482, i64 0}
!7482 = !{!"0x908d5b30.w8.b0", !7483, i64 0}
!7483 = !{!"0x908d5b30.w16.b0", !7484, i64 0}
!7484 = !{!"0x908d5b30.w32.b0", !7485, i64 0}
!7485 = !{!"0x908d5b30.w64.b0", !7486, i64 0}
!7486 = !{!"0x908d5b30.w128.b0", !7487, i64 0}
!7487 = !{!"0x908d5b30.w256.b0", !7488, i64 0}
!7488 = !{!"0x908d5b30.w512.b0", !7489, i64 0}
!7489 = !{!"0x908d5b30.w1024.b0", !7490, i64 0}
!7490 = !{!"int64", !7491, i64 0}
!7491 = !{!"0x908d5b30", !8, i64 0}
!7492 = !{!7493, !7493, i64 0}
!7493 = !{!"0x908d5b30.w1.b1", !7480, i64 0}
!7494 = !{!7495, !7495, i64 0}
!7495 = !{!"0x908d5b30.w1.b2", !7496, i64 0}
!7496 = !{!"0x908d5b30.w2.b2", !7481, i64 0}
!7497 = !{!7498, !7498, i64 0}
!7498 = !{!"0x908d5b30.w1.b3", !7496, i64 0}
!7499 = !{!7500, !7500, i64 0}
!7500 = !{!"0x908d5b30.w1.b4", !7501, i64 0}
!7501 = !{!"0x908d5b30.w2.b4", !7502, i64 0}
!7502 = !{!"0x908d5b30.w4.b4", !7482, i64 0}
!7503 = !{!7504, !7504, i64 0}
!7504 = !{!"float32", !7505, i64 0}
!7505 = !{!"0x91b04c50", !8, i64 0}
!7506 = !{!7507, !7507, i64 0}
!7507 = !{!"float32", !7508, i64 0}
!7508 = !{!"0x99b90e50", !8, i64 0}
!7509 = !{!7510, !7510, i64 0}
!7510 = !{!"float32", !7511, i64 0}
!7511 = !{!"0x9d19b4c0", !8, i64 0}
!7512 = !{!7513, !7513, i64 0}
!7513 = !{!"float32", !7514, i64 0}
!7514 = !{!"0x99da6370", !8, i64 0}
!7515 = !{!7516, !7516, i64 0}
!7516 = !{!"float32", !7517, i64 0}
!7517 = !{!"0x91ba4c20", !8, i64 0}
!7518 = !{!7519, !7519, i64 0}
!7519 = !{!"0x908ce160.w1.b0", !7520, i64 0}
!7520 = !{!"0x908ce160.w2.b0", !7521, i64 0}
!7521 = !{!"0x908ce160.w4.b0", !7522, i64 0}
!7522 = !{!"0x908ce160.w8.b0", !7523, i64 0}
!7523 = !{!"0x908ce160.w16.b0", !7524, i64 0}
!7524 = !{!"0x908ce160.w32.b0", !7525, i64 0}
!7525 = !{!"0x908ce160.w64.b0", !7526, i64 0}
!7526 = !{!"0x908ce160.w128.b0", !7527, i64 0}
!7527 = !{!"0x908ce160.w256.b0", !7528, i64 0}
!7528 = !{!"0x908ce160.w512.b0", !7529, i64 0}
!7529 = !{!"0x908ce160.w1024.b0", !7530, i64 0}
!7530 = !{!"int32", !7531, i64 0}
!7531 = !{!"0x908ce160", !8, i64 0}
!7532 = !{!7533, !7533, i64 0}
!7533 = !{!"0x908ce160.w1.b1", !7520, i64 0}
!7534 = !{!7535, !7535, i64 0}
!7535 = !{!"0x908d9510.w1.b0", !7536, i64 0}
!7536 = !{!"0x908d9510.w2.b0", !7537, i64 0}
!7537 = !{!"0x908d9510.w4.b0", !7538, i64 0}
!7538 = !{!"0x908d9510.w8.b0", !7539, i64 0}
!7539 = !{!"0x908d9510.w16.b0", !7540, i64 0}
!7540 = !{!"0x908d9510.w32.b0", !7541, i64 0}
!7541 = !{!"0x908d9510.w64.b0", !7542, i64 0}
!7542 = !{!"0x908d9510.w128.b0", !7543, i64 0}
!7543 = !{!"0x908d9510.w256.b0", !7544, i64 0}
!7544 = !{!"0x908d9510.w512.b0", !7545, i64 0}
!7545 = !{!"0x908d9510.w1024.b0", !7546, i64 0}
!7546 = !{!"int64", !7547, i64 0}
!7547 = !{!"0x908d9510", !8, i64 0}
!7548 = !{!7549, !7549, i64 0}
!7549 = !{!"0x908d9510.w1.b1", !7536, i64 0}
!7550 = !{!7551, !7551, i64 0}
!7551 = !{!"0x908d9510.w1.b2", !7552, i64 0}
!7552 = !{!"0x908d9510.w2.b2", !7537, i64 0}
!7553 = !{!7554, !7554, i64 0}
!7554 = !{!"0x908d9510.w1.b3", !7552, i64 0}
!7555 = !{!7556, !7556, i64 0}
!7556 = !{!"0x908d9510.w1.b4", !7557, i64 0}
!7557 = !{!"0x908d9510.w2.b4", !7558, i64 0}
!7558 = !{!"0x908d9510.w4.b4", !7538, i64 0}
!7559 = !{!7560, !7560, i64 0}
!7560 = !{!"0x908d9650.w1.b0", !7561, i64 0}
!7561 = !{!"0x908d9650.w2.b0", !7562, i64 0}
!7562 = !{!"0x908d9650.w4.b0", !7563, i64 0}
!7563 = !{!"0x908d9650.w8.b0", !7564, i64 0}
!7564 = !{!"0x908d9650.w16.b0", !7565, i64 0}
!7565 = !{!"0x908d9650.w32.b0", !7566, i64 0}
!7566 = !{!"0x908d9650.w64.b0", !7567, i64 0}
!7567 = !{!"0x908d9650.w128.b0", !7568, i64 0}
!7568 = !{!"0x908d9650.w256.b0", !7569, i64 0}
!7569 = !{!"0x908d9650.w512.b0", !7570, i64 0}
!7570 = !{!"0x908d9650.w1024.b0", !7571, i64 0}
!7571 = !{!"int64", !7572, i64 0}
!7572 = !{!"0x908d9650", !8, i64 0}
!7573 = !{!7574, !7574, i64 0}
!7574 = !{!"0x908d9650.w1.b1", !7561, i64 0}
!7575 = !{!7576, !7576, i64 0}
!7576 = !{!"0x908d9650.w1.b2", !7577, i64 0}
!7577 = !{!"0x908d9650.w2.b2", !7562, i64 0}
!7578 = !{!7579, !7579, i64 0}
!7579 = !{!"0x908d9650.w1.b3", !7577, i64 0}
!7580 = !{!7581, !7581, i64 0}
!7581 = !{!"0x908d9650.w1.b4", !7582, i64 0}
!7582 = !{!"0x908d9650.w2.b4", !7583, i64 0}
!7583 = !{!"0x908d9650.w4.b4", !7563, i64 0}
!7584 = !{!7585, !7585, i64 0}
!7585 = !{!"0x908db2d0.w1.b0", !7586, i64 0}
!7586 = !{!"0x908db2d0.w2.b0", !7587, i64 0}
!7587 = !{!"0x908db2d0.w4.b0", !7588, i64 0}
!7588 = !{!"0x908db2d0.w8.b0", !7589, i64 0}
!7589 = !{!"0x908db2d0.w16.b0", !7590, i64 0}
!7590 = !{!"0x908db2d0.w32.b0", !7591, i64 0}
!7591 = !{!"0x908db2d0.w64.b0", !7592, i64 0}
!7592 = !{!"0x908db2d0.w128.b0", !7593, i64 0}
!7593 = !{!"0x908db2d0.w256.b0", !7594, i64 0}
!7594 = !{!"0x908db2d0.w512.b0", !7595, i64 0}
!7595 = !{!"0x908db2d0.w1024.b0", !7596, i64 0}
!7596 = !{!"int64", !7597, i64 0}
!7597 = !{!"0x908db2d0", !8, i64 0}
!7598 = !{!7599, !7599, i64 0}
!7599 = !{!"0x908db2d0.w1.b1", !7586, i64 0}
!7600 = !{!7601, !7601, i64 0}
!7601 = !{!"0x908db2d0.w1.b2", !7602, i64 0}
!7602 = !{!"0x908db2d0.w2.b2", !7587, i64 0}
!7603 = !{!7604, !7604, i64 0}
!7604 = !{!"0x908db2d0.w1.b3", !7602, i64 0}
!7605 = !{!7606, !7606, i64 0}
!7606 = !{!"0x908db2d0.w1.b4", !7607, i64 0}
!7607 = !{!"0x908db2d0.w2.b4", !7608, i64 0}
!7608 = !{!"0x908db2d0.w4.b4", !7588, i64 0}
!7609 = !{!7610, !7610, i64 0}
!7610 = !{!"0x908db4d0.w1.b0", !7611, i64 0}
!7611 = !{!"0x908db4d0.w2.b0", !7612, i64 0}
!7612 = !{!"0x908db4d0.w4.b0", !7613, i64 0}
!7613 = !{!"0x908db4d0.w8.b0", !7614, i64 0}
!7614 = !{!"0x908db4d0.w16.b0", !7615, i64 0}
!7615 = !{!"0x908db4d0.w32.b0", !7616, i64 0}
!7616 = !{!"0x908db4d0.w64.b0", !7617, i64 0}
!7617 = !{!"0x908db4d0.w128.b0", !7618, i64 0}
!7618 = !{!"0x908db4d0.w256.b0", !7619, i64 0}
!7619 = !{!"0x908db4d0.w512.b0", !7620, i64 0}
!7620 = !{!"0x908db4d0.w1024.b0", !7621, i64 0}
!7621 = !{!"int64", !7622, i64 0}
!7622 = !{!"0x908db4d0", !8, i64 0}
!7623 = !{!7624, !7624, i64 0}
!7624 = !{!"0x908db4d0.w1.b1", !7611, i64 0}
!7625 = !{!7626, !7626, i64 0}
!7626 = !{!"0x908db4d0.w1.b2", !7627, i64 0}
!7627 = !{!"0x908db4d0.w2.b2", !7612, i64 0}
!7628 = !{!7629, !7629, i64 0}
!7629 = !{!"0x908db4d0.w1.b3", !7627, i64 0}
!7630 = !{!7631, !7631, i64 0}
!7631 = !{!"0x908db4d0.w1.b4", !7632, i64 0}
!7632 = !{!"0x908db4d0.w2.b4", !7633, i64 0}
!7633 = !{!"0x908db4d0.w4.b4", !7613, i64 0}
!7634 = !{!7635, !7635, i64 0}
!7635 = !{!"float32", !7636, i64 0}
!7636 = !{!"0x9d01adf0", !8, i64 0}
!7637 = !{!7638, !7638, i64 0}
!7638 = !{!"float32", !7639, i64 0}
!7639 = !{!"0x9306d280", !8, i64 0}
!7640 = !{!7641, !7641, i64 0}
!7641 = !{!"float32", !7642, i64 0}
!7642 = !{!"0x93078e70", !8, i64 0}
!7643 = !{!7644, !7644, i64 0}
!7644 = !{!"0x908db7d0.w1.b0", !7645, i64 0}
!7645 = !{!"0x908db7d0.w2.b0", !7646, i64 0}
!7646 = !{!"0x908db7d0.w4.b0", !7647, i64 0}
!7647 = !{!"0x908db7d0.w8.b0", !7648, i64 0}
!7648 = !{!"0x908db7d0.w16.b0", !7649, i64 0}
!7649 = !{!"0x908db7d0.w32.b0", !7650, i64 0}
!7650 = !{!"0x908db7d0.w64.b0", !7651, i64 0}
!7651 = !{!"0x908db7d0.w128.b0", !7652, i64 0}
!7652 = !{!"0x908db7d0.w256.b0", !7653, i64 0}
!7653 = !{!"0x908db7d0.w512.b0", !7654, i64 0}
!7654 = !{!"0x908db7d0.w1024.b0", !7655, i64 0}
!7655 = !{!"int32", !7656, i64 0}
!7656 = !{!"0x908db7d0", !8, i64 0}
!7657 = !{!7658, !7658, i64 0}
!7658 = !{!"0x908db7d0.w1.b1", !7645, i64 0}
!7659 = !{!7660, !7660, i64 0}
!7660 = !{!"0x908de7e0.w1.b0", !7661, i64 0}
!7661 = !{!"0x908de7e0.w2.b0", !7662, i64 0}
!7662 = !{!"0x908de7e0.w4.b0", !7663, i64 0}
!7663 = !{!"0x908de7e0.w8.b0", !7664, i64 0}
!7664 = !{!"0x908de7e0.w16.b0", !7665, i64 0}
!7665 = !{!"0x908de7e0.w32.b0", !7666, i64 0}
!7666 = !{!"0x908de7e0.w64.b0", !7667, i64 0}
!7667 = !{!"0x908de7e0.w128.b0", !7668, i64 0}
!7668 = !{!"0x908de7e0.w256.b0", !7669, i64 0}
!7669 = !{!"0x908de7e0.w512.b0", !7670, i64 0}
!7670 = !{!"0x908de7e0.w1024.b0", !7671, i64 0}
!7671 = !{!"int64", !7672, i64 0}
!7672 = !{!"0x908de7e0", !8, i64 0}
!7673 = !{!7674, !7674, i64 0}
!7674 = !{!"0x908de7e0.w1.b1", !7661, i64 0}
!7675 = !{!7676, !7676, i64 0}
!7676 = !{!"0x908de7e0.w1.b2", !7677, i64 0}
!7677 = !{!"0x908de7e0.w2.b2", !7662, i64 0}
!7678 = !{!7679, !7679, i64 0}
!7679 = !{!"0x908de7e0.w1.b3", !7677, i64 0}
!7680 = !{!7681, !7681, i64 0}
!7681 = !{!"0x908de7e0.w1.b4", !7682, i64 0}
!7682 = !{!"0x908de7e0.w2.b4", !7683, i64 0}
!7683 = !{!"0x908de7e0.w4.b4", !7663, i64 0}
!7684 = !{!7685, !7685, i64 0}
!7685 = !{!"0x908ded10.w1.b0", !7686, i64 0}
!7686 = !{!"0x908ded10.w2.b0", !7687, i64 0}
!7687 = !{!"0x908ded10.w4.b0", !7688, i64 0}
!7688 = !{!"0x908ded10.w8.b0", !7689, i64 0}
!7689 = !{!"0x908ded10.w16.b0", !7690, i64 0}
!7690 = !{!"0x908ded10.w32.b0", !7691, i64 0}
!7691 = !{!"0x908ded10.w64.b0", !7692, i64 0}
!7692 = !{!"0x908ded10.w128.b0", !7693, i64 0}
!7693 = !{!"0x908ded10.w256.b0", !7694, i64 0}
!7694 = !{!"0x908ded10.w512.b0", !7695, i64 0}
!7695 = !{!"0x908ded10.w1024.b0", !7696, i64 0}
!7696 = !{!"int64", !7697, i64 0}
!7697 = !{!"0x908ded10", !8, i64 0}
!7698 = !{!7699, !7699, i64 0}
!7699 = !{!"0x908ded10.w1.b1", !7686, i64 0}
!7700 = !{!7701, !7701, i64 0}
!7701 = !{!"0x908ded10.w1.b2", !7702, i64 0}
!7702 = !{!"0x908ded10.w2.b2", !7687, i64 0}
!7703 = !{!7704, !7704, i64 0}
!7704 = !{!"0x908ded10.w1.b3", !7702, i64 0}
!7705 = !{!7706, !7706, i64 0}
!7706 = !{!"0x908ded10.w1.b4", !7707, i64 0}
!7707 = !{!"0x908ded10.w2.b4", !7708, i64 0}
!7708 = !{!"0x908ded10.w4.b4", !7688, i64 0}
!7709 = !{!7710, !7710, i64 0}
!7710 = !{!"0x908e1050.w1.b0", !7711, i64 0}
!7711 = !{!"0x908e1050.w2.b0", !7712, i64 0}
!7712 = !{!"0x908e1050.w4.b0", !7713, i64 0}
!7713 = !{!"0x908e1050.w8.b0", !7714, i64 0}
!7714 = !{!"0x908e1050.w16.b0", !7715, i64 0}
!7715 = !{!"0x908e1050.w32.b0", !7716, i64 0}
!7716 = !{!"0x908e1050.w64.b0", !7717, i64 0}
!7717 = !{!"0x908e1050.w128.b0", !7718, i64 0}
!7718 = !{!"0x908e1050.w256.b0", !7719, i64 0}
!7719 = !{!"0x908e1050.w512.b0", !7720, i64 0}
!7720 = !{!"0x908e1050.w1024.b0", !7721, i64 0}
!7721 = !{!"int64", !7722, i64 0}
!7722 = !{!"0x908e1050", !8, i64 0}
!7723 = !{!7724, !7724, i64 0}
!7724 = !{!"0x908e1050.w1.b1", !7711, i64 0}
!7725 = !{!7726, !7726, i64 0}
!7726 = !{!"0x908e1050.w1.b2", !7727, i64 0}
!7727 = !{!"0x908e1050.w2.b2", !7712, i64 0}
!7728 = !{!7729, !7729, i64 0}
!7729 = !{!"0x908e1050.w1.b3", !7727, i64 0}
!7730 = !{!7731, !7731, i64 0}
!7731 = !{!"0x908e1050.w1.b4", !7732, i64 0}
!7732 = !{!"0x908e1050.w2.b4", !7733, i64 0}
!7733 = !{!"0x908e1050.w4.b4", !7713, i64 0}
!7734 = !{!7735, !7735, i64 0}
!7735 = !{!"0x908e1250.w1.b0", !7736, i64 0}
!7736 = !{!"0x908e1250.w2.b0", !7737, i64 0}
!7737 = !{!"0x908e1250.w4.b0", !7738, i64 0}
!7738 = !{!"0x908e1250.w8.b0", !7739, i64 0}
!7739 = !{!"0x908e1250.w16.b0", !7740, i64 0}
!7740 = !{!"0x908e1250.w32.b0", !7741, i64 0}
!7741 = !{!"0x908e1250.w64.b0", !7742, i64 0}
!7742 = !{!"0x908e1250.w128.b0", !7743, i64 0}
!7743 = !{!"0x908e1250.w256.b0", !7744, i64 0}
!7744 = !{!"0x908e1250.w512.b0", !7745, i64 0}
!7745 = !{!"0x908e1250.w1024.b0", !7746, i64 0}
!7746 = !{!"int64", !7747, i64 0}
!7747 = !{!"0x908e1250", !8, i64 0}
!7748 = !{!7749, !7749, i64 0}
!7749 = !{!"0x908e1250.w1.b1", !7736, i64 0}
!7750 = !{!7751, !7751, i64 0}
!7751 = !{!"0x908e1250.w1.b2", !7752, i64 0}
!7752 = !{!"0x908e1250.w2.b2", !7737, i64 0}
!7753 = !{!7754, !7754, i64 0}
!7754 = !{!"0x908e1250.w1.b3", !7752, i64 0}
!7755 = !{!7756, !7756, i64 0}
!7756 = !{!"0x908e1250.w1.b4", !7757, i64 0}
!7757 = !{!"0x908e1250.w2.b4", !7758, i64 0}
!7758 = !{!"0x908e1250.w4.b4", !7738, i64 0}
!7759 = !{!7760, !7760, i64 0}
!7760 = !{!"float32", !7761, i64 0}
!7761 = !{!"0x9d8b9850", !8, i64 0}
!7762 = !{!7763, !7763, i64 0}
!7763 = !{!"float32", !7764, i64 0}
!7764 = !{!"0x978429e0", !8, i64 0}
!7765 = !{!7766, !7766, i64 0}
!7766 = !{!"0x908e1550.w1.b0", !7767, i64 0}
!7767 = !{!"0x908e1550.w2.b0", !7768, i64 0}
!7768 = !{!"0x908e1550.w4.b0", !7769, i64 0}
!7769 = !{!"0x908e1550.w8.b0", !7770, i64 0}
!7770 = !{!"0x908e1550.w16.b0", !7771, i64 0}
!7771 = !{!"0x908e1550.w32.b0", !7772, i64 0}
!7772 = !{!"0x908e1550.w64.b0", !7773, i64 0}
!7773 = !{!"0x908e1550.w128.b0", !7774, i64 0}
!7774 = !{!"0x908e1550.w256.b0", !7775, i64 0}
!7775 = !{!"0x908e1550.w512.b0", !7776, i64 0}
!7776 = !{!"0x908e1550.w1024.b0", !7777, i64 0}
!7777 = !{!"int32", !7778, i64 0}
!7778 = !{!"0x908e1550", !8, i64 0}
!7779 = !{!7780, !7780, i64 0}
!7780 = !{!"0x908e1550.w1.b1", !7767, i64 0}
!7781 = !{!7782, !7782, i64 0}
!7782 = !{!"0x908e4540.w1.b0", !7783, i64 0}
!7783 = !{!"0x908e4540.w2.b0", !7784, i64 0}
!7784 = !{!"0x908e4540.w4.b0", !7785, i64 0}
!7785 = !{!"0x908e4540.w8.b0", !7786, i64 0}
!7786 = !{!"0x908e4540.w16.b0", !7787, i64 0}
!7787 = !{!"0x908e4540.w32.b0", !7788, i64 0}
!7788 = !{!"0x908e4540.w64.b0", !7789, i64 0}
!7789 = !{!"0x908e4540.w128.b0", !7790, i64 0}
!7790 = !{!"0x908e4540.w256.b0", !7791, i64 0}
!7791 = !{!"0x908e4540.w512.b0", !7792, i64 0}
!7792 = !{!"0x908e4540.w1024.b0", !7793, i64 0}
!7793 = !{!"int64", !7794, i64 0}
!7794 = !{!"0x908e4540", !8, i64 0}
!7795 = !{!7796, !7796, i64 0}
!7796 = !{!"0x908e4540.w1.b1", !7783, i64 0}
!7797 = !{!7798, !7798, i64 0}
!7798 = !{!"0x908e4540.w1.b2", !7799, i64 0}
!7799 = !{!"0x908e4540.w2.b2", !7784, i64 0}
!7800 = !{!7801, !7801, i64 0}
!7801 = !{!"0x908e4540.w1.b3", !7799, i64 0}
!7802 = !{!7803, !7803, i64 0}
!7803 = !{!"0x908e4540.w1.b4", !7804, i64 0}
!7804 = !{!"0x908e4540.w2.b4", !7805, i64 0}
!7805 = !{!"0x908e4540.w4.b4", !7785, i64 0}
!7806 = !{!7807, !7807, i64 0}
!7807 = !{!"0x908e4a70.w1.b0", !7808, i64 0}
!7808 = !{!"0x908e4a70.w2.b0", !7809, i64 0}
!7809 = !{!"0x908e4a70.w4.b0", !7810, i64 0}
!7810 = !{!"0x908e4a70.w8.b0", !7811, i64 0}
!7811 = !{!"0x908e4a70.w16.b0", !7812, i64 0}
!7812 = !{!"0x908e4a70.w32.b0", !7813, i64 0}
!7813 = !{!"0x908e4a70.w64.b0", !7814, i64 0}
!7814 = !{!"0x908e4a70.w128.b0", !7815, i64 0}
!7815 = !{!"0x908e4a70.w256.b0", !7816, i64 0}
!7816 = !{!"0x908e4a70.w512.b0", !7817, i64 0}
!7817 = !{!"0x908e4a70.w1024.b0", !7818, i64 0}
!7818 = !{!"int64", !7819, i64 0}
!7819 = !{!"0x908e4a70", !8, i64 0}
!7820 = !{!7821, !7821, i64 0}
!7821 = !{!"0x908e4a70.w1.b1", !7808, i64 0}
!7822 = !{!7823, !7823, i64 0}
!7823 = !{!"0x908e4a70.w1.b2", !7824, i64 0}
!7824 = !{!"0x908e4a70.w2.b2", !7809, i64 0}
!7825 = !{!7826, !7826, i64 0}
!7826 = !{!"0x908e4a70.w1.b3", !7824, i64 0}
!7827 = !{!7828, !7828, i64 0}
!7828 = !{!"0x908e4a70.w1.b4", !7829, i64 0}
!7829 = !{!"0x908e4a70.w2.b4", !7830, i64 0}
!7830 = !{!"0x908e4a70.w4.b4", !7810, i64 0}
!7831 = !{!7832, !7832, i64 0}
!7832 = !{!"0x908e6db0.w1.b0", !7833, i64 0}
!7833 = !{!"0x908e6db0.w2.b0", !7834, i64 0}
!7834 = !{!"0x908e6db0.w4.b0", !7835, i64 0}
!7835 = !{!"0x908e6db0.w8.b0", !7836, i64 0}
!7836 = !{!"0x908e6db0.w16.b0", !7837, i64 0}
!7837 = !{!"0x908e6db0.w32.b0", !7838, i64 0}
!7838 = !{!"0x908e6db0.w64.b0", !7839, i64 0}
!7839 = !{!"0x908e6db0.w128.b0", !7840, i64 0}
!7840 = !{!"0x908e6db0.w256.b0", !7841, i64 0}
!7841 = !{!"0x908e6db0.w512.b0", !7842, i64 0}
!7842 = !{!"0x908e6db0.w1024.b0", !7843, i64 0}
!7843 = !{!"int64", !7844, i64 0}
!7844 = !{!"0x908e6db0", !8, i64 0}
!7845 = !{!7846, !7846, i64 0}
!7846 = !{!"0x908e6db0.w1.b1", !7833, i64 0}
!7847 = !{!7848, !7848, i64 0}
!7848 = !{!"0x908e6db0.w1.b2", !7849, i64 0}
!7849 = !{!"0x908e6db0.w2.b2", !7834, i64 0}
!7850 = !{!7851, !7851, i64 0}
!7851 = !{!"0x908e6db0.w1.b3", !7849, i64 0}
!7852 = !{!7853, !7853, i64 0}
!7853 = !{!"0x908e6db0.w1.b4", !7854, i64 0}
!7854 = !{!"0x908e6db0.w2.b4", !7855, i64 0}
!7855 = !{!"0x908e6db0.w4.b4", !7835, i64 0}
!7856 = !{!7857, !7857, i64 0}
!7857 = !{!"0x908e6fb0.w1.b0", !7858, i64 0}
!7858 = !{!"0x908e6fb0.w2.b0", !7859, i64 0}
!7859 = !{!"0x908e6fb0.w4.b0", !7860, i64 0}
!7860 = !{!"0x908e6fb0.w8.b0", !7861, i64 0}
!7861 = !{!"0x908e6fb0.w16.b0", !7862, i64 0}
!7862 = !{!"0x908e6fb0.w32.b0", !7863, i64 0}
!7863 = !{!"0x908e6fb0.w64.b0", !7864, i64 0}
!7864 = !{!"0x908e6fb0.w128.b0", !7865, i64 0}
!7865 = !{!"0x908e6fb0.w256.b0", !7866, i64 0}
!7866 = !{!"0x908e6fb0.w512.b0", !7867, i64 0}
!7867 = !{!"0x908e6fb0.w1024.b0", !7868, i64 0}
!7868 = !{!"int64", !7869, i64 0}
!7869 = !{!"0x908e6fb0", !8, i64 0}
!7870 = !{!7871, !7871, i64 0}
!7871 = !{!"0x908e6fb0.w1.b1", !7858, i64 0}
!7872 = !{!7873, !7873, i64 0}
!7873 = !{!"0x908e6fb0.w1.b2", !7874, i64 0}
!7874 = !{!"0x908e6fb0.w2.b2", !7859, i64 0}
!7875 = !{!7876, !7876, i64 0}
!7876 = !{!"0x908e6fb0.w1.b3", !7874, i64 0}
!7877 = !{!7878, !7878, i64 0}
!7878 = !{!"0x908e6fb0.w1.b4", !7879, i64 0}
!7879 = !{!"0x908e6fb0.w2.b4", !7880, i64 0}
!7880 = !{!"0x908e6fb0.w4.b4", !7860, i64 0}
!7881 = !{!7882, !7882, i64 0}
!7882 = !{!"float32", !7883, i64 0}
!7883 = !{!"0xa7f50d80", !8, i64 0}
!7884 = !{!7885, !7885, i64 0}
!7885 = !{!"float32", !7886, i64 0}
!7886 = !{!"0x907911b0", !8, i64 0}
!7887 = !{!7888, !7888, i64 0}
!7888 = !{!"0x908e72b0.w1.b0", !7889, i64 0}
!7889 = !{!"0x908e72b0.w2.b0", !7890, i64 0}
!7890 = !{!"0x908e72b0.w4.b0", !7891, i64 0}
!7891 = !{!"0x908e72b0.w8.b0", !7892, i64 0}
!7892 = !{!"0x908e72b0.w16.b0", !7893, i64 0}
!7893 = !{!"0x908e72b0.w32.b0", !7894, i64 0}
!7894 = !{!"0x908e72b0.w64.b0", !7895, i64 0}
!7895 = !{!"0x908e72b0.w128.b0", !7896, i64 0}
!7896 = !{!"0x908e72b0.w256.b0", !7897, i64 0}
!7897 = !{!"0x908e72b0.w512.b0", !7898, i64 0}
!7898 = !{!"0x908e72b0.w1024.b0", !7899, i64 0}
!7899 = !{!"int32", !7900, i64 0}
!7900 = !{!"0x908e72b0", !8, i64 0}
!7901 = !{!7902, !7902, i64 0}
!7902 = !{!"0x908e72b0.w1.b2", !7903, i64 0}
!7903 = !{!"0x908e72b0.w2.b2", !7890, i64 0}
!7904 = !{!7905, !7905, i64 0}
!7905 = !{!"0x908e72b0.w1.b3", !7903, i64 0}
!7906 = !{!7907, !7907, i64 0}
!7907 = !{!"0x908e72b0.w1.b1", !7889, i64 0}
!7908 = !{!7909, !7909, i64 0}
!7909 = !{!"0x908eae40.w1.b0", !7910, i64 0}
!7910 = !{!"0x908eae40.w2.b0", !7911, i64 0}
!7911 = !{!"0x908eae40.w4.b0", !7912, i64 0}
!7912 = !{!"0x908eae40.w8.b0", !7913, i64 0}
!7913 = !{!"0x908eae40.w16.b0", !7914, i64 0}
!7914 = !{!"0x908eae40.w32.b0", !7915, i64 0}
!7915 = !{!"0x908eae40.w64.b0", !7916, i64 0}
!7916 = !{!"0x908eae40.w128.b0", !7917, i64 0}
!7917 = !{!"0x908eae40.w256.b0", !7918, i64 0}
!7918 = !{!"0x908eae40.w512.b0", !7919, i64 0}
!7919 = !{!"0x908eae40.w1024.b0", !7920, i64 0}
!7920 = !{!"int64", !7921, i64 0}
!7921 = !{!"0x908eae40", !8, i64 0}
!7922 = !{!7923, !7923, i64 0}
!7923 = !{!"0x908eae40.w1.b1", !7910, i64 0}
!7924 = !{!7925, !7925, i64 0}
!7925 = !{!"0x908eae40.w1.b2", !7926, i64 0}
!7926 = !{!"0x908eae40.w2.b2", !7911, i64 0}
!7927 = !{!7928, !7928, i64 0}
!7928 = !{!"0x908eae40.w1.b3", !7926, i64 0}
!7929 = !{!7930, !7930, i64 0}
!7930 = !{!"0x908eae40.w1.b4", !7931, i64 0}
!7931 = !{!"0x908eae40.w2.b4", !7932, i64 0}
!7932 = !{!"0x908eae40.w4.b4", !7912, i64 0}
!7933 = !{!7934, !7934, i64 0}
!7934 = !{!"0x908eb370.w1.b0", !7935, i64 0}
!7935 = !{!"0x908eb370.w2.b0", !7936, i64 0}
!7936 = !{!"0x908eb370.w4.b0", !7937, i64 0}
!7937 = !{!"0x908eb370.w8.b0", !7938, i64 0}
!7938 = !{!"0x908eb370.w16.b0", !7939, i64 0}
!7939 = !{!"0x908eb370.w32.b0", !7940, i64 0}
!7940 = !{!"0x908eb370.w64.b0", !7941, i64 0}
!7941 = !{!"0x908eb370.w128.b0", !7942, i64 0}
!7942 = !{!"0x908eb370.w256.b0", !7943, i64 0}
!7943 = !{!"0x908eb370.w512.b0", !7944, i64 0}
!7944 = !{!"0x908eb370.w1024.b0", !7945, i64 0}
!7945 = !{!"int64", !7946, i64 0}
!7946 = !{!"0x908eb370", !8, i64 0}
!7947 = !{!7948, !7948, i64 0}
!7948 = !{!"0x908eb370.w1.b1", !7935, i64 0}
!7949 = !{!7950, !7950, i64 0}
!7950 = !{!"0x908eb370.w1.b2", !7951, i64 0}
!7951 = !{!"0x908eb370.w2.b2", !7936, i64 0}
!7952 = !{!7953, !7953, i64 0}
!7953 = !{!"0x908eb370.w1.b3", !7951, i64 0}
!7954 = !{!7955, !7955, i64 0}
!7955 = !{!"0x908eb370.w1.b4", !7956, i64 0}
!7956 = !{!"0x908eb370.w2.b4", !7957, i64 0}
!7957 = !{!"0x908eb370.w4.b4", !7937, i64 0}
!7958 = !{!7959, !7959, i64 0}
!7959 = !{!"0x908ed6b0.w1.b0", !7960, i64 0}
!7960 = !{!"0x908ed6b0.w2.b0", !7961, i64 0}
!7961 = !{!"0x908ed6b0.w4.b0", !7962, i64 0}
!7962 = !{!"0x908ed6b0.w8.b0", !7963, i64 0}
!7963 = !{!"0x908ed6b0.w16.b0", !7964, i64 0}
!7964 = !{!"0x908ed6b0.w32.b0", !7965, i64 0}
!7965 = !{!"0x908ed6b0.w64.b0", !7966, i64 0}
!7966 = !{!"0x908ed6b0.w128.b0", !7967, i64 0}
!7967 = !{!"0x908ed6b0.w256.b0", !7968, i64 0}
!7968 = !{!"0x908ed6b0.w512.b0", !7969, i64 0}
!7969 = !{!"0x908ed6b0.w1024.b0", !7970, i64 0}
!7970 = !{!"int64", !7971, i64 0}
!7971 = !{!"0x908ed6b0", !8, i64 0}
!7972 = !{!7973, !7973, i64 0}
!7973 = !{!"0x908ed6b0.w1.b1", !7960, i64 0}
!7974 = !{!7975, !7975, i64 0}
!7975 = !{!"0x908ed6b0.w1.b2", !7976, i64 0}
!7976 = !{!"0x908ed6b0.w2.b2", !7961, i64 0}
!7977 = !{!7978, !7978, i64 0}
!7978 = !{!"0x908ed6b0.w1.b3", !7976, i64 0}
!7979 = !{!7980, !7980, i64 0}
!7980 = !{!"0x908ed6b0.w1.b4", !7981, i64 0}
!7981 = !{!"0x908ed6b0.w2.b4", !7982, i64 0}
!7982 = !{!"0x908ed6b0.w4.b4", !7962, i64 0}
!7983 = !{!7984, !7984, i64 0}
!7984 = !{!"0x908ed6b0.w1.b5", !7981, i64 0}
!7985 = !{!7986, !7986, i64 0}
!7986 = !{!"0x908ed8b0.w1.b0", !7987, i64 0}
!7987 = !{!"0x908ed8b0.w2.b0", !7988, i64 0}
!7988 = !{!"0x908ed8b0.w4.b0", !7989, i64 0}
!7989 = !{!"0x908ed8b0.w8.b0", !7990, i64 0}
!7990 = !{!"0x908ed8b0.w16.b0", !7991, i64 0}
!7991 = !{!"0x908ed8b0.w32.b0", !7992, i64 0}
!7992 = !{!"0x908ed8b0.w64.b0", !7993, i64 0}
!7993 = !{!"0x908ed8b0.w128.b0", !7994, i64 0}
!7994 = !{!"0x908ed8b0.w256.b0", !7995, i64 0}
!7995 = !{!"0x908ed8b0.w512.b0", !7996, i64 0}
!7996 = !{!"0x908ed8b0.w1024.b0", !7997, i64 0}
!7997 = !{!"int64", !7998, i64 0}
!7998 = !{!"0x908ed8b0", !8, i64 0}
!7999 = !{!8000, !8000, i64 0}
!8000 = !{!"0x908ed8b0.w1.b1", !7987, i64 0}
!8001 = !{!8002, !8002, i64 0}
!8002 = !{!"0x908ed8b0.w1.b2", !8003, i64 0}
!8003 = !{!"0x908ed8b0.w2.b2", !7988, i64 0}
!8004 = !{!8005, !8005, i64 0}
!8005 = !{!"0x908ed8b0.w1.b3", !8003, i64 0}
!8006 = !{!8007, !8007, i64 0}
!8007 = !{!"0x908ed8b0.w1.b4", !8008, i64 0}
!8008 = !{!"0x908ed8b0.w2.b4", !8009, i64 0}
!8009 = !{!"0x908ed8b0.w4.b4", !7989, i64 0}
!8010 = !{!8011, !8011, i64 0}
!8011 = !{!"0x908ed8b0.w1.b5", !8008, i64 0}
!8012 = !{!8013, !8013, i64 0}
!8013 = !{!"0x908ef750.w1.b0", !8014, i64 0}
!8014 = !{!"0x908ef750.w2.b0", !8015, i64 0}
!8015 = !{!"0x908ef750.w4.b0", !8016, i64 0}
!8016 = !{!"0x908ef750.w8.b0", !8017, i64 0}
!8017 = !{!"0x908ef750.w16.b0", !8018, i64 0}
!8018 = !{!"0x908ef750.w32.b0", !8019, i64 0}
!8019 = !{!"0x908ef750.w64.b0", !8020, i64 0}
!8020 = !{!"0x908ef750.w128.b0", !8021, i64 0}
!8021 = !{!"0x908ef750.w256.b0", !8022, i64 0}
!8022 = !{!"0x908ef750.w512.b0", !8023, i64 0}
!8023 = !{!"0x908ef750.w1024.b0", !8024, i64 0}
!8024 = !{!"int64", !8025, i64 0}
!8025 = !{!"0x908ef750", !8, i64 0}
!8026 = !{!8027, !8027, i64 0}
!8027 = !{!"0x908ef750.w1.b1", !8014, i64 0}
!8028 = !{!8029, !8029, i64 0}
!8029 = !{!"0x908ef750.w1.b2", !8030, i64 0}
!8030 = !{!"0x908ef750.w2.b2", !8015, i64 0}
!8031 = !{!8032, !8032, i64 0}
!8032 = !{!"0x908ef750.w1.b3", !8030, i64 0}
!8033 = !{!8034, !8034, i64 0}
!8034 = !{!"0x908ef750.w1.b4", !8035, i64 0}
!8035 = !{!"0x908ef750.w2.b4", !8036, i64 0}
!8036 = !{!"0x908ef750.w4.b4", !8016, i64 0}
!8037 = !{!8038, !8038, i64 0}
!8038 = !{!"0x908edbb0.w1.b0", !8039, i64 0}
!8039 = !{!"0x908edbb0.w2.b0", !8040, i64 0}
!8040 = !{!"0x908edbb0.w4.b0", !8041, i64 0}
!8041 = !{!"0x908edbb0.w8.b0", !8042, i64 0}
!8042 = !{!"0x908edbb0.w16.b0", !8043, i64 0}
!8043 = !{!"0x908edbb0.w32.b0", !8044, i64 0}
!8044 = !{!"0x908edbb0.w64.b0", !8045, i64 0}
!8045 = !{!"0x908edbb0.w128.b0", !8046, i64 0}
!8046 = !{!"0x908edbb0.w256.b0", !8047, i64 0}
!8047 = !{!"0x908edbb0.w512.b0", !8048, i64 0}
!8048 = !{!"0x908edbb0.w1024.b0", !8049, i64 0}
!8049 = !{!"int64", !8050, i64 0}
!8050 = !{!"0x908edbb0", !8, i64 0}
!8051 = !{!8052, !8052, i64 0}
!8052 = !{!"0x908edbb0.w1.b1", !8039, i64 0}
!8053 = !{!8054, !8054, i64 0}
!8054 = !{!"0x908edbb0.w1.b2", !8055, i64 0}
!8055 = !{!"0x908edbb0.w2.b2", !8040, i64 0}
!8056 = !{!8057, !8057, i64 0}
!8057 = !{!"0x908edbb0.w1.b3", !8055, i64 0}
!8058 = !{!8059, !8059, i64 0}
!8059 = !{!"0x908edbb0.w1.b4", !8060, i64 0}
!8060 = !{!"0x908edbb0.w2.b4", !8061, i64 0}
!8061 = !{!"0x908edbb0.w4.b4", !8041, i64 0}
!8062 = !{!8063, !8063, i64 0}
!8063 = !{!"0x908f1d10.w1.b0", !8064, i64 0}
!8064 = !{!"0x908f1d10.w2.b0", !8065, i64 0}
!8065 = !{!"0x908f1d10.w4.b0", !8066, i64 0}
!8066 = !{!"0x908f1d10.w8.b0", !8067, i64 0}
!8067 = !{!"0x908f1d10.w16.b0", !8068, i64 0}
!8068 = !{!"0x908f1d10.w32.b0", !8069, i64 0}
!8069 = !{!"0x908f1d10.w64.b0", !8070, i64 0}
!8070 = !{!"0x908f1d10.w128.b0", !8071, i64 0}
!8071 = !{!"0x908f1d10.w256.b0", !8072, i64 0}
!8072 = !{!"0x908f1d10.w512.b0", !8073, i64 0}
!8073 = !{!"0x908f1d10.w1024.b0", !8074, i64 0}
!8074 = !{!"int64", !8075, i64 0}
!8075 = !{!"0x908f1d10", !8, i64 0}
!8076 = !{!8077, !8077, i64 0}
!8077 = !{!"0x908f1d10.w1.b1", !8064, i64 0}
!8078 = !{!8079, !8079, i64 0}
!8079 = !{!"0x908f1d10.w1.b2", !8080, i64 0}
!8080 = !{!"0x908f1d10.w2.b2", !8065, i64 0}
!8081 = !{!8082, !8082, i64 0}
!8082 = !{!"0x908f1d10.w1.b3", !8080, i64 0}
!8083 = !{!8084, !8084, i64 0}
!8084 = !{!"0x908f1d10.w1.b4", !8085, i64 0}
!8085 = !{!"0x908f1d10.w2.b4", !8086, i64 0}
!8086 = !{!"0x908f1d10.w4.b4", !8066, i64 0}
!8087 = !{!8088, !8088, i64 0}
!8088 = !{!"0x908f2c20.w1.b0", !8089, i64 0}
!8089 = !{!"0x908f2c20.w2.b0", !8090, i64 0}
!8090 = !{!"0x908f2c20.w4.b0", !8091, i64 0}
!8091 = !{!"0x908f2c20.w8.b0", !8092, i64 0}
!8092 = !{!"0x908f2c20.w16.b0", !8093, i64 0}
!8093 = !{!"0x908f2c20.w32.b0", !8094, i64 0}
!8094 = !{!"0x908f2c20.w64.b0", !8095, i64 0}
!8095 = !{!"0x908f2c20.w128.b0", !8096, i64 0}
!8096 = !{!"0x908f2c20.w256.b0", !8097, i64 0}
!8097 = !{!"0x908f2c20.w512.b0", !8098, i64 0}
!8098 = !{!"0x908f2c20.w1024.b0", !8099, i64 0}
!8099 = !{!"int64", !8100, i64 0}
!8100 = !{!"0x908f2c20", !8, i64 0}
!8101 = !{!8102, !8102, i64 0}
!8102 = !{!"0x908f2c20.w1.b1", !8089, i64 0}
!8103 = !{!8104, !8104, i64 0}
!8104 = !{!"0x908f2c20.w1.b2", !8105, i64 0}
!8105 = !{!"0x908f2c20.w2.b2", !8090, i64 0}
!8106 = !{!8107, !8107, i64 0}
!8107 = !{!"0x908f2c20.w1.b3", !8105, i64 0}
!8108 = !{!8109, !8109, i64 0}
!8109 = !{!"0x908f2c20.w1.b4", !8110, i64 0}
!8110 = !{!"0x908f2c20.w2.b4", !8111, i64 0}
!8111 = !{!"0x908f2c20.w4.b4", !8091, i64 0}
!8112 = !{!8113, !8113, i64 0}
!8113 = !{!"float32", !8114, i64 0}
!8114 = !{!"0xab2ad3c0", !8, i64 0}
!8115 = !{!8116, !8116, i64 0}
!8116 = !{!"float32", !8117, i64 0}
!8117 = !{!"0xab2ad8d0", !8, i64 0}
!8118 = !{!8119, !8119, i64 0}
!8119 = !{!"float32", !8120, i64 0}
!8120 = !{!"0xab2ad7b0", !8, i64 0}
!8121 = !{!8122, !8122, i64 0}
!8122 = !{!"float32", !8123, i64 0}
!8123 = !{!"0xab2b7890", !8, i64 0}
!8124 = !{!8125, !8125, i64 0}
!8125 = !{!"float32", !8126, i64 0}
!8126 = !{!"0xab2ad720", !8, i64 0}
!8127 = !{!8128, !8128, i64 0}
!8128 = !{!"0xab2ad370.w8.b0", !8129, i64 0}
!8129 = !{!"0xab2ad370.w16.b0", !8130, i64 0}
!8130 = !{!"0xab2ad370.w32.b0", !8131, i64 0}
!8131 = !{!"0xab2ad370.w64.b0", !8132, i64 0}
!8132 = !{!"0xab2ad370.w128.b0", !8133, i64 0}
!8133 = !{!"0xab2ad370.w256.b0", !8134, i64 0}
!8134 = !{!"0xab2ad370.w512.b0", !8135, i64 0}
!8135 = !{!"0xab2ad370.w1024.b0", !8136, i64 0}
!8136 = !{!"float32", !8137, i64 0}
!8137 = !{!"0xab2ad370", !8, i64 0}
!8138 = !{!8139, !8139, i64 0}
!8139 = !{!"0xab2ad370.w8.b8", !8129, i64 0}
!8140 = !{!8141, !8141, i64 0}
!8141 = !{!"0xab2ad370.w8.b16", !8142, i64 0}
!8142 = !{!"0xab2ad370.w16.b16", !8130, i64 0}
!8143 = !{!8144, !8144, i64 0}
!8144 = !{!"0xab2ad370.w8.b24", !8142, i64 0}
!8145 = !{!8146, !8146, i64 0}
!8146 = !{!"0xab2ad370.w8.b32", !8147, i64 0}
!8147 = !{!"0xab2ad370.w16.b32", !8148, i64 0}
!8148 = !{!"0xab2ad370.w32.b32", !8131, i64 0}
!8149 = !{!8150, !8150, i64 0}
!8150 = !{!"0xab2ad370.w8.b40", !8147, i64 0}
!8151 = !{!8152, !8152, i64 0}
!8152 = !{!"0xab2ad370.w8.b48", !8153, i64 0}
!8153 = !{!"0xab2ad370.w16.b48", !8148, i64 0}
!8154 = !{!8155, !8155, i64 0}
!8155 = !{!"0xab2ad370.w8.b56", !8153, i64 0}
!8156 = !{!8157, !8157, i64 0}
!8157 = !{!"0xab2ad370.w8.b64", !8158, i64 0}
!8158 = !{!"0xab2ad370.w16.b64", !8159, i64 0}
!8159 = !{!"0xab2ad370.w32.b64", !8160, i64 0}
!8160 = !{!"0xab2ad370.w64.b64", !8132, i64 0}
!8161 = !{!8162, !8162, i64 0}
!8162 = !{!"0xab2ad370.w8.b72", !8158, i64 0}
!8163 = !{!8164, !8164, i64 0}
!8164 = !{!"0xab2ad370.w8.b80", !8165, i64 0}
!8165 = !{!"0xab2ad370.w16.b80", !8159, i64 0}
!8166 = !{!8167, !8167, i64 0}
!8167 = !{!"0xab2ad370.w8.b88", !8165, i64 0}
!8168 = !{!8169, !8169, i64 0}
!8169 = !{!"0xab2ad370.w8.b96", !8170, i64 0}
!8170 = !{!"0xab2ad370.w16.b96", !8171, i64 0}
!8171 = !{!"0xab2ad370.w32.b96", !8160, i64 0}
!8172 = !{!8173, !8173, i64 0}
!8173 = !{!"0xab2ad370.w8.b104", !8170, i64 0}
!8174 = !{!8175, !8175, i64 0}
!8175 = !{!"float32", !8176, i64 0}
!8176 = !{!"0xab2ad840", !8, i64 0}
!8177 = !{!8178, !8178, i64 0}
!8178 = !{!"0x908eb040.w1.b0", !8179, i64 0}
!8179 = !{!"0x908eb040.w2.b0", !8180, i64 0}
!8180 = !{!"0x908eb040.w4.b0", !8181, i64 0}
!8181 = !{!"0x908eb040.w8.b0", !8182, i64 0}
!8182 = !{!"0x908eb040.w16.b0", !8183, i64 0}
!8183 = !{!"0x908eb040.w32.b0", !8184, i64 0}
!8184 = !{!"0x908eb040.w64.b0", !8185, i64 0}
!8185 = !{!"0x908eb040.w128.b0", !8186, i64 0}
!8186 = !{!"0x908eb040.w256.b0", !8187, i64 0}
!8187 = !{!"0x908eb040.w512.b0", !8188, i64 0}
!8188 = !{!"0x908eb040.w1024.b0", !8189, i64 0}
!8189 = !{!"int32", !8190, i64 0}
!8190 = !{!"0x908eb040", !8, i64 0}
!8191 = !{!8192, !8192, i64 0}
!8192 = !{!"0x908eb040.w1.b1", !8179, i64 0}
!8193 = !{!8194, !8194, i64 0}
!8194 = !{!"0x908f6b80.w1.b0", !8195, i64 0}
!8195 = !{!"0x908f6b80.w2.b0", !8196, i64 0}
!8196 = !{!"0x908f6b80.w4.b0", !8197, i64 0}
!8197 = !{!"0x908f6b80.w8.b0", !8198, i64 0}
!8198 = !{!"0x908f6b80.w16.b0", !8199, i64 0}
!8199 = !{!"0x908f6b80.w32.b0", !8200, i64 0}
!8200 = !{!"0x908f6b80.w64.b0", !8201, i64 0}
!8201 = !{!"0x908f6b80.w128.b0", !8202, i64 0}
!8202 = !{!"0x908f6b80.w256.b0", !8203, i64 0}
!8203 = !{!"0x908f6b80.w512.b0", !8204, i64 0}
!8204 = !{!"0x908f6b80.w1024.b0", !8205, i64 0}
!8205 = !{!"int64", !8206, i64 0}
!8206 = !{!"0x908f6b80", !8, i64 0}
!8207 = !{!8208, !8208, i64 0}
!8208 = !{!"0x908f6b80.w1.b1", !8195, i64 0}
!8209 = !{!8210, !8210, i64 0}
!8210 = !{!"0x908f6b80.w1.b2", !8211, i64 0}
!8211 = !{!"0x908f6b80.w2.b2", !8196, i64 0}
!8212 = !{!8213, !8213, i64 0}
!8213 = !{!"0x908f6b80.w1.b3", !8211, i64 0}
!8214 = !{!8215, !8215, i64 0}
!8215 = !{!"0x908f6b80.w1.b4", !8216, i64 0}
!8216 = !{!"0x908f6b80.w2.b4", !8217, i64 0}
!8217 = !{!"0x908f6b80.w4.b4", !8197, i64 0}
!8218 = !{!8219, !8219, i64 0}
!8219 = !{!"0x908f6cc0.w1.b0", !8220, i64 0}
!8220 = !{!"0x908f6cc0.w2.b0", !8221, i64 0}
!8221 = !{!"0x908f6cc0.w4.b0", !8222, i64 0}
!8222 = !{!"0x908f6cc0.w8.b0", !8223, i64 0}
!8223 = !{!"0x908f6cc0.w16.b0", !8224, i64 0}
!8224 = !{!"0x908f6cc0.w32.b0", !8225, i64 0}
!8225 = !{!"0x908f6cc0.w64.b0", !8226, i64 0}
!8226 = !{!"0x908f6cc0.w128.b0", !8227, i64 0}
!8227 = !{!"0x908f6cc0.w256.b0", !8228, i64 0}
!8228 = !{!"0x908f6cc0.w512.b0", !8229, i64 0}
!8229 = !{!"0x908f6cc0.w1024.b0", !8230, i64 0}
!8230 = !{!"int64", !8231, i64 0}
!8231 = !{!"0x908f6cc0", !8, i64 0}
!8232 = !{!8233, !8233, i64 0}
!8233 = !{!"0x908f6cc0.w1.b1", !8220, i64 0}
!8234 = !{!8235, !8235, i64 0}
!8235 = !{!"0x908f6cc0.w1.b2", !8236, i64 0}
!8236 = !{!"0x908f6cc0.w2.b2", !8221, i64 0}
!8237 = !{!8238, !8238, i64 0}
!8238 = !{!"0x908f6cc0.w1.b3", !8236, i64 0}
!8239 = !{!8240, !8240, i64 0}
!8240 = !{!"0x908f6cc0.w1.b4", !8241, i64 0}
!8241 = !{!"0x908f6cc0.w2.b4", !8242, i64 0}
!8242 = !{!"0x908f6cc0.w4.b4", !8222, i64 0}
!8243 = !{!8244, !8244, i64 0}
!8244 = !{!"0x9f449f40.w1.b0", !8245, i64 0}
!8245 = !{!"0x9f449f40.w2.b0", !8246, i64 0}
!8246 = !{!"0x9f449f40.w4.b0", !8247, i64 0}
!8247 = !{!"0x9f449f40.w8.b0", !8248, i64 0}
!8248 = !{!"0x9f449f40.w16.b0", !8249, i64 0}
!8249 = !{!"0x9f449f40.w32.b0", !8250, i64 0}
!8250 = !{!"0x9f449f40.w64.b0", !8251, i64 0}
!8251 = !{!"0x9f449f40.w128.b0", !8252, i64 0}
!8252 = !{!"0x9f449f40.w256.b0", !8253, i64 0}
!8253 = !{!"0x9f449f40.w512.b0", !8254, i64 0}
!8254 = !{!"0x9f449f40.w1024.b0", !8255, i64 0}
!8255 = !{!"int64", !8256, i64 0}
!8256 = !{!"0x9f449f40", !8, i64 0}
!8257 = !{!8258, !8258, i64 0}
!8258 = !{!"0x9f449f40.w1.b1", !8245, i64 0}
!8259 = !{!8260, !8260, i64 0}
!8260 = !{!"0x9f449f40.w1.b2", !8261, i64 0}
!8261 = !{!"0x9f449f40.w2.b2", !8246, i64 0}
!8262 = !{!8263, !8263, i64 0}
!8263 = !{!"0x9f449f40.w1.b3", !8261, i64 0}
!8264 = !{!8265, !8265, i64 0}
!8265 = !{!"0x9f449f40.w1.b4", !8266, i64 0}
!8266 = !{!"0x9f449f40.w2.b4", !8267, i64 0}
!8267 = !{!"0x9f449f40.w4.b4", !8247, i64 0}
!8268 = !{!8269, !8269, i64 0}
!8269 = !{!"0x9f44a140.w1.b0", !8270, i64 0}
!8270 = !{!"0x9f44a140.w2.b0", !8271, i64 0}
!8271 = !{!"0x9f44a140.w4.b0", !8272, i64 0}
!8272 = !{!"0x9f44a140.w8.b0", !8273, i64 0}
!8273 = !{!"0x9f44a140.w16.b0", !8274, i64 0}
!8274 = !{!"0x9f44a140.w32.b0", !8275, i64 0}
!8275 = !{!"0x9f44a140.w64.b0", !8276, i64 0}
!8276 = !{!"0x9f44a140.w128.b0", !8277, i64 0}
!8277 = !{!"0x9f44a140.w256.b0", !8278, i64 0}
!8278 = !{!"0x9f44a140.w512.b0", !8279, i64 0}
!8279 = !{!"0x9f44a140.w1024.b0", !8280, i64 0}
!8280 = !{!"int64", !8281, i64 0}
!8281 = !{!"0x9f44a140", !8, i64 0}
!8282 = !{!8283, !8283, i64 0}
!8283 = !{!"0x9f44a140.w1.b1", !8270, i64 0}
!8284 = !{!8285, !8285, i64 0}
!8285 = !{!"0x9f44a140.w1.b2", !8286, i64 0}
!8286 = !{!"0x9f44a140.w2.b2", !8271, i64 0}
!8287 = !{!8288, !8288, i64 0}
!8288 = !{!"0x9f44a140.w1.b3", !8286, i64 0}
!8289 = !{!8290, !8290, i64 0}
!8290 = !{!"0x9f44a140.w1.b4", !8291, i64 0}
!8291 = !{!"0x9f44a140.w2.b4", !8292, i64 0}
!8292 = !{!"0x9f44a140.w4.b4", !8272, i64 0}
!8293 = !{!8294, !8294, i64 0}
!8294 = !{!"float32", !8295, i64 0}
!8295 = !{!"0x9e10b120", !8, i64 0}
!8296 = !{!8297, !8297, i64 0}
!8297 = !{!"float32", !8298, i64 0}
!8298 = !{!"0xab2500a0", !8, i64 0}
!8299 = !{!8300, !8300, i64 0}
!8300 = !{!"0x9f44a440.w1.b0", !8301, i64 0}
!8301 = !{!"0x9f44a440.w2.b0", !8302, i64 0}
!8302 = !{!"0x9f44a440.w4.b0", !8303, i64 0}
!8303 = !{!"0x9f44a440.w8.b0", !8304, i64 0}
!8304 = !{!"0x9f44a440.w16.b0", !8305, i64 0}
!8305 = !{!"0x9f44a440.w32.b0", !8306, i64 0}
!8306 = !{!"0x9f44a440.w64.b0", !8307, i64 0}
!8307 = !{!"0x9f44a440.w128.b0", !8308, i64 0}
!8308 = !{!"0x9f44a440.w256.b0", !8309, i64 0}
!8309 = !{!"0x9f44a440.w512.b0", !8310, i64 0}
!8310 = !{!"0x9f44a440.w1024.b0", !8311, i64 0}
!8311 = !{!"int32", !8312, i64 0}
!8312 = !{!"0x9f44a440", !8, i64 0}
!8313 = !{!8314, !8314, i64 0}
!8314 = !{!"0x9f44a440.w1.b2", !8315, i64 0}
!8315 = !{!"0x9f44a440.w2.b2", !8302, i64 0}
!8316 = !{!8317, !8317, i64 0}
!8317 = !{!"0x9f44a440.w1.b3", !8315, i64 0}
!8318 = !{!8319, !8319, i64 0}
!8319 = !{!"0x9f44a440.w1.b1", !8301, i64 0}
!8320 = !{!8321, !8321, i64 0}
!8321 = !{!"0x9f44dfd0.w1.b0", !8322, i64 0}
!8322 = !{!"0x9f44dfd0.w2.b0", !8323, i64 0}
!8323 = !{!"0x9f44dfd0.w4.b0", !8324, i64 0}
!8324 = !{!"0x9f44dfd0.w8.b0", !8325, i64 0}
!8325 = !{!"0x9f44dfd0.w16.b0", !8326, i64 0}
!8326 = !{!"0x9f44dfd0.w32.b0", !8327, i64 0}
!8327 = !{!"0x9f44dfd0.w64.b0", !8328, i64 0}
!8328 = !{!"0x9f44dfd0.w128.b0", !8329, i64 0}
!8329 = !{!"0x9f44dfd0.w256.b0", !8330, i64 0}
!8330 = !{!"0x9f44dfd0.w512.b0", !8331, i64 0}
!8331 = !{!"0x9f44dfd0.w1024.b0", !8332, i64 0}
!8332 = !{!"int64", !8333, i64 0}
!8333 = !{!"0x9f44dfd0", !8, i64 0}
!8334 = !{!8335, !8335, i64 0}
!8335 = !{!"0x9f44dfd0.w1.b1", !8322, i64 0}
!8336 = !{!8337, !8337, i64 0}
!8337 = !{!"0x9f44dfd0.w1.b2", !8338, i64 0}
!8338 = !{!"0x9f44dfd0.w2.b2", !8323, i64 0}
!8339 = !{!8340, !8340, i64 0}
!8340 = !{!"0x9f44dfd0.w1.b3", !8338, i64 0}
!8341 = !{!8342, !8342, i64 0}
!8342 = !{!"0x9f44dfd0.w1.b4", !8343, i64 0}
!8343 = !{!"0x9f44dfd0.w2.b4", !8344, i64 0}
!8344 = !{!"0x9f44dfd0.w4.b4", !8324, i64 0}
!8345 = !{!8346, !8346, i64 0}
!8346 = !{!"0x9f44e500.w1.b0", !8347, i64 0}
!8347 = !{!"0x9f44e500.w2.b0", !8348, i64 0}
!8348 = !{!"0x9f44e500.w4.b0", !8349, i64 0}
!8349 = !{!"0x9f44e500.w8.b0", !8350, i64 0}
!8350 = !{!"0x9f44e500.w16.b0", !8351, i64 0}
!8351 = !{!"0x9f44e500.w32.b0", !8352, i64 0}
!8352 = !{!"0x9f44e500.w64.b0", !8353, i64 0}
!8353 = !{!"0x9f44e500.w128.b0", !8354, i64 0}
!8354 = !{!"0x9f44e500.w256.b0", !8355, i64 0}
!8355 = !{!"0x9f44e500.w512.b0", !8356, i64 0}
!8356 = !{!"0x9f44e500.w1024.b0", !8357, i64 0}
!8357 = !{!"int64", !8358, i64 0}
!8358 = !{!"0x9f44e500", !8, i64 0}
!8359 = !{!8360, !8360, i64 0}
!8360 = !{!"0x9f44e500.w1.b1", !8347, i64 0}
!8361 = !{!8362, !8362, i64 0}
!8362 = !{!"0x9f44e500.w1.b2", !8363, i64 0}
!8363 = !{!"0x9f44e500.w2.b2", !8348, i64 0}
!8364 = !{!8365, !8365, i64 0}
!8365 = !{!"0x9f44e500.w1.b3", !8363, i64 0}
!8366 = !{!8367, !8367, i64 0}
!8367 = !{!"0x9f44e500.w1.b4", !8368, i64 0}
!8368 = !{!"0x9f44e500.w2.b4", !8369, i64 0}
!8369 = !{!"0x9f44e500.w4.b4", !8349, i64 0}
!8370 = !{!8371, !8371, i64 0}
!8371 = !{!"0x9f450840.w1.b0", !8372, i64 0}
!8372 = !{!"0x9f450840.w2.b0", !8373, i64 0}
!8373 = !{!"0x9f450840.w4.b0", !8374, i64 0}
!8374 = !{!"0x9f450840.w8.b0", !8375, i64 0}
!8375 = !{!"0x9f450840.w16.b0", !8376, i64 0}
!8376 = !{!"0x9f450840.w32.b0", !8377, i64 0}
!8377 = !{!"0x9f450840.w64.b0", !8378, i64 0}
!8378 = !{!"0x9f450840.w128.b0", !8379, i64 0}
!8379 = !{!"0x9f450840.w256.b0", !8380, i64 0}
!8380 = !{!"0x9f450840.w512.b0", !8381, i64 0}
!8381 = !{!"0x9f450840.w1024.b0", !8382, i64 0}
!8382 = !{!"int64", !8383, i64 0}
!8383 = !{!"0x9f450840", !8, i64 0}
!8384 = !{!8385, !8385, i64 0}
!8385 = !{!"0x9f450840.w1.b1", !8372, i64 0}
!8386 = !{!8387, !8387, i64 0}
!8387 = !{!"0x9f450840.w1.b2", !8388, i64 0}
!8388 = !{!"0x9f450840.w2.b2", !8373, i64 0}
!8389 = !{!8390, !8390, i64 0}
!8390 = !{!"0x9f450840.w1.b3", !8388, i64 0}
!8391 = !{!8392, !8392, i64 0}
!8392 = !{!"0x9f450840.w1.b4", !8393, i64 0}
!8393 = !{!"0x9f450840.w2.b4", !8394, i64 0}
!8394 = !{!"0x9f450840.w4.b4", !8374, i64 0}
!8395 = !{!8396, !8396, i64 0}
!8396 = !{!"0x9f450840.w1.b5", !8393, i64 0}
!8397 = !{!8398, !8398, i64 0}
!8398 = !{!"0x9f450a40.w1.b0", !8399, i64 0}
!8399 = !{!"0x9f450a40.w2.b0", !8400, i64 0}
!8400 = !{!"0x9f450a40.w4.b0", !8401, i64 0}
!8401 = !{!"0x9f450a40.w8.b0", !8402, i64 0}
!8402 = !{!"0x9f450a40.w16.b0", !8403, i64 0}
!8403 = !{!"0x9f450a40.w32.b0", !8404, i64 0}
!8404 = !{!"0x9f450a40.w64.b0", !8405, i64 0}
!8405 = !{!"0x9f450a40.w128.b0", !8406, i64 0}
!8406 = !{!"0x9f450a40.w256.b0", !8407, i64 0}
!8407 = !{!"0x9f450a40.w512.b0", !8408, i64 0}
!8408 = !{!"0x9f450a40.w1024.b0", !8409, i64 0}
!8409 = !{!"int64", !8410, i64 0}
!8410 = !{!"0x9f450a40", !8, i64 0}
!8411 = !{!8412, !8412, i64 0}
!8412 = !{!"0x9f450a40.w1.b1", !8399, i64 0}
!8413 = !{!8414, !8414, i64 0}
!8414 = !{!"0x9f450a40.w1.b2", !8415, i64 0}
!8415 = !{!"0x9f450a40.w2.b2", !8400, i64 0}
!8416 = !{!8417, !8417, i64 0}
!8417 = !{!"0x9f450a40.w1.b3", !8415, i64 0}
!8418 = !{!8419, !8419, i64 0}
!8419 = !{!"0x9f450a40.w1.b4", !8420, i64 0}
!8420 = !{!"0x9f450a40.w2.b4", !8421, i64 0}
!8421 = !{!"0x9f450a40.w4.b4", !8401, i64 0}
!8422 = !{!8423, !8423, i64 0}
!8423 = !{!"0x9f450a40.w1.b5", !8420, i64 0}
!8424 = !{!8425, !8425, i64 0}
!8425 = !{!"0x9f4528e0.w1.b0", !8426, i64 0}
!8426 = !{!"0x9f4528e0.w2.b0", !8427, i64 0}
!8427 = !{!"0x9f4528e0.w4.b0", !8428, i64 0}
!8428 = !{!"0x9f4528e0.w8.b0", !8429, i64 0}
!8429 = !{!"0x9f4528e0.w16.b0", !8430, i64 0}
!8430 = !{!"0x9f4528e0.w32.b0", !8431, i64 0}
!8431 = !{!"0x9f4528e0.w64.b0", !8432, i64 0}
!8432 = !{!"0x9f4528e0.w128.b0", !8433, i64 0}
!8433 = !{!"0x9f4528e0.w256.b0", !8434, i64 0}
!8434 = !{!"0x9f4528e0.w512.b0", !8435, i64 0}
!8435 = !{!"0x9f4528e0.w1024.b0", !8436, i64 0}
!8436 = !{!"int64", !8437, i64 0}
!8437 = !{!"0x9f4528e0", !8, i64 0}
!8438 = !{!8439, !8439, i64 0}
!8439 = !{!"0x9f4528e0.w1.b1", !8426, i64 0}
!8440 = !{!8441, !8441, i64 0}
!8441 = !{!"0x9f4528e0.w1.b2", !8442, i64 0}
!8442 = !{!"0x9f4528e0.w2.b2", !8427, i64 0}
!8443 = !{!8444, !8444, i64 0}
!8444 = !{!"0x9f4528e0.w1.b3", !8442, i64 0}
!8445 = !{!8446, !8446, i64 0}
!8446 = !{!"0x9f4528e0.w1.b4", !8447, i64 0}
!8447 = !{!"0x9f4528e0.w2.b4", !8448, i64 0}
!8448 = !{!"0x9f4528e0.w4.b4", !8428, i64 0}
!8449 = !{!8450, !8450, i64 0}
!8450 = !{!"0x9f450d40.w1.b0", !8451, i64 0}
!8451 = !{!"0x9f450d40.w2.b0", !8452, i64 0}
!8452 = !{!"0x9f450d40.w4.b0", !8453, i64 0}
!8453 = !{!"0x9f450d40.w8.b0", !8454, i64 0}
!8454 = !{!"0x9f450d40.w16.b0", !8455, i64 0}
!8455 = !{!"0x9f450d40.w32.b0", !8456, i64 0}
!8456 = !{!"0x9f450d40.w64.b0", !8457, i64 0}
!8457 = !{!"0x9f450d40.w128.b0", !8458, i64 0}
!8458 = !{!"0x9f450d40.w256.b0", !8459, i64 0}
!8459 = !{!"0x9f450d40.w512.b0", !8460, i64 0}
!8460 = !{!"0x9f450d40.w1024.b0", !8461, i64 0}
!8461 = !{!"int64", !8462, i64 0}
!8462 = !{!"0x9f450d40", !8, i64 0}
!8463 = !{!8464, !8464, i64 0}
!8464 = !{!"0x9f450d40.w1.b1", !8451, i64 0}
!8465 = !{!8466, !8466, i64 0}
!8466 = !{!"0x9f450d40.w1.b2", !8467, i64 0}
!8467 = !{!"0x9f450d40.w2.b2", !8452, i64 0}
!8468 = !{!8469, !8469, i64 0}
!8469 = !{!"0x9f450d40.w1.b3", !8467, i64 0}
!8470 = !{!8471, !8471, i64 0}
!8471 = !{!"0x9f450d40.w1.b4", !8472, i64 0}
!8472 = !{!"0x9f450d40.w2.b4", !8473, i64 0}
!8473 = !{!"0x9f450d40.w4.b4", !8453, i64 0}
!8474 = !{!8475, !8475, i64 0}
!8475 = !{!"0x9f454ea0.w1.b0", !8476, i64 0}
!8476 = !{!"0x9f454ea0.w2.b0", !8477, i64 0}
!8477 = !{!"0x9f454ea0.w4.b0", !8478, i64 0}
!8478 = !{!"0x9f454ea0.w8.b0", !8479, i64 0}
!8479 = !{!"0x9f454ea0.w16.b0", !8480, i64 0}
!8480 = !{!"0x9f454ea0.w32.b0", !8481, i64 0}
!8481 = !{!"0x9f454ea0.w64.b0", !8482, i64 0}
!8482 = !{!"0x9f454ea0.w128.b0", !8483, i64 0}
!8483 = !{!"0x9f454ea0.w256.b0", !8484, i64 0}
!8484 = !{!"0x9f454ea0.w512.b0", !8485, i64 0}
!8485 = !{!"0x9f454ea0.w1024.b0", !8486, i64 0}
!8486 = !{!"int64", !8487, i64 0}
!8487 = !{!"0x9f454ea0", !8, i64 0}
!8488 = !{!8489, !8489, i64 0}
!8489 = !{!"0x9f454ea0.w1.b1", !8476, i64 0}
!8490 = !{!8491, !8491, i64 0}
!8491 = !{!"0x9f454ea0.w1.b2", !8492, i64 0}
!8492 = !{!"0x9f454ea0.w2.b2", !8477, i64 0}
!8493 = !{!8494, !8494, i64 0}
!8494 = !{!"0x9f454ea0.w1.b3", !8492, i64 0}
!8495 = !{!8496, !8496, i64 0}
!8496 = !{!"0x9f454ea0.w1.b4", !8497, i64 0}
!8497 = !{!"0x9f454ea0.w2.b4", !8498, i64 0}
!8498 = !{!"0x9f454ea0.w4.b4", !8478, i64 0}
!8499 = !{!8500, !8500, i64 0}
!8500 = !{!"0x9f455db0.w1.b0", !8501, i64 0}
!8501 = !{!"0x9f455db0.w2.b0", !8502, i64 0}
!8502 = !{!"0x9f455db0.w4.b0", !8503, i64 0}
!8503 = !{!"0x9f455db0.w8.b0", !8504, i64 0}
!8504 = !{!"0x9f455db0.w16.b0", !8505, i64 0}
!8505 = !{!"0x9f455db0.w32.b0", !8506, i64 0}
!8506 = !{!"0x9f455db0.w64.b0", !8507, i64 0}
!8507 = !{!"0x9f455db0.w128.b0", !8508, i64 0}
!8508 = !{!"0x9f455db0.w256.b0", !8509, i64 0}
!8509 = !{!"0x9f455db0.w512.b0", !8510, i64 0}
!8510 = !{!"0x9f455db0.w1024.b0", !8511, i64 0}
!8511 = !{!"int64", !8512, i64 0}
!8512 = !{!"0x9f455db0", !8, i64 0}
!8513 = !{!8514, !8514, i64 0}
!8514 = !{!"0x9f455db0.w1.b1", !8501, i64 0}
!8515 = !{!8516, !8516, i64 0}
!8516 = !{!"0x9f455db0.w1.b2", !8517, i64 0}
!8517 = !{!"0x9f455db0.w2.b2", !8502, i64 0}
!8518 = !{!8519, !8519, i64 0}
!8519 = !{!"0x9f455db0.w1.b3", !8517, i64 0}
!8520 = !{!8521, !8521, i64 0}
!8521 = !{!"0x9f455db0.w1.b4", !8522, i64 0}
!8522 = !{!"0x9f455db0.w2.b4", !8523, i64 0}
!8523 = !{!"0x9f455db0.w4.b4", !8503, i64 0}
!8524 = !{!8525, !8525, i64 0}
!8525 = !{!"float32", !8526, i64 0}
!8526 = !{!"0x9e94a5d0", !8, i64 0}
!8527 = !{!8528, !8528, i64 0}
!8528 = !{!"float32", !8529, i64 0}
!8529 = !{!"0x9e949110", !8, i64 0}
!8530 = !{!8531, !8531, i64 0}
!8531 = !{!"float32", !8532, i64 0}
!8532 = !{!"0x9e94a330", !8, i64 0}
!8533 = !{!8534, !8534, i64 0}
!8534 = !{!"float32", !8535, i64 0}
!8535 = !{!"0x9ede25b0", !8, i64 0}
!8536 = !{!8537, !8537, i64 0}
!8537 = !{!"float32", !8538, i64 0}
!8538 = !{!"0x9ede2560", !8, i64 0}


